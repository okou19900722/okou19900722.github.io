{"pageProps":{"title":"Vert.x JUnit 5 Web Client integration","contents":"<h1>Vert.x JUnit 5 Web Client integration</h1>\n<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_use_it_in_your_build\">Use it in your build</a></li>\n<li><a href=\"#_use_web_client_in_your_tests\">Use Web Client in your tests</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_use_webclientoptions\">Use <code>WebClientOptions</code></a></li>\n</ul>\n</li>\n<li><a href=\"#_testing_http_requests\">Testing Http requests</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This module extends capabilities of <a href=\"https://vertx.io/docs/vertx-junit5/java/\">Vert.x Junit 5</a> providing the injection\nof <a href=\"https://vertx.io/docs/vertx-web-client/java/\">Vert.x Web Client</a> into your tests. It also provides an API to easily test your\nWeb API using the Web Client.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_use_it_in_your_build\">Use it in your build</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>groupId</code>: <code>io.vertx</code></p>\n</li>\n<li>\n<p><code>artifactId</code>: <code>vertx-junit5-web-client</code></p>\n</li>\n<li>\n<p><code>version</code>: (current Vert.x release or SNAPSHOT)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_use_web_client_in_your_tests\">Use Web Client in your tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Web Client, you need to register the extension <code><a href=\"../../apidocs/io/vertx/junit5/web/VertxWebClientExtension.html\">VertxWebClientExtension</a></code> <strong>after</strong> the\n<code><a href=\"../../apidocs/io/vertx/junit5/VertxExtension.html\">VertxExtension</a></code>. You can do both:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/MultipleAnnotationsTest.html[MultipleAnnotationsTest]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/SingleAnnotationTest.html[SingleAnnotationTest]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Look at <a href=\"https://junit.org/junit5/docs/current/user-guide/#extensions-registration-declarative\">JUnit 5 documentation</a> for more details</p>\n</div>\n<div class=\"paragraph\">\n<p>Now you can add <code><a href=\"../../apidocs/io/vertx/ext/web/client/WebClient.html\">WebClient</a></code> as a test method parameter, like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/SimpleTest.html#myTest-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[myTest]`\n---</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_use_webclientoptions\">Use <code>WebClientOptions</code></h3>\n<div class=\"paragraph\">\n<p>To define <code><a href=\"../../apidocs/io/vertx/ext/web/client/WebClientOptions.html\">WebClientOptions</a></code>, you must create a <strong>public</strong> field in your test class\nannotated with <code><a href=\"../../apidocs/io/vertx/junit5/web/WebClientOptionsInject.html\">@WebClientOptionsInject</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/WithOptionsTest.html[WithOptionsTest]`\n---</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_testing_http_requests\">Testing Http requests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Testing Http requests is usually tedious, error prone and requires a lot of boilerplate.\nIf you want to test a request with <code>WebClient</code> this is what you usually do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithWebClient-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithWebClient]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This module provides <code><a href=\"../../apidocs/io/vertx/junit5/web/TestRequest.html\">TestRequest</a></code>, a wrapper of <code><a href=\"../../apidocs/io/vertx/ext/web/client/HttpRequest.html\">HttpRequest</a></code> that simplifies\nthe creation of test requests and asserts on the responses. First, add a static import for all static methods in <code><a href=\"../../apidocs/io/vertx/junit5/web/TestRequest.html\">TestRequest</a></code>.\nNow you can rewrite the code in the previous example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithTestRequest-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithTestRequest]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When the request is completed and there are no assertion failures <code><a href=\"../../apidocs/io/vertx/junit5/VertxTestContext.html#completeNow--\">completeNow</a></code> is called, otherwise the test fails.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can flag a <code><a href=\"../../apidocs/io/vertx/junit5/Checkpoint.html\">Checkpoint</a></code> more than completing the <code>VertxTestContext</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithTestRequestCheckpoint-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithTestRequestCheckpoint]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can wrap an already existing <code>HttpRequest</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithTestRequestWrapping-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithTestRequestWrapping]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Every send method returns a <code><a href=\"../../apidocs/io/vertx/core/Future.html\">Future</a></code>, so you can use <code><a href=\"../../apidocs/io/vertx/core/Future.html#compose-java.util.function.Function-\">compose</a></code> to execute different test requests sequentially:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithTestRequestChaining-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithTestRequestChaining]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can create your custom assertions:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">---\n`link:../../apidocs/examples/TestRequestExample.html#testWithTestRequestCustomAssert-io.vertx.ext.web.client.WebClient-io.vertx.junit5.VertxTestContext-[testWithTestRequestCustomAssert]`\n---</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Look at <code><a href=\"../../apidocs/io/vertx/junit5/web/TestRequest.html\">TestRequest</a></code> static methods for all available asserts.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}