{"pageProps":{"categories":["releases","guides","news"],"category":"guides","page":1,"posts":[{"filename":"blog/2020-03-16-easy-sso-for-vert-x-with-keycloak.mdx","date":"2020-03-16","slug":"easy-sso-for-vert-x-with-keycloak","meta":{"title":"Easy SSO for Vert.x with Keycloak","category":"guides","authors":[{"name":"Thomas Darimont","github_id":"thomasdarimont"}],"summary":"In this blog post, you'll learn how to implement Single Sign-on with OpenID Connect and how to use Keycloak together with Eclipse Vert.x."},"readingTime":{"text":"11 min read","minutes":10.11,"time":606599.9999999999,"words":2022},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR:\")), mdx(\"p\", null, \"In this blog post you\\u2019ll learn:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to im\\xADple\\xADment Sin\\xADgle Sign-\\u200Bon with OpenID Con\\xADnect\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to use Key\\xADcloak\\u2019s OpenID Dis\\xADcov\\xADery to infer OpenID provider con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to ob\\xADtain user in\\xADfor\\xADma\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to check for au\\xADtho\\xADriza\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to call a Bearer pro\\xADtected ser\\xADvice with an Ac\\xADcess Token\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to im\\xADple\\xADment a form based lo\\xADgout\")), mdx(\"h2\", {\n    \"id\": \"hello-blog\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#hello-blog\"\n  })), \"Hello Blog\"), mdx(\"p\", null, \"This is my first post in the Vert.x Blog and I must admit that up until now I have never used Vert.x in a real project.\\n\\u201CWhy are you here?\\u201D, you might ask\\u2026 Well I cur\\xADrently have two main hob\\xADbies, learn\\xADing new things and se\\xADcur\\xADing apps with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/\"\n  }), \"Key\\xADcloak\"), \".\\nSo a few days ago, I stum\\xADbled upon the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=LsaXy7SRXMY&list=PLkeCJDaCC2ZsnySdg04Aq9D9FpAZY6K5D\"\n  }), \"In\\xADtro\\xADduc\\xADtion to Vert.x video se\\xADries on youtube\"), \" by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/infosec812\"\n  }), \"Deven Phillips\"), \" and I was im\\xADme\\xADdi\\xADately hooked. Vert.x was a new thing for me, so the next log\\xADi\\xADcal step was to fig\\xADure out how to se\\xADcure a Vert.x app with Key\\xADcloak.\"), mdx(\"p\", null, \"For this ex\\xADam\\xADple I build a small web app with Vert.x that shows how to im\\xADple\\xADment Sin\\xADgle Sign-\\u200Bon (SSO) with Key\\xADcloak\\nand OpenID Con\\xADnect, ob\\xADtain in\\xADfor\\xADma\\xADtion about the cur\\xADrent user, check for roles, call bearer pro\\xADtected ser\\xADvices and prop\\xADerly han\\xADdling lo\\xADgout.\"), mdx(\"h2\", {\n    \"id\": \"keycloak\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#keycloak\"\n  })), \"Keycloak\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/\"\n  }), \"Key\\xADcloak\"), \" is a Open Source Iden\\xADtity and Ac\\xADcess Man\\xADage\\xADment so\\xADlu\\xADtion which pro\\xADvides sup\\xADport for OpenID Con\\xADnect\\nbased Singe-\\u200BSign on, among many other things. I briefly looked for ways to se\\xADcur\\xADing a Vert.x app with Key\\xADcloak\\nand quickly found an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/blog/vertx-3-and-keycloak-tutorial/\"\n  }), \"older Vert.x Key\\xADcloak in\\xADte\\xADgra\\xADtion ex\\xADam\\xADple\"), \" in this very blog.\\nWhilst this is a good start for be\\xADgin\\xADners, the ex\\xADam\\xADple con\\xADtains a few is\\xADsues, e.g.:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It uses hard\\xADcoded OpenID provider con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fea\\xADtures a very sim\\xADplis\\xADtic in\\xADte\\xADgra\\xADtion (for the sake of sim\\xADplic\\xADity)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No user in\\xADfor\\xADma\\xADtion used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No lo\\xADgout func\\xADtion\\xADal\\xADity is shown\")), mdx(\"p\", null, \"That some\\xADhow nerd\\xADsniped me a bit and so it came that, after a long day of con\\xADsult\\xADing work, I sat down to cre\\xADate an ex\\xADam\\xADple for a com\\xADplete Key\\xADcloak in\\xADte\\xADgra\\xADtion based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-auth-oauth2/java/\"\n  }), \"Vert.x OpenID Con\\xADnect / OAuth2 Sup\\xADport\"), \".\"), mdx(\"p\", null, \"So let\\u2019s get started!\"), mdx(\"h3\", {\n    \"id\": \"keycloak-setup\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#keycloak-setup\"\n  })), \"Keycloak Setup\"), mdx(\"p\", null, \"To se\\xADcure a Vert.x app with Key\\xADcloak we of course need a Key\\xADcloak in\\xADstance. Al\\xADthough \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/docs/latest/getting_started/\"\n  }), \"Key\\xADcloak has a great get\\xADting started guide\"), \" I wanted to make it a bit eas\\xADier to put every\\xADthing to\\xADgether, there\\xADfore I pre\\xADpared a local Key\\xADcloak docker con\\xADtainer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx#start-keycloak-with-the-vertx-realm\"\n  }), \"as de\\xADscribed here\"), \" that you can start eas\\xADily, which comes with all the re\\xADquired con\\xADfig\\xADu\\xADra\\xADtion in place.\"), mdx(\"p\", null, \"The pre\\xADcon\\xADfig\\xADured Key\\xADcloak realm named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" con\\xADtains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"demo-client\"), \" for our Vert.x web app and a set\\nof users for test\\xADing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-haml\"\n  }), \"docker run \\\\\\n  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"it \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"-name vertx-keycloak \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"-rm \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"e KEYCLOAK_USER=admin \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"e KEYCLOAK_PASSWORD=admin \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"e KEYCLOAK_IMPORT=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-regexp\"\n  }), \"/tmp/vertx\"), \"-realm.json \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"v $PWD/vertx-realm.\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-symbol\"\n  }), \"json:\"), \"/tmp/vertx-realm.json \\\\\\n\"), \"  -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"ruby\"\n  }), \"p \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-symbol\"\n  }), \":\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \" \\\\\\n\"), \"  quay.io/keycloak/keycloak:9.0.0\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-web-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web-app\"\n  })), \"Vert.x Web App\"), mdx(\"p\", null, \"The sim\\xADple web app con\\xADsists of a sin\\xADgle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Verticle\"), \", runs on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8090\"), \" and pro\\xADvides a few routes with pro\\xADtected re\\xADsources. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/blob/master/keycloak-vertx/src/main/java/demo/MainVerticle.java\"\n  }), \"You can find the com\\xADplete ex\\xADam\\xADple here\"), \".\"), mdx(\"p\", null, \"The web app con\\xADtains the fol\\xADlow\\xADing routes with han\\xADdlers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/\"), \" - The un\\xADpro\\xADtected index page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/protected\"), \" - The pro\\xADtected page, which shows a greet\\xADing mes\\xADsage, users need to login to ac\\xADcess pages be\\xADneath this path.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/protected/user\"), \" - The pro\\xADtected user page, which shows some in\\xADfor\\xADma\\xADtion about the user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/protected/admin\"), \" - The pro\\xADtected admin page, which shows some in\\xADfor\\xADma\\xADtion about the admin, only users with role \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"admin\"), \" can ac\\xADcess this page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/protected/userinfo\"), \" - The pro\\xADtected user\\xADinfo page, ob\\xADtains user in\\xADfor\\xADma\\xADtion from the bearer token pro\\xADtected user\\xADinfo end\\xADpoint in Key\\xADcloak.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/logout\"), \" - The pro\\xADtected lo\\xADgout re\\xADsource, which trig\\xADgers the user lo\\xADgout.\")), mdx(\"h3\", {\n    \"id\": \"running-the-app\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#running-the-app\"\n  })), \"Running the app\"), mdx(\"p\", null, \"To run the app, we need to build our app via:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"cd\"), \" keycloak-vertx\\nmvn clean package\\n\")), mdx(\"p\", null, \"This cre\\xADates a runnable jar, which we can run via:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar target/*.jar\\n\")), mdx(\"p\", null, \"Note, that you need to start Key\\xADcloak, since our app will try to fetch con\\xADfig\\xADu\\xADra\\xADtion from Key\\xADcloak.\"), mdx(\"p\", null, \"If the ap\\xADpli\\xADca\\xADtion is run\\xADning, just browse to: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8090/\"), \".\"), mdx(\"p\", null, \"An ex\\xADam\\xADple in\\xADter\\xADac\\xADtion with the app can be seen in the fol\\xADlow\\xADing gif:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-keycloak-integration/2020-03-07-vertx-keycloak-integration.gif\",\n    \"alt\": \"Vert.x Keycloak Integration Demo\"\n  }))), mdx(\"h3\", {\n    \"id\": \"router-sessionstore-and-csrf-protection\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#router-sessionstore-and-csrf-protection\"\n  })), \"Router, SessionStore and CSRF Protection\"), mdx(\"p\", null, \"We start the con\\xADfig\\xADu\\xADra\\xADtion of our web app by cre\\xADat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" where we can add cus\\xADtom han\\xADdler func\\xADtions for our routes.\\nTo prop\\xADerly han\\xADdle the au\\xADthen\\xADti\\xADca\\xADtion state we need to cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SessionStore\"), \" and at\\xADtach it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \".\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SessionStore\"), \" is used by our OAuth2/OpenID Con\\xADnect in\\xADfra\\xADstruc\\xADture to as\\xADso\\xADciate au\\xADthen\\xADti\\xADca\\xADtion in\\xADfor\\xADma\\xADtion with a ses\\xADsion.\\nBy the way, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SessionStore\"), \" can also be clus\\xADtered if you need to dis\\xADtrib\\xADute the server-\\u200Bside state.\"), mdx(\"p\", null, \"Note that if you want to keep your server state\\xADless but still want to sup\\xADport clus\\xADter\\xADing,\\nthen you could pro\\xADvide your own im\\xADple\\xADmen\\xADta\\xADtion of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SessionStore\"), \" which stores the ses\\xADsion in\\xADfor\\xADma\\xADtion\\nas an en\\xADcrypted cookie on the Client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Router router = Router.router(vertx);\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Store session information on the server side\"), \"\\nSessionStore sessionStore = LocalSessionStore.create(vertx);\\nSessionHandler sessionHandler = SessionHandler.create(sessionStore);\\nrouter.route().handler(sessionHandler);\\n\")), mdx(\"p\", null, \"In order to pro\\xADtected against CSRF at\\xADtacks it is good prac\\xADtice to pro\\xADtect HTML forms with a CSRF token.\\nWe need this for our lo\\xADgout form that we\\u2019ll see later.\"), mdx(\"p\", null, \"To do this we con\\xADfig\\xADure a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSRFHandler\"), \" and add it to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// CSRF handler setup required for logout form\"), \"\\nString csrfSecret = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"zwiebelfische\\\"\"), \";\\nCSRFHandler csrfHandler = CSRFHandler.create(csrfSecret);\\nrouter.route().handler(ctx -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Ensures that the csrf token request parameter is available for the CsrfHandler\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// after the logout form was submitted.\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// See \\\"Handling HTML forms\\\" https://vertx.io/docs/vertx-core/java/#_handling_requests\"), \"\\n            ctx.request().setExpectMultipart(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\n            ctx.request().endHandler(v -> csrfHandler.handle(ctx));\\n        }\\n);\\n\")), mdx(\"h3\", {\n    \"id\": \"keycloak-setup-via-openid-connect-discovery\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#keycloak-setup-via-openid-connect-discovery\"\n  })), \"Keycloak Setup via OpenID Connect Discovery\"), mdx(\"p\", null, \"Our app is reg\\xADis\\xADtered as a con\\xADfi\\xADden\\xADtial OpenID Con\\xADnect client with Au\\xADtho\\xADriza\\xADtion Code Flow in Key\\xADcloak,\\nthus we need to con\\xADfig\\xADure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client_id\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client_secret\"), \". Con\\xADfi\\xADden\\xADtial clients are typ\\xADi\\xADcally used\\nfor server-\\u200Bside web ap\\xADpli\\xADca\\xADtions, where one can se\\xADcurely store the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client_secret\"), \". You can find out more\\nabout\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.keycloak.org/docs/latest/server_admin/index.html#_access-type\"\n  }), \"The dif\\xADfer\\xADent Client Ac\\xADcess Types\"), \" in the Key\\xADcloak doc\\xADu\\xADmen\\xADta\\xADtion.\"), mdx(\"p\", null, \"Since we don\\u2019t want to con\\xADfig\\xADure things like OAuth2 / OpenID Con\\xADnect End\\xADpoints our\\xADselves, we use Key\\xADcloak\\u2019s OpenID Con\\xADnect dis\\xADcov\\xADery end\\xADpoint to infer the nec\\xADes\\xADsary Oauth2 / OpenID Con\\xADnect end\\xADpoint URLs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"String hostname = System.getProperty(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.host\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" port = Integer.getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8090\"), \");\\nString baseUrl = String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://%s:%d\\\"\"), \", hostname, port);\\nString oauthCallbackPath = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/callback\\\"\"), \";\\n\\nOAuth2ClientOptions clientOptions = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" OAuth2ClientOptions()\\n    .setFlow(OAuth2FlowType.AUTH_CODE)\\n    .setSite(System.getProperty(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"oauth2.issuer\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080/auth/realms/vertx\\\"\"), \"))\\n    .setClientID(System.getProperty(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"oauth2.client_id\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"demo-client\\\"\"), \"))\\n    .setClientSecret(System.getProperty(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"oauth2.client_secret\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1f88bd14-7e7f-45e7-be27-d680da6e48d8\\\"\"), \"));\\n\\nKeycloakAuth.discover(vertx, clientOptions, asyncResult -> {\\n\\n    OAuth2Auth oauth2Auth = asyncResult.result();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (oauth2Auth == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Could not configure Keycloak integration via OpenID Connect Discovery Endpoint. Is Keycloak running?\\\"\"), \");\\n    }\\n\\n    AuthHandler oauth2 = OAuth2AuthHandler.create(oauth2Auth, baseUrl + oauthCallbackPath)\\n        .setupCallback(router.get(oauthCallbackPath))\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Additional scopes: openid for OpenID Connect\"), \"\\n        .addAuthority(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"openid\\\"\"), \");\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// session handler needs access to the authenticated user, otherwise we get an infinite redirect loop\"), \"\\n    sessionHandler.setAuthProvider(oauth2Auth);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// protect resources beneath /protected/* with oauth2 handler\"), \"\\n    router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protected/*\\\"\"), \").handler(oauth2);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// configure route handlers\"), \"\\n    configureRoutes(router, webClient, oauth2Auth);\\n});\\n\\ngetVertx().createHttpServer().requestHandler(router).listen(port);\\n\")), mdx(\"h3\", {\n    \"id\": \"route-handlers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#route-handlers\"\n  })), \"Route handlers\"), mdx(\"p\", null, \"We con\\xADfig\\xADure our route han\\xADdlers via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"configureRoutes\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"configureRoutes\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Router router, WebClient webClient, OAuth2Auth oauth2Auth)\"), \" \"), \"{\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleIndex);\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protected\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleGreet);\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protected/user\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleUserPage);\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protected/admin\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleAdminPage);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// extract discovered userinfo endpoint url\"), \"\\n    String userInfoUrl =  ((OAuth2AuthProviderImpl)oauth2Auth).getConfig().getUserInfoPath();\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/protected/userinfo\\\"\"), \").handler(createUserInfoHandler(webClient, userInfoUrl));\\n\\n    router.post(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/logout\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::handleLogout);\\n}\\n\")), mdx(\"p\", null, \"The index han\\xADdler ex\\xADposes an un\\xADpro\\xADtected re\\xADsource:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleIndex\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    respondWithOk(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Welcome to Vert.x Keycloak Example</h1><br><a href=\\\\\\\"/protected\\\\\\\">Protected</a>\\\"\"), \");\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"extract-user-information-from-the-openid-connect-id-token\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#extract-user-information-from-the-openid-connect-id-token\"\n  })), \"Extract User Information from the OpenID Connect ID Token\"), mdx(\"p\", null, \"Our app ex\\xADposes a sim\\xADple greet\\xADing page which shows some in\\xADfor\\xADma\\xADtion about the user and pro\\xADvides links to other pages.\"), mdx(\"p\", null, \"The user greet\\xADing han\\xADdler is pro\\xADtected by the Key\\xADcloak OAuth2 / OpenID Con\\xADnect in\\xADte\\xADgra\\xADtion. To show in\\xADfor\\xADma\\xADtion about\\nthe cur\\xADrent user, we first need to call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.user()\"), \" method to get an user ob\\xADject we can work with.\\nTo ac\\xADcess the OAuth2 token in\\xADfor\\xADma\\xADtion, we need to cast it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OAuth2TokenImpl\"), \".\"), mdx(\"p\", null, \"We can ex\\xADtract the user in\\xADfor\\xADma\\xADtion like the user\\xADname from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDToken\"), \" ex\\xADposed by the user ob\\xADject via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.idToken().getString(\\\"preferred_username\\\")\"), \".\\nNote, there are many more claims like (name, email, give\\xADnanme, fam\\xADi\\xADly\\xADname etc.) avail\\xADable. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openid.net/specs/openid-connect-core-1_0.html#Claims\"\n  }), \"OpenID Con\\xADnect Core Spec\\xADi\\xADfi\\xADca\\xADtion\"), \" con\\xADtains a list of avail\\xADable claims.\"), mdx(\"p\", null, \"We also gen\\xADer\\xADate a list with links to the other pages which are sup\\xADported:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleGreet\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\\n\\n    String username = oAuth2Token.idToken().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n\\n    String greeting = String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hi %s @%s</h1><ul>\\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<li><a href=\\\\\\\"/protected/user\\\\\\\">User Area</a></li>\\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<li><a href=\\\\\\\"/protected/admin\\\\\\\">Admin Area</a></li>\\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<li><a href=\\\\\\\"/protected/userinfo\\\\\\\">User Info (Remote Call)</a></li>\\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"</ul>\\\"\"), \", username, Instant.now());\\n\\n    String logoutForm = createLogoutForm(ctx);\\n\\n    respondWithOk(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", greeting + logoutForm);\\n}\\n\")), mdx(\"p\", null, \"The user page han\\xADdler shows in\\xADfor\\xADma\\xADtion about the cur\\xADrent user:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleUserPage\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\\n\\n    String username = user.idToken().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n    String displayName = oAuth2Token.idToken().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \");\\n\\n    String content = String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>User Page: %s (%s) @%s</h1><a href=\\\\\\\"/protected\\\\\\\">Protected Area</a>\\\"\"), \",\\n                                   username, displayName, Instant.now());\\n    respondWithOk(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", content);\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"authorization-checking-for-required-roles\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#authorization-checking-for-required-roles\"\n  })), \"Authorization: Checking for Required Roles\"), mdx(\"p\", null, \"Our app ex\\xADposes a sim\\xADple admin page which shows some in\\xADfor\\xADma\\xADtion for ad\\xADmins, which should only be vis\\xADi\\xADble for ad\\xADmins. Thus we re\\xADquire that users must have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin\"), \" realm role in Key\\xADcloak to be able to ac\\xADcess the admin page.\"), mdx(\"p\", null, \"This is done via a call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.isAuthorized(\\\"realm:admin\\\", cb)\"), \". The han\\xADdler func\\xADtion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cb\"), \" ex\\xADposes\\nthe re\\xADsult of the au\\xADtho\\xADriza\\xADtion check via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<Boolean> res\"), \". If the cur\\xADrent user has the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin\"), \" role then the re\\xADsult is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" oth\\xADer\\xADwise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleAdminPage\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// check for realm-role \\\"admin\\\"\"), \"\\n    user.isAuthorized(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"realm:admin\\\"\"), \", res -> {\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!res.succeeded() || !res.result()) {\\n            respondWith(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"403\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Forbidden</h1>\\\"\"), \");\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n\\n        String username = user.idToken().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"preferred_username\\\"\"), \");\\n\\n        String content = String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Admin Page: %s @%s</h1><a href=\\\\\\\"/protected\\\\\\\">Protected Area</a>\\\"\"), \",\\n                                        username, Instant.now());\\n        respondWithOk(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", content);\\n    });\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"call-services-protected-with-bearer-token\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#call-services-protected-with-bearer-token\"\n  })), \"Call Services protected with Bearer Token\"), mdx(\"p\", null, \"Often we need to call other ser\\xADvices from our web app that are pro\\xADtected via Bearer Au\\xADthen\\xADti\\xADca\\xADtion. This means\\nthat we need a valid \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access token\"), \" to ac\\xADcess a re\\xADsource pro\\xADvided on an\\xADother server.\"), mdx(\"p\", null, \"To demon\\xADstrate this we use Key\\xADcloak\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/userinfo\"), \" end\\xADpoint as a straw man to demon\\xADstrate back\\xADend calls with a bearer token.\"), mdx(\"p\", null, \"We can ob\\xADtain the cur\\xADrent valid \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access token\"), \" via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user.opaqueAccessToken()\"), \".\\nSince we use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebClient\"), \" to call the pro\\xADtected end\\xADpoint, we need to pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"access token\"), \"\\nvia the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Authorization\"), \" header by call\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bearerTokenAuthentication(user.opaqueAccessToken())\"), \"\\nin the cur\\xADrent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpRequest\"), \" ob\\xADject:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Handler<RoutingContext> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createUserInfoHandler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(WebClient webClient, String userInfoUrl)\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" (RoutingContext ctx) -> {\\n\\n        OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\\n\\n        URI userInfoEndpointUri = URI.create(userInfoUrl);\\n        webClient\\n            .get(userInfoEndpointUri.getPort(), userInfoEndpointUri.getHost(), userInfoEndpointUri.getPath())\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// use the access token for calls to other services protected via JWT Bearer authentication\"), \"\\n            .bearerTokenAuthentication(user.opaqueAccessToken())\\n            .as(BodyCodec.jsonObject())\\n            .send(ar -> {\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!ar.succeeded()) {\\n                    respondWith(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"{}\\\"\"), \");\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n                }\\n\\n                JsonObject body = ar.result().body();\\n                respondWithOk(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \", body.encode());\\n            });\\n    };\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"handle-logout\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#handle-logout\"\n  })), \"Handle logout\"), mdx(\"p\", null, \"Now that we got a work\\xADing SSO login with au\\xADtho\\xADriza\\xADtion, it would be great if we would allow users to lo\\xADgout again.\\nTo do this we can lever\\xADage the built-\\u200Bin OpenID Con\\xADnect lo\\xADgout func\\xADtion\\xADal\\xADity which can be called via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"oAuth2Token.logout(cb)\"), \".\"), mdx(\"p\", null, \"The han\\xADdler func\\xADtion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cb\"), \" ex\\xADposes the re\\xADsult of the lo\\xADgout ac\\xADtion via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<Void> res\"), \".\\nIf the lo\\xADgout was suc\\xADcess\\xADfull we destory our ses\\xADsion via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.session().destroy()\"), \" and redi\\xADrect the user to the index page.\"), mdx(\"p\", null, \"The lo\\xADgout form is gen\\xADer\\xADated via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createLogoutForm\"), \" method.\"), mdx(\"p\", null, \"As men\\xADtioned ear\\xADlier, we need to pro\\xADtect our lo\\xADgout form with a CSRF token to pre\\xADvent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://owasp.org/www-community/attacks/csrf\"\n  }), \"CSRF at\\xADtacks\"), \".\"), mdx(\"p\", null, \"Note: If we had end\\xADpoints that would ac\\xADcept data sent to the server, then we\\u2019d need to guard those end\\xADpoints with an CSRF token as well.\"), mdx(\"p\", null, \"We need to ob\\xADtain the gen\\xADer\\xADated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSRFToken\"), \" and ren\\xADder it into a hid\\xADden form input field that\\u2019s trans\\xADfered via HTTP POST when the lo\\xADgout form is sub\\xADmit\\xADted:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleLogout\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\\n    oAuth2Token.logout(res -> {\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!res.succeeded()) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the user might not have been logged out, to know why:\"), \"\\n            respondWith(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \", String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Logout failed %s</h1>\\\"\"), \", res.cause()));\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n\\n        ctx.session().destroy();\\n        ctx.response().putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"location\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/?logout=true\\\"\"), \").setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"302\"), \").end();\\n    });\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" String \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createLogoutForm\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n\\n    String csrfToken = ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<form action=\\\\\\\"/logout\\\\\\\" method=\\\\\\\"post\\\\\\\">\\\"\"), \"\\n            + String.format(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"%s\\\\\\\" value=\\\\\\\"%s\\\\\\\">\\\"\"), \", CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)\\n            + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<button>Logout</button></form>\\\"\"), \";\\n}\\n\")), mdx(\"p\", null, \"Some ad\\xADdi\\xADtional plumb\\xADing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"respondWithOk\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx, String contentType, String content)\"), \" \"), \"{\\n    respondWith(ctx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \", contentType, content);\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"respondWith\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" statusCode, String contentType, String content)\"), \" \"), \"{\\n    ctx.request().response() \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//\"), \"\\n            .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", contentType) \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//\"), \"\\n            .setStatusCode(statusCode)\\n            .end(content);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"more-examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#more-examples\"\n  })), \"More examples\"), mdx(\"p\", null, \"This con\\xADcludes the Key\\xADcloak in\\xADte\\xADgra\\xADtion ex\\xADam\\xADple.\"), mdx(\"p\", null, \"Check out the com\\xADplete ex\\xADam\\xADple in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx\"\n  }), \"keycloak-\\u200Bvertx Ex\\xADam\\xADples Repo\"), \".\"), mdx(\"p\", null, \"Thank you for your time, stay tuned for more up\\xADdates! If you want to learn more about Key\\xADcloak, feel free to reach out to me. You can find me via \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/thomasdarimont\"\n  }), \"thomas\\xADda\\xADri\\xADmont on twit\\xADter\"), \".\"), mdx(\"p\", null, \"Happy Hack\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><strong>TL;DR:</strong></p><p>In this blog post you’ll learn:</p><ul><li>How to im­ple­ment Sin­gle Sign-​on with OpenID Con­nect</li><li>How to use Key­cloak’s OpenID Dis­cov­ery to infer OpenID provider con­fig­u­ra­tion</li><li>How to ob­tain user in­for­ma­tion</li><li>How to check for au­tho­riza­tion</li><li>How to call a Bearer pro­tected ser­vice with an Ac­cess Token</li><li>How to im­ple­ment a form based lo­gout</li></ul><h2 id=\"hello-blog\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#hello-blog\"></a>Hello Blog</h2><p>This is my first post in the Vert.x Blog and I must admit that up until now I have never used Vert.x in a real project.\n“Why are you here?”, you might ask… Well I cur­rently have two main hob­bies, learn­ing new things and se­cur­ing apps with <a href=\"https://www.keycloak.org/\">Key­cloak</a>.\nSo a few days ago, I stum­bled upon the <a href=\"https://www.youtube.com/watch?v=LsaXy7SRXMY&amp;list=PLkeCJDaCC2ZsnySdg04Aq9D9FpAZY6K5D\">In­tro­duc­tion to Vert.x video se­ries on youtube</a> by <a href=\"https://twitter.com/infosec812\">Deven Phillips</a> and I was im­me­di­ately hooked. Vert.x was a new thing for me, so the next log­i­cal step was to fig­ure out how to se­cure a Vert.x app with Key­cloak.</p><p>For this ex­am­ple I build a small web app with Vert.x that shows how to im­ple­ment Sin­gle Sign-​on (SSO) with Key­cloak\nand OpenID Con­nect, ob­tain in­for­ma­tion about the cur­rent user, check for roles, call bearer pro­tected ser­vices and prop­erly han­dling lo­gout.</p><h2 id=\"keycloak\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#keycloak\"></a>Keycloak</h2><p><a href=\"https://www.keycloak.org/\">Key­cloak</a> is a Open Source Iden­tity and Ac­cess Man­age­ment so­lu­tion which pro­vides sup­port for OpenID Con­nect\nbased Singe-​Sign on, among many other things. I briefly looked for ways to se­cur­ing a Vert.x app with Key­cloak\nand quickly found an <a href=\"https://vertx.io/blog/vertx-3-and-keycloak-tutorial/\">older Vert.x Key­cloak in­te­gra­tion ex­am­ple</a> in this very blog.\nWhilst this is a good start for be­gin­ners, the ex­am­ple con­tains a few is­sues, e.g.:</p><ul><li>It uses hard­coded OpenID provider con­fig­u­ra­tion</li><li>Fea­tures a very sim­plis­tic in­te­gra­tion (for the sake of sim­plic­ity)</li><li>No user in­for­ma­tion used</li><li>No lo­gout func­tion­al­ity is shown</li></ul><p>That some­how nerd­sniped me a bit and so it came that, after a long day of con­sult­ing work, I sat down to cre­ate an ex­am­ple for a com­plete Key­cloak in­te­gra­tion based on <a href=\"https://vertx.io/docs/vertx-auth-oauth2/java/\">Vert.x OpenID Con­nect / OAuth2 Sup­port</a>.</p><p>So let’s get started!</p><h3 id=\"keycloak-setup\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#keycloak-setup\"></a>Keycloak Setup</h3><p>To se­cure a Vert.x app with Key­cloak we of course need a Key­cloak in­stance. Al­though <a href=\"https://www.keycloak.org/docs/latest/getting_started/\">Key­cloak has a great get­ting started guide</a> I wanted to make it a bit eas­ier to put every­thing to­gether, there­fore I pre­pared a local Key­cloak docker con­tainer <a href=\"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx#start-keycloak-with-the-vertx-realm\">as de­scribed here</a> that you can start eas­ily, which comes with all the re­quired con­fig­u­ra­tion in place.</p><p>The pre­con­fig­ured Key­cloak realm named <code>vertx</code> con­tains a <code>demo-client</code> for our Vert.x web app and a set\nof users for test­ing.</p><pre><code class=\"hljs language-haml\">docker run \\\n  -<span class=\"ruby\">it \\\n</span>  -<span class=\"ruby\">-name vertx-keycloak \\\n</span>  -<span class=\"ruby\">-rm \\\n</span>  -<span class=\"ruby\">e KEYCLOAK_USER=admin \\\n</span>  -<span class=\"ruby\">e KEYCLOAK_PASSWORD=admin \\\n</span>  -<span class=\"ruby\">e KEYCLOAK_IMPORT=<span class=\"hljs-regexp\">/tmp/vertx</span>-realm.json \\\n</span>  -<span class=\"ruby\">v $PWD/vertx-realm.<span class=\"hljs-symbol\">json:</span>/tmp/vertx-realm.json \\\n</span>  -<span class=\"ruby\">p <span class=\"hljs-number\">8080</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">8080</span> \\\n</span>  quay.io/keycloak/keycloak:9.0.0\n</code></pre><h2 id=\"vertx-web-app\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web-app\"></a>Vert.x Web App</h2><p>The sim­ple web app con­sists of a sin­gle <code>Verticle</code>, runs on <code>http://localhost:8090</code> and pro­vides a few routes with pro­tected re­sources. <a href=\"https://github.com/thomasdarimont/vertx-playground/blob/master/keycloak-vertx/src/main/java/demo/MainVerticle.java\">You can find the com­plete ex­am­ple here</a>.</p><p>The web app con­tains the fol­low­ing routes with han­dlers:</p><ul><li><code>/</code> - The un­pro­tected index page</li><li><code>/protected</code> - The pro­tected page, which shows a greet­ing mes­sage, users need to login to ac­cess pages be­neath this path.</li><li><code>/protected/user</code> - The pro­tected user page, which shows some in­for­ma­tion about the user.</li><li><code>/protected/admin</code> - The pro­tected admin page, which shows some in­for­ma­tion about the admin, only users with role <code>admin</code> can ac­cess this page.</li><li><code>/protected/userinfo</code> - The pro­tected user­info page, ob­tains user in­for­ma­tion from the bearer token pro­tected user­info end­point in Key­cloak.</li><li><code>/logout</code> - The pro­tected lo­gout re­source, which trig­gers the user lo­gout.</li></ul><h3 id=\"running-the-app\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#running-the-app\"></a>Running the app</h3><p>To run the app, we need to build our app via:</p><pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> keycloak-vertx\nmvn clean package\n</code></pre><p>This cre­ates a runnable jar, which we can run via:</p><pre><code class=\"hljs language-bash\">java -jar target/*.jar\n</code></pre><p>Note, that you need to start Key­cloak, since our app will try to fetch con­fig­u­ra­tion from Key­cloak.</p><p>If the ap­pli­ca­tion is run­ning, just browse to: <code>http://localhost:8090/</code>.</p><p>An ex­am­ple in­ter­ac­tion with the app can be seen in the fol­low­ing gif:</p><p><img src=\"/images/blog/vertx-keycloak-integration/2020-03-07-vertx-keycloak-integration.gif\" alt=\"Vert.x Keycloak Integration Demo\"/></p><h3 id=\"router-sessionstore-and-csrf-protection\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#router-sessionstore-and-csrf-protection\"></a>Router, SessionStore and CSRF Protection</h3><p>We start the con­fig­u­ra­tion of our web app by cre­at­ing a <code>Router</code> where we can add cus­tom han­dler func­tions for our routes.\nTo prop­erly han­dle the au­then­ti­ca­tion state we need to cre­ate a <code>SessionStore</code> and at­tach it to the <code>Router</code>.\nThe <code>SessionStore</code> is used by our OAuth2/OpenID Con­nect in­fra­struc­ture to as­so­ciate au­then­ti­ca­tion in­for­ma­tion with a ses­sion.\nBy the way, the <code>SessionStore</code> can also be clus­tered if you need to dis­trib­ute the server-​side state.</p><p>Note that if you want to keep your server state­less but still want to sup­port clus­ter­ing,\nthen you could pro­vide your own im­ple­men­ta­tion of a <code>SessionStore</code> which stores the ses­sion in­for­ma­tion\nas an en­crypted cookie on the Client.</p><pre><code class=\"hljs language-java\">Router router = Router.router(vertx);\n\n<span class=\"hljs-comment\">// Store session information on the server side</span>\nSessionStore sessionStore = LocalSessionStore.create(vertx);\nSessionHandler sessionHandler = SessionHandler.create(sessionStore);\nrouter.route().handler(sessionHandler);\n</code></pre><p>In order to pro­tected against CSRF at­tacks it is good prac­tice to pro­tect HTML forms with a CSRF token.\nWe need this for our lo­gout form that we’ll see later.</p><p>To do this we con­fig­ure a <code>CSRFHandler</code> and add it to our <code>Router</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// CSRF handler setup required for logout form</span>\nString csrfSecret = <span class=\"hljs-string\">&quot;zwiebelfische&quot;</span>;\nCSRFHandler csrfHandler = CSRFHandler.create(csrfSecret);\nrouter.route().handler(ctx -&gt; {\n            <span class=\"hljs-comment\">// Ensures that the csrf token request parameter is available for the CsrfHandler</span>\n            <span class=\"hljs-comment\">// after the logout form was submitted.</span>\n            <span class=\"hljs-comment\">// See &quot;Handling HTML forms&quot; https://vertx.io/docs/vertx-core/java/#_handling_requests</span>\n            ctx.request().setExpectMultipart(<span class=\"hljs-keyword\">true</span>);\n            ctx.request().endHandler(v -&gt; csrfHandler.handle(ctx));\n        }\n);\n</code></pre><h3 id=\"keycloak-setup-via-openid-connect-discovery\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#keycloak-setup-via-openid-connect-discovery\"></a>Keycloak Setup via OpenID Connect Discovery</h3><p>Our app is reg­is­tered as a con­fi­den­tial OpenID Con­nect client with Au­tho­riza­tion Code Flow in Key­cloak,\nthus we need to con­fig­ure <code>client_id</code> and <code>client_secret</code>. Con­fi­den­tial clients are typ­i­cally used\nfor server-​side web ap­pli­ca­tions, where one can se­curely store the <code>client_secret</code>. You can find out more\nabout<a href=\"https://www.keycloak.org/docs/latest/server_admin/index.html#_access-type\">The dif­fer­ent Client Ac­cess Types</a> in the Key­cloak doc­u­men­ta­tion.</p><p>Since we don’t want to con­fig­ure things like OAuth2 / OpenID Con­nect End­points our­selves, we use Key­cloak’s OpenID Con­nect dis­cov­ery end­point to infer the nec­es­sary Oauth2 / OpenID Con­nect end­point URLs.</p><pre><code class=\"hljs language-java\">String hostname = System.getProperty(<span class=\"hljs-string\">&quot;http.host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\n<span class=\"hljs-keyword\">int</span> port = Integer.getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8090</span>);\nString baseUrl = String.format(<span class=\"hljs-string\">&quot;http://%s:%d&quot;</span>, hostname, port);\nString oauthCallbackPath = <span class=\"hljs-string\">&quot;/callback&quot;</span>;\n\nOAuth2ClientOptions clientOptions = <span class=\"hljs-keyword\">new</span> OAuth2ClientOptions()\n    .setFlow(OAuth2FlowType.AUTH_CODE)\n    .setSite(System.getProperty(<span class=\"hljs-string\">&quot;oauth2.issuer&quot;</span>, <span class=\"hljs-string\">&quot;http://localhost:8080/auth/realms/vertx&quot;</span>))\n    .setClientID(System.getProperty(<span class=\"hljs-string\">&quot;oauth2.client_id&quot;</span>, <span class=\"hljs-string\">&quot;demo-client&quot;</span>))\n    .setClientSecret(System.getProperty(<span class=\"hljs-string\">&quot;oauth2.client_secret&quot;</span>, <span class=\"hljs-string\">&quot;1f88bd14-7e7f-45e7-be27-d680da6e48d8&quot;</span>));\n\nKeycloakAuth.discover(vertx, clientOptions, asyncResult -&gt; {\n\n    OAuth2Auth oauth2Auth = asyncResult.result();\n\n    <span class=\"hljs-keyword\">if</span> (oauth2Auth == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">&quot;Could not configure Keycloak integration via OpenID Connect Discovery Endpoint. Is Keycloak running?&quot;</span>);\n    }\n\n    AuthHandler oauth2 = OAuth2AuthHandler.create(oauth2Auth, baseUrl + oauthCallbackPath)\n        .setupCallback(router.get(oauthCallbackPath))\n        <span class=\"hljs-comment\">// Additional scopes: openid for OpenID Connect</span>\n        .addAuthority(<span class=\"hljs-string\">&quot;openid&quot;</span>);\n\n    <span class=\"hljs-comment\">// session handler needs access to the authenticated user, otherwise we get an infinite redirect loop</span>\n    sessionHandler.setAuthProvider(oauth2Auth);\n\n    <span class=\"hljs-comment\">// protect resources beneath /protected/* with oauth2 handler</span>\n    router.route(<span class=\"hljs-string\">&quot;/protected/*&quot;</span>).handler(oauth2);\n\n    <span class=\"hljs-comment\">// configure route handlers</span>\n    configureRoutes(router, webClient, oauth2Auth);\n});\n\ngetVertx().createHttpServer().requestHandler(router).listen(port);\n</code></pre><h3 id=\"route-handlers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#route-handlers\"></a>Route handlers</h3><p>We con­fig­ure our route han­dlers via <code>configureRoutes</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureRoutes</span><span class=\"hljs-params\">(Router router, WebClient webClient, OAuth2Auth oauth2Auth)</span> </span>{\n\n    router.get(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleIndex);\n\n    router.get(<span class=\"hljs-string\">&quot;/protected&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleGreet);\n    router.get(<span class=\"hljs-string\">&quot;/protected/user&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleUserPage);\n    router.get(<span class=\"hljs-string\">&quot;/protected/admin&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleAdminPage);\n\n    <span class=\"hljs-comment\">// extract discovered userinfo endpoint url</span>\n    String userInfoUrl =  ((OAuth2AuthProviderImpl)oauth2Auth).getConfig().getUserInfoPath();\n    router.get(<span class=\"hljs-string\">&quot;/protected/userinfo&quot;</span>).handler(createUserInfoHandler(webClient, userInfoUrl));\n\n    router.post(<span class=\"hljs-string\">&quot;/logout&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::handleLogout);\n}\n</code></pre><p>The index han­dler ex­poses an un­pro­tected re­source:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleIndex</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    respondWithOk(ctx, <span class=\"hljs-string\">&quot;text/html&quot;</span>, <span class=\"hljs-string\">&quot;&lt;h1&gt;Welcome to Vert.x Keycloak Example&lt;/h1&gt;&lt;br&gt;&lt;a href=\\&quot;/protected\\&quot;&gt;Protected&lt;/a&gt;&quot;</span>);\n}\n</code></pre><h3 id=\"extract-user-information-from-the-openid-connect-id-token\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#extract-user-information-from-the-openid-connect-id-token\"></a>Extract User Information from the OpenID Connect ID Token</h3><p>Our app ex­poses a sim­ple greet­ing page which shows some in­for­ma­tion about the user and pro­vides links to other pages.</p><p>The user greet­ing han­dler is pro­tected by the Key­cloak OAuth2 / OpenID Con­nect in­te­gra­tion. To show in­for­ma­tion about\nthe cur­rent user, we first need to call the <code>ctx.user()</code> method to get an user ob­ject we can work with.\nTo ac­cess the OAuth2 token in­for­ma­tion, we need to cast it to <code>OAuth2TokenImpl</code>.</p><p>We can ex­tract the user in­for­ma­tion like the user­name from the <code>IDToken</code> ex­posed by the user ob­ject via <code>user.idToken().getString(&quot;preferred_username&quot;)</code>.\nNote, there are many more claims like (name, email, give­nanme, fam­i­ly­name etc.) avail­able. The <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#Claims\">OpenID Con­nect Core Spec­i­fi­ca­tion</a> con­tains a list of avail­able claims.</p><p>We also gen­er­ate a list with links to the other pages which are sup­ported:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleGreet</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\n\n    String username = oAuth2Token.idToken().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n\n    String greeting = String.format(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hi %s @%s&lt;/h1&gt;&lt;ul&gt;&quot;</span> +\n            <span class=\"hljs-string\">&quot;&lt;li&gt;&lt;a href=\\&quot;/protected/user\\&quot;&gt;User Area&lt;/a&gt;&lt;/li&gt;&quot;</span> +\n            <span class=\"hljs-string\">&quot;&lt;li&gt;&lt;a href=\\&quot;/protected/admin\\&quot;&gt;Admin Area&lt;/a&gt;&lt;/li&gt;&quot;</span> +\n            <span class=\"hljs-string\">&quot;&lt;li&gt;&lt;a href=\\&quot;/protected/userinfo\\&quot;&gt;User Info (Remote Call)&lt;/a&gt;&lt;/li&gt;&quot;</span> +\n            <span class=\"hljs-string\">&quot;&lt;/ul&gt;&quot;</span>, username, Instant.now());\n\n    String logoutForm = createLogoutForm(ctx);\n\n    respondWithOk(ctx, <span class=\"hljs-string\">&quot;text/html&quot;</span>, greeting + logoutForm);\n}\n</code></pre><p>The user page han­dler shows in­for­ma­tion about the cur­rent user:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleUserPage</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n    String username = user.idToken().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n    String displayName = oAuth2Token.idToken().getString(<span class=\"hljs-string\">&quot;name&quot;</span>);\n\n    String content = String.format(<span class=\"hljs-string\">&quot;&lt;h1&gt;User Page: %s (%s) @%s&lt;/h1&gt;&lt;a href=\\&quot;/protected\\&quot;&gt;Protected Area&lt;/a&gt;&quot;</span>,\n                                   username, displayName, Instant.now());\n    respondWithOk(ctx, <span class=\"hljs-string\">&quot;text/html&quot;</span>, content);\n}\n</code></pre><h3 id=\"authorization-checking-for-required-roles\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#authorization-checking-for-required-roles\"></a>Authorization: Checking for Required Roles</h3><p>Our app ex­poses a sim­ple admin page which shows some in­for­ma­tion for ad­mins, which should only be vis­i­ble for ad­mins. Thus we re­quire that users must have the <code>admin</code> realm role in Key­cloak to be able to ac­cess the admin page.</p><p>This is done via a call to <code>user.isAuthorized(&quot;realm:admin&quot;, cb)</code>. The han­dler func­tion <code>cb</code> ex­poses\nthe re­sult of the au­tho­riza­tion check via the <code>AsyncResult&lt;Boolean&gt; res</code>. If the cur­rent user has the\n<code>admin</code> role then the re­sult is <code>true</code> oth­er­wise <code>false</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleAdminPage</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n    <span class=\"hljs-comment\">// check for realm-role &quot;admin&quot;</span>\n    user.isAuthorized(<span class=\"hljs-string\">&quot;realm:admin&quot;</span>, res -&gt; {\n\n        <span class=\"hljs-keyword\">if</span> (!res.succeeded() || !res.result()) {\n            respondWith(ctx, <span class=\"hljs-number\">403</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>, <span class=\"hljs-string\">&quot;&lt;h1&gt;Forbidden&lt;/h1&gt;&quot;</span>);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        String username = user.idToken().getString(<span class=\"hljs-string\">&quot;preferred_username&quot;</span>);\n\n        String content = String.format(<span class=\"hljs-string\">&quot;&lt;h1&gt;Admin Page: %s @%s&lt;/h1&gt;&lt;a href=\\&quot;/protected\\&quot;&gt;Protected Area&lt;/a&gt;&quot;</span>,\n                                        username, Instant.now());\n        respondWithOk(ctx, <span class=\"hljs-string\">&quot;text/html&quot;</span>, content);\n    });\n}\n</code></pre><h4 id=\"call-services-protected-with-bearer-token\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#call-services-protected-with-bearer-token\"></a>Call Services protected with Bearer Token</h4><p>Often we need to call other ser­vices from our web app that are pro­tected via Bearer Au­then­ti­ca­tion. This means\nthat we need a valid <code>access token</code> to ac­cess a re­source pro­vided on an­other server.</p><p>To demon­strate this we use Key­cloak’s <code>/userinfo</code> end­point as a straw man to demon­strate back­end calls with a bearer token.</p><p>We can ob­tain the cur­rent valid <code>access token</code> via <code>user.opaqueAccessToken()</code>.\nSince we use a <code>WebClient</code> to call the pro­tected end­point, we need to pass the <code>access token</code>\nvia the <code>Authorization</code> header by call­ing <code>bearerTokenAuthentication(user.opaqueAccessToken())</code>\nin the cur­rent <code>HttpRequest</code> ob­ject:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Handler&lt;RoutingContext&gt; <span class=\"hljs-title\">createUserInfoHandler</span><span class=\"hljs-params\">(WebClient webClient, String userInfoUrl)</span> </span>{\n\n    <span class=\"hljs-keyword\">return</span> (RoutingContext ctx) -&gt; {\n\n        OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n        URI userInfoEndpointUri = URI.create(userInfoUrl);\n        webClient\n            .get(userInfoEndpointUri.getPort(), userInfoEndpointUri.getHost(), userInfoEndpointUri.getPath())\n            <span class=\"hljs-comment\">// use the access token for calls to other services protected via JWT Bearer authentication</span>\n            .bearerTokenAuthentication(user.opaqueAccessToken())\n            .as(BodyCodec.jsonObject())\n            .send(ar -&gt; {\n\n                <span class=\"hljs-keyword\">if</span> (!ar.succeeded()) {\n                    respondWith(ctx, <span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>, <span class=\"hljs-string\">&quot;{}&quot;</span>);\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                JsonObject body = ar.result().body();\n                respondWithOk(ctx, <span class=\"hljs-string\">&quot;application/json&quot;</span>, body.encode());\n            });\n    };\n}\n</code></pre><h3 id=\"handle-logout\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#handle-logout\"></a>Handle logout</h3><p>Now that we got a work­ing SSO login with au­tho­riza­tion, it would be great if we would allow users to lo­gout again.\nTo do this we can lever­age the built-​in OpenID Con­nect lo­gout func­tion­al­ity which can be called via <code>oAuth2Token.logout(cb)</code>.</p><p>The han­dler func­tion <code>cb</code> ex­poses the re­sult of the lo­gout ac­tion via the <code>AsyncResult&lt;Void&gt; res</code>.\nIf the lo­gout was suc­cess­full we destory our ses­sion via <code>ctx.session().destroy()</code> and redi­rect the user to the index page.</p><p>The lo­gout form is gen­er­ated via the <code>createLogoutForm</code> method.</p><p>As men­tioned ear­lier, we need to pro­tect our lo­gout form with a CSRF token to pre­vent <a href=\"https://owasp.org/www-community/attacks/csrf\">CSRF at­tacks</a>.</p><p>Note: If we had end­points that would ac­cept data sent to the server, then we’d need to guard those end­points with an CSRF token as well.</p><p>We need to ob­tain the gen­er­ated <code>CSRFToken</code> and ren­der it into a hid­den form input field that’s trans­fered via HTTP POST when the lo­gout form is sub­mit­ted:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleLogout</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\n    oAuth2Token.logout(res -&gt; {\n\n        <span class=\"hljs-keyword\">if</span> (!res.succeeded()) {\n            <span class=\"hljs-comment\">// the user might not have been logged out, to know why:</span>\n            respondWith(ctx, <span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>, String.format(<span class=\"hljs-string\">&quot;&lt;h1&gt;Logout failed %s&lt;/h1&gt;&quot;</span>, res.cause()));\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        ctx.session().destroy();\n        ctx.response().putHeader(<span class=\"hljs-string\">&quot;location&quot;</span>, <span class=\"hljs-string\">&quot;/?logout=true&quot;</span>).setStatusCode(<span class=\"hljs-number\">302</span>).end();\n    });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">createLogoutForm</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n\n    String csrfToken = ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;form action=\\&quot;/logout\\&quot; method=\\&quot;post\\&quot;&gt;&quot;</span>\n            + String.format(<span class=\"hljs-string\">&quot;&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;%s\\&quot; value=\\&quot;%s\\&quot;&gt;&quot;</span>, CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)\n            + <span class=\"hljs-string\">&quot;&lt;button&gt;Logout&lt;/button&gt;&lt;/form&gt;&quot;</span>;\n}\n</code></pre><p>Some ad­di­tional plumb­ing:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">respondWithOk</span><span class=\"hljs-params\">(RoutingContext ctx, String contentType, String content)</span> </span>{\n    respondWith(ctx, <span class=\"hljs-number\">200</span>, contentType, content);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">respondWith</span><span class=\"hljs-params\">(RoutingContext ctx, <span class=\"hljs-keyword\">int</span> statusCode, String contentType, String content)</span> </span>{\n    ctx.request().response() <span class=\"hljs-comment\">//</span>\n            .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, contentType) <span class=\"hljs-comment\">//</span>\n            .setStatusCode(statusCode)\n            .end(content);\n}\n</code></pre><h2 id=\"more-examples\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#more-examples\"></a>More examples</h2><p>This con­cludes the Key­cloak in­te­gra­tion ex­am­ple.</p><p>Check out the com­plete ex­am­ple in <a href=\"https://github.com/thomasdarimont/vertx-playground/tree/master/keycloak-vertx\">keycloak-​vertx Ex­am­ples Repo</a>.</p><p>Thank you for your time, stay tuned for more up­dates! If you want to learn more about Key­cloak, feel free to reach out to me. You can find me via <a href=\"https://twitter.com/thomasdarimont\">thomas­da­ri­mont on twit­ter</a>.</p><p>Happy Hack­ing!</p>","scope":{}},"tfIdfTerms":[{"term":"keycloak","tf":28},{"term":"user","tf":23},{"term":"app","tf":19},{"term":"openid","tf":17},{"term":"protect","tf":17},{"term":"need","tf":16},{"term":"via","tf":16},{"term":"inform","tf":15},{"term":"connect","tf":14},{"term":"logout","tf":14},{"term":"page","tf":14},{"term":"call","tf":10},{"term":"exampl","tf":10},{"term":"us","tf":9},{"term":"configur","tf":9},{"term":"token","tf":9},{"term":"handler","tf":9},{"term":"access","tf":8},{"term":"web","tf":8},{"term":"show","tf":8},{"term":"endpoint","tf":8},{"term":"provid","tf":7},{"term":"form","tf":7},{"term":"current","tf":7},{"term":"bearer","tf":6}]},{"filename":"blog/2019-10-22-send-web-requests-and-assert-results-with-vertx-junit5-web-client.mdx","date":"2019-10-22","slug":"send-web-requests-and-assert-results-with-vertx-junit5-web-client","meta":{"title":"Send web requests and assert results with vertx-junit5-web-client","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"In this blog post, you'll learn how to use the new vertx-junit5-web-client module to send web requests in your unit tests and to make assertions."},"readingTime":{"text":"2 min read","minutes":1.3,"time":78000,"words":260},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the last Vert.x 3.8 re\\xADlease, we added a new mod\\xADule called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-junit5-web-client\"), \", that brings \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-client/java/\"\n  }), \"Vert.x Web Client\"), \" in\\xADjec\\xADtion\\ninto tests and pro\\xADvides an API called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestRequest\"), \" to sim\\xADplify the cre\\xADation and as\\xADser\\xADtions on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebClient\"), \" re\\xADquests:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" io.vertx.junit5.web.TestRequest.*;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@ExtendWith({\\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\\n  VertxWebClientExtension.class\\n})\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TestRequestExample\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"test1\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(WebClient client, VertxTestContext testContext)\"), \" \"), \"{\\n    testRequest(client, HttpMethod.GET, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Build the request\"), \"\\n      .with(\\n        queryParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"francesco\\\"\"), \"), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Add query param\"), \"\\n        requestHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"foo\\\"\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Add request header\"), \"\\n      )\\n      .expect(\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Assert that response is a JSON with a specific body\"), \"\\n        jsonBodyResponse(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"value\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Francesco!\\\"\"), \")),\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Assert that response contains a particular header\"), \"\\n        responseHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bar\\\"\"), \")\\n      )\\n      .send(testContext); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Complete (or fail) the VertxTestContext\"), \"\\n  }\\n\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testRequest()\"), \" will use Vert.x Web Client to send the re\\xADquest. When the re\\xADsponse is re\\xADceived, It suc\\xADceds the test or it cor\\xADrectly prop\\xADa\\xADgates as\\xADser\\xADtion fail\\xADures, if any.\"), mdx(\"p\", null, \"You can also send mul\\xADti\\xADple re\\xADquests using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/apidocs/io/vertx/junit5/Checkpoint.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Checkpoint\")), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" io.vertx.junit5.web.TestRequest.*;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@ExtendWith({\\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\\n  VertxWebClientExtension.class\\n})\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MultiTestRequestExample\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"test2\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(WebClient client, VertxTestContext testContext)\"), \" \"), \"{\\n    Checkpoint checkpoint = testContext.checkpoint(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \"); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create the Checkpoint to flag when request succeds\"), \"\\n\\n    testRequest(\\n        client    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create the test request using WebClient APIs\"), \"\\n          .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \")\\n          .addQueryParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"francesco\\\"\"), \")\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"foo\\\"\"), \")\\n      )\\n      .expect(\\n        jsonBodyResponse(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"value\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Francesco!\\\"\"), \")),\\n        responseHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bar\\\"\"), \")\\n      )\\n      .send(testContext, checkpoint); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Pass the checkpoint to flag\"), \"\\n\\n    testRequest(\\n        client\\n          .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \")\\n          .addQueryParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"julien\\\"\"), \")\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"foo\\\"\"), \")\\n      )\\n      .expect(\\n        jsonBodyResponse(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"value\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Julien!\\\"\"), \")),\\n        responseHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"x-my\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bar\\\"\"), \")\\n      )\\n      .send(testContext, checkpoint);\\n  }\\n\\n}\\n\")), mdx(\"p\", null, \"Look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-junit5-web-client/java/\"\n  }), \"Vert.x JUnit 5 Web Client doc\\xADu\\xADmen\\xADta\\xADtion\"), \" for more de\\xADtails\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In the last Vert.x 3.8 re­lease, we added a new mod­ule called <code>vertx-junit5-web-client</code>, that brings <a href=\"https://vertx.io/docs/vertx-web-client/java/\">Vert.x Web Client</a> in­jec­tion\ninto tests and pro­vides an API called <code>TestRequest</code> to sim­plify the cre­ation and as­ser­tions on <code>WebClient</code> re­quests:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> io.vertx.junit5.web.TestRequest.*;\n\n<span class=\"hljs-meta\">@ExtendWith({\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\n  VertxWebClientExtension.class\n})</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestRequestExample</span> </span>{\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">(WebClient client, VertxTestContext testContext)</span> </span>{\n    testRequest(client, HttpMethod.GET, <span class=\"hljs-string\">&quot;/hello&quot;</span>) <span class=\"hljs-comment\">// Build the request</span>\n      .with(\n        queryParam(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;francesco&quot;</span>), <span class=\"hljs-comment\">// Add query param</span>\n        requestHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>) <span class=\"hljs-comment\">// Add request header</span>\n      )\n      .expect(\n        <span class=\"hljs-comment\">// Assert that response is a JSON with a specific body</span>\n        jsonBodyResponse(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;value&quot;</span>, <span class=\"hljs-string\">&quot;Hello Francesco!&quot;</span>)),\n        <span class=\"hljs-comment\">// Assert that response contains a particular header</span>\n        responseHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>)\n      )\n      .send(testContext); <span class=\"hljs-comment\">// Complete (or fail) the VertxTestContext</span>\n  }\n\n}\n</code></pre><p><code>testRequest()</code> will use Vert.x Web Client to send the re­quest. When the re­sponse is re­ceived, It suc­ceds the test or it cor­rectly prop­a­gates as­ser­tion fail­ures, if any.</p><p>You can also send mul­ti­ple re­quests using <a href=\"https://vertx.io/docs/apidocs/io/vertx/junit5/Checkpoint.html\"><code>Checkpoint</code></a>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> io.vertx.junit5.web.TestRequest.*;\n\n<span class=\"hljs-meta\">@ExtendWith({\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\n  VertxWebClientExtension.class\n})</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MultiTestRequestExample</span> </span>{\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">(WebClient client, VertxTestContext testContext)</span> </span>{\n    Checkpoint checkpoint = testContext.checkpoint(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// Create the Checkpoint to flag when request succeds</span>\n\n    testRequest(\n        client    <span class=\"hljs-comment\">// Create the test request using WebClient APIs</span>\n          .get(<span class=\"hljs-string\">&quot;/hello&quot;</span>)\n          .addQueryParam(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;francesco&quot;</span>)\n          .putHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>)\n      )\n      .expect(\n        jsonBodyResponse(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;value&quot;</span>, <span class=\"hljs-string\">&quot;Hello Francesco!&quot;</span>)),\n        responseHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>)\n      )\n      .send(testContext, checkpoint); <span class=\"hljs-comment\">// Pass the checkpoint to flag</span>\n\n    testRequest(\n        client\n          .get(<span class=\"hljs-string\">&quot;/hello&quot;</span>)\n          .addQueryParam(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;julien&quot;</span>)\n          .putHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>)\n      )\n      .expect(\n        jsonBodyResponse(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;value&quot;</span>, <span class=\"hljs-string\">&quot;Hello Julien!&quot;</span>)),\n        responseHeader(<span class=\"hljs-string\">&quot;x-my&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>)\n      )\n      .send(testContext, checkpoint);\n  }\n\n}\n</code></pre><p>Look at <a href=\"https://vertx.io/docs/vertx-junit5-web-client/java/\">Vert.x JUnit 5 Web Client doc­u­men­ta­tion</a> for more de­tails</p>","scope":{}},"tfIdfTerms":[{"term":"web","tf":3},{"term":"client","tf":3},{"term":"request","tf":3},{"term":"call","tf":2},{"term":"test","tf":2},{"term":"assert","tf":2},{"term":"us","tf":2},{"term":"send","tf":2},{"term":"last","tf":1},{"term":"releas","tf":1},{"term":"ad","tf":1},{"term":"new","tf":1},{"term":"modul","tf":1},{"term":"bring","tf":1},{"term":"inject","tf":1},{"term":"provid","tf":1},{"term":"api","tf":1},{"term":"simplifi","tf":1},{"term":"creation","tf":1},{"term":"will","tf":1},{"term":"respons","tf":1},{"term":"receiv","tf":1},{"term":"suc","tf":1},{"term":"correctli","tf":1},{"term":"propag","tf":1}]},{"filename":"blog/2018-12-13-vert-x-web-api-service-introduction.mdx","date":"2018-12-13","slug":"vert-x-web-api-service-introduction","meta":{"title":"Vert.x Web API Service Introduction","category":"guides","authors":[{"name":"Francesco Guardiani","github_id":"slinkydeveloper"}],"summary":"This blog post teaches you how to use the new module vertx-web-api-service to combine the Web Router and the OpenAPI Router Factory with service proxies."},"readingTime":{"text":"6 min read","minutes":5.555,"time":333299.99999999994,"words":1111},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.6 in\\xADtro\\xADduces a new mod\\xADule called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web-api-service\"), \". With the new Web API Ser\\xADvices you can eas\\xADily com\\xADbine the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web/java/\"\n  }), \"Vert.x Web Router\"), \" and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-contract/java/\"\n  }), \"Vert.x Ope\\xADnAPI Router Fac\\xADtory\"), \" fea\\xADtures with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-service-proxy/java/\"\n  }), \"Vert.x Ser\\xADvices on Event Bus\"), \".\"), mdx(\"h2\", {\n    \"id\": \"small-recap-on-openapi-and-vertx-web-api-contract\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#small-recap-on-openapi-and-vertx-web-api-contract\"\n  })), \"Small recap on OpenAPI and Vert.x Web API Contract\"), mdx(\"p\", null, \"Let\\u2019s start from this Ope\\xADnAPI de\\xADf\\xADi\\xADn\\xADi\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"openapi:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3.0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \".0\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"paths:\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"/api/transactions:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"get:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"operationId:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"getTransactionsList\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"description:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"Get\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactions\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"list\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"filtered\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"by\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"sender\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"x-vertx-event-bus:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactions_manager.myapp\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"parameters:\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"from\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"in:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"query\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"description:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"Matches\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"exactly\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"email\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"from\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"style:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"form\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"explode:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schema:\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"type:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"array\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"items:\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"type:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"string\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"responses:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"post:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"operationId:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"addTransaction\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"x-vertx-event-bus:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactions_manager.myapp\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"requestBody:\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"required:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"content:\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"application/json:\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schema:\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"$ref:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"#/components/schemas/Transaction\\\"\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"responses:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"/api/transactions/{transactionId}:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"parameters:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactionId\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"in:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"path\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"required:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schema:\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"type:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"string\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"put:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"operationId:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"updateTransaction\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"x-vertx-event-bus:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactions_manager.myapp\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"requestBody:\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"required:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"content:\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"application/json:\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schema:\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"$ref:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"#/components/schemas/Transaction\\\"\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"responses:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"delete:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"operationId:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"removeTransaction\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"x-vertx-event-bus:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"transactions_manager.myapp\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"responses:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"components:\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schemas:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"Transaction:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"Error:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"...\"), \"\\n\")), mdx(\"p\", null, \"We de\\xADfined \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getTransactionsList\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addTransaction\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateTransaction\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeTransaction\"), \" op\\xADer\\xADa\\xADtions. Now with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RouterFactory\"), \" we cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" that ac\\xADcepts this var\\xADi\\xADous op\\xADer\\xADa\\xADtion re\\xADquests:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"OpenAPI3RouterFactory.create(vertx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"src/main/resources/petstore.yaml\\\"\"), \", ar -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Spec loaded with success\"), \"\\n    OpenAPI3RouterFactory routerFactory = ar.result();\\n    routerFactory.addHandlerByOperationId(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"getTransactionsList\\\"\"), \", routingContext -> {\\n      RequestParameters params = routingContext.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"parsedParameters\\\"\"), \");\\n      RequestParameter from = params.queryParameter(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"from\\\"\"), \");\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// getTransactionsList business logic\"), \"\\n    });\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// add handlers for addTransaction, updateTransaction and removeTransaction\"), \"\\n    Router router = routerFactory.getRouter();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Something went wrong during router factory initialization\"), \"\\n    Throwable exception = ar.cause();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Log exception, fail verticle deployment ... etc\"), \"\\n  }\\n});\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RouterFactory\"), \" pro\\xADvides an easy way to cre\\xADate a spec\\xADi\\xADfi\\xADca\\xADtion com\\xADpli\\xADant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \", but it doesn\\u2019t pro\\xADvide a mech\\xADa\\xADnism to de\\xADcou\\xADple the busi\\xADness logic from your op\\xADer\\xADa\\xADtion han\\xADdlers.\"), mdx(\"p\", null, \"In a typ\\xADi\\xADcal Vert.x ap\\xADpli\\xADca\\xADtion, when you re\\xADceive a re\\xADquest to your router, you would for\\xADward it to an event bus end\\xADpoint that per\\xADforms some ac\\xADtions and sends the re\\xADsult back to the op\\xADer\\xADa\\xADtion han\\xADdler.\"), mdx(\"p\", null, \"Vert.x Web API Ser\\xADvice sim\\xADpli\\xADfies that in\\xADte\\xADgra\\xADtion be\\xADtween \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RouterFactory\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" with a new code gen\\xADer\\xADa\\xADtor. The final re\\xADsult is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"loose cou\\xADpling\"), \" be\\xADtween the Web Router logic and your busi\\xADness logic.\"), mdx(\"h2\", {\n    \"id\": \"lets-get-started-with-vertx-web-api-services\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-get-started-with-vertx-web-api-services\"\n  })), \"Let\\u2019s get started with Vert.x Web Api Services!\"), mdx(\"p\", null, \"To use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web-api-service\"), \" you need to add a cou\\xADple of de\\xADpen\\xADden\\xADcies to your project. In a Maven POM file that would be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-codegen\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.6.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"classifier\"), \">\"), \"processor\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"classifier\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web-api-service\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.6.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"We will pro\\xADceed in this order:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Model the ser\\xADvice in\\xADter\\xADface\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Rewrite it to work with Web Api Ser\\xADvices\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Im\\xADple\\xADment the ser\\xADvice\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Mount the ser\\xADvice on the event bus\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the router fac\\xADtory to build a router with han\\xADdlers that con\\xADnects to our event bus ser\\xADvices\")), mdx(\"h2\", {\n    \"id\": \"model-your-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#model-your-service\"\n  })), \"Model your service\"), mdx(\"p\", null, \"Let\\u2019s say that we want to model a ser\\xADvice that man\\xADages all op\\xADer\\xADa\\xADtions re\\xADgard\\xADing CRUD trans\\xADac\\xADtions. An ex\\xADam\\xADple in\\xADter\\xADface for this asyn\\xADchro\\xADnous ser\\xADvice could be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"interface\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionsManagerService\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getTransactionsList\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(List<String> from, Handler<AsyncResult<List<Transaction>>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"addTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Transaction transaction, Handler<AsyncResult<Transaction>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"updateTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String transactionId, Transaction transaction, Handler<AsyncResult<Transaction>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"removeTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String transactionId, Handler<AsyncResult<Integer>> resultHandler)\")), \";\\n}\\n\")), mdx(\"p\", null, \"For each op\\xADer\\xADa\\xADtion, we have some pa\\xADra\\xADme\\xADters, de\\xADpend\\xADing on the op\\xADer\\xADa\\xADtion, and a call\\xADback (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resultHandler\"), \") that should be called when the op\\xADer\\xADa\\xADtion suc\\xADceeds or fails.\"), mdx(\"p\", null, \"With \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-service-proxy/java/\"\n  }), \"Vert.x Ser\\xADvice Proxy\"), \", you can de\\xADfine an event bus ser\\xADvice with a Java in\\xADter\\xADface sim\\xADi\\xADlar to the one we just saw and then an\\xADno\\xADtate it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@ProxyGen\"), \". This an\\xADno\\xADta\\xADtion will gen\\xADer\\xADate a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ser\\xADvice han\\xADdler\"), \" for the de\\xADfined ser\\xADvice that can be plugged to the event bus with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceBinder\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web-api-service\"), \" works in a very sim\\xADi\\xADlar way: you need to an\\xADno\\xADtate the Java in\\xADter\\xADface with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@WebApiServiceGen\"), \" and it will gen\\xADer\\xADate the ser\\xADvice han\\xADdler for the event bus.\"), mdx(\"p\", null, \"Let\\u2019s rewrite the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransactionsManagerService\"), \" to work with Web API Ser\\xADvice:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.web.api.*;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.web.api.generator.WebApiServiceGen;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@WebApiServiceGen\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"interface\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionsManagerService\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getTransactionsList\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"addTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"updateTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String transactionId, Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"removeTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String transactionId, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Factory method to instantiate the implementation\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" TransactionsManagerService \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"create\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Vertx vertx)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" TransactionsManagerServiceImpl(vertx);\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"First of all, look at the an\\xADno\\xADta\\xADtion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@WebApiServiceGen\"), \". This an\\xADno\\xADta\\xADtion will trig\\xADger the code gen\\xADer\\xADa\\xADtor that gen\\xADer\\xADates the event bus han\\xADdler for this ser\\xADvice. Each method has the same two last pa\\xADra\\xADme\\xADters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OperationRequest context\"), \": this data ob\\xADject con\\xADtains the head\\xADers and the pa\\xADra\\xADme\\xADters of the HTTP re\\xADquest\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Handler<AsyncResult<OperationResponse>> resultHandler\"), \": this call\\xADback ac\\xADcepts an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OperationResponse\"), \" data ob\\xADject that will en\\xADcap\\xADsu\\xADlate the body of the re\\xADsult, the sta\\xADtus code, the sta\\xADtus mes\\xADsage and the head\\xADers\")), mdx(\"p\", null, \"The gen\\xADer\\xADated han\\xADdler re\\xADceives only the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OperationRequest\"), \" data ob\\xADject and ex\\xADtracts from it all op\\xADer\\xADa\\xADtion pa\\xADra\\xADme\\xADters. For ex\\xADam\\xADple, when the router re\\xADceives a re\\xADquest at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getTransactionsList\"), \", it sends to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TransactionsManagerService\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OperationRequest\"), \" con\\xADtain\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RequestParameters\"), \" map. From this map, the ser\\xADvice gen\\xADer\\xADated han\\xADdler ex\\xADtracts the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from\"), \" pa\\xADra\\xADme\\xADter. \"), mdx(\"p\", null, \"There\\xADfore \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"op\\xADer\\xADa\\xADtion pa\\xADra\\xADme\\xADters names should match method pa\\xADra\\xADme\\xADter names\"), \".\"), mdx(\"p\", null, \"When you want to ex\\xADtract the body you must use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" key\\xADword. For more de\\xADtails, please refer to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-service/java/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion\"), \".\"), mdx(\"h2\", {\n    \"id\": \"implement-the-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implement-the-service\"\n  })), \"Implement the service\"), mdx(\"p\", null, \"Now that you have your in\\xADter\\xADface, you can im\\xADple\\xADment the ser\\xADvice:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionsManagerServiceImpl\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"implements\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionsManagerService\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Vertx vertx;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionsManagerServiceImpl\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Vertx vertx)\"), \" \"), \"{  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".vertx = vertx;  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getTransactionsList\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Write your business logic here\"), \"\\n    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Implement other operations\"), \"\\n\\n}\\n\")), mdx(\"p\", null, \"Check the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OperationResult\"), \" doc\\xADu\\xADmen\\xADta\\xADtion to look at var\\xADi\\xADous handy meth\\xADods to cre\\xADate a com\\xADplete re\\xADsponse.\"), mdx(\"h2\", {\n    \"id\": \"mount-the-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#mount-the-service\"\n  })), \"Mount the Service\"), mdx(\"p\", null, \"Now that you have your ser\\xADvice in\\xADter\\xADface and im\\xADple\\xADmen\\xADta\\xADtion, you can mount your ser\\xADvice with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ServiceBinder\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ServiceBinder serviceBinder = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ServiceBinder(vertx);\\n\\nTransactionsManagerService transactionsManagerService = TransactionsManagerService.create(vertx);\\nregisteredConsumers.add(\\n  serviceBinder\\n    .setAddress(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"transactions_manager.myapp\\\"\"), \")\\n    .register(TransactionsManagerService.class, transactionsManagerService)\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"and-the-router-factory\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#and-the-router-factory\"\n  })), \"And the Router Factory?\"), mdx(\"p\", null, \"The ser\\xADvice is up and run\\xADning, but we need to con\\xADnect it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" built by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RouterFactory\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"OpenAPI3RouterFactory.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".vertx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my_spec.yaml\\\"\"), \", openAPI3RouterFactoryAsyncResult -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (openAPI3RouterFactoryAsyncResult.succeeded()) {\\n    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Mount services on event bus based on extensions\"), \"\\n    routerFactory.mountServicesFromExtensions(); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <- Pure magic happens!\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Generate the router\"), \"\\n    Router router = routerFactory.getRouter();\\n    server = vertx.createHttpServer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" HttpServerOptions().setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"));\\n    server.requestHandler(router).listen();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Initialization completed\"), \"\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Something went wrong during router factory initialization\"), \"\\n  }\\n});\\n\")), mdx(\"p\", null, \"In our spec ex\\xADam\\xADple we added an ex\\xADten\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-vertx-event-bus\"), \" to each op\\xADer\\xADa\\xADtion that spec\\xADi\\xADfies the ad\\xADdress of the ser\\xADvice. Using this ex\\xADten\\xADsion, you only need to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RouterFactory.mountServicesFromExtensions()\"), \" to trig\\xADger a scan of all op\\xADer\\xADa\\xADtions and mount all found ser\\xADvice ad\\xADdresses. For each op\\xADer\\xADa\\xADtion that con\\xADtains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-vertx-event-bus\"), \", the Router Fac\\xADtory in\\xADstan\\xADti\\xADates an han\\xADdler that routes the in\\xADcom\\xADing re\\xADquests to the ad\\xADdress you spec\\xADi\\xADfied.\"), mdx(\"p\", null, \"This is one of the meth\\xADods you can use to match ser\\xADvices with router op\\xADer\\xADa\\xADtion han\\xADdlers. Check the doc\\xADu\\xADmen\\xADta\\xADtion for all de\\xADtails.\"), mdx(\"h2\", {\n    \"id\": \"more-examples\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#more-examples\"\n  })), \"More examples\"), mdx(\"p\", null, \"Check out the com\\xADplete ex\\xADam\\xADple in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/master/web-api-service-example\"\n  }), \"vertx-\\u200Bexamples repo\"), \".\"), mdx(\"p\", null, \"Thanks you for your time, stay tuned for more up\\xADdates! And please pro\\xADvide feed\\xADback about this new pack\\xADage!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.6 in­tro­duces a new mod­ule called <code>vertx-web-api-service</code>. With the new Web API Ser­vices you can eas­ily com­bine the <a href=\"https://vertx.io/docs/vertx-web/java/\">Vert.x Web Router</a> and the <a href=\"https://vertx.io/docs/vertx-web-api-contract/java/\">Vert.x Ope­nAPI Router Fac­tory</a> fea­tures with <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Vert.x Ser­vices on Event Bus</a>.</p><h2 id=\"small-recap-on-openapi-and-vertx-web-api-contract\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#small-recap-on-openapi-and-vertx-web-api-contract\"></a>Small recap on OpenAPI and Vert.x Web API Contract</h2><p>Let’s start from this Ope­nAPI de­f­i­n­i­tion:</p><pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">openapi:</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-attr\">paths:</span>\n  <span class=\"hljs-string\">/api/transactions:</span>\n    <span class=\"hljs-attr\">get:</span>\n      <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">getTransactionsList</span>\n      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Get</span> <span class=\"hljs-string\">transactions</span> <span class=\"hljs-string\">list</span> <span class=\"hljs-string\">filtered</span> <span class=\"hljs-string\">by</span> <span class=\"hljs-string\">sender</span>\n      <span class=\"hljs-attr\">x-vertx-event-bus:</span> <span class=\"hljs-string\">transactions_manager.myapp</span>\n      <span class=\"hljs-attr\">parameters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">from</span>\n          <span class=\"hljs-attr\">in:</span> <span class=\"hljs-string\">query</span>\n          <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Matches</span> <span class=\"hljs-string\">exactly</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">email</span> <span class=\"hljs-string\">from</span>\n          <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">form</span>\n          <span class=\"hljs-attr\">explode:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">schema:</span>\n            <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">array</span>\n            <span class=\"hljs-attr\">items:</span>\n              <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n      <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-attr\">post:</span>\n      <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">addTransaction</span>\n      <span class=\"hljs-attr\">x-vertx-event-bus:</span> <span class=\"hljs-string\">transactions_manager.myapp</span>\n      <span class=\"hljs-attr\">requestBody:</span>\n        <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">content:</span>\n          <span class=\"hljs-attr\">application/json:</span>\n            <span class=\"hljs-attr\">schema:</span>\n              <span class=\"hljs-string\">$ref:</span> <span class=\"hljs-string\">&quot;#/components/schemas/Transaction&quot;</span>\n      <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n  <span class=\"hljs-string\">/api/transactions/{transactionId}:</span>\n    <span class=\"hljs-attr\">parameters:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">transactionId</span>\n        <span class=\"hljs-attr\">in:</span> <span class=\"hljs-string\">path</span>\n        <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">schema:</span>\n          <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n    <span class=\"hljs-attr\">put:</span>\n      <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">updateTransaction</span>\n      <span class=\"hljs-attr\">x-vertx-event-bus:</span> <span class=\"hljs-string\">transactions_manager.myapp</span>\n      <span class=\"hljs-attr\">requestBody:</span>\n        <span class=\"hljs-attr\">required:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">content:</span>\n          <span class=\"hljs-attr\">application/json:</span>\n            <span class=\"hljs-attr\">schema:</span>\n              <span class=\"hljs-string\">$ref:</span> <span class=\"hljs-string\">&quot;#/components/schemas/Transaction&quot;</span>\n      <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-attr\">delete:</span>\n      <span class=\"hljs-attr\">operationId:</span> <span class=\"hljs-string\">removeTransaction</span>\n      <span class=\"hljs-attr\">x-vertx-event-bus:</span> <span class=\"hljs-string\">transactions_manager.myapp</span>\n      <span class=\"hljs-attr\">responses:</span> <span class=\"hljs-string\">...</span>\n<span class=\"hljs-attr\">components:</span>\n  <span class=\"hljs-attr\">schemas:</span>\n    <span class=\"hljs-attr\">Transaction:</span> <span class=\"hljs-string\">...</span>\n    <span class=\"hljs-attr\">Error:</span> <span class=\"hljs-string\">...</span>\n</code></pre><p>We de­fined <code>getTransactionsList</code>, <code>addTransaction</code>, <code>updateTransaction</code> and <code>removeTransaction</code> op­er­a­tions. Now with <code>OpenAPI3RouterFactory</code> we cre­ate a <code>Router</code> that ac­cepts this var­i­ous op­er­a­tion re­quests:</p><pre><code class=\"hljs language-java\">OpenAPI3RouterFactory.create(vertx, <span class=\"hljs-string\">&quot;src/main/resources/petstore.yaml&quot;</span>, ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-comment\">// Spec loaded with success</span>\n    OpenAPI3RouterFactory routerFactory = ar.result();\n    routerFactory.addHandlerByOperationId(<span class=\"hljs-string\">&quot;getTransactionsList&quot;</span>, routingContext -&gt; {\n      RequestParameters params = routingContext.get(<span class=\"hljs-string\">&quot;parsedParameters&quot;</span>);\n      RequestParameter from = params.queryParameter(<span class=\"hljs-string\">&quot;from&quot;</span>);\n      <span class=\"hljs-comment\">// getTransactionsList business logic</span>\n    });\n    <span class=\"hljs-comment\">// add handlers for addTransaction, updateTransaction and removeTransaction</span>\n    Router router = routerFactory.getRouter();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Something went wrong during router factory initialization</span>\n    Throwable exception = ar.cause();\n    <span class=\"hljs-comment\">// Log exception, fail verticle deployment ... etc</span>\n  }\n});\n</code></pre><p>The <code>OpenAPI3RouterFactory</code> pro­vides an easy way to cre­ate a spec­i­fi­ca­tion com­pli­ant <code>Router</code>, but it doesn’t pro­vide a mech­a­nism to de­cou­ple the busi­ness logic from your op­er­a­tion han­dlers.</p><p>In a typ­i­cal Vert.x ap­pli­ca­tion, when you re­ceive a re­quest to your router, you would for­ward it to an event bus end­point that per­forms some ac­tions and sends the re­sult back to the op­er­a­tion han­dler.</p><p>Vert.x Web API Ser­vice sim­pli­fies that in­te­gra­tion be­tween <code>RouterFactory</code> and <code>EventBus</code> with a new code gen­er­a­tor. The final re­sult is a <em>loose cou­pling</em> be­tween the Web Router logic and your busi­ness logic.</p><h2 id=\"lets-get-started-with-vertx-web-api-services\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-get-started-with-vertx-web-api-services\"></a>Let’s get started with Vert.x Web Api Services!</h2><p>To use <code>vertx-web-api-service</code> you need to add a cou­ple of de­pen­den­cies to your project. In a Maven POM file that would be:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-codegen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.6.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">classifier</span>&gt;</span>processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">classifier</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-api-service<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.6.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>We will pro­ceed in this order:</p><ol><li>Model the ser­vice in­ter­face</li><li>Rewrite it to work with Web Api Ser­vices</li><li>Im­ple­ment the ser­vice</li><li>Mount the ser­vice on the event bus</li><li>Use the router fac­tory to build a router with han­dlers that con­nects to our event bus ser­vices</li></ol><h2 id=\"model-your-service\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#model-your-service\"></a>Model your service</h2><p>Let’s say that we want to model a ser­vice that man­ages all op­er­a­tions re­gard­ing CRUD trans­ac­tions. An ex­am­ple in­ter­face for this asyn­chro­nous ser­vice could be:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TransactionsManagerService</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(List&lt;String&gt; from, Handler&lt;AsyncResult&lt;List&lt;Transaction&gt;&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addTransaction</span><span class=\"hljs-params\">(Transaction transaction, Handler&lt;AsyncResult&lt;Transaction&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateTransaction</span><span class=\"hljs-params\">(String transactionId, Transaction transaction, Handler&lt;AsyncResult&lt;Transaction&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeTransaction</span><span class=\"hljs-params\">(String transactionId, Handler&lt;AsyncResult&lt;Integer&gt;&gt; resultHandler)</span></span>;\n}\n</code></pre><p>For each op­er­a­tion, we have some pa­ra­me­ters, de­pend­ing on the op­er­a­tion, and a call­back (<code>resultHandler</code>) that should be called when the op­er­a­tion suc­ceeds or fails.</p><p>With <a href=\"https://vertx.io/docs/vertx-service-proxy/java/\">Vert.x Ser­vice Proxy</a>, you can de­fine an event bus ser­vice with a Java in­ter­face sim­i­lar to the one we just saw and then an­no­tate it with <code>@ProxyGen</code>. This an­no­ta­tion will gen­er­ate a <em>ser­vice han­dler</em> for the de­fined ser­vice that can be plugged to the event bus with <code>ServiceBinder</code>. <code>vertx-web-api-service</code> works in a very sim­i­lar way: you need to an­no­tate the Java in­ter­face with <code>@WebApiServiceGen</code> and it will gen­er­ate the ser­vice han­dler for the event bus.</p><p>Let’s rewrite the <code>TransactionsManagerService</code> to work with Web API Ser­vice:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> io.vertx.ext.web.api.*;\n<span class=\"hljs-keyword\">import</span> io.vertx.ext.web.api.generator.WebApiServiceGen;\n\n<span class=\"hljs-meta\">@WebApiServiceGen</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TransactionsManagerService</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(List&lt;String&gt; from, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addTransaction</span><span class=\"hljs-params\">(Transaction body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateTransaction</span><span class=\"hljs-params\">(String transactionId, Transaction body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeTransaction</span><span class=\"hljs-params\">(String transactionId, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n\n  <span class=\"hljs-comment\">// Factory method to instantiate the implementation</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> TransactionsManagerService <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Vertx vertx)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TransactionsManagerServiceImpl(vertx);\n  }\n}\n\n</code></pre><p>First of all, look at the an­no­ta­tion <code>@WebApiServiceGen</code>. This an­no­ta­tion will trig­ger the code gen­er­a­tor that gen­er­ates the event bus han­dler for this ser­vice. Each method has the same two last pa­ra­me­ters:</p><ul><li><code>OperationRequest context</code>: this data ob­ject con­tains the head­ers and the pa­ra­me­ters of the HTTP re­quest</li><li><code>Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler</code>: this call­back ac­cepts an <code>OperationResponse</code> data ob­ject that will en­cap­su­late the body of the re­sult, the sta­tus code, the sta­tus mes­sage and the head­ers</li></ul><p>The gen­er­ated han­dler re­ceives only the <code>OperationRequest</code> data ob­ject and ex­tracts from it all op­er­a­tion pa­ra­me­ters. For ex­am­ple, when the router re­ceives a re­quest at <code>getTransactionsList</code>, it sends to <code>TransactionsManagerService</code> the <code>OperationRequest</code> con­tain­ing the <code>RequestParameters</code> map. From this map, the ser­vice gen­er­ated han­dler ex­tracts the <code>from</code> pa­ra­me­ter. </p><p>There­fore <strong>op­er­a­tion pa­ra­me­ters names should match method pa­ra­me­ter names</strong>.</p><p>When you want to ex­tract the body you must use <code>body</code> key­word. For more de­tails, please refer to the <a href=\"https://vertx.io/docs/vertx-web-api-service/java/\">doc­u­men­ta­tion</a>.</p><h2 id=\"implement-the-service\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implement-the-service\"></a>Implement the service</h2><p>Now that you have your in­ter­face, you can im­ple­ment the ser­vice:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TransactionsManagerServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">TransactionsManagerService</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> Vertx vertx;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">TransactionsManagerServiceImpl</span><span class=\"hljs-params\">(Vertx vertx)</span> </span>{  <span class=\"hljs-keyword\">this</span>.vertx = vertx;  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(List&lt;String&gt; from, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>{\n    <span class=\"hljs-comment\">// Write your business logic here</span>\n    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));\n  }\n\n  <span class=\"hljs-comment\">// Implement other operations</span>\n\n}\n</code></pre><p>Check the <code>OperationResult</code> doc­u­men­ta­tion to look at var­i­ous handy meth­ods to cre­ate a com­plete re­sponse.</p><h2 id=\"mount-the-service\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#mount-the-service\"></a>Mount the Service</h2><p>Now that you have your ser­vice in­ter­face and im­ple­men­ta­tion, you can mount your ser­vice with <code>ServiceBinder</code>:</p><pre><code class=\"hljs language-java\">ServiceBinder serviceBinder = <span class=\"hljs-keyword\">new</span> ServiceBinder(vertx);\n\nTransactionsManagerService transactionsManagerService = TransactionsManagerService.create(vertx);\nregisteredConsumers.add(\n  serviceBinder\n    .setAddress(<span class=\"hljs-string\">&quot;transactions_manager.myapp&quot;</span>)\n    .register(TransactionsManagerService.class, transactionsManagerService)\n);\n</code></pre><h2 id=\"and-the-router-factory\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#and-the-router-factory\"></a>And the Router Factory?</h2><p>The ser­vice is up and run­ning, but we need to con­nect it to the <code>Router</code> built by <code>OpenAPI3RouterFactory</code>:</p><pre><code class=\"hljs language-java\">OpenAPI3RouterFactory.create(<span class=\"hljs-keyword\">this</span>.vertx, <span class=\"hljs-string\">&quot;my_spec.yaml&quot;</span>, openAPI3RouterFactoryAsyncResult -&gt; {\n  <span class=\"hljs-keyword\">if</span> (openAPI3RouterFactoryAsyncResult.succeeded()) {\n    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();\n    <span class=\"hljs-comment\">// Mount services on event bus based on extensions</span>\n    routerFactory.mountServicesFromExtensions(); <span class=\"hljs-comment\">// &lt;- Pure magic happens!</span>\n    <span class=\"hljs-comment\">// Generate the router</span>\n    Router router = routerFactory.getRouter();\n    server = vertx.createHttpServer(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8080</span>));\n    server.requestHandler(router).listen();\n    <span class=\"hljs-comment\">// Initialization completed</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Something went wrong during router factory initialization</span>\n  }\n});\n</code></pre><p>In our spec ex­am­ple we added an ex­ten­sion <code>x-vertx-event-bus</code> to each op­er­a­tion that spec­i­fies the ad­dress of the ser­vice. Using this ex­ten­sion, you only need to call <code>OpenAPI3RouterFactory.mountServicesFromExtensions()</code> to trig­ger a scan of all op­er­a­tions and mount all found ser­vice ad­dresses. For each op­er­a­tion that con­tains <code>x-vertx-event-bus</code>, the Router Fac­tory in­stan­ti­ates an han­dler that routes the in­com­ing re­quests to the ad­dress you spec­i­fied.</p><p>This is one of the meth­ods you can use to match ser­vices with router op­er­a­tion han­dlers. Check the doc­u­men­ta­tion for all de­tails.</p><h2 id=\"more-examples\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#more-examples\"></a>More examples</h2><p>Check out the com­plete ex­am­ple in <a href=\"https://github.com/vert-x3/vertx-examples/tree/master/web-api-service-example\">vertx-​examples repo</a>.</p><p>Thanks you for your time, stay tuned for more up­dates! And please pro­vide feed­back about this new pack­age!</p>","scope":{}},"tfIdfTerms":[{"term":"servic","tf":29},{"term":"oper","tf":14},{"term":"router","tf":10},{"term":"handler","tf":10},{"term":"web","tf":8},{"term":"event","tf":8},{"term":"bu","tf":8},{"term":"gener","tf":7},{"term":"paramet","tf":7},{"term":"api","tf":6},{"term":"interfac","tf":6},{"term":"exampl","tf":6},{"term":"request","tf":5},{"term":"us","tf":5},{"term":"will","tf":5},{"term":"annot","tf":5},{"term":"new","tf":4},{"term":"factori","tf":4},{"term":"let","tf":4},{"term":"need","tf":4},{"term":"implement","tf":4},{"term":"mount","tf":4},{"term":"method","tf":4},{"term":"call","tf":3},{"term":"openapi","tf":3}]},{"filename":"blog/2018-12-10-http-response-validation-with-the-vert-x-web-client.mdx","date":"2018-12-10","slug":"http-response-validation-with-the-vert-x-web-client","meta":{"title":"HTTP response validation with the Vert.x Web Client","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"Learn how to use response predicates from the Vert.x Web module to validate HTTP responses and to automatically generate error messages."},"readingTime":{"text":"4 min read","minutes":3.09,"time":185399.99999999997,"words":618},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By de\\xADfault, a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/vertx-web-client/java/\"\n  }), \"Vert.x Web Client\"), \" re\\xADquest ends with an error only if some\\xADthing wrong hap\\xADpens at the net\\xADwork level.\\nIn other words, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"404 Not Found\"), \" re\\xADsponse, or a re\\xADsponse with the wrong con\\xADtent type, are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" con\\xADsid\\xADered as fail\\xADures.\"), mdx(\"p\", null, \"Hence, you would usu\\xADally per\\xADform san\\xADity checks man\\xADu\\xADally after the re\\xADsponse is re\\xADceived:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"response.statusCode\"), \"() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \" && response.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \").equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n        // Decode the body as a json object\\n        JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      } else {\\n        System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + response.statusCode())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      }\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Start\\xADing with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/eclipse-vert-x-3-6-0-released/\"\n  }), \"Vert.x 3.6\"), \", you can can trade flex\\xADi\\xADbil\\xADity for clar\\xADity and con\\xADcise\\xADness using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsponse pred\\xADi\\xADcates\"), \".\"), mdx(\"h2\", {\n    \"id\": \"response-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#response-predicates\"\n  })), \"Response predicates\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"\n  }), \"Re\\xADsponse pred\\xADi\\xADcates\"), \" can fail a re\\xADquest when the re\\xADsponse does not match cri\\xADte\\xADrion.\"), mdx(\"p\", null, \"The Web Client mod\\xADule comes with a set of ready-\\u200Bto-use pred\\xADi\\xADcates:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.JSON\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      // Safely decode the body as a json object\\n      JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n\")), mdx(\"p\", null, \"The web is full of HTTP/JSON end\\xADpoints, so there is no doubt the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.SC_SUCCESS\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.JSON\"), \" can be handy.\"), mdx(\"p\", null, \"Nev\\xADer\\xADthe\\xADless, you might also need to check that the sta\\xADtus code is whithin a spe\\xADcific range:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scheme\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.status\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"200\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"202\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Or that the con\\xADtent is of a spe\\xADcific type: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.contentType\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some/content-type\\\"\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Please refer to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ResponsePredicate\"), \" doc\\xADu\\xADmen\\xADta\\xADtion\"), \" for a full list of pre\\xADde\\xADfined pred\\xADi\\xADcates.\"), mdx(\"h3\", {\n    \"id\": \"custom-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#custom-predicates\"\n  })), \"Custom predicates\"), mdx(\"p\", null, \"Even\\xADtu\\xADally, pred\\xADi\\xADcates were not de\\xADsigned for sta\\xADtus code and con\\xADtent type check\\xADing only, so feel free to cre\\xADate your own val\\xADi\\xADda\\xADtion code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"// Check CORS header allowing to do POST\\nFunction<HttpResponse<Void>, ResponsePredicateResult> methodsPredicate = resp -> {\\n  String methods = resp.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Allow-Methods\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n  if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods\"), \" != null) {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods.contains\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")) {\\n      return ResponsePredicateResult.success()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  }\\n  return ResponsePredicateResult.failure(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Does not work\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n}\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n// Send pre-flight CORS request\\nclient\\n  .request(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"HttpMethod.OPTIONS\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Origin\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server-b.com\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Request-Method\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methodsPredicate\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      // Process the POST request now\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Note that re\\xADsponse pred\\xADi\\xADcates are eval\\xADu\\xADated \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"be\\xADfore\"), \" the re\\xADsponse body is re\\xADceived.\\nThere\\xADfore \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you can\\u2019t in\\xADspect the re\\xADsponse body\"), \" in a pred\\xADi\\xADcate test func\\xADtion, only sta\\xADtus code, sta\\xADtus mes\\xADsage and re\\xADsponse head\\xADers.\"), mdx(\"h2\", {\n    \"id\": \"dealing-with-failures\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dealing-with-failures\"\n  })), \"Dealing with failures\"), mdx(\"p\", null, \"By de\\xADfault, re\\xADsponse pred\\xADi\\xADcates (in\\xADclud\\xADing the pre\\xADde\\xADfined ones) use a generic error con\\xADverter which dis\\xADcards the re\\xADsponse body and con\\xADveys a sim\\xADple mes\\xADsage.\\nYou can cus\\xADtomize the ex\\xADcep\\xADtion class by chang\\xADing the error con\\xADverter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"ResponsePredicate predicate = ResponsePredicate.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \", result -> {\\n  return new MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"result.message\"), \"())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n})\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Be\\xADware that cre\\xADat\\xADing ex\\xADcep\\xADtions in Java comes with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"per\\xADfor\\xADmance cost\"), \" of cap\\xADtur\\xADing the call stack.\\nThe generic error con\\xADverter gen\\xADer\\xADates ex\\xADcep\\xADtions that do not cap\\xADture it.\"), mdx(\"h3\", {\n    \"id\": \"reading-details-in-error-responses\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#reading-details-in-error-responses\"\n  })), \"Reading details in error responses\"), mdx(\"p\", null, \"Many web APIs pro\\xADvide de\\xADtails in error re\\xADsponses.\\nFor ex\\xADam\\xADple, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.marvel.com/docs\"\n  }), \"Mar\\xADvel API\"), \" uses this JSON ob\\xADject for\\xADmat:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"code\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"InvalidCredentials\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"message\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The passed API key is invalid.\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"To avoid los\\xADing this in\\xADfor\\xADma\\xADtion, it is pos\\xADsi\\xADble to wait for the re\\xADsponse body to be fully re\\xADceived be\\xADfore the error con\\xADverter is called:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"ErrorConverter converter = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ErrorConverter\"), \".\")), \"create\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"FullBody(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" Invoked \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"after\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"is\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"fully\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"received\"), \"\\n  HttpResponse<Buffer> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" = \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \"()\"), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Header(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \")\"), \".equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Error body is JSON data\"), \"\\n    JsonObject body = response.body\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"AsJsonObject()\"), \";\\n    return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"getString\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"code\\\"\"), \")\"), \", body.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"String(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \")\"), \");\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Fallback to defaut message\"), \"\\n  return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"message\"), \"()\"), \");\\n});\\n\\nResponsePredicate predicate = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ResponsePredicate\"), \".\")), \"create(ResponsePredicate.SC_SUCCESS, converter);\\n\")), mdx(\"p\", null, \"That\\u2019s it! Feel free to com\\xADment here or ask ques\\xADtions on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/community\"\n  }), \"com\\xADmu\\xADnity chan\\xADnels\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>By de­fault, a <a href=\"/docs/vertx-web-client/java/\">Vert.x Web Client</a> re­quest ends with an error only if some­thing wrong hap­pens at the net­work level.\nIn other words, a <code>404 Not Found</code> re­sponse, or a re­sponse with the wrong con­tent type, are <strong>not</strong> con­sid­ered as fail­ures.</p><p>Hence, you would usu­ally per­form san­ity checks man­u­ally after the re­sponse is re­ceived:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      if (<span class=\"hljs-name\">response.statusCode</span>() == <span class=\"hljs-number\">200</span> &amp;&amp; response.getHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>).equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n        // Decode the body as a json object\n        JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n      } else {\n        System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + response.statusCode())<span class=\"hljs-comment\">;</span>\n      }\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Start­ing with <a href=\"/blog/eclipse-vert-x-3-6-0-released/\">Vert.x 3.6</a>, you can can trade flex­i­bil­ity for clar­ity and con­cise­ness using <em>re­sponse pred­i­cates</em>.</p><h2 id=\"response-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#response-predicates\"></a>Response predicates</h2><p><a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\">Re­sponse pred­i­cates</a> can fail a re­quest when the re­sponse does not match cri­te­rion.</p><p>The Web Client mod­ule comes with a set of ready-​to-use pred­i­cates:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.JSON</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      // Safely decode the body as a json object\n      JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n\n</code></pre><p>The web is full of HTTP/JSON end­points, so there is no doubt the <code>ResponsePredicate.SC_SUCCESS</code> and <code>ResponsePredicate.JSON</code> can be handy.</p><p>Nev­er­the­less, you might also need to check that the sta­tus code is whithin a spe­cific range:</p><pre><code class=\"hljs language-scheme\">client\n  .get(<span class=\"hljs-name\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.status</span>(<span class=\"hljs-name\">200</span>, <span class=\"hljs-number\">202</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Or that the con­tent is of a spe­cific type: </p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.contentType</span>(<span class=\"hljs-string\">&quot;some/content-type&quot;</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Please refer to the <a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"><code>ResponsePredicate</code> doc­u­men­ta­tion</a> for a full list of pre­de­fined pred­i­cates.</p><h3 id=\"custom-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#custom-predicates\"></a>Custom predicates</h3><p>Even­tu­ally, pred­i­cates were not de­signed for sta­tus code and con­tent type check­ing only, so feel free to cre­ate your own val­i­da­tion code:</p><pre><code class=\"hljs language-clojure\">// Check CORS header allowing to do POST\nFunction&lt;HttpResponse&lt;Void&gt;, ResponsePredicateResult&gt; methodsPredicate = resp -&gt; {\n  String methods = resp.getHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>)<span class=\"hljs-comment\">;</span>\n  if (<span class=\"hljs-name\">methods</span> != null) {\n    if (<span class=\"hljs-name\">methods.contains</span>(<span class=\"hljs-string\">&quot;POST&quot;</span>)) {\n      return ResponsePredicateResult.success()<span class=\"hljs-comment\">;</span>\n    }\n  }\n  return ResponsePredicateResult.failure(<span class=\"hljs-string\">&quot;Does not work&quot;</span>)<span class=\"hljs-comment\">;</span>\n}<span class=\"hljs-comment\">;</span>\n\n// Send pre-flight CORS request\nclient\n  .request(<span class=\"hljs-name\">HttpMethod.OPTIONS</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Origin&quot;</span>, <span class=\"hljs-string\">&quot;Server-b.com&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Access-Control-Request-Method&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>)\n  .expect(<span class=\"hljs-name\">methodsPredicate</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      // Process the POST request now\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Note that re­sponse pred­i­cates are eval­u­ated <em>be­fore</em> the re­sponse body is re­ceived.\nThere­fore <strong>you can’t in­spect the re­sponse body</strong> in a pred­i­cate test func­tion, only sta­tus code, sta­tus mes­sage and re­sponse head­ers.</p><h2 id=\"dealing-with-failures\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dealing-with-failures\"></a>Dealing with failures</h2><p>By de­fault, re­sponse pred­i­cates (in­clud­ing the pre­de­fined ones) use a generic error con­verter which dis­cards the re­sponse body and con­veys a sim­ple mes­sage.\nYou can cus­tomize the ex­cep­tion class by chang­ing the error con­verter:</p><pre><code class=\"hljs language-clojure\">ResponsePredicate predicate = ResponsePredicate.create(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>, result -&gt; {\n  return new MyCustomException(<span class=\"hljs-name\">result.message</span>())<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span>\n</code></pre><p>Be­ware that cre­at­ing ex­cep­tions in Java comes with the <strong>per­for­mance cost</strong> of cap­tur­ing the call stack.\nThe generic error con­verter gen­er­ates ex­cep­tions that do not cap­ture it.</p><h3 id=\"reading-details-in-error-responses\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#reading-details-in-error-responses\"></a>Reading details in error responses</h3><p>Many web APIs pro­vide de­tails in error re­sponses.\nFor ex­am­ple, the <a href=\"https://developer.marvel.com/docs\">Mar­vel API</a> uses this JSON ob­ject for­mat:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;InvalidCredentials&quot;</span>,\n  <span class=\"hljs-attr\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;The passed API key is invalid.&quot;</span>\n}\n</code></pre><p>To avoid los­ing this in­for­ma­tion, it is pos­si­ble to wait for the re­sponse body to be fully re­ceived be­fore the error con­verter is called:</p><pre><code class=\"hljs language-reasonml\">ErrorConverter converter = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorConverter</span>.</span></span>create<span class=\"hljs-constructor\">FullBody(<span class=\"hljs-params\">result</span> -&gt; {\n\n  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> Invoked <span class=\"hljs-params\">after</span> <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">response</span> <span class=\"hljs-params\">body</span> <span class=\"hljs-params\">is</span> <span class=\"hljs-params\">fully</span> <span class=\"hljs-params\">received</span>\n  HttpResponse&lt;Buffer&gt; <span class=\"hljs-params\">response</span> = <span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">response</span>()</span>;\n\n  <span class=\"hljs-keyword\">if</span> (response.get<span class=\"hljs-constructor\">Header(<span class=\"hljs-string\">&quot;content-type&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n    <span class=\"hljs-comment\">// Error body is JSON data</span>\n    JsonObject body = response.body<span class=\"hljs-constructor\">AsJsonObject()</span>;\n    return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">body</span>.<span class=\"hljs-params\">getString</span>(<span class=\"hljs-string\">&quot;code&quot;</span>)</span>, body.get<span class=\"hljs-constructor\">String(<span class=\"hljs-string\">&quot;message&quot;</span>)</span>);\n  }\n\n  <span class=\"hljs-comment\">// Fallback to defaut message</span>\n  return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">message</span>()</span>);\n});\n\nResponsePredicate predicate = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ResponsePredicate</span>.</span></span>create(ResponsePredicate.SC_SUCCESS, converter);\n</code></pre><p>That’s it! Feel free to com­ment here or ask ques­tions on our <a href=\"/community\">com­mu­nity chan­nels</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"respons","tf":16},{"term":"predic","tf":10},{"term":"error","tf":7},{"term":"web","tf":4},{"term":"not","tf":4},{"term":"us","tf":4},{"term":"statu","tf":4},{"term":"code","tf":4},{"term":"bodi","tf":4},{"term":"convert","tf":4},{"term":"content","tf":3},{"term":"type","tf":3},{"term":"check","tf":3},{"term":"receiv","tf":3},{"term":"gener","tf":3},{"term":"except","tf":3},{"term":"default","tf":2},{"term":"client","tf":2},{"term":"request","tf":2},{"term":"wrong","tf":2},{"term":"failur","tf":2},{"term":"perform","tf":2},{"term":"come","tf":2},{"term":"full","tf":2},{"term":"json","tf":2}]},{"filename":"blog/2018-12-06-the-rss-reader-tutorial-step-3.mdx","date":"2018-12-06","slug":"the-rss-reader-tutorial-step-3","meta":{"title":"The RSS reader tutorial (Step 3)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"This is the third installment of our Vert.x Cassandra Client tutorial. We will implement the last RSS endpoint serving a list of articles related to a specific channel."},"readingTime":{"text":"2 min read","minutes":1.585,"time":95100,"words":317},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Now that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/blog/eclipse-vert-x-3-6-0-released/\"\n  }), \"Vert.x 3.6.0 has been re\\xADleased\"), \", it\\u2019s the per\\xADfect time to con\\xADclude our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-cassandra-client/java/\"\n  }), \"Vert.x Cas\\xADsan\\xADdra Client\"), \" tu\\xADto\\xADr\\xADial!\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/blog/the-rss-reader-tutorial-step-2/\"\n  }), \"the pre\\xADvi\\xADous step\"), \", we have suc\\xADcess\\xADfully im\\xADple\\xADmented the sec\\xADond end\\xADpoint\\nof the RSS reader app.\"), mdx(\"p\", null, \"The RSS reader ex\\xADam\\xADple as\\xADsumes im\\xADple\\xADment\\xADing three end\\xADpoints. This ar\\xADti\\xADcle is ded\\xADi\\xADcated to im\\xADple\\xADment\\xADing the last \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /articles/by_rss_link?link={rss_link}\"), \" end\\xADpoint.\"), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step, make sure your are in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_3\"), \" git branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_3\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-3rd-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-3rd-endpoint\"\n  })), \"Implementing the 3rd endpoint\"), mdx(\"p\", null, \"The 3rd end\\xADpoint serves a list of ar\\xADti\\xADcles re\\xADlated to a spe\\xADcific RSS chan\\xADnel. In a re\\xADquest, we spec\\xADify RSS chan\\xADnel by pro\\xADvid\\xADing a link. On the ap\\xADpli\\xADca\\xADtion side, after re\\xADceiv\\xADing a re\\xADquest we ex\\xADe\\xADcute the fol\\xADlow\\xADing query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" title, article_link, description, pubDate \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" articles_by_rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" rss_link = RSS_LINK_FROM_REQUEST ;\\n\")), mdx(\"h2\", {\n    \"id\": \"implementation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementation\"\n  })), \"Implementation\"), mdx(\"p\", null, \"For ob\\xADtain\\xADing ar\\xADti\\xADcles by RSS link we need to pre\\xADpare a re\\xADlated state\\xADment first. Change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareSelectArticlesByRssLink\"), \" in this way:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareSelectArticlesByRssLink\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Util.prepareQueryAndSetReference(client,\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;\\\"\"), \",\\n            selectArticlesByRssLink\\n    );\\n}\\n\")), mdx(\"p\", null, \"And now, we can im\\xADple\\xADment the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#getArticles\"), \" method. Ba\\xADsi\\xADcally, it will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectArticlesByRssLink\"), \" state\\xADment for find\\xADing ar\\xADti\\xADcles by the given link. Here\\u2019s the im\\xADple\\xADmen\\xADta\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getArticles\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    String link = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (link == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n        responseWithInvalidRequest(ctx);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (handler.succeeded()) {\\n                List<Row> rows = handler.result();\\n\\n                JsonObject responseJson = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();\\n                JsonArray articles = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray();\\n\\n                rows.forEach(eachRow -> articles.add(\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"title\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"pub_date\\\"\"), \", eachRow.getTimestamp(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\"), \").getTime())\\n                ));\\n\\n                responseJson.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"articles\\\"\"), \", articles);\\n                ctx.response().end(responseJson.toString());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"failed to get articles for \\\"\"), \" + link, handler.cause());\\n                ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to retrieve the info from C*\\\"\"), \");\\n            }\\n        });\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"Dur\\xADing the se\\xADries, we have shown how the RSS reader app can be im\\xADple\\xADmented with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-cassandra-client\"\n  }), \"Vert.x Cas\\xADsan\\xADdra client\"), \".\"), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed this se\\xADries. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Now that <a href=\"https://vertx.io/blog/eclipse-vert-x-3-6-0-released/\">Vert.x 3.6.0 has been re­leased</a>, it’s the per­fect time to con­clude our <a href=\"https://vertx.io/docs/vertx-cassandra-client/java/\">Vert.x Cas­san­dra Client</a> tu­to­r­ial!</p><p>In <a href=\"https://vertx.io/blog/the-rss-reader-tutorial-step-2/\">the pre­vi­ous step</a>, we have suc­cess­fully im­ple­mented the sec­ond end­point\nof the RSS reader app.</p><p>The RSS reader ex­am­ple as­sumes im­ple­ment­ing three end­points. This ar­ti­cle is ded­i­cated to im­ple­ment­ing the last <code>GET /articles/by_rss_link?link={rss_link}</code> end­point.</p><p>Be­fore com­plet­ing this step, make sure your are in the <code>step_3</code> git branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_3</span>\n</code></pre><h2 id=\"implementing-the-3rd-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-3rd-endpoint\"></a>Implementing the 3rd endpoint</h2><p>The 3rd end­point serves a list of ar­ti­cles re­lated to a spe­cific RSS chan­nel. In a re­quest, we spec­ify RSS chan­nel by pro­vid­ing a link. On the ap­pli­ca­tion side, after re­ceiv­ing a re­quest we ex­e­cute the fol­low­ing query:</p><pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> title, article_link, description, pubDate <span class=\"hljs-keyword\">FROM</span> articles_by_rss_link <span class=\"hljs-keyword\">WHERE</span> rss_link = RSS_LINK_FROM_REQUEST ;\n</code></pre><h2 id=\"implementation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementation\"></a>Implementation</h2><p>For ob­tain­ing ar­ti­cles by RSS link we need to pre­pare a re­lated state­ment first. Change <code>AppVerticle#prepareSelectArticlesByRssLink</code> in this way:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareSelectArticlesByRssLink</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> Util.prepareQueryAndSetReference(client,\n            <span class=\"hljs-string\">&quot;SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;&quot;</span>,\n            selectArticlesByRssLink\n    );\n}\n</code></pre><p>And now, we can im­ple­ment the <code>AppVerticle#getArticles</code> method. Ba­si­cally, it will use the <code>selectArticlesByRssLink</code> state­ment for find­ing ar­ti­cles by the given link. Here’s the im­ple­men­ta­tion:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getArticles</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    String link = ctx.request().getParam(<span class=\"hljs-string\">&quot;link&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (link == <span class=\"hljs-keyword\">null</span>) {\n        responseWithInvalidRequest(ctx);\n    } <span class=\"hljs-keyword\">else</span> {\n        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -&gt; {\n            <span class=\"hljs-keyword\">if</span> (handler.succeeded()) {\n                List&lt;Row&gt; rows = handler.result();\n\n                JsonObject responseJson = <span class=\"hljs-keyword\">new</span> JsonObject();\n                JsonArray articles = <span class=\"hljs-keyword\">new</span> JsonArray();\n\n                rows.forEach(eachRow -&gt; articles.add(\n                        <span class=\"hljs-keyword\">new</span> JsonObject()\n                                .put(<span class=\"hljs-string\">&quot;title&quot;</span>, eachRow.getString(<span class=\"hljs-number\">0</span>))\n                                .put(<span class=\"hljs-string\">&quot;link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">1</span>))\n                                .put(<span class=\"hljs-string\">&quot;description&quot;</span>, eachRow.getString(<span class=\"hljs-number\">2</span>))\n                                .put(<span class=\"hljs-string\">&quot;pub_date&quot;</span>, eachRow.getTimestamp(<span class=\"hljs-number\">3</span>).getTime())\n                ));\n\n                responseJson.put(<span class=\"hljs-string\">&quot;articles&quot;</span>, articles);\n                ctx.response().end(responseJson.toString());\n            } <span class=\"hljs-keyword\">else</span> {\n                log.error(<span class=\"hljs-string\">&quot;failed to get articles for &quot;</span> + link, handler.cause());\n                ctx.response().setStatusCode(<span class=\"hljs-number\">500</span>).end(<span class=\"hljs-string\">&quot;Unable to retrieve the info from C*&quot;</span>);\n            }\n        });\n    }\n}\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>Dur­ing the se­ries, we have shown how the RSS reader app can be im­ple­mented with the <a href=\"https://github.com/vert-x3/vertx-cassandra-client\">Vert.x Cas­san­dra client</a>.</p><p>Thanks for read­ing this. I hope you en­joyed this se­ries. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"implement","tf":8},{"term":"rss","tf":6},{"term":"endpoint","tf":5},{"term":"articl","tf":4},{"term":"reader","tf":3},{"term":"channel","tf":3},{"term":"link","tf":3},{"term":"cassandra","tf":2},{"term":"client","tf":2},{"term":"step","tf":2},{"term":"app","tf":2},{"term":"3rd","tf":2},{"term":"relat","tf":2},{"term":"request","tf":2},{"term":"statement","tf":2},{"term":"seri","tf":2},{"term":"releas","tf":1},{"term":"perfect","tf":1},{"term":"time","tf":1},{"term":"conclud","tf":1},{"term":"tutori","tf":1},{"term":"previou","tf":1},{"term":"successfulli","tf":1},{"term":"second","tf":1},{"term":"exampl","tf":1}]},{"filename":"blog/2018-09-05-the-rss-reader-tutorial-step-2.mdx","date":"2018-09-05","slug":"the-rss-reader-tutorial-step-2","meta":{"title":"The RSS reader tutorial (Step 2)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this second installment of our Vert.x Cassandra Client tutorial, we will add an endpoint that produces an array of RSS channels for a given user ID."},"readingTime":{"text":"3 min read","minutes":2.39,"time":143400,"words":478},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/the-rss-reader-tutorial/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the pre\\xADvi\\xADous step\")), \", we have suc\\xADcess\\xADfully im\\xADple\\xADmented the first end\\xADpoint\\nof the RSS reader app.\"), mdx(\"p\", null, \"The RSS reader ex\\xADam\\xADple as\\xADsumes im\\xADple\\xADment\\xADing 3 end\\xADpoints. This ar\\xADti\\xADcle is ded\\xADi\\xADcated to im\\xADple\\xADment\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /user/{user_id}/rss_channels\"), \" end\\xADpoint.\"), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step, make sure your are in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_2\"), \" git branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_2\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-second-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-second-endpoint\"\n  })), \"Implementing the second endpoint\"), mdx(\"p\", null, \"The sec\\xADond end\\xADpoint pro\\xADduces an array of RSS chan\\xADnels by given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user_id\"), \".\"), mdx(\"p\", null, \"We need to ex\\xADe\\xADcute the two fol\\xADlow\\xADing queries to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fetch RSS links for a given user:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_by_user \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" login = GIVEN_USER_ID ;\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fetch RSS chan\\xADnel de\\xADtails for a given link:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" description, title, site_link, rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" channel_info_by_rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" rss_link = GIVEN_LINK ;\\n\")))), mdx(\"h2\", {\n    \"id\": \"implementation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementation\"\n  })), \"Implementation\"), mdx(\"p\", null, \"The end\\xADpoint al\\xADlows the the front-\\u200Bend app to dis\\xADplay the list of RSS feeds a user sub\\xADscribed on. When the end\\xADpoint is ac\\xADcessed, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#getRssChannels\"), \" method is called. We can im\\xADple\\xADment this method in this way:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getRssChannels\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    String userId = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user_id\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (userId == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n        responseWithInvalidRequest(ctx);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        Future<List<Row>> future = Future.future();\\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\\n        future.compose(rows -> {\\n            List<String> links = rows.stream()\\n                    .map(row -> row.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                    .collect(Collectors.toList());\\n\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n                    links.stream().map(selectChannelInfo::bind).map(statement -> {\\n                        Future<List<Row>> channelInfoRow = Future.future();\\n                        client.executeWithFullFetch(statement, channelInfoRow);\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" channelInfoRow;\\n                    }).collect(Collectors.toList())\\n            );\\n        }).setHandler(h -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (h.succeeded()) {\\n                CompositeFuture result = h.result();\\n                List<List<Row>> results = result.list();\\n                List<Row> list = results.stream()\\n                        .flatMap(List::stream)\\n                        .collect(Collectors.toList());\\n                JsonObject responseJson = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();\\n                JsonArray channels = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray();\\n\\n                list.forEach(eachRow -> channels.add(\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"title\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"rss_link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\"), \"))\\n                ));\\n\\n                responseJson.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"channels\\\"\"), \", channels);\\n                ctx.response().end(responseJson.toString());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"failed to get rss channels\\\"\"), \", h.cause());\\n                ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to retrieve the info from C*\\\"\"), \");\\n            }\\n        });\\n    }\\n}\\n\")), mdx(\"p\", null, \"Also, this method uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectChannelInfo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectRssLinksByLogin\"), \" fields, they should be ini\\xADtial\\xADized in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Future<PreparedStatement> selectChannelInfoPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;\\\"\"), \", selectChannelInfoPrepFuture);\\n\\n    Future<PreparedStatement> selectRssLinkByLoginPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT rss_link FROM rss_by_user WHERE login = ? ;\\\"\"), \", selectRssLinkByLoginPrepFuture);\\n\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"), \", insertNewLinkForUserPrepFuture);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n            selectChannelInfoPrepFuture.compose(preparedStatement -> {\\n                selectChannelInfo = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            }),\\n            selectRssLinkByLoginPrepFuture.compose(preparedStatement -> {\\n                selectRssLinksByLogin = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            }),\\n            insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n                insertNewLinkForUser = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            })\\n    ).mapEmpty();\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this part, we have suc\\xADcess\\xADfully im\\xADple\\xADmented the sec\\xADond end\\xADpoint, which al\\xADlows the browser app to ob\\xADtain chan\\xADnels in\\xADfor\\xADma\\xADtion for a spe\\xADcific user. To en\\xADsure that it is work\\xADing fine, point your browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8080\"), \" and click to the re\\xADfresh but\\xADton. Chan\\xADnel list should ap\\xADpear im\\xADme\\xADdi\\xADately.\"), mdx(\"p\", null, \"If you have any prob\\xADlems with com\\xADplet\\xADing this step you can check\\xADout to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_3\"), \", where you can find all changes made for com\\xADplet\\xADing this step:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_3\"), \"\\n\")), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In <a href=\"/blog/the-rss-reader-tutorial/\">the pre­vi­ous step</a>, we have suc­cess­fully im­ple­mented the first end­point\nof the RSS reader app.</p><p>The RSS reader ex­am­ple as­sumes im­ple­ment­ing 3 end­points. This ar­ti­cle is ded­i­cated to im­ple­ment­ing the <code>GET /user/{user_id}/rss_channels</code> end­point.</p><p>Be­fore com­plet­ing this step, make sure your are in the <code>step_2</code> git branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_2</span>\n</code></pre><h2 id=\"implementing-the-second-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-second-endpoint\"></a>Implementing the second endpoint</h2><p>The sec­ond end­point pro­duces an array of RSS chan­nels by given <code>user_id</code>.</p><p>We need to ex­e­cute the two fol­low­ing queries to:</p><ol><li>Fetch RSS links for a given user:<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> rss_link <span class=\"hljs-keyword\">FROM</span> rss_by_user <span class=\"hljs-keyword\">WHERE</span> login = GIVEN_USER_ID ;\n</code></pre></li><li>Fetch RSS chan­nel de­tails for a given link:<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> description, title, site_link, rss_link <span class=\"hljs-keyword\">FROM</span> channel_info_by_rss_link <span class=\"hljs-keyword\">WHERE</span> rss_link = GIVEN_LINK ;\n</code></pre></li></ol><h2 id=\"implementation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementation\"></a>Implementation</h2><p>The end­point al­lows the the front-​end app to dis­play the list of RSS feeds a user sub­scribed on. When the end­point is ac­cessed, the <code>AppVerticle#getRssChannels</code> method is called. We can im­ple­ment this method in this way:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getRssChannels</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    String userId = ctx.request().getParam(<span class=\"hljs-string\">&quot;user_id&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (userId == <span class=\"hljs-keyword\">null</span>) {\n        responseWithInvalidRequest(ctx);\n    } <span class=\"hljs-keyword\">else</span> {\n        Future&lt;List&lt;Row&gt;&gt; future = Future.future();\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\n        future.compose(rows -&gt; {\n            List&lt;String&gt; links = rows.stream()\n                    .map(row -&gt; row.getString(<span class=\"hljs-number\">0</span>))\n                    .collect(Collectors.toList());\n\n            <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n                    links.stream().map(selectChannelInfo::bind).map(statement -&gt; {\n                        Future&lt;List&lt;Row&gt;&gt; channelInfoRow = Future.future();\n                        client.executeWithFullFetch(statement, channelInfoRow);\n                        <span class=\"hljs-keyword\">return</span> channelInfoRow;\n                    }).collect(Collectors.toList())\n            );\n        }).setHandler(h -&gt; {\n            <span class=\"hljs-keyword\">if</span> (h.succeeded()) {\n                CompositeFuture result = h.result();\n                List&lt;List&lt;Row&gt;&gt; results = result.list();\n                List&lt;Row&gt; list = results.stream()\n                        .flatMap(List::stream)\n                        .collect(Collectors.toList());\n                JsonObject responseJson = <span class=\"hljs-keyword\">new</span> JsonObject();\n                JsonArray channels = <span class=\"hljs-keyword\">new</span> JsonArray();\n\n                list.forEach(eachRow -&gt; channels.add(\n                        <span class=\"hljs-keyword\">new</span> JsonObject()\n                                .put(<span class=\"hljs-string\">&quot;description&quot;</span>, eachRow.getString(<span class=\"hljs-number\">0</span>))\n                                .put(<span class=\"hljs-string\">&quot;title&quot;</span>, eachRow.getString(<span class=\"hljs-number\">1</span>))\n                                .put(<span class=\"hljs-string\">&quot;link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">2</span>))\n                                .put(<span class=\"hljs-string\">&quot;rss_link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">3</span>))\n                ));\n\n                responseJson.put(<span class=\"hljs-string\">&quot;channels&quot;</span>, channels);\n                ctx.response().end(responseJson.toString());\n            } <span class=\"hljs-keyword\">else</span> {\n                log.error(<span class=\"hljs-string\">&quot;failed to get rss channels&quot;</span>, h.cause());\n                ctx.response().setStatusCode(<span class=\"hljs-number\">500</span>).end(<span class=\"hljs-string\">&quot;Unable to retrieve the info from C*&quot;</span>);\n            }\n        });\n    }\n}\n</code></pre><p>Also, this method uses <code>selectChannelInfo</code> and <code>selectRssLinksByLogin</code> fields, they should be ini­tial­ized in the <code>AppVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n    Future&lt;PreparedStatement&gt; selectChannelInfoPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;&quot;</span>, selectChannelInfoPrepFuture);\n\n    Future&lt;PreparedStatement&gt; selectRssLinkByLoginPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;SELECT rss_link FROM rss_by_user WHERE login = ? ;&quot;</span>, selectRssLinkByLoginPrepFuture);\n\n    Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;</span>, insertNewLinkForUserPrepFuture);\n\n    <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n            selectChannelInfoPrepFuture.compose(preparedStatement -&gt; {\n                selectChannelInfo = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            }),\n            selectRssLinkByLoginPrepFuture.compose(preparedStatement -&gt; {\n                selectRssLinksByLogin = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            }),\n            insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {\n                insertNewLinkForUser = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            })\n    ).mapEmpty();\n}\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this part, we have suc­cess­fully im­ple­mented the sec­ond end­point, which al­lows the browser app to ob­tain chan­nels in­for­ma­tion for a spe­cific user. To en­sure that it is work­ing fine, point your browser to <code>localhost:8080</code> and click to the re­fresh but­ton. Chan­nel list should ap­pear im­me­di­ately.</p><p>If you have any prob­lems with com­plet­ing this step you can check­out to <code>step_3</code>, where you can find all changes made for com­plet­ing this step:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_3</span>\n</code></pre><p>Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"endpoint","tf":8},{"term":"implement","tf":7},{"term":"rss","tf":6},{"term":"channel","tf":5},{"term":"step","tf":4},{"term":"method","tf":4},{"term":"app","tf":3},{"term":"complet","tf":3},{"term":"second","tf":3},{"term":"given","tf":3},{"term":"user","tf":3},{"term":"successfulli","tf":2},{"term":"reader","tf":2},{"term":"articl","tf":2},{"term":"fetch","tf":2},{"term":"link","tf":2},{"term":"allow","tf":2},{"term":"list","tf":2},{"term":"browser","tf":2},{"term":"read","tf":2},{"term":"previou","tf":1},{"term":"first","tf":1},{"term":"exampl","tf":1},{"term":"assum","tf":1},{"term":"dedic","tf":1}]}],"numPages":9},"__N_SSG":true}