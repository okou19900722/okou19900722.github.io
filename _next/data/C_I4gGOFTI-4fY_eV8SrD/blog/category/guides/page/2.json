{"pageProps":{"categories":["releases","guides","news"],"category":"guides","page":2,"posts":[{"filename":"blog/2018-08-20-the-rss-reader-tutorial.mdx","date":"2018-08-20","slug":"the-rss-reader-tutorial","meta":{"title":"The RSS reader tutorial","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this tutorial, you will learn how to use the Eclipse Vert.x Cassandra client in practice. We will develop an RSS reader with three HTTP endpoints."},"readingTime":{"text":"7 min read","minutes":6.2,"time":372000,"words":1240},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This tu\\xADto\\xADr\\xADial is ded\\xADi\\xADcated for users who\\u2019d like to know how to use the Eclipse Vert.x Cas\\xADsan\\xADdra client in prac\\xADtice.\"), mdx(\"h2\", {\n    \"id\": \"before-you-start-this-tutorial\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#before-you-start-this-tutorial\"\n  })), \"Before you start this tutorial\"), mdx(\"p\", null, \"Be\\xADfore start\\xADing, you should\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"be fa\\xADmil\\xADiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/\"\n  }), \"Eclipse Vert.x\"), \". If you are not, here is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/guide-for-java-devs/\"\n  }), \"guide for Java de\\xADvel\\xADop\\xADers\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"have some basic un\\xADder\\xADstand\\xADing of data\\xADbases. Ex\\xADtended knowl\\xADedge of Cas\\xADsan\\xADdra is not re\\xADquired.\"))), mdx(\"p\", null, \"You also may find it use\\xADful to read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://validator.w3.org/feed/docs/rss2.html\"\n  }), \"the RSS 2.0\"), \" spec\\xADi\\xADfi\\xADca\\xADtion, be\\xADcause the re\\xADsulted app is, ba\\xADsi\\xADcally, a stor\\xADage of RSS 2.0 feeds.\"), mdx(\"p\", null, \"To give you an idea of what the App is about, here is how it looks like from the fronted side:\"), mdx(\"img\", {\n    src: \"https://i.imgur.com/2V954zx.png\",\n    alt: \"see how it looks\",\n    className: \"img-fluid\"\n  }), mdx(\"p\", null, \"In the image, we see that browser space is split into 2 parts:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Saved feed names\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"List of ar\\xADti\\xADcles for the se\\xADlected feed\")), mdx(\"p\", null, \"Here you also can enter a link to a new feed, so the App will fetch and parse the feed.\\nAfter that, it will ap\\xADpear in the left col\\xADumn along with other saved feeds.\"), mdx(\"h2\", {\n    \"id\": \"requirements\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#requirements\"\n  })), \"Requirements\"), mdx(\"p\", null, \"For com\\xADplet\\xADing this tu\\xADto\\xADr\\xADial you need:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java 8 or higher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 hour of your time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You fa\\xADvorite code ed\\xADi\\xADtor\")), mdx(\"p\", null, \"For run\\xADning the ex\\xADam\\xADple you should en\\xADsure that Cas\\xADsan\\xADdra ser\\xADvice is run\\xADning lo\\xADcally on port 9042.\\nAs an op\\xADtion, you can run Cas\\xADsan\\xADdra with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/riptano/ccm#installation\"\n  }), \"ccm\"), \"(Cas\\xADsan\\xADdra Clus\\xADter Man\\xADager).\\nFol\\xADlow \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/riptano/ccm#installation\"\n  }), \"this\"), \" in\\xADstruc\\xADtions for in\\xADstalling ccm.\\nAfter in\\xADstalling you will be able to run a sin\\xADgle node clus\\xADter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ccm create rss_reader -v 3.11.2 -n 1 -s\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ccm start\"), \"\\n\")), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step make sure that you have suc\\xADcess\\xADfully cloned the RSS reader repos\\xADi\\xADtory and checked out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_1\"), \" branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"clone\"), \" https://github.com/Sammers21/rss-reader\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"cd\"), \" rss-reader\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_1\"), \"\\n\")), mdx(\"p\", null, \"Now you can try to tun this ex\\xADam\\xADple and see if it works:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ./gradlew vertxRun\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"schema\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#schema\"\n  })), \"Schema\"), mdx(\"p\", null, \"If you are fa\\xADmil\\xADiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://cassandra.apache.org/\"\n  }), \"Apache Cas\\xADsan\\xADdra\"), \", you\\nshould know that the way your data is stored in Cas\\xADsan\\xADdra is de\\xADpen\\xADdent on queries\\nyou are run\\xADning. It means that you need first to fig\\xADure out what kind of queries\\nyou will be run\\xADning, and then you can pro\\xADduce a stor\\xADage scheme.\"), mdx(\"p\", null, \"In our case, we\\u2019d like our ap\\xADpli\\xADca\\xADtion to have 3 end\\xADpoints:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"POST /user/{user_id}/rss_link\"), \" - for adding links to a user\\u2019s feed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /user/{user_id}/rss_channels\"), \" - for re\\xADtriev\\xADing in\\xADfor\\xADma\\xADtion about RSS chan\\xADnels a user sub\\xADscribed on\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /articles/by_rss_link?link={rss_link}\"), \" - for re\\xADtriev\\xADing in\\xADfor\\xADma\\xADtion about ar\\xADti\\xADcles on a spe\\xADcific RSS chan\\xADnel\")), mdx(\"p\", null, \"For im\\xADple\\xADment\\xADing this end\\xADpoints, the schema should look as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" rss_by_user (login \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \" , rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \" (login, rss_link));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" articles_by_rss_link(rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", pubDate \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"timestamp\"), \", title \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", article_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \" ( rss_link , pubDate , article_link));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" channel_info_by_rss_link(rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", last_fetch_time \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"timestamp\"), \",title \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", site_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \"(rss_link));\\n\")), mdx(\"h2\", {\n    \"id\": \"what-to-do-in-this-step\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#what-to-do-in-this-step\"\n  })), \"What to do in this step\"), mdx(\"p\", null, \"In this step, we will im\\xADple\\xADment only the first end\\xADpoint\"), mdx(\"h2\", {\n    \"id\": \"project-overview\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#project-overview\"\n  })), \"Project overview\"), mdx(\"p\", null, \"There are two no\\xADtable classes in the project: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \". The first one is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#_verticles\"\n  }), \"Ver\\xADti\\xADcle\"), \" re\\xADspon\\xADsi\\xADble for HTTP re\\xADquest han\\xADdling and stor\\xADage schema ini\\xADtial\\xADiza\\xADtion. The sec\\xADond one is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#_verticles\"\n  }), \"Ver\\xADti\\xADcle\"), \" as well, but re\\xADspon\\xADsi\\xADble for RSS feeds fetch\\xADing.\"), mdx(\"p\", null, \"The idea is sim\\xADple. When the ap\\xADpli\\xADca\\xADtion is start\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" is de\\xADployed, then it tries to ini\\xADtial\\xADize stor\\xADage schema, de\\xADscribed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resources/schema.cql\"), \" file by read\\xADing it and ex\\xADe\\xADcut\\xADing listed queries line by line. After the schema ini\\xADtial\\xADiza\\xADtion the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" de\\xADploys \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \" and starts a HTTP server.\"), mdx(\"h2\", {\n    \"id\": \"implementing-the-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-endpoint\"\n  })), \"Implementing the endpoint\"), mdx(\"p\", null, \"Now, it is time to im\\xADple\\xADment the first end\\xADpoint. Pay at\\xADten\\xADtion to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TODO\"), \"s, they are for point\\xADing you out about where changes should be made.\"), mdx(\"p\", null, \"Now, let\\u2019s have a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#postRssLink\"), \" method. This method is called each time the first end\\xADpoint is called, so we can fig\\xADure out what is the posted body and id of the user, who per\\xADformed the re\\xADquest, di\\xADrectly there. There are 2 main things we want to do in this method:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"No\\xADti\\xADfy\\xADing via the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#event_bus\"\n  }), \"Event Bus\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FetchVerticle\"), \" to fetch given by user link link to an RSS feed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In\\xADsert\\xADing an entry to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rss_by_user\"), \" table.\")), mdx(\"p\", null, \"This is how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#postRssLink\"), \" method should be im\\xADple\\xADmented:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"postRssLink\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    ctx.request().bodyHandler(body -> {\\n        JsonObject bodyAsJson = body.toJsonObject();\\n        String link = bodyAsJson.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \");\\n        String userId = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user_id\\\"\"), \");\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (link == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" || userId == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n            responseWithInvalidRequest(ctx);\\n        } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            vertx.eventBus().send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetch.rss.link\\\"\"), \", link);\\n            Future<ResultSet> future = Future.future();\\n            BoundStatement query = insertNewLinkForUser.bind(userId, link);\\n            client.execute(query, future);\\n            future.setHandler(result -> {\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n                    ctx.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The feed just added\\\"\"), \").toString());\\n                } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                    ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end(result.cause().getMessage());\\n                }\\n            });\\n        }\\n    });\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"responseWithInvalidRequest\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    ctx.response()\\n            .setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \")\\n            .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n            .end(invalidRequest().toString());\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" JsonObject \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"invalidRequest\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Invalid request\\\"\"), \");\\n}\\n\")), mdx(\"p\", null, \"You may no\\xADtice that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertNewLinkForUser\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PreparedStatement\"), \", and should be ini\\xADtial\\xADized be\\xADfore the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" start. Let\\u2019s do it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"), \", insertNewLinkForUserPrepFuture);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n        insertNewLinkForUser = preparedStatement;\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n    });\\n}\\n\")), mdx(\"p\", null, \"Also, we should not for\\xADget to fetch a RSS by the link sent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \" via the Event Bus. We can do it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle#startFetchEventBusConsumer\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.eventBus().localConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetch.rss.link\\\"\"), \", message -> {\\n    String rssLink = (String) message.body();\\n    log.info(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetching \\\"\"), \" + rssLink);\\n    webClient.getAbs(rssLink).send(response -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.succeeded()) {\\n            String bodyAsString = response.result().bodyAsString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"UTF-8\\\"\"), \");\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"try\"), \" {\\n                RssChannel rssChannel = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RssChannel(bodyAsString);\\n\\n                BatchStatement batchStatement = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BatchStatement();\\n                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(\\n                        rssLink, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\\n                );\\n                batchStatement.add(channelInfoInsertQuery);\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (Article article : rssChannel.articles) {\\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\\n                }\\n                Future<ResultSet> insertArticlesFuture = Future.future();\\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\\n\\n                insertArticlesFuture.compose(insertDone -> Future.succeededFuture());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"catch\"), \" (Exception e) {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to fetch: \\\"\"), \" + rssLink, e);\\n            }\\n        } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to fetch: \\\"\"), \" + rssLink);\\n        }\\n    });\\n});\\n\")), mdx(\"p\", null, \"And, fi\\xADnally, this code would not work if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertChannelInfo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertArticleInfo\"), \" state\\xADments will not be ini\\xADtial\\xADized at ver\\xADti\\xADcle start. Let\\u2019s to this in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n        Future<PreparedStatement> insertChannelInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);\\\"\"), \", insertChannelInfoPrepFuture);\\n\\n        Future<PreparedStatement> insertArticleInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);\\\"\"), \", insertArticleInfoPrepFuture);\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n                insertChannelInfoPrepFuture.compose(preparedStatement -> {\\n                    insertChannelInfo = preparedStatement;\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -> {\\n                    insertArticleInfo = preparedStatement;\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n                })\\n        ).mapEmpty();\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"observing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#observing\"\n  })), \"Observing\"), mdx(\"p\", null, \"After all these changes, you should en\\xADsure that the first end\\xADpoint is work\\xADing cor\\xADrectly. You need to run the ap\\xADpli\\xADca\\xADtion, go to lo\\xADcal\\xADhost:8080 in\\xADsert a link to a rss feed there(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://feeds.bbci.co.uk/news/uk/rss.xml\"\n  }), \"BBC UK feed news\"), \" for ex\\xADam\\xADple) and then click the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ENTER\"), \" but\\xADton. Now you can con\\xADnect to your local Cas\\xADsan\\xADdra in\\xADstance, for in\\xADstance with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html\"\n  }), \"cqlsh\"), \", and find out how RSS feed data had been saved in the rss_reader key\\xADspace:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), \"cqlsh> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" * \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_reader.rss_by_user \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"limit\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"  ;\\n\\n login | rss_link\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"-------+-----------------------------------------\"), \"\\n Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml\\n\\n(1 rows)\\ncqlsh> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_reader.articles_by_rss_link  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"limit\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n\\n description\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"-------------------------------------\"), \"\\n BBC coverage of latest developments\\n\\n(1 rows)\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this ar\\xADti\\xADcle we fig\\xADured out how to im\\xADple\\xADment the first end\\xADpoint of RSS-\\u200Breader app. If you have any prob\\xADlems with com\\xADplet\\xADing this step you can check\\xADout to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_2\"), \", where you can find all changes made for com\\xADplet\\xADing this step:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_2\"), \"\\n\")), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This tu­to­r­ial is ded­i­cated for users who’d like to know how to use the Eclipse Vert.x Cas­san­dra client in prac­tice.</p><h2 id=\"before-you-start-this-tutorial\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#before-you-start-this-tutorial\"></a>Before you start this tutorial</h2><p>Be­fore start­ing, you should</p><ul><li><p>be fa­mil­iar with <a href=\"https://vertx.io/\">Eclipse Vert.x</a>. If you are not, here is the <a href=\"https://vertx.io/docs/guide-for-java-devs/\">guide for Java de­vel­op­ers</a>.</p></li><li><p>have some basic un­der­stand­ing of data­bases. Ex­tended knowl­edge of Cas­san­dra is not re­quired.</p></li></ul><p>You also may find it use­ful to read <a href=\"https://validator.w3.org/feed/docs/rss2.html\">the RSS 2.0</a> spec­i­fi­ca­tion, be­cause the re­sulted app is, ba­si­cally, a stor­age of RSS 2.0 feeds.</p><p>To give you an idea of what the App is about, here is how it looks like from the fronted side:</p><img src=\"https://i.imgur.com/2V954zx.png\" alt=\"see how it looks\" class=\"img-fluid\"/><p>In the image, we see that browser space is split into 2 parts:</p><ol><li>Saved feed names</li><li>List of ar­ti­cles for the se­lected feed</li></ol><p>Here you also can enter a link to a new feed, so the App will fetch and parse the feed.\nAfter that, it will ap­pear in the left col­umn along with other saved feeds.</p><h2 id=\"requirements\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#requirements\"></a>Requirements</h2><p>For com­plet­ing this tu­to­r­ial you need:</p><ul><li>Java 8 or higher</li><li>Git</li><li>1 hour of your time</li><li>You fa­vorite code ed­i­tor</li></ul><p>For run­ning the ex­am­ple you should en­sure that Cas­san­dra ser­vice is run­ning lo­cally on port 9042.\nAs an op­tion, you can run Cas­san­dra with <a href=\"https://github.com/riptano/ccm#installation\">ccm</a>(Cas­san­dra Clus­ter Man­ager).\nFol­low <a href=\"https://github.com/riptano/ccm#installation\">this</a> in­struc­tions for in­stalling ccm.\nAfter in­stalling you will be able to run a sin­gle node clus­ter:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ccm create rss_reader -v 3.11.2 -n 1 -s</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ccm start</span>\n</code></pre><p>Be­fore com­plet­ing this step make sure that you have suc­cess­fully cloned the RSS reader repos­i­tory and checked out the <code>step_1</code> branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/Sammers21/rss-reader</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> rss-reader</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_1</span>\n</code></pre><p>Now you can try to tun this ex­am­ple and see if it works:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./gradlew vertxRun</span>\n</code></pre><h2 id=\"schema\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#schema\"></a>Schema</h2><p>If you are fa­mil­iar with <a href=\"http://cassandra.apache.org/\">Apache Cas­san­dra</a>, you\nshould know that the way your data is stored in Cas­san­dra is de­pen­dent on queries\nyou are run­ning. It means that you need first to fig­ure out what kind of queries\nyou will be run­ning, and then you can pro­duce a stor­age scheme.</p><p>In our case, we’d like our ap­pli­ca­tion to have 3 end­points:</p><ol><li><code>POST /user/{user_id}/rss_link</code> - for adding links to a user’s feed</li><li><code>GET /user/{user_id}/rss_channels</code> - for re­triev­ing in­for­ma­tion about RSS chan­nels a user sub­scribed on</li><li><code>GET /articles/by_rss_link?link={rss_link}</code> - for re­triev­ing in­for­ma­tion about ar­ti­cles on a spe­cific RSS chan­nel</li></ol><p>For im­ple­ment­ing this end­points, the schema should look as fol­lows:</p><pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> rss_by_user (login <span class=\"hljs-built_in\">text</span> , rss_link <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span> (login, rss_link));\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> articles_by_rss_link(rss_link <span class=\"hljs-built_in\">text</span>, pubDate <span class=\"hljs-built_in\">timestamp</span>, title <span class=\"hljs-built_in\">text</span>, article_link <span class=\"hljs-built_in\">text</span>, description <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span> ( rss_link , pubDate , article_link));\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> channel_info_by_rss_link(rss_link <span class=\"hljs-built_in\">text</span>, last_fetch_time <span class=\"hljs-built_in\">timestamp</span>,title <span class=\"hljs-built_in\">text</span>, site_link <span class=\"hljs-built_in\">text</span>, description <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span>(rss_link));\n</code></pre><h2 id=\"what-to-do-in-this-step\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#what-to-do-in-this-step\"></a>What to do in this step</h2><p>In this step, we will im­ple­ment only the first end­point</p><h2 id=\"project-overview\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#project-overview\"></a>Project overview</h2><p>There are two no­table classes in the project: <code>AppVerticle</code> and <code>FetchVerticle</code>. The first one is a <a href=\"https://vertx.io/docs/vertx-core/java/#_verticles\">Ver­ti­cle</a> re­spon­si­ble for HTTP re­quest han­dling and stor­age schema ini­tial­iza­tion. The sec­ond one is a <a href=\"https://vertx.io/docs/vertx-core/java/#_verticles\">Ver­ti­cle</a> as well, but re­spon­si­ble for RSS feeds fetch­ing.</p><p>The idea is sim­ple. When the ap­pli­ca­tion is start­ing the <code>AppVerticle</code> is de­ployed, then it tries to ini­tial­ize stor­age schema, de­scribed in <code>src/main/resources/schema.cql</code> file by read­ing it and ex­e­cut­ing listed queries line by line. After the schema ini­tial­iza­tion the <code>AppVerticle</code> de­ploys <code>FetchVerticle</code> and starts a HTTP server.</p><h2 id=\"implementing-the-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-endpoint\"></a>Implementing the endpoint</h2><p>Now, it is time to im­ple­ment the first end­point. Pay at­ten­tion to <code>TODO</code>s, they are for point­ing you out about where changes should be made.</p><p>Now, let’s have a look at the <code>AppVerticle#postRssLink</code> method. This method is called each time the first end­point is called, so we can fig­ure out what is the posted body and id of the user, who per­formed the re­quest, di­rectly there. There are 2 main things we want to do in this method:</p><ol><li>No­ti­fy­ing via the <a href=\"https://vertx.io/docs/vertx-core/java/#event_bus\">Event Bus</a> the <code>FetchVerticle</code> to fetch given by user link link to an RSS feed.</li><li>In­sert­ing an entry to the <code>rss_by_user</code> table.</li></ol><p>This is how the <code>AppVerticle#postRssLink</code> method should be im­ple­mented:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">postRssLink</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    ctx.request().bodyHandler(body -&gt; {\n        JsonObject bodyAsJson = body.toJsonObject();\n        String link = bodyAsJson.getString(<span class=\"hljs-string\">&quot;link&quot;</span>);\n        String userId = ctx.request().getParam(<span class=\"hljs-string\">&quot;user_id&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (link == <span class=\"hljs-keyword\">null</span> || userId == <span class=\"hljs-keyword\">null</span>) {\n            responseWithInvalidRequest(ctx);\n        } <span class=\"hljs-keyword\">else</span> {\n            vertx.eventBus().send(<span class=\"hljs-string\">&quot;fetch.rss.link&quot;</span>, link);\n            Future&lt;ResultSet&gt; future = Future.future();\n            BoundStatement query = insertNewLinkForUser.bind(userId, link);\n            client.execute(query, future);\n            future.setHandler(result -&gt; {\n                <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n                    ctx.response().end(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;The feed just added&quot;</span>).toString());\n                } <span class=\"hljs-keyword\">else</span> {\n                    ctx.response().setStatusCode(<span class=\"hljs-number\">400</span>).end(result.cause().getMessage());\n                }\n            });\n        }\n    });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">responseWithInvalidRequest</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    ctx.response()\n            .setStatusCode(<span class=\"hljs-number\">400</span>)\n            .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n            .end(invalidRequest().toString());\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> JsonObject <span class=\"hljs-title\">invalidRequest</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;Invalid request&quot;</span>);\n}\n</code></pre><p>You may no­tice that <code>insertNewLinkForUser</code> is a <code>PreparedStatement</code>, and should be ini­tial­ized be­fore the <code>AppVerticle</code> start. Let’s do it in the <code>AppVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n    Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;</span>, insertNewLinkForUserPrepFuture);\n\n    <span class=\"hljs-keyword\">return</span> insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {\n        insertNewLinkForUser = preparedStatement;\n        <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n    });\n}\n</code></pre><p>Also, we should not for­get to fetch a RSS by the link sent to <code>FetchVerticle</code> via the Event Bus. We can do it in the <code>FetchVerticle#startFetchEventBusConsumer</code> method:</p><pre><code class=\"hljs language-java\">vertx.eventBus().localConsumer(<span class=\"hljs-string\">&quot;fetch.rss.link&quot;</span>, message -&gt; {\n    String rssLink = (String) message.body();\n    log.info(<span class=\"hljs-string\">&quot;fetching &quot;</span> + rssLink);\n    webClient.getAbs(rssLink).send(response -&gt; {\n        <span class=\"hljs-keyword\">if</span> (response.succeeded()) {\n            String bodyAsString = response.result().bodyAsString(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);\n            <span class=\"hljs-keyword\">try</span> {\n                RssChannel rssChannel = <span class=\"hljs-keyword\">new</span> RssChannel(bodyAsString);\n\n                BatchStatement batchStatement = <span class=\"hljs-keyword\">new</span> BatchStatement();\n                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(\n                        rssLink, <span class=\"hljs-keyword\">new</span> Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\n                );\n                batchStatement.add(channelInfoInsertQuery);\n\n                <span class=\"hljs-keyword\">for</span> (Article article : rssChannel.articles) {\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\n                }\n                Future&lt;ResultSet&gt; insertArticlesFuture = Future.future();\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\n\n                insertArticlesFuture.compose(insertDone -&gt; Future.succeededFuture());\n            } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                log.error(<span class=\"hljs-string\">&quot;Unable to fetch: &quot;</span> + rssLink, e);\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            log.error(<span class=\"hljs-string\">&quot;Unable to fetch: &quot;</span> + rssLink);\n        }\n    });\n});\n</code></pre><p>And, fi­nally, this code would not work if <code>insertChannelInfo</code> and <code>insertArticleInfo</code> state­ments will not be ini­tial­ized at ver­ti­cle start. Let’s to this in the <code>FetchVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n        Future&lt;PreparedStatement&gt; insertChannelInfoPrepFuture = Future.future();\n        cassandraClient.prepare(<span class=\"hljs-string\">&quot;INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);&quot;</span>, insertChannelInfoPrepFuture);\n\n        Future&lt;PreparedStatement&gt; insertArticleInfoPrepFuture = Future.future();\n        cassandraClient.prepare(<span class=\"hljs-string\">&quot;INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);&quot;</span>, insertArticleInfoPrepFuture);\n\n        <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n                insertChannelInfoPrepFuture.compose(preparedStatement -&gt; {\n                    insertChannelInfo = preparedStatement;\n                    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -&gt; {\n                    insertArticleInfo = preparedStatement;\n                    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n                })\n        ).mapEmpty();\n    }\n</code></pre><h2 id=\"observing\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#observing\"></a>Observing</h2><p>After all these changes, you should en­sure that the first end­point is work­ing cor­rectly. You need to run the ap­pli­ca­tion, go to lo­cal­host:8080 in­sert a link to a rss feed there(<a href=\"http://feeds.bbci.co.uk/news/uk/rss.xml\">BBC UK feed news</a> for ex­am­ple) and then click the <em>ENTER</em> but­ton. Now you can con­nect to your local Cas­san­dra in­stance, for in­stance with <a href=\"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html\">cqlsh</a>, and find out how RSS feed data had been saved in the rss_reader key­space:</p><pre><code class=\"hljs language-sql\">cqlsh&gt; <span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> rss_reader.rss_by_user <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span>  ;\n\n login | rss_link\n<span class=\"hljs-comment\">-------+-----------------------------------------</span>\n Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml\n\n(1 rows)\ncqlsh&gt; <span class=\"hljs-keyword\">SELECT</span> description <span class=\"hljs-keyword\">FROM</span> rss_reader.articles_by_rss_link  <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span>;\n\n description\n<span class=\"hljs-comment\">-------------------------------------</span>\n BBC coverage of latest developments\n\n(1 rows)\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this ar­ti­cle we fig­ured out how to im­ple­ment the first end­point of RSS-​reader app. If you have any prob­lems with com­plet­ing this step you can check­out to <code>step_2</code>, where you can find all changes made for com­plet­ing this step:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_2</span>\n</code></pre><p>Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"feed","tf":12},{"term":"rss","tf":11},{"term":"cassandra","tf":8},{"term":"endpoint","tf":8},{"term":"run","tf":7},{"term":"first","tf":7},{"term":"method","tf":7},{"term":"start","tf":6},{"term":"link","tf":6},{"term":"will","tf":6},{"term":"implement","tf":6},{"term":"user","tf":5},{"term":"not","tf":5},{"term":"step","tf":5},{"term":"schema","tf":5},{"term":"initi","tf":5},{"term":"read","tf":4},{"term":"app","tf":4},{"term":"storag","tf":4},{"term":"articl","tf":4},{"term":"fetch","tf":4},{"term":"complet","tf":4},{"term":"tutori","tf":3},{"term":"find","tf":3},{"term":"look","tf":3}]},{"filename":"blog/2018-07-02-simplified-database-transaction-management-with-the-vert-x-rxjava-api.mdx","date":"2018-07-02","slug":"simplified-database-transaction-management-with-the-vert-x-rxjava-api","meta":{"title":"Simplified database transaction management with the Vert.x RxJava API","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"As of Vert.x 3.5, managing database transactions requires a lot of boilerplate code. Vert.x 3.6 provides helpers to easily make a reactive flow transactional."},"readingTime":{"text":"4 min read","minutes":3.235,"time":194100,"words":647},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TL;DR As of 3.5, man\\xADag\\xADing data\\xADbase trans\\xADac\\xADtions with Vert.x re\\xADquires a lot of boil\\xADer\\xADplate code.\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x 3.6 will pro\\xADvide helpers and \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"Observable\"), \" trans\\xADform\\xADers to eas\\xADily make a re\\xADac\\xADtive flow trans\\xADac\\xADtional.\")), mdx(\"h2\", {\n    \"id\": \"simple-queries-with-the-rxified-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#simple-queries-with-the-rxified-api\"\n  })), \"Simple queries with the \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"\\u201CRxified\\u201D\"), \" API\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-rx/java2/\"\n  }), \"Vert.x API for Rx\\xADJava\"), \" is one of the most pop\\xADu\\xADlar mod\\xADules in the Vert.x stack.\"), mdx(\"p\", null, \"So we make sure the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201CRx\\xADi\\xADfied\\u201D\"), \" API is easy to use for com\\xADmon pro\\xADgram\\xADming tasks, such as read\\xADing rows from a re\\xADla\\xADtional data\\xADbase and send\\xADing the re\\xADsult to the client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"dbClient.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name, duration FROM tracks WHERE album = 'The Israelites'\\\"\"), \")\\n  .map(ResultSet::getResults)\\n  .map(rows -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n  })\\n  .subscribe(json -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n  }, t -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"managing-transactions-with-vertx-35\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#managing-transactions-with-vertx-35\"\n  })), \"Managing transactions with Vert.x 3.5\"), mdx(\"p\", null, \"But very often, de\\xADvel\\xADop\\xADers have to im\\xADple\\xADment com\\xADplex in\\xADter\\xADac\\xADtions with the data\\xADbase, run\\xADning in\\xADside a sin\\xADgle trans\\xADac\\xADtion.\\nTo do so, the im\\xADple\\xADmen\\xADta\\xADtion must fol\\xADlow this process:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get a con\\xADnec\\xADtion from the pool,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"start a trans\\xADac\\xADtion,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ex\\xADe\\xADcute queries,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if all queries suc\\xADceed, com\\xADmit the trans\\xADac\\xADtion,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oth\\xADer\\xADwise, roll\\xADback the changes.\")), mdx(\"p\", null, \"How does that trans\\xADlate to code?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Get a connection from the pool\"), \"\\ndbClient.rxGetConnection().flatMap(sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Setting auto-commit mode to false implicitely starts a transaction\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \")\\n    .andThen(\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Database queries\"), \"\\n      sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n        .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n        .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n        .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n    )\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Commit if all queries succeed\"), \"\\n    .flatMap(rows -> sqlConnection.rxCommit().andThen(Single.just(rows)))\\n    .onErrorResumeNext(throwable -> {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On error, rollback the changes\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxRollback().onErrorComplete()\\n        .andThen(sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \").onErrorComplete())\\n        .andThen(Single.error(throwable));\\n    }).flatMap(rows -> sqlConnection.rxSetAutoCommit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \").andThen(Single.just(rows)))\\n    .doFinally(sqlConnection::close);\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"p\", null, \"That is a lot of boil\\xADer\\xADplate around the spe\\xADcific data\\xADbase queries\\u2026\\nIt would be bet\\xADter to re\\xADlieve the de\\xADvel\\xADoper from main\\xADtain\\xADing it.\"), mdx(\"h2\", {\n    \"id\": \"vertx-36-tools-for-transaction-management\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-36-tools-for-transaction-management\"\n  })), \"Vert.x 3.6 tools for transaction management\"), mdx(\"p\", null, \"That is why Vert.x 3.6 will pro\\xADvide \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"Observable\"), \" trans\\xADform\\xADers\"), \" that can be ap\\xADplied to re\\xADac\\xADtive flows with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"compose\")), \" to make them trans\\xADac\\xADtional:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txFlowableTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txObservableTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txSingleTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txMaybeTransformer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLClientHelper#txCompletableTransformer\"))), mdx(\"p\", null, \"These \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"trans\\xADform\\xADers\"), \" wrap the cor\\xADre\\xADspond\\xADing source of events with SQL trans\\xADac\\xADtion man\\xADage\\xADment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"dbClient.rxGetConnection().flatMap(sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n    .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))\\n    .doFinally(sqlConnection::close);\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"p\", null, \"Source \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"trans\\xADform\\xADers\"), \" pro\\xADvide max\\xADi\\xADmum flex\\xADi\\xADbil\\xADity: you are still able to ex\\xADe\\xADcute op\\xADer\\xADa\\xADtions with the con\\xADnec\\xADtion after the trans\\xADac\\xADtion com\\xADpletes.\"), mdx(\"p\", null, \"How\\xADever, you usu\\xADally do not need the con\\xADnec\\xADtion after the changes are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmited\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"roll\\xADbacked\"), \".\\nIn this case, you may sim\\xADply cre\\xADate you source ob\\xADserv\\xADable with one of the trans\\xADac\\xADtional helper meth\\xADods in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.reactivex.ext.sql.SQLClientHelper\"), \".\"), mdx(\"p\", null, \"Let\\u2019s rewrite the pre\\xADvi\\xADous ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"SQLClientHelper.inTransactionSingle(client, sqlConnection -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO albums (name) VALUES ('The Israelites')\\\"\"), \")\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\\\"\"), \"))\\n    .andThen(sqlConnection.rxExecute(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\\\"\"), \"))\\n    .andThen(sqlConnection.rxQuery(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT name FROM tracks WHERE album = 'The Israelites'\\\"\"), \").map(ResultSet::getResults))\\n}).map(rows -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform DB rows into a client-friendly JSON object\"), \"\\n}).subscribe(json -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send JSON to the client\"), \"\\n}, t -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send error to the client\"), \"\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"give-it-a-try\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#give-it-a-try\"\n  })), \"Give it a try\"), mdx(\"p\", null, \"Vert.x 3.6 is ex\\xADpected around fall, but the code is al\\xADready in mas\\xADter and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"snap\\xADshots\"), \" are reg\\xADu\\xADlarly pub\\xADlished to Sonatype\\u2019s OSS repos.\"), mdx(\"p\", null, \"So give it a try and feel free to pro\\xADvide your fee\\xADback on our user or dev \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/community\"\n  }), \"chan\\xADnels\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><em>TL;DR As of 3.5, man­ag­ing data­base trans­ac­tions with Vert.x re­quires a lot of boil­er­plate code.</em>\n<em>Vert.x 3.6 will pro­vide helpers and <code>Observable</code> trans­form­ers to eas­ily make a re­ac­tive flow trans­ac­tional.</em></p><h2 id=\"simple-queries-with-the-rxified-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#simple-queries-with-the-rxified-api\"></a>Simple queries with the <em>“Rxified”</em> API</h2><p>The <a href=\"https://vertx.io/docs/vertx-rx/java2/\">Vert.x API for Rx­Java</a> is one of the most pop­u­lar mod­ules in the Vert.x stack.</p><p>So we make sure the <em>“Rx­i­fied”</em> API is easy to use for com­mon pro­gram­ming tasks, such as read­ing rows from a re­la­tional data­base and send­ing the re­sult to the client:</p><pre><code class=\"hljs language-java\">dbClient.rxQuery(<span class=\"hljs-string\">&quot;SELECT name, duration FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>)\n  .map(ResultSet::getResults)\n  .map(rows -&gt; {\n    <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n  })\n  .subscribe(json -&gt; {\n    <span class=\"hljs-comment\">// Send JSON to the client</span>\n  }, t -&gt; {\n    <span class=\"hljs-comment\">// Send error to the client</span>\n  });\n</code></pre><h2 id=\"managing-transactions-with-vertx-35\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#managing-transactions-with-vertx-35\"></a>Managing transactions with Vert.x 3.5</h2><p>But very often, de­vel­op­ers have to im­ple­ment com­plex in­ter­ac­tions with the data­base, run­ning in­side a sin­gle trans­ac­tion.\nTo do so, the im­ple­men­ta­tion must fol­low this process:</p><ul><li>get a con­nec­tion from the pool,</li><li>start a trans­ac­tion,</li><li>ex­e­cute queries,</li><li>if all queries suc­ceed, com­mit the trans­ac­tion,</li><li>oth­er­wise, roll­back the changes.</li></ul><p>How does that trans­late to code?</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Get a connection from the pool</span>\ndbClient.rxGetConnection().flatMap(sqlConnection -&gt; {\n  <span class=\"hljs-comment\">// Setting auto-commit mode to false implicitely starts a transaction</span>\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">false</span>)\n    .andThen(\n      <span class=\"hljs-comment\">// Database queries</span>\n      sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n        .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n        .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n        .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n    )\n    <span class=\"hljs-comment\">// Commit if all queries succeed</span>\n    .flatMap(rows -&gt; sqlConnection.rxCommit().andThen(Single.just(rows)))\n    .onErrorResumeNext(throwable -&gt; {\n      <span class=\"hljs-comment\">// On error, rollback the changes</span>\n      <span class=\"hljs-keyword\">return</span> sqlConnection.rxRollback().onErrorComplete()\n        .andThen(sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">true</span>).onErrorComplete())\n        .andThen(Single.error(throwable));\n    }).flatMap(rows -&gt; sqlConnection.rxSetAutoCommit(<span class=\"hljs-keyword\">true</span>).andThen(Single.just(rows)))\n    .doFinally(sqlConnection::close);\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><p>That is a lot of boil­er­plate around the spe­cific data­base queries…\nIt would be bet­ter to re­lieve the de­vel­oper from main­tain­ing it.</p><h2 id=\"vertx-36-tools-for-transaction-management\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-36-tools-for-transaction-management\"></a>Vert.x 3.6 tools for transaction management</h2><p>That is why Vert.x 3.6 will pro­vide <em><code>Observable</code> trans­form­ers</em> that can be ap­plied to re­ac­tive flows with <a href=\"http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-\"><code>compose</code></a> to make them trans­ac­tional:</p><ul><li><code>SQLClientHelper#txFlowableTransformer</code></li><li><code>SQLClientHelper#txObservableTransformer</code></li><li><code>SQLClientHelper#txSingleTransformer</code></li><li><code>SQLClientHelper#txMaybeTransformer</code></li><li><code>SQLClientHelper#txCompletableTransformer</code></li></ul><p>These <em>trans­form­ers</em> wrap the cor­re­spond­ing source of events with SQL trans­ac­tion man­age­ment.</p><pre><code class=\"hljs language-java\">dbClient.rxGetConnection().flatMap(sqlConnection -&gt; {\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))\n    .doFinally(sqlConnection::close);\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><p>Source <em>trans­form­ers</em> pro­vide max­i­mum flex­i­bil­ity: you are still able to ex­e­cute op­er­a­tions with the con­nec­tion after the trans­ac­tion com­pletes.</p><p>How­ever, you usu­ally do not need the con­nec­tion after the changes are <em>com­mited</em> or <em>roll­backed</em>.\nIn this case, you may sim­ply cre­ate you source ob­serv­able with one of the trans­ac­tional helper meth­ods in <code>io.vertx.reactivex.ext.sql.SQLClientHelper</code>.</p><p>Let’s rewrite the pre­vi­ous ex­am­ple:</p><pre><code class=\"hljs language-java\">SQLClientHelper.inTransactionSingle(client, sqlConnection -&gt; {\n  <span class=\"hljs-keyword\">return</span> sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO albums (name) VALUES (&#x27;The Israelites&#x27;)&quot;</span>)\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Israelites&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxExecute(<span class=\"hljs-string\">&quot;INSERT INTO tracks (album, name) VALUES (&#x27;The Israelites&#x27;, &#x27;Too Much Too Soon&#x27;)&quot;</span>))\n    .andThen(sqlConnection.rxQuery(<span class=\"hljs-string\">&quot;SELECT name FROM tracks WHERE album = &#x27;The Israelites&#x27;&quot;</span>).map(ResultSet::getResults))\n}).map(rows -&gt; {\n  <span class=\"hljs-comment\">// Transform DB rows into a client-friendly JSON object</span>\n}).subscribe(json -&gt; {\n  <span class=\"hljs-comment\">// Send JSON to the client</span>\n}, t -&gt; {\n  <span class=\"hljs-comment\">// Send error to the client</span>\n});\n</code></pre><h2 id=\"give-it-a-try\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#give-it-a-try\"></a>Give it a try</h2><p>Vert.x 3.6 is ex­pected around fall, but the code is al­ready in mas­ter and <em>snap­shots</em> are reg­u­larly pub­lished to Sonatype’s OSS repos.</p><p>So give it a try and feel free to pro­vide your fee­back on our user or dev <a href=\"https://vertx.io/community\">chan­nels</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"transact","tf":11},{"term":"manag","tf":4},{"term":"databas","tf":4},{"term":"provid","tf":4},{"term":"transform","tf":4},{"term":"queri","tf":4},{"term":"code","tf":3},{"term":"api","tf":3},{"term":"connect","tf":3},{"term":"sourc","tf":3},{"term":"lot","tf":2},{"term":"boilerpl","tf":2},{"term":"will","tf":2},{"term":"helper","tf":2},{"term":"reactiv","tf":2},{"term":"flow","tf":2},{"term":"rxifi","tf":2},{"term":"on","tf":2},{"term":"develop","tf":2},{"term":"implement","tf":2},{"term":"execut","tf":2},{"term":"commit","tf":2},{"term":"rollback","tf":2},{"term":"chang","tf":2},{"term":"around","tf":2}]},{"filename":"blog/2018-06-04-eclipse-vert-x-goes-native.mdx","date":"2018-06-04","slug":"eclipse-vert-x-goes-native","meta":{"title":"Eclipse Vert.x goes Native","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"This blog post introduces native image generation of Vert.x applications with GraalVM. Generated executables can be run without a JVM."},"readingTime":{"text":"5 min read","minutes":4.235,"time":254100.00000000003,"words":847},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I this blog post, I would like to give you a pre\\xADview on na\\xADtive image gen\\xADer\\xADa\\xADtion of Vert.x ap\\xADpli\\xADca\\xADtions using GraalVM.\"), mdx(\"p\", null, \"With \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.graalvm.org/\"\n  }), \"GraalVM\"), \" it is pos\\xADsi\\xADble to gen\\xADer\\xADate na\\xADtive ex\\xADe\\xADcuta\\xADbles.\\nThese ex\\xADe\\xADcuta\\xADbles can be di\\xADrectly run with\\xADout the need of an in\\xADstalled JVM.\"), mdx(\"h2\", {\n    \"id\": \"benefits\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#benefits\"\n  })), \"Benefits\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The start up time is way faster. It is no longer re\\xADquired to wait for the start up of the JVM. The ap\\xADpli\\xADca\\xADtion is usu\\xADally up and run\\xADning in a mat\\xADter of mil\\xADlisec\\xADonds.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Re\\xADduced mem\\xADory foot\\xADprint. I mea\\xADsured 40 MB mem\\xADory usage (RSS) for the Vert.x Web ap\\xADpli\\xADca\\xADtion which I\\u2019m going to show\\xADcase.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Smaller Con\\xADtain\\xADers. No JVM means no over\\xADhead. All the needed parts are al\\xADready con\\xADtained within the ex\\xADe\\xADcutable. This can be very ben\\xADe\\xADfi\\xADcial when build\\xADing de\\xADploy\\xADable con\\xADtainer im\\xADages.\"))), mdx(\"h2\", {\n    \"id\": \"demo-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#demo-project\"\n  })), \"Demo Project\"), mdx(\"p\", null, \"For the demo ap\\xADpli\\xADca\\xADtion I choose a very basic hello world \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web/java/\"\n  }), \"Vert.x Web\"), \" server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" de.jotschi.examples;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" java.io.File;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Vertx;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.logging.Logger;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.logging.LoggerFactory;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.logging.SLF4JLogDelegateFactory;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.web.Router;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Runner\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"main\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String[] args)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Use logback for logging\"), \"\\n    File logbackFile = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" File(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"config\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"logback.xml\\\"\"), \");\\n    System.setProperty(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"logback.configurationFile\\\"\"), \", logbackFile.getAbsolutePath());\\n    System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());\\n    Logger log = LoggerFactory.getLogger(Runner.class);\\n\\n    // Setup the http server\\n    log.info(\\\"Starting server \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \": http://localhost:\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"/hello\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\");\\n    Vertx vertx = Vertx.vertx();\\n    Router router = Router.router(vertx);\\n\\n    router.route(\\\"\"), \"/hello\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\").handler(rc -> {\\n      log.info(\\\"\"), \"Got hello request\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\");\\n      rc.response().end(\\\"\"), \"World\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\");\\n    });\\n\\n    vertx.createHttpServer()\\n      .requestHandler(router::accept)\\n      .listen(8080);\\n\\n  }\\n\\n}\\n\"))), mdx(\"h2\", {\n    \"id\": \"graalvm\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#graalvm\"\n  })), \"GraalVM\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.graalvm.org/\"\n  }), \"GraalVM\"), \" runs a sta\\xADtic analy\\xADsis on the gen\\xADer\\xADated ap\\xADpli\\xADca\\xADtion in order to find the reach\\xADable code.\\nThis process which is run within the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/oracle/graal/tree/master/substratevm\"\n  }), \"Sub\\xADstrate VM\"), \" will lead to the gen\\xADer\\xADa\\xADtion of the na\\xADtive image.\"), mdx(\"h3\", {\n    \"id\": \"limitations\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#limitations\"\n  })), \"Limitations\"), mdx(\"p\", null, \"Due to the na\\xADture of the sta\\xADtic analy\\xADsis Sub\\xADstrate VM also has some \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\"\n  }), \"lim\\xADi\\xADta\\xADtions\"), \".\"), mdx(\"p\", null, \"Dy\\xADnamic class load\\xADing and un\\xADload\\xADing for ex\\xADam\\xADple is not sup\\xADported be\\xADcause this would in essence alter the avail\\xADable code dur\\xADing run\\xADtime. \"), mdx(\"p\", null, \"Re\\xADflec\\xADtion is only par\\xADtially sup\\xADported and re\\xADquires some man\\xADual steps which we will cover later on.\"), mdx(\"h3\", {\n    \"id\": \"patches--workarounds\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#patches--workarounds\"\n  })), \"Patches / Workarounds\"), mdx(Alert, {\n    info: true,\n    title: \"Work in progress\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Next we need to apply some patches / workarounds. Keep in mind that na\\xADtive image gen\\xADer\\xADa\\xADtion is a fairly new topic and the these workarounds will hope\\xADfully no longer be re\\xADquired once the Sub\\xADstrate VM and Netty have bet\\xADter sup\\xADport for each other.\")), mdx(\"p\", null, \"I did not man\\xADage to get na\\xADtive epoll, kqueue and SSL in\\xADte\\xADgra\\xADtion to work with na\\xADtive im\\xADages.\\nThese parts are heav\\xADily op\\xADti\\xADmized within Netty and use JNI to di\\xADrectly ac\\xADcess the OS fea\\xADtures.\\nSub\\xADstrate VM sup\\xADports JNI and could in the\\xADory in\\xADte\\xADgrate these na\\xADtive li\\xADbraries. \"), mdx(\"p\", null, \"I cre\\xADated a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll\"\n  }), \"re\\xADpro\\xADducer\"), \"\\nand an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/oracle/graal/issues/442\"\n  }), \"issue\"), \" so hope\\xADfully these prob\\xADlems can be ad\\xADdressed soon.\"), mdx(\"h3\", {\n    \"id\": \"vertx-transport\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-transport\"\n  })), \"Vert.x Transport\"), mdx(\"p\", null, \"First I needed to patch the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.net.impl.transport.Transport\"), \" class in order to pre\\xADvent the load\\xADing of EPoll and KQueue na\\xADtive sup\\xADport. Oth\\xADer\\xADwise Sub\\xADstrate VM will try to load these classes and fail.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Transport\"), \" \"), \"{\\n\\u2026\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"/**\\n   * The native transport, it may be {\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-doctag\"\n  }), \"@code\"), \" null} or failed.\\n   */\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" Transport \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"nativeTransport\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Patched: I remove the native transport discovery. \"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The imports would be picked up by substrate \"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// and cause further issues. \"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \";\\n  }\\n\\u2026\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"netty-ssl\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#netty-ssl\"\n  })), \"Netty SSL\"), mdx(\"p\", null, \"Na\\xADtive SSL sup\\xADport is an\\xADother prob\\xADlem\\xADatic area. I cre\\xADated a patched dummy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.netty.handler.ssl.ReferenceCountedOpenSslEngine\"), \" class in order to pre\\xADvent Sub\\xADstrate VM from dig\\xADging deeper into the SSL code of Netty.\"), mdx(\"p\", null, \"Next we need to set up the re\\xADflec\\xADtion con\\xADfig\\xADu\\xADra\\xADtion within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reflectconfigs/netty.json\"), \".\"), mdx(\"p\", null, \"Netty uses re\\xADflec\\xADtion to in\\xADstan\\xADti\\xADate the socket chan\\xADnels. This is done in the Re\\xADflec\\xADtiveChan\\xADnelFac\\xADtory. We need to tell Sub\\xADstrate VM how classes of type NioServer\\xADSock\\xADetChan\\xADnel  and NioSock\\xADetChan\\xADnel can be in\\xADstan\\xADti\\xADated. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"[\\n  {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"io.netty.channel.socket.nio.NioSocketChannel\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"methods\\\"\"), \" : [\\n      { \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<init>\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"parameterTypes\\\"\"), \" : [] }\\n    ]\\n  },\\n  {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"io.netty.channel.socket.nio.NioServerSocketChannel\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"methods\\\"\"), \" : [\\n      { \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<init>\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"parameterTypes\\\"\"), \" : [] }\\n    ]\\n  }\\n]\\n\")), mdx(\"p\", null, \"If you want to learn more about the state of Netty and GraalVM I can rec\\xADom\\xADmend this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692\"\n  }), \"GraalVM Blog\\xADpost\"), \" by Co\\xADdrut Stancu.\"), mdx(\"h2\", {\n    \"id\": \"building\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#building\"\n  })), \"Building\"), mdx(\"p\", null, \"Fi\\xADnally we can build our maven project to gen\\xADer\\xADate a shaded jar.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\n\")), mdx(\"p\", null, \"Next we need the GraalVM pack\\xADage. You can down\\xADload it from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.graalvm.org/\"\n  }), \"GraalVM web\\xADsite\"), \".\"), mdx(\"p\", null, \"We use the shaded jar as the input source for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"native-image\"), \" com\\xADmand which will gen\\xADer\\xADate the ex\\xADe\\xADcutable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$GRAALVMDIR\"), \"/bin/native-image \\\\\\n --verbose \\\\\\n --no-server \\\\\\n -Dio.netty.noUnsafe=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"  \\\\\\n -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \\\\\\n -H:+ReportUnsupportedElementsAtRuntime \\\\\\n -Dfile.encoding=UTF-8 \\\\\\n -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar\\n\")), mdx(\"h2\", {\n    \"id\": \"result\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#result\"\n  })), \"Result\"), mdx(\"p\", null, \"Fi\\xADnally we end up with an 27 MB \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-graalvm-native-image-test-0.0.1-SNAPSHOT\"), \" ex\\xADe\\xADcutable which we can run.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"$ ldd vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \\n  linux-vdso.so.1 (0x00007ffc65be8000)\\n  libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8e892f0000)\\n  libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f8e890d3000)\\n  libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f8e88eb9000)\\n  librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f8e88cb1000)\\n  libcrypt.so.1 => /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f8e88a79000)\\n  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8e886da000)\\n  /lib64/ld-linux-x86-64.so.2 (0x00007f8e8afb7000)\\n\")), mdx(\"h3\", {\n    \"id\": \"memory\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#memory\"\n  })), \"Memory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"/usr/bin/time -f \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\\nmaxRSS\\\\t%MkB\\\"\"), \" java -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar \\n/usr/bin/time -f \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\\nmaxRSS\\\\t%MkB\\\"\"), \" ./vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Na\\xADtive Image: 40 MB\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java 10: 125 MB\")), mdx(\"p\", null, \"The full project can be found on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Jotschi/vertx-graalvm-native-image-test\"\n  }), \"GitHub\"), \".\"), mdx(\"p\", null, \"If you want to read more on the topic I can also rec\\xADom\\xADmend \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram\"\n  }), \"this ar\\xADti\\xADcle\"), \" by Re\\xADnato Athay\\xADdes in which he demon\\xADstrates how to cre\\xADate a very small light weight low mem\\xADory ap\\xADpli\\xADca\\xADtion using GraalVM.\"), mdx(\"p\", null, \"Thanks for read\\xADing. If you have any fur\\xADther ques\\xADtions or feed\\xADback don\\u2019t hes\\xADi\\xADtate to send me a tweet to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/Jotschi/\"\n  }), \"@Jotschi\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>I this blog post, I would like to give you a pre­view on na­tive image gen­er­a­tion of Vert.x ap­pli­ca­tions using GraalVM.</p><p>With <a href=\"https://www.graalvm.org/\">GraalVM</a> it is pos­si­ble to gen­er­ate na­tive ex­e­cuta­bles.\nThese ex­e­cuta­bles can be di­rectly run with­out the need of an in­stalled JVM.</p><h2 id=\"benefits\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#benefits\"></a>Benefits</h2><ul><li><p>The start up time is way faster. It is no longer re­quired to wait for the start up of the JVM. The ap­pli­ca­tion is usu­ally up and run­ning in a mat­ter of mil­lisec­onds.</p></li><li><p>Re­duced mem­ory foot­print. I mea­sured 40 MB mem­ory usage (RSS) for the Vert.x Web ap­pli­ca­tion which I’m going to show­case.</p></li><li><p>Smaller Con­tain­ers. No JVM means no over­head. All the needed parts are al­ready con­tained within the ex­e­cutable. This can be very ben­e­fi­cial when build­ing de­ploy­able con­tainer im­ages.</p></li></ul><h2 id=\"demo-project\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#demo-project\"></a>Demo Project</h2><p>For the demo ap­pli­ca­tion I choose a very basic hello world <a href=\"https://vertx.io/docs/vertx-web/java/\">Vert.x Web</a> server.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> de.jotschi.examples;\n\n<span class=\"hljs-keyword\">import</span> java.io.File;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Vertx;\n<span class=\"hljs-keyword\">import</span> io.vertx.core.logging.Logger;\n<span class=\"hljs-keyword\">import</span> io.vertx.core.logging.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> io.vertx.core.logging.SLF4JLogDelegateFactory;\n<span class=\"hljs-keyword\">import</span> io.vertx.ext.web.Router;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Runner</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    <span class=\"hljs-comment\">// Use logback for logging</span>\n    File logbackFile = <span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">&quot;config&quot;</span>, <span class=\"hljs-string\">&quot;logback.xml&quot;</span>);\n    System.setProperty(<span class=\"hljs-string\">&quot;logback.configurationFile&quot;</span>, logbackFile.getAbsolutePath());\n    System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());\n    Logger log = LoggerFactory.getLogger(Runner.class);\n\n    // Setup the http server\n    log.info(&quot;Starting server <span class=\"hljs-keyword\">for</span>: http://localhost:<span class=\"hljs-number\">8080</span>/hello<span class=\"hljs-string\">&quot;);\n    Vertx vertx = Vertx.vertx();\n    Router router = Router.router(vertx);\n\n    router.route(&quot;</span>/hello<span class=\"hljs-string\">&quot;).handler(rc -&gt; {\n      log.info(&quot;</span>Got hello request<span class=\"hljs-string\">&quot;);\n      rc.response().end(&quot;</span>World<span class=\"hljs-string\">&quot;);\n    });\n\n    vertx.createHttpServer()\n      .requestHandler(router::accept)\n      .listen(8080);\n\n  }\n\n}\n</span></code></pre><h2 id=\"graalvm\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#graalvm\"></a>GraalVM</h2><p><a href=\"https://www.graalvm.org/\">GraalVM</a> runs a sta­tic analy­sis on the gen­er­ated ap­pli­ca­tion in order to find the reach­able code.\nThis process which is run within the <a href=\"https://github.com/oracle/graal/tree/master/substratevm\">Sub­strate VM</a> will lead to the gen­er­a­tion of the na­tive image.</p><h3 id=\"limitations\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#limitations\"></a>Limitations</h3><p>Due to the na­ture of the sta­tic analy­sis Sub­strate VM also has some <a href=\"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\">lim­i­ta­tions</a>.</p><p>Dy­namic class load­ing and un­load­ing for ex­am­ple is not sup­ported be­cause this would in essence alter the avail­able code dur­ing run­time. </p><p>Re­flec­tion is only par­tially sup­ported and re­quires some man­ual steps which we will cover later on.</p><h3 id=\"patches--workarounds\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#patches--workarounds\"></a>Patches / Workarounds</h3><div class=\"alert info\"><div class=\"alert-title\">Work in progress</div><p>Next we need to apply some patches / workarounds. Keep in mind that na­tive image gen­er­a­tion is a fairly new topic and the these workarounds will hope­fully no longer be re­quired once the Sub­strate VM and Netty have bet­ter sup­port for each other.</p></div><p>I did not man­age to get na­tive epoll, kqueue and SSL in­te­gra­tion to work with na­tive im­ages.\nThese parts are heav­ily op­ti­mized within Netty and use JNI to di­rectly ac­cess the OS fea­tures.\nSub­strate VM sup­ports JNI and could in the­ory in­te­grate these na­tive li­braries. </p><p>I cre­ated a <a href=\"https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll\">re­pro­ducer</a>\nand an <a href=\"https://github.com/oracle/graal/issues/442\">issue</a> so hope­fully these prob­lems can be ad­dressed soon.</p><h3 id=\"vertx-transport\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-transport\"></a>Vert.x Transport</h3><p>First I needed to patch the <code>io.vertx.core.net.impl.transport.Transport</code> class in order to pre­vent the load­ing of EPoll and KQueue na­tive sup­port. Oth­er­wise Sub­strate VM will try to load these classes and fail.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Transport</span> </span>{\n…\n  <span class=\"hljs-comment\">/**\n   * The native transport, it may be {<span class=\"hljs-doctag\">@code</span> null} or failed.\n   */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Transport <span class=\"hljs-title\">nativeTransport</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Patched: I remove the native transport discovery. </span>\n    <span class=\"hljs-comment\">// The imports would be picked up by substrate </span>\n    <span class=\"hljs-comment\">// and cause further issues. </span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n…\n}\n</code></pre><h3 id=\"netty-ssl\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#netty-ssl\"></a>Netty SSL</h3><p>Na­tive SSL sup­port is an­other prob­lem­atic area. I cre­ated a patched dummy <code>io.netty.handler.ssl.ReferenceCountedOpenSslEngine</code> class in order to pre­vent Sub­strate VM from dig­ging deeper into the SSL code of Netty.</p><p>Next we need to set up the re­flec­tion con­fig­u­ra­tion within <code>reflectconfigs/netty.json</code>.</p><p>Netty uses re­flec­tion to in­stan­ti­ate the socket chan­nels. This is done in the Re­flec­tiveChan­nelFac­tory. We need to tell Sub­strate VM how classes of type NioServer­Sock­etChan­nel  and NioSock­etChan­nel can be in­stan­ti­ated. </p><pre><code class=\"hljs language-json\">[\n  {\n    <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;io.netty.channel.socket.nio.NioSocketChannel&quot;</span>,\n    <span class=\"hljs-attr\">&quot;methods&quot;</span> : [\n      { <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;&lt;init&gt;&quot;</span>, <span class=\"hljs-attr\">&quot;parameterTypes&quot;</span> : [] }\n    ]\n  },\n  {\n    <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;io.netty.channel.socket.nio.NioServerSocketChannel&quot;</span>,\n    <span class=\"hljs-attr\">&quot;methods&quot;</span> : [\n      { <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;&lt;init&gt;&quot;</span>, <span class=\"hljs-attr\">&quot;parameterTypes&quot;</span> : [] }\n    ]\n  }\n]\n</code></pre><p>If you want to learn more about the state of Netty and GraalVM I can rec­om­mend this <a href=\"https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692\">GraalVM Blog­post</a> by Co­drut Stancu.</p><h2 id=\"building\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#building\"></a>Building</h2><p>Fi­nally we can build our maven project to gen­er­ate a shaded jar.</p><pre><code class=\"hljs language-bash\">mvn clean package\n</code></pre><p>Next we need the GraalVM pack­age. You can down­load it from the <a href=\"https://www.graalvm.org/\">GraalVM web­site</a>.</p><p>We use the shaded jar as the input source for the <code>native-image</code> com­mand which will gen­er­ate the ex­e­cutable.</p><pre><code class=\"hljs language-bash\"><span class=\"hljs-variable\">$GRAALVMDIR</span>/bin/native-image \\\n --verbose \\\n --no-server \\\n -Dio.netty.noUnsafe=<span class=\"hljs-literal\">true</span>  \\\n -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \\\n -H:+ReportUnsupportedElementsAtRuntime \\\n -Dfile.encoding=UTF-8 \\\n -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar\n</code></pre><h2 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#result\"></a>Result</h2><p>Fi­nally we end up with an 27 MB <code>vertx-graalvm-native-image-test-0.0.1-SNAPSHOT</code> ex­e­cutable which we can run.</p><pre><code class=\"hljs language-bash\">$ ldd vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \n  linux-vdso.so.1 (0x00007ffc65be8000)\n  libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8e892f0000)\n  libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f8e890d3000)\n  libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f8e88eb9000)\n  librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f8e88cb1000)\n  libcrypt.so.1 =&gt; /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007f8e88a79000)\n  libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8e886da000)\n  /lib64/ld-linux-x86-64.so.2 (0x00007f8e8afb7000)\n</code></pre><h3 id=\"memory\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#memory\"></a>Memory</h3><pre><code class=\"hljs language-bash\">/usr/bin/time -f <span class=\"hljs-string\">&quot;\\nmaxRSS\\t%MkB&quot;</span> java -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar \n/usr/bin/time -f <span class=\"hljs-string\">&quot;\\nmaxRSS\\t%MkB&quot;</span> ./vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \n</code></pre><ul><li>Na­tive Image: 40 MB</li><li>Java 10: 125 MB</li></ul><p>The full project can be found on <a href=\"https://github.com/Jotschi/vertx-graalvm-native-image-test\">GitHub</a>.</p><p>If you want to read more on the topic I can also rec­om­mend <a href=\"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram\">this ar­ti­cle</a> by Re­nato Athay­des in which he demon­strates how to cre­ate a very small light weight low mem­ory ap­pli­ca­tion using GraalVM.</p><p>Thanks for read­ing. If you have any fur­ther ques­tions or feed­back don’t hes­i­tate to send me a tweet to <a href=\"https://twitter.com/Jotschi/\">@Jotschi</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"nativ","tf":10},{"term":"graalvm","tf":9},{"term":"gener","tf":7},{"term":"need","tf":7},{"term":"substrat","tf":7},{"term":"vm","tf":7},{"term":"imag","tf":6},{"term":"applic","tf":6},{"term":"support","tf":6},{"term":"netti","tf":6},{"term":"us","tf":5},{"term":"execut","tf":5},{"term":"run","tf":5},{"term":"will","tf":5},{"term":"class","tf":5},{"term":"no","tf":4},{"term":"memori","tf":4},{"term":"mb","tf":4},{"term":"within","tf":4},{"term":"patch","tf":4},{"term":"ssl","tf":4},{"term":"jvm","tf":3},{"term":"requir","tf":3},{"term":"contain","tf":3},{"term":"build","tf":3}]},{"filename":"blog/2018-04-23-eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api.mdx","date":"2018-04-23","slug":"eclipse-vert-x-rabbitmq-client-gets-a-new-consumer-api","meta":{"title":"Eclipse Vert.x RabbitMQ client gets a new consumer API!","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this blog post, we present the new consumer API of the RabbitMQ client that will be released with Eclipse Vert.x 3.6.0."},"readingTime":{"text":"3 min read","minutes":2.245,"time":134700.00000000003,"words":449},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In Eclipse Vert.x 3.6.0, the Rab\\xADbitMQ client will get a new con\\xADsumer API. In this post we are going to show\\nthe im\\xADprove\\xADments since the pre\\xADvi\\xADous API and how easy it is to use now.\"), mdx(\"p\", null, \"Be\\xADfore dig\\xADging into the new API let\\u2019s find out what were the lim\\xADi\\xADta\\xADtions of the ac\\xADtual one:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The API uses the event bus in such lim\\xADit\\xADing the con\\xADtrol of the con\\xADsumer over the Rab\\xADbitMQ queue.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The mes\\xADsage API is based on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JsonObject\"), \" which does not pro\\xADvide a typed API\")), mdx(\"h2\", {\n    \"id\": \"the-new-api-at-a-glance\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-new-api-at-a-glance\"\n  })), \"The new API at a glance\"), mdx(\"p\", null, \"Here is how sim\\xADple queue con\\xADsump\\xADtion looks like with the new API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"RabbitMQClient client = RabbitMQClient.create(vertx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RabbitMQOptions());\\n\\nclient.basicConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my.queue\\\"\"), \", res -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (res.succeeded()) {\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"RabbitMQ consumer created !\\\"\"), \");\\n    RabbitMQConsumer mqConsumer = res.result();\\n    mqConsumer.handler((RabbitMQMessage message) -> {\\n        System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Got message: \\\"\"), \" + message.body().toString());\\n    });\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Oups something went wrong\"), \"\\n    res.cause().printStackTrace();\\n  }\\n});\\n\")), mdx(\"p\", null, \"Now to cre\\xADate a queue you sim\\xADply call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"basicConsumer\"), \" method and you ob\\xADtain asyn\\xADchro\\xADnously\\na \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RabbitMQConsumer\"), \".\"), mdx(\"p\", null, \"Then you need to pro\\xADvide a han\\xADdler called for each mes\\xADsage con\\xADsumed via \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Rab\\xADbit\\xADMQ\\xADCon\\xADsumer#han\\xADdler\"), \" which\\nis the id\\xADiomatic way to con\\xADsumer stream in Vert.x\"), mdx(\"p\", null, \"You may also note that when we a mes\\xADsage ar\\xADrives, it has the type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RabbitMQMessage\"), \", this is a typed\\nmes\\xADsage rep\\xADre\\xADsen\\xADta\\xADtion.\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RabbitMQConsumer\"), \" is a stream, you also al\\xADlowed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pause\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resume\"), \" the stream, sub\\xADscribe to the\\nend event, get no\\xADti\\xADfied when an ex\\xADcep\\xADtion oc\\xADcurs.\"), mdx(\"p\", null, \"In ad\\xADdi\\xADtion, you can can\\xADcel the sub\\xADscrip\\xADtion by call\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RabbitMQConsumer#cancel\"), \" method.\"), mdx(\"h2\", {\n    \"id\": \"backpressure\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#backpressure\"\n  })), \"Backpressure\"), mdx(\"p\", null, \"Some\\xADtimes you can have more in\\xADcom\\xADing mes\\xADsages than you can han\\xADdle.\"), mdx(\"p\", null, \"The new con\\xADsumer API al\\xADlows you to con\\xADtrol this and lets you store ar\\xADrived mes\\xADsages in the in\\xADter\\xADnal queue\\nbe\\xADfore they are de\\xADliv\\xADered to the ap\\xADpli\\xADca\\xADtion. In\\xADdeed, you can con\\xADfig\\xADure the queue size.\"), mdx(\"p\", null, \"Here is how you can limit the in\\xADter\\xADnal queue size:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Limit to max 300 messages\"), \"\\nQueueOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" QueueOptions()\\n  .setMaxInternalQueueSize(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"300\"), \");\\n\\nRabbitMQClient client = RabbitMQClient.create(vertx, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RabbitMQOptions());\\n\\nclient.basicConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my.queue\\\"\"), \", options, res -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (res.succeeded()) {\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"RabbitMQ consumer created !\\\"\"), \");\\n    RabbitMQConsumer mqConsumer = res.result();\\n    mqConsumer.handler((RabbitMQMessage message) -> {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Got message: \\\"\"), \" + message.body().toString());\\n    });\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    res.cause().printStackTrace();\\n  }\\n});\\n\")), mdx(\"p\", null, \"When the in\\xADten\\xADral queue queue ca\\xADpac\\xADity is ex\\xADceeded, the new mes\\xADsage will be sim\\xADply dropped.\"), mdx(\"p\", null, \"An al\\xADter\\xADna\\xADtive op\\xADtion is to drop the old\\xADest mes\\xADsage in the queue.\"), mdx(\"p\", null, \"In order to achieve this, you should spec\\xADify the be\\xADhav\\xADior by call\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueueOptions#setKeepMostRecent\"), \" method.\"), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"The new Vert.x Rab\\xADbitMQ client con\\xADsumer API is way more id\\xADiomatic and mod\\xADern way to con\\xADsume mes\\xADsages from a queue.\"), mdx(\"p\", null, \"This API is going to pro\\xADvided in the 3.6.0 re\\xADlease, while the old will be dep\\xADre\\xADcated.\"), mdx(\"p\", null, \"I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In Eclipse Vert.x 3.6.0, the Rab­bitMQ client will get a new con­sumer API. In this post we are going to show\nthe im­prove­ments since the pre­vi­ous API and how easy it is to use now.</p><p>Be­fore dig­ging into the new API let’s find out what were the lim­i­ta­tions of the ac­tual one:</p><ol><li>The API uses the event bus in such lim­it­ing the con­trol of the con­sumer over the Rab­bitMQ queue.</li><li>The mes­sage API is based on <code>JsonObject</code> which does not pro­vide a typed API</li></ol><h2 id=\"the-new-api-at-a-glance\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-new-api-at-a-glance\"></a>The new API at a glance</h2><p>Here is how sim­ple queue con­sump­tion looks like with the new API:</p><pre><code class=\"hljs language-java\">RabbitMQClient client = RabbitMQClient.create(vertx, <span class=\"hljs-keyword\">new</span> RabbitMQOptions());\n\nclient.basicConsumer(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -&gt; {\n        System.out.println(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + message.body().toString());\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Oups something went wrong</span>\n    res.cause().printStackTrace();\n  }\n});\n</code></pre><p>Now to cre­ate a queue you sim­ply call the <code>basicConsumer</code> method and you ob­tain asyn­chro­nously\na <code>RabbitMQConsumer</code>.</p><p>Then you need to pro­vide a han­dler called for each mes­sage con­sumed via <em>Rab­bit­MQ­Con­sumer#han­dler</em> which\nis the id­iomatic way to con­sumer stream in Vert.x</p><p>You may also note that when we a mes­sage ar­rives, it has the type of <code>RabbitMQMessage</code>, this is a typed\nmes­sage rep­re­sen­ta­tion.</p><p>Since <code>RabbitMQConsumer</code> is a stream, you also al­lowed to <code>pause</code> and <code>resume</code> the stream, sub­scribe to the\nend event, get no­ti­fied when an ex­cep­tion oc­curs.</p><p>In ad­di­tion, you can can­cel the sub­scrip­tion by call­ing <code>RabbitMQConsumer#cancel</code> method.</p><h2 id=\"backpressure\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#backpressure\"></a>Backpressure</h2><p>Some­times you can have more in­com­ing mes­sages than you can han­dle.</p><p>The new con­sumer API al­lows you to con­trol this and lets you store ar­rived mes­sages in the in­ter­nal queue\nbe­fore they are de­liv­ered to the ap­pli­ca­tion. In­deed, you can con­fig­ure the queue size.</p><p>Here is how you can limit the in­ter­nal queue size:</p><pre><code class=\"hljs language-java\">\n<span class=\"hljs-comment\">// Limit to max 300 messages</span>\nQueueOptions options = <span class=\"hljs-keyword\">new</span> QueueOptions()\n  .setMaxInternalQueueSize(<span class=\"hljs-number\">300</span>);\n\nRabbitMQClient client = RabbitMQClient.create(vertx, <span class=\"hljs-keyword\">new</span> RabbitMQOptions());\n\nclient.basicConsumer(<span class=\"hljs-string\">&quot;my.queue&quot;</span>, options, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;RabbitMQ consumer created !&quot;</span>);\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -&gt; {\n      System.out.println(<span class=\"hljs-string\">&quot;Got message: &quot;</span> + message.body().toString());\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    res.cause().printStackTrace();\n  }\n});\n</code></pre><p>When the in­ten­ral queue queue ca­pac­ity is ex­ceeded, the new mes­sage will be sim­ply dropped.</p><p>An al­ter­na­tive op­tion is to drop the old­est mes­sage in the queue.</p><p>In order to achieve this, you should spec­ify the be­hav­ior by call­ing <code>QueueOptions#setKeepMostRecent</code> method.</p><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>The new Vert.x Rab­bitMQ client con­sumer API is way more id­iomatic and mod­ern way to con­sume mes­sages from a queue.</p><p>This API is going to pro­vided in the 3.6.0 re­lease, while the old will be dep­re­cated.</p><p>I hope you en­joyed read­ing this ar­ti­cle. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"api","tf":11},{"term":"queue","tf":10},{"term":"messag","tf":9},{"term":"new","tf":7},{"term":"consum","tf":7},{"term":"call","tf":4},{"term":"rabbitmq","tf":3},{"term":"will","tf":3},{"term":"limit","tf":3},{"term":"provid","tf":3},{"term":"type","tf":3},{"term":"method","tf":3},{"term":"stream","tf":3},{"term":"client","tf":2},{"term":"go","tf":2},{"term":"us","tf":2},{"term":"let","tf":2},{"term":"event","tf":2},{"term":"control","tf":2},{"term":"simpli","tf":2},{"term":"handler","tf":2},{"term":"idiomat","tf":2},{"term":"arriv","tf":2},{"term":"allow","tf":2},{"term":"intern","tf":2}]},{"filename":"blog/2018-04-09-eclipse-vert-x-metrics-now-with-micrometer-io.mdx","date":"2018-04-09","slug":"eclipse-vert-x-metrics-now-with-micrometer-io","meta":{"title":"Eclipse Vert.x metrics now with Micrometer.io","category":"guides","authors":[{"name":"Joel Takvorian","github_id":"jotak"}],"summary":"The new vertx-micrometer-metrics module provides support for collecting metrics with Micrometer.io and storing them in backends such as Graphite or InfluxDB."},"readingTime":{"text":"8 min read","minutes":7.405,"time":444300,"words":1481},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x has al\\xADready been pro\\xADvid\\xADing met\\xADrics for some time, through the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-dropwizard-metrics/java/\"\n  }), \"vertx-\\u200Bdropwizard-metrics\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-hawkular-metrics/java/\"\n  }), \"vertx-\\u200Bhawkular-metrics\"), \" mod\\xADules. Both of them im\\xADple\\xADment a ser\\xADvice provider in\\xADter\\xADface (SPI) to col\\xADlect the Vert.x met\\xADrics and make them avail\\xADable to their re\\xADspec\\xADtive back\\xADends.\"), mdx(\"p\", null, \"A new mod\\xADule, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-micrometer-metrics/java/\"\n  }), \"vertx-\\u200Bmicrometer-metrics\"), \", is now added to the fam\\xADily. It im\\xADple\\xADments the same SPI, which means that it is able to pro\\xADvide the same met\\xADrics.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Mi\\xADcrom\\xADe\\xADter.io\")), \" is a pretty new met\\xADrics li\\xADbrary, quite com\\xADpa\\xADra\\xADble to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"drop\\xADwiz\\xADard met\\xADrics\"), \" in that it col\\xADlects met\\xADrics in a local, in-\\u200Bmemory reg\\xADistry and is able to store them in var\\xADi\\xADous back\\xADends such as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Graphite\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \". It has sev\\xADeral ad\\xADvan\\xADtages as we will see below.\"), mdx(\"h2\", {\n    \"id\": \"tell-me-more-about-micrometer\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#tell-me-more-about-micrometer\"\n  })), \"Tell me more about Micrometer\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Mi\\xADcrom\\xADe\\xADter.io\")), \" de\\xADscribes it\\xADself as a a vendor-\\u200Bneutral ap\\xADpli\\xADca\\xADtion met\\xADrics fa\\xADcade.\\nIt pro\\xADvides a well de\\xADsigned API, in Java, to de\\xADfine \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gauges\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"coun\\xADters\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timers\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries\"), \".\"), mdx(\"p\", null, \"Among the avail\\xADable back\\xADends, Mi\\xADcrom\\xADe\\xADter na\\xADtively sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Graphite\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JMX\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://micrometer.io/docs\"\n  }), \"sev\\xADeral oth\\xADers\"), \". Prometheus is very pop\\xADu\\xADlar in the Ku\\xADber\\xADnetes and mi\\xADcroser\\xADvices ecosys\\xADtems, so its sup\\xADport by Mi\\xADcrom\\xADe\\xADter was a strong mo\\xADti\\xADva\\xADtion for im\\xADple\\xADment\\xADing it in Vert.x.\"), mdx(\"p\", null, \"For the the mo\\xADment, our im\\xADple\\xADmen\\xADta\\xADtion in Vert.x sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prometheus\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JMX\"), \". More should quickly come in the near fu\\xADture.\"), mdx(\"h3\", {\n    \"id\": \"dimensionality\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dimensionality\"\n  })), \"Dimensionality\"), mdx(\"p\", null, \"An\\xADother in\\xADter\\xADest\\xADing as\\xADpect in Mi\\xADcrom\\xADe\\xADter is that it han\\xADdles met\\xADrics \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"di\\xADmen\\xADsion\\xADal\\xADity\"), \": met\\xADrics can be as\\xADso\\xADci\\xADated with a set of key/value pairs (some\\xADtimes ref\\xADered as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tags\"), \", some\\xADtimes as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"la\\xADbels\"), \"). Every value brings a new di\\xADmen\\xADsion to the met\\xADric, so that in Prometheus or any other back\\xADend that sup\\xADports di\\xADmen\\xADsion\\xADal\\xADity, we can query for dat\\xADa\\xADpoints of one or sev\\xADeral di\\xADmen\\xADsions, or query for dat\\xADa\\xADpoints ag\\xADgre\\xADgated over sev\\xADeral di\\xADmen\\xADsions.\"), mdx(\"p\", null, \"  \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ex\\xADam\\xADple: our met\\xADric \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"vertx_http_server_connections\"), \" ac\\xADcepts la\\xADbels \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"remote\"), \", that are used to store ad\\xADdresses on HTTP con\\xADnec\\xADtions\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Prometheus is used in the fol\\xADlow\\xADing ex\\xADam\\xADples, but equiv\\xADa\\xADlent queries can be per\\xADformed with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADfluxDB\"), \".\")), mdx(\"p\", null, \"In Prometheus, the query \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_http_server_connections\"), \" will re\\xADturn as many time\\xADseries as there are com\\xADbi\\xADna\\xADtions of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remote\"), \" val\\xADues. Ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-basic\"\n  }), \"vertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"1.1.1.1\\\"}\"), \"\\nvertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"2.2.2.2\\\"}\"), \"\\nvertx_http_server_connections{local=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0:8080\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"remote=\\\"3.3.3.3\\\"}\"), \"\\n\")), mdx(\"p\", null, \"To query on a sin\\xADgle di\\xADmen\\xADsion, we must pro\\xADvide the la\\xADbels:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_http_server_connections{local=\\\"0.0.0.0:8080\\\",remote=\\\"1.1.1.1\\\"}\"), \". It will re\\xADturn a sin\\xADgle time\\xADseries.\"), mdx(\"p\", null, \"To get an ag\\xADgre\\xADgate, Prometheus (PromQL) pro\\xADvides sev\\xADeral \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators\"\n  }), \"ag\\xADgre\\xADga\\xADtion op\\xADer\\xADa\\xADtors\"), \":\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum(vertx_http_server_connections)\"), \" will re\\xADturn the sum across all di\\xADmen\\xADsions.\"), mdx(\"h2\", {\n    \"id\": \"so-what-are-the-vertx-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#so-what-are-the-vertx-metrics\"\n  })), \"So what are the Vert.x metrics?\"), mdx(\"p\", null, \"Peo\\xADple al\\xADready fa\\xADmil\\xADiar with the ex\\xADist\\xADing met\\xADrics mod\\xADules (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"drop\\xADwiz\\xADard\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hawku\\xADlar\"), \") will not be too dis\\xADori\\xADented. They are roughly the same. The main dif\\xADfer\\xADence is where pre\\xADvi\\xADously, some met\\xADric names could have a vari\\xADable part within - such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.handlers.myaddress\"), \" - here we take ad\\xADvan\\xADtage of di\\xADmen\\xADsion\\xADal\\xADity and we will have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_handlers{address=\\\"myaddress\\\"}\"), \".\"), mdx(\"p\", null, \"Some other met\\xADrics are no longer use\\xADful, for in\\xADstance the drop\\xADwiz\\xADard\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending-local\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.eventbus.messages.pending-remote\"), \" are now just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_pending{side=local}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx_eventbus_pending{side=remote}\"), \" in mi\\xADcrom\\xADe\\xADter. The sum of them can eas\\xADily be com\\xADputed at query time.\"), mdx(\"p\", null, \"The met\\xADrics pro\\xADvided by Vert.x are dis\\xADpatched into eight big fam\\xADi\\xADlies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Net client\"), \": dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries of bytes sent and re\\xADceived, num\\xADber of con\\xADnec\\xADtions, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Net server\"), \": dis\\xADtri\\xADb\\xADu\\xADtion sum\\xADmaries of bytes sent and re\\xADceived, num\\xADber of con\\xADnec\\xADtions, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"HTTP client\"), \": counter of re\\xADquests, re\\xADsponse times, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"HTTP server\"), \": counter of re\\xADquests, pro\\xADcess\\xADing times, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Event bus\"), \": counter of han\\xADdlers, mes\\xADsages sent and re\\xADceived, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pool\"), \": for worker pools and some data\\xADsource pools, queue size and wait\\xADing time, pro\\xADcess\\xADing time, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Ver\\xADti\\xADcles\"), \": num\\xADber of ver\\xADti\\xADcles de\\xADployed.\")), mdx(\"p\", null, \"The full list of col\\xADlected met\\xADrics is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics\"\n  }), \"avail\\xADable here\"), \".\"), mdx(\"h2\", {\n    \"id\": \"getting-started\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#getting-started\"\n  })), \"Getting started\"), mdx(\"p\", null, \"This sec\\xADtion will guide you through a quick setup to run a Vert.x ap\\xADpli\\xADca\\xADtion with Mi\\xADcrom\\xADe\\xADter. The code ex\\xADam\\xADples used here are taken from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"micrometer-metrics-example\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-examples\"), \" repos\\xADi\\xADtory, in Java, using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"maven\"), \". But the same could be done with other Vert.x sup\\xADported lan\\xADguages, as well as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gra\\xADdle\"), \" in\\xADstead of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"maven\"), \".\"), mdx(\"h3\", {\n    \"id\": \"maven-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#maven-configuration\"\n  })), \"Maven configuration\"), mdx(\"p\", null, \"The con\\xADfig\\xADu\\xADra\\xADtion and the maven im\\xADports will vary ac\\xADcord\\xADing to the back\\xADend stor\\xADage that will be used. For maven, the com\\xADmon part is al\\xADways:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-micrometer-metrics\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.5.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then, to re\\xADport to In\\xADfluxDB:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-influx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or Prometheus:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-prometheus\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.5.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Re\\xADmark that, since Prometheus pulls met\\xADrics from their source, they must be ex\\xADposed on an HTTP end\\xADpoint. That\\u2019s why \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-web\"), \" is im\\xADported here. It is not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ab\\xADsolutely\"), \" nec\\xADes\\xADsary (it\\u2019s pos\\xADsi\\xADble to get the met\\xADrics reg\\xADistry con\\xADtent and ex\\xADpose it in any other way) but it\\u2019s prob\\xADa\\xADbly the eas\\xADi\\xADest way to do.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or JMX:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.micrometer\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"micrometer-registry-jmx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"At the mo\\xADment, it is not pos\\xADsi\\xADble to re\\xADport met\\xADrics to sev\\xADeral back\\xADends at the same time. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\"\n  }), \"It might be soon im\\xADple\\xADmented\"), \".\")), mdx(\"h3\", {\n    \"id\": \"setting-up-vertx-options\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#setting-up-vertx-options\"\n  })), \"Setting up Vert.x options\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MicrometerMetricsOptions\"), \" ob\\xADject must be cre\\xADated and passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VertxOptions\"), \", with one back\\xADend con\\xADfig\\xADured (though hav\\xADing no back\\xADend is pos\\xADsi\\xADble: you would get met\\xADrics sent to a de\\xADfault Mi\\xADcrom\\xADe\\xADter reg\\xADistry, but with\\xADout any per\\xADsis\\xADtent stor\\xADage).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In\\xADfluxDB ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Default InfluxDB options will push metrics to localhost:8086, db \\\"default\\\"\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setInfluxDbOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxInfluxDbOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prometheus ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Deploy with embedded server: prometheus metrics will be automatically exposed,\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// independently from any other HTTP server defined\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setPrometheusOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxPrometheusOptions()\\n    .setStartEmbeddedServer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \")\\n    .setEmbeddedServerOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" HttpServerOptions().setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8081\"), \"))\\n    .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or Prometheus with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/metrics\"), \" end\\xADpoint bound to an ex\\xADist\\xADing HTTP server:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Deploy without embedded server: we need to \\\"manually\\\" expose the prometheus metrics\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setPrometheusOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxPrometheusOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\\nRouter router = Router.router(vertx);\\nPrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Setup a route for metrics\"), \"\\nrouter.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/metrics\\\"\"), \").handler(ctx -> {\\n  String response = registry.scrape();\\n  ctx.response().end(response);\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JMX ex\\xADam\\xADple:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Default JMX options will publish MBeans under domain \\\"metrics\\\"\"), \"\\nMicrometerMetricsOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MicrometerMetricsOptions()\\n  .setJmxMetricsOptions(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxJmxMetricsOptions().setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \"))\\n  .setEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\nVertx vertx = Vertx.vertx(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" VertxOptions().setMetricsOptions(options));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Then deploy verticles with this vertx instance\"), \"\\n\")), mdx(\"h3\", {\n    \"id\": \"setup-the-backend-server\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#setup-the-backend-server\"\n  })), \"Setup the backend server\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.influxdata.com/\"\n  }), \"In\\xADfluxDB\"), \", by de\\xADfault, is ex\\xADpected to run on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"localhost:8086\"), \" with\\xADout au\\xADthen\\xADti\\xADca\\xADtion, data\\xADbase \\u201Cde\\xADfault\\u201D. It is con\\xADfig\\xADurable in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"VertxInfluxDbOptions\"), \".\\nIf you don\\u2019t have a run\\xADning in\\xADstance of In\\xADfluxDB, the short\\xADest way to start is cer\\xADtainly with docker, just run:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"docker run -p 8086:8086 influxdb\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://prometheus.io/docs/prometheus/latest/getting_started/\"\n  }), \"Prometheus\"), \" needs some con\\xADfig\\xADu\\xADra\\xADtion since it pulls met\\xADrics from the sources. Once it is in\\xADstalled, con\\xADfig\\xADure the scrape end\\xADpoints in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prometheus.yml\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"job_name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'vertx-8081'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"static_configs:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"targets:\"), \" [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'localhost:8081'\"), \"]\\n\")), mdx(\"p\", null, \"or, when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/metrics\"), \" end\\xADpoint bound to an ex\\xADist\\xADing HTTP server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"job_name:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'vertx-8080'\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"static_configs:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"targets:\"), \" [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'localhost:8080'\"), \"]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For JMX there is noth\\xADing spe\\xADcial to con\\xADfig\\xADure.\")), mdx(\"h3\", {\n    \"id\": \"collecting-vertx-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#collecting-vertx-metrics\"\n  })), \"Collecting Vert.x metrics\"), mdx(\"p\", null, \"From now on, all Vert.x met\\xADrics will be col\\xADlected and sent to the con\\xADfig\\xADured back\\xADend. In our Vert.x ex\\xADam\\xADple, we setup an HTTP server met\\xADrics:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Router router = Router.router(vertx);\\nrouter.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(ctx -> {\\n  ctx.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Micrometer from HTTP!\\\"\"), \");\\n});\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \" And some event bus ping-\\u200Bpong:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Producer side\"), \"\\nvertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", x -> {\\n  vertx.eventBus().send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello Micrometer from event bus!\\\"\"), \");\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Consumer side\"), \"\\nvertx.eventBus().<String>consumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", message -> {\\n  String greeting = message.body();\\n  System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Received: \\\"\"), \" + greeting);\\n  message.reply(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello back!\\\"\"), \");\\n});\\n\")), mdx(\"p\", null, \"To trig\\xADger some ac\\xADtiv\\xADity on the HTTP server, we can write a small bash script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"do\"), \" curl http://localhost:8080/\\n    sleep .8\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"done\"), \"\\n\")), mdx(\"h3\", {\n    \"id\": \"viewing-the-results\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#viewing-the-results\"\n  })), \"Viewing the results\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grafana.com/\"\n  }), \"Grafana\"), \" can be used to dis\\xADplay the In\\xADfluxDB and Prometheus met\\xADrics. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-examples\"), \" repos\\xADi\\xADtory con\\xADtains two dash\\xADboards for that: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json\"\n  }), \"for In\\xADfluxDB\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json\"\n  }), \"for Prometheus\"), \".\"), mdx(\"h5\", {\n    \"id\": \"http-server-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#http-server-metrics\"\n  })), \"HTTP server metrics\"), mdx(\"img\", {\n    alt: \"HTTP server metrics\",\n    className: \"img-fluid\",\n    src: \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png\"\n  }), mdx(\"h5\", {\n    \"id\": \"event-bus-metrics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#event-bus-metrics\"\n  })), \"Event bus metrics\"), mdx(\"img\", {\n    alt: \"Event bus metrics\",\n    className: \"img-fluid\",\n    src: \"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png\"\n  }), mdx(\"h2\", {\n    \"id\": \"going-further\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#going-further\"\n  })), \"Going further\"), mdx(\"p\", null, \"We\\u2019ve seen the basic setup. There is a good bunch of op\\xADtions avail\\xADable, de\\xADtailed \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-micrometer-metrics/java/\"\n  }), \"in the doc\\xADu\\xADmen\\xADta\\xADtion\"), \": how to dis\\xADable some met\\xADrics do\\xADmains, how to fil\\xADter or re\\xADarrange la\\xADbels, how to ex\\xADport met\\xADrics snap\\xADshots to Json ob\\xADjects, how to add JVM or proces\\xADsor in\\xADstru\\xADmen\\xADta\\xADtion, etc.\"), mdx(\"p\", null, \"Be\\xADfore we fin\\xADish, there is one im\\xADpor\\xADtant point that we can cover here: defin\\xADing cus\\xADtom met\\xADrics.\\nBe\\xADcause the mod\\xADule gives you ac\\xADcess to its Mi\\xADcrom\\xADe\\xADter reg\\xADistry, you can add your cus\\xADtom met\\xADrics there.\"), mdx(\"p\", null, \"Get\\xADting the de\\xADfault reg\\xADistry is straight\\xADfor\\xADward:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MeterRegistry registry = BackendRegistries.getDefaultNow();\\n\")), mdx(\"p\", null, \"Then you have plain ac\\xADcess to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://micrometer.io/docs/concepts\"\n  }), \"Mi\\xADcrom\\xADe\\xADter API\"), \".\"), mdx(\"p\", null, \"For in\\xADstance, here is how you can track the ex\\xADe\\xADcu\\xADtion time of a piece of code that is reg\\xADu\\xADlarly called:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MeterRegistry registry = BackendRegistries.getDefaultNow();\\nTimer timer = Timer\\n  .builder(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my.timer\\\"\"), \")\\n  .description(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Time tracker for my extremely sophisticated algorithm\\\"\"), \")\\n  .register(registry);\\n\\nvertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", l -> {\\n  timer.record(() -> myExtremelySophisticatedAlgorithm());\\n});\\n\")), mdx(\"p\", null, \"Since it is using the same reg\\xADistry, there is no extra back\\xADend con\\xADfig\\xADu\\xADra\\xADtion to do.\"), mdx(\"h2\", {\n    \"id\": \"whats-next\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#whats-next\"\n  })), \"What\\u2019s next?\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-micrometer-metrics\"), \" mod\\xADule will con\\xADtinue to be im\\xADproved, with al\\xADready two planned en\\xADhance\\xADments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/15\"\n  }), \"Adding more back\\xADends\"), \", like Graphite.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\"\n  }), \"Allow to con\\xADfig\\xADure sev\\xADeral back\\xADends\"), \", and not only one at the same time.\")), mdx(\"p\", null, \"Would you miss any fea\\xADture, please \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-micrometer-metrics/issues\"\n  }), \"ask on GitHub\"), \". Con\\xADtri\\xADbu\\xADtions and bug fixes are also wel\\xADcome!\"), mdx(\"p\", null, \"Now is time to enter the Met\\xADrics.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x has al­ready been pro­vid­ing met­rics for some time, through the <a href=\"https://vertx.io/docs/vertx-dropwizard-metrics/java/\">vertx-​dropwizard-metrics</a> and <a href=\"https://vertx.io/docs/vertx-hawkular-metrics/java/\">vertx-​hawkular-metrics</a> mod­ules. Both of them im­ple­ment a ser­vice provider in­ter­face (SPI) to col­lect the Vert.x met­rics and make them avail­able to their re­spec­tive back­ends.</p><p>A new mod­ule, <a href=\"https://vertx.io/docs/vertx-micrometer-metrics/java/\">vertx-​micrometer-metrics</a>, is now added to the fam­ily. It im­ple­ments the same SPI, which means that it is able to pro­vide the same met­rics.\n<a href=\"http://micrometer.io/\"><em>Mi­crom­e­ter.io</em></a> is a pretty new met­rics li­brary, quite com­pa­ra­ble to <em>drop­wiz­ard met­rics</em> in that it col­lects met­rics in a local, in-​memory reg­istry and is able to store them in var­i­ous back­ends such as <em>Graphite</em> or <em>In­fluxDB</em>. It has sev­eral ad­van­tages as we will see below.</p><h2 id=\"tell-me-more-about-micrometer\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#tell-me-more-about-micrometer\"></a>Tell me more about Micrometer</h2><p><a href=\"http://micrometer.io/\"><em>Mi­crom­e­ter.io</em></a> de­scribes it­self as a a vendor-​neutral ap­pli­ca­tion met­rics fa­cade.\nIt pro­vides a well de­signed API, in Java, to de­fine <em>gauges</em>, <em>coun­ters</em>, <em>timers</em> and <em>dis­tri­b­u­tion sum­maries</em>.</p><p>Among the avail­able back­ends, Mi­crom­e­ter na­tively sup­ports <em>Graphite</em>, <em>In­fluxDB</em>, <em>JMX</em>, <em>Prometheus</em> and <a href=\"http://micrometer.io/docs\">sev­eral oth­ers</a>. Prometheus is very pop­u­lar in the Ku­ber­netes and mi­croser­vices ecosys­tems, so its sup­port by Mi­crom­e­ter was a strong mo­ti­va­tion for im­ple­ment­ing it in Vert.x.</p><p>For the the mo­ment, our im­ple­men­ta­tion in Vert.x sup­ports <em>Prometheus</em>, <em>In­fluxDB</em> and <em>JMX</em>. More should quickly come in the near fu­ture.</p><h3 id=\"dimensionality\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dimensionality\"></a>Dimensionality</h3><p>An­other in­ter­est­ing as­pect in Mi­crom­e­ter is that it han­dles met­rics <em>di­men­sion­al­ity</em>: met­rics can be as­so­ci­ated with a set of key/value pairs (some­times ref­ered as <em>tags</em>, some­times as <em>la­bels</em>). Every value brings a new di­men­sion to the met­ric, so that in Prometheus or any other back­end that sup­ports di­men­sion­al­ity, we can query for dat­a­points of one or sev­eral di­men­sions, or query for dat­a­points ag­gre­gated over sev­eral di­men­sions.</p><p>  <em>Ex­am­ple: our met­ric <code>vertx_http_server_connections</code> ac­cepts la­bels <code>local</code> and <code>remote</code>, that are used to store ad­dresses on HTTP con­nec­tions</em></p><div class=\"alert info\"><p>Prometheus is used in the fol­low­ing ex­am­ples, but equiv­a­lent queries can be per­formed with <em>In­fluxDB</em>.</p></div><p>In Prometheus, the query <code>vertx_http_server_connections</code> will re­turn as many time­series as there are com­bi­na­tions of <code>local</code> and <code>remote</code> val­ues. Ex­am­ple:</p><pre><code class=\"hljs language-basic\">vertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;1.1.1.1&quot;}</span>\nvertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;2.2.2.2&quot;}</span>\nvertx_http_server_connections{local=<span class=\"hljs-string\">&quot;0.0.0.0:8080&quot;</span>,<span class=\"hljs-comment\">remote=&quot;3.3.3.3&quot;}</span>\n</code></pre><p>To query on a sin­gle di­men­sion, we must pro­vide the la­bels:</p><p><code>vertx_http_server_connections{local=&quot;0.0.0.0:8080&quot;,remote=&quot;1.1.1.1&quot;}</code>. It will re­turn a sin­gle time­series.</p><p>To get an ag­gre­gate, Prometheus (PromQL) pro­vides sev­eral <a href=\"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators\">ag­gre­ga­tion op­er­a­tors</a>:</p><p><code>sum(vertx_http_server_connections)</code> will re­turn the sum across all di­men­sions.</p><h2 id=\"so-what-are-the-vertx-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#so-what-are-the-vertx-metrics\"></a>So what are the Vert.x metrics?</h2><p>Peo­ple al­ready fa­mil­iar with the ex­ist­ing met­rics mod­ules (<em>drop­wiz­ard</em> or <em>hawku­lar</em>) will not be too dis­ori­ented. They are roughly the same. The main dif­fer­ence is where pre­vi­ously, some met­ric names could have a vari­able part within - such as <code>vertx.eventbus.handlers.myaddress</code> - here we take ad­van­tage of di­men­sion­al­ity and we will have <code>vertx_eventbus_handlers{address=&quot;myaddress&quot;}</code>.</p><p>Some other met­rics are no longer use­ful, for in­stance the drop­wiz­ard’s <code>vertx.eventbus.messages.pending</code>, <code>vertx.eventbus.messages.pending-local</code> and <code>vertx.eventbus.messages.pending-remote</code> are now just <code>vertx_eventbus_pending{side=local}</code> and <code>vertx_eventbus_pending{side=remote}</code> in mi­crom­e­ter. The sum of them can eas­ily be com­puted at query time.</p><p>The met­rics pro­vided by Vert.x are dis­patched into eight big fam­i­lies:</p><ul><li><strong>Net client</strong>: dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.</li><li><strong>Net server</strong>: dis­tri­b­u­tion sum­maries of bytes sent and re­ceived, num­ber of con­nec­tions, etc.</li><li><strong>HTTP client</strong>: counter of re­quests, re­sponse times, etc.</li><li><strong>HTTP server</strong>: counter of re­quests, pro­cess­ing times, etc.</li><li><strong>Event bus</strong>: counter of han­dlers, mes­sages sent and re­ceived, etc.</li><li><strong>Pool</strong>: for worker pools and some data­source pools, queue size and wait­ing time, pro­cess­ing time, etc.</li><li><strong>Ver­ti­cles</strong>: num­ber of ver­ti­cles de­ployed.</li></ul><p>The full list of col­lected met­rics is <a href=\"https://vertx.io/docs/vertx-micrometer-metrics/java/#_vert_x_core_tools_metrics\">avail­able here</a>.</p><h2 id=\"getting-started\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#getting-started\"></a>Getting started</h2><p>This sec­tion will guide you through a quick setup to run a Vert.x ap­pli­ca­tion with Mi­crom­e­ter. The code ex­am­ples used here are taken from the <code>micrometer-metrics-example</code> in <code>vertx-examples</code> repos­i­tory, in Java, using <em>maven</em>. But the same could be done with other Vert.x sup­ported lan­guages, as well as <em>gra­dle</em> in­stead of <em>maven</em>.</p><h3 id=\"maven-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#maven-configuration\"></a>Maven configuration</h3><p>The con­fig­u­ra­tion and the maven im­ports will vary ac­cord­ing to the back­end stor­age that will be used. For maven, the com­mon part is al­ways:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-micrometer-metrics<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><ul><li>Then, to re­port to In­fluxDB:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-influx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><ul><li>Or Prometheus:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Re­mark that, since Prometheus pulls met­rics from their source, they must be ex­posed on an HTTP end­point. That’s why <code>vertx-web</code> is im­ported here. It is not <em>ab­solutely</em> nec­es­sary (it’s pos­si­ble to get the met­rics reg­istry con­tent and ex­pose it in any other way) but it’s prob­a­bly the eas­i­est way to do.</p><ul><li>Or JMX:</li></ul><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.micrometer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>micrometer-registry-jmx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><div class=\"alert info\"><p>At the mo­ment, it is not pos­si­ble to re­port met­rics to sev­eral back­ends at the same time. <a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\">It might be soon im­ple­mented</a>.</p></div><h3 id=\"setting-up-vertx-options\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#setting-up-vertx-options\"></a>Setting up Vert.x options</h3><p>A <code>MicrometerMetricsOptions</code> ob­ject must be cre­ated and passed to <code>VertxOptions</code>, with one back­end con­fig­ured (though hav­ing no back­end is pos­si­ble: you would get met­rics sent to a de­fault Mi­crom­e­ter reg­istry, but with­out any per­sis­tent stor­age).</p><ul><li>In­fluxDB ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Default InfluxDB options will push metrics to localhost:8086, db &quot;default&quot;</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setInfluxDbOptions(<span class=\"hljs-keyword\">new</span> VertxInfluxDbOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><ul><li>Prometheus ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Deploy with embedded server: prometheus metrics will be automatically exposed,</span>\n<span class=\"hljs-comment\">// independently from any other HTTP server defined</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions()\n    .setStartEmbeddedServer(<span class=\"hljs-keyword\">true</span>)\n    .setEmbeddedServerOptions(<span class=\"hljs-keyword\">new</span> HttpServerOptions().setPort(<span class=\"hljs-number\">8081</span>))\n    .setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><ul><li>Or Prometheus with the <code>/metrics</code> end­point bound to an ex­ist­ing HTTP server:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Deploy without embedded server: we need to &quot;manually&quot; expose the prometheus metrics</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setPrometheusOptions(<span class=\"hljs-keyword\">new</span> VertxPrometheusOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n\nRouter router = Router.router(vertx);\nPrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\n<span class=\"hljs-comment\">// Setup a route for metrics</span>\nrouter.route(<span class=\"hljs-string\">&quot;/metrics&quot;</span>).handler(ctx -&gt; {\n  String response = registry.scrape();\n  ctx.response().end(response);\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><ul><li>JMX ex­am­ple:</li></ul><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Default JMX options will publish MBeans under domain &quot;metrics&quot;</span>\nMicrometerMetricsOptions options = <span class=\"hljs-keyword\">new</span> MicrometerMetricsOptions()\n  .setJmxMetricsOptions(<span class=\"hljs-keyword\">new</span> VertxJmxMetricsOptions().setEnabled(<span class=\"hljs-keyword\">true</span>))\n  .setEnabled(<span class=\"hljs-keyword\">true</span>);\nVertx vertx = Vertx.vertx(<span class=\"hljs-keyword\">new</span> VertxOptions().setMetricsOptions(options));\n<span class=\"hljs-comment\">// Then deploy verticles with this vertx instance</span>\n</code></pre><h3 id=\"setup-the-backend-server\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#setup-the-backend-server\"></a>Setup the backend server</h3><ul><li><a href=\"https://www.influxdata.com/\">In­fluxDB</a>, by de­fault, is ex­pected to run on <code>localhost:8086</code> with­out au­then­ti­ca­tion, data­base “de­fault”. It is con­fig­urable in <code>VertxInfluxDbOptions</code>.\nIf you don’t have a run­ning in­stance of In­fluxDB, the short­est way to start is cer­tainly with docker, just run:</li></ul><pre><code class=\"hljs language-bash\">docker run -p 8086:8086 influxdb\n</code></pre><ul><li><a href=\"https://prometheus.io/docs/prometheus/latest/getting_started/\">Prometheus</a> needs some con­fig­u­ra­tion since it pulls met­rics from the sources. Once it is in­stalled, con­fig­ure the scrape end­points in <code>prometheus.yml</code>:</li></ul><pre><code class=\"hljs language-yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&#x27;vertx-8081&#x27;</span>\n  <span class=\"hljs-attr\">static_configs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;localhost:8081&#x27;</span>]\n</code></pre><p>or, when using <code>/metrics</code> end­point bound to an ex­ist­ing HTTP server:</p><pre><code class=\"hljs language-yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&#x27;vertx-8080&#x27;</span>\n  <span class=\"hljs-attr\">static_configs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;localhost:8080&#x27;</span>]\n</code></pre><ul><li>For JMX there is noth­ing spe­cial to con­fig­ure.</li></ul><h3 id=\"collecting-vertx-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#collecting-vertx-metrics\"></a>Collecting Vert.x metrics</h3><p>From now on, all Vert.x met­rics will be col­lected and sent to the con­fig­ured back­end. In our Vert.x ex­am­ple, we setup an HTTP server met­rics:</p><pre><code class=\"hljs language-java\">Router router = Router.router(vertx);\nrouter.get(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(ctx -&gt; {\n  ctx.response().end(<span class=\"hljs-string\">&quot;Hello Micrometer from HTTP!&quot;</span>);\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p> And some event bus ping-​pong:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Producer side</span>\nvertx.setPeriodic(<span class=\"hljs-number\">1000</span>, x -&gt; {\n  vertx.eventBus().send(<span class=\"hljs-string\">&quot;greeting&quot;</span>, <span class=\"hljs-string\">&quot;Hello Micrometer from event bus!&quot;</span>);\n});\n</code></pre><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Consumer side</span>\nvertx.eventBus().&lt;String&gt;consumer(<span class=\"hljs-string\">&quot;greeting&quot;</span>, message -&gt; {\n  String greeting = message.body();\n  System.out.println(<span class=\"hljs-string\">&quot;Received: &quot;</span> + greeting);\n  message.reply(<span class=\"hljs-string\">&quot;Hello back!&quot;</span>);\n});\n</code></pre><p>To trig­ger some ac­tiv­ity on the HTTP server, we can write a small bash script:</p><pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">do</span> curl http://localhost:8080/\n    sleep .8\n<span class=\"hljs-keyword\">done</span>\n</code></pre><h3 id=\"viewing-the-results\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#viewing-the-results\"></a>Viewing the results</h3><p><a href=\"https://grafana.com/\">Grafana</a> can be used to dis­play the In­fluxDB and Prometheus met­rics. The <code>vertx-examples</code> repos­i­tory con­tains two dash­boards for that: <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-InfluxDB.json\">for In­fluxDB</a> and <a href=\"https://github.com/vert-x3/vertx-examples/blob/master/micrometer-metrics-examples/grafana/Vertx-Prometheus.json\">for Prometheus</a>.</p><h5 id=\"http-server-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#http-server-metrics\"></a>HTTP server metrics</h5><img alt=\"HTTP server metrics\" class=\"img-fluid\" src=\"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/http-server-metrics.png\"/><h5 id=\"event-bus-metrics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#event-bus-metrics\"></a>Event bus metrics</h5><img alt=\"Event bus metrics\" class=\"img-fluid\" src=\"https://raw.githubusercontent.com/jotak/vertx-examples/micrometer-example/micrometer-metrics-examples/grafana/eventbus-metrics.png\"/><h2 id=\"going-further\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#going-further\"></a>Going further</h2><p>We’ve seen the basic setup. There is a good bunch of op­tions avail­able, de­tailed <a href=\"https://vertx.io/docs/vertx-micrometer-metrics/java/\">in the doc­u­men­ta­tion</a>: how to dis­able some met­rics do­mains, how to fil­ter or re­arrange la­bels, how to ex­port met­rics snap­shots to Json ob­jects, how to add JVM or proces­sor in­stru­men­ta­tion, etc.</p><p>Be­fore we fin­ish, there is one im­por­tant point that we can cover here: defin­ing cus­tom met­rics.\nBe­cause the mod­ule gives you ac­cess to its Mi­crom­e­ter reg­istry, you can add your cus­tom met­rics there.</p><p>Get­ting the de­fault reg­istry is straight­for­ward:</p><pre><code class=\"hljs language-java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\n</code></pre><p>Then you have plain ac­cess to the <a href=\"https://micrometer.io/docs/concepts\">Mi­crom­e­ter API</a>.</p><p>For in­stance, here is how you can track the ex­e­cu­tion time of a piece of code that is reg­u­larly called:</p><pre><code class=\"hljs language-java\">MeterRegistry registry = BackendRegistries.getDefaultNow();\nTimer timer = Timer\n  .builder(<span class=\"hljs-string\">&quot;my.timer&quot;</span>)\n  .description(<span class=\"hljs-string\">&quot;Time tracker for my extremely sophisticated algorithm&quot;</span>)\n  .register(registry);\n\nvertx.setPeriodic(<span class=\"hljs-number\">1000</span>, l -&gt; {\n  timer.record(() -&gt; myExtremelySophisticatedAlgorithm());\n});\n</code></pre><p>Since it is using the same reg­istry, there is no extra back­end con­fig­u­ra­tion to do.</p><h2 id=\"whats-next\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#whats-next\"></a>What’s next?</h2><p>The <code>vertx-micrometer-metrics</code> mod­ule will con­tinue to be im­proved, with al­ready two planned en­hance­ments:</p><ul><li><a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/15\">Adding more back­ends</a>, like Graphite.</li><li><a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues/16\">Allow to con­fig­ure sev­eral back­ends</a>, and not only one at the same time.</li></ul><p>Would you miss any fea­ture, please <a href=\"https://github.com/vert-x3/vertx-micrometer-metrics/issues\">ask on GitHub</a>. Con­tri­bu­tions and bug fixes are also wel­come!</p><p>Now is time to enter the Met­rics.</p>","scope":{}},"tfIdfTerms":[{"term":"metric","tf":36},{"term":"prometheu","tf":14},{"term":"backend","tf":13},{"term":"micromet","tf":12},{"term":"will","tf":11},{"term":"time","tf":10},{"term":"influxdb","tf":10},{"term":"configur","tf":10},{"term":"us","tf":9},{"term":"http","tf":9},{"term":"exampl","tf":8},{"term":"server","tf":8},{"term":"provid","tf":7},{"term":"sever","tf":7},{"term":"etc","tf":7},{"term":"registri","tf":6},{"term":"queri","tf":6},{"term":"modul","tf":5},{"term":"implement","tf":5},{"term":"collect","tf":5},{"term":"support","tf":5},{"term":"jmx","tf":5},{"term":"dimens","tf":5},{"term":"sent","tf":5},{"term":"maven","tf":5}]},{"filename":"blog/2017-12-21-eclipse-vert-x-based-framework-url-shortener-backend.mdx","date":"2017-12-21","slug":"eclipse-vert-x-based-framework-url-shortener-backend","meta":{"title":"Eclipse Vert.x based Framework URL Shortener Backend","category":"guides","authors":[{"name":"Lazar Bulić","github_id":"pendula95"}],"summary":"We combine Vert.x with the serverless framework to write a microservice that runs on AWS Lambda."},"readingTime":{"text":"5 min read","minutes":4.65,"time":279000,"words":930},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Re\\xADcently, I stum\\xADbled upon \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Vertx\")), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Event-\\u200Bdriven, asyn\\xADchro\\xADnized, light\\xADweight, re\\xADac\\xADtive, highly per\\xADfor\\xADmant, poly\\xADglot\"), \" ap\\xADpli\\xADca\\xADtion frame\\xADwork. Ideal for writ\\xADing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"micro-\\u200Bservices\"), \". I played around with it for a while and re\\xADally en\\xADjoyed the con\\xADcept of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"server\\xADless\"), \" ap\\xADpli\\xADca\\xADtions.\"), mdx(\"p\", null, \"I de\\xADvel\\xADoped a few apps and cases and started to won\\xADder how to run and de\\xADploy them so that I get a 100% re\\xADli\\xADable ser\\xADvice. I sud\\xADdenly re\\xADmem\\xADbered the tech sem\\xADi\\xADnar that I at\\xADtended re\\xADcently, specif\\xADi\\xADcally ses\\xADsion about server\\xADless apps with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws.amazon.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"AWS\")), \" (Ama\\xADzon Web Ser\\xADvices) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lambda\"), \". Lambda is a server\\xADless com\\xADpute ser\\xADvice that runs your code in re\\xADsponse to events and au\\xADto\\xADmat\\xADi\\xADcally man\\xADages the un\\xADder\\xADly\\xADing com\\xADpute re\\xADsources for you. Fairly sim\\xADi\\xADlar con\\xADcepts \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS Lambda\"), \", so maybe they com\\xADple\\xADment each other? As it turns out they do, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" can get most of your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lamb\\xADdas\"), \"\\u2026\"), mdx(\"p\", null, \"Using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless.com/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Server\\xADless Frame\\xADwork\")), \" to cre\\xADate, man\\xADage and de\\xADploy your new \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lamb\\xADdas\"), \" I was able to get this \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"micro-\\u200Bservice\"), \" up and run\\xADning in no time.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Enough with the talk, lets see the im\\xADple\\xADmen\\xADta\\xADtion.\")), mdx(\"h2\", {\n    \"id\": \"code\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#code\"\n  })), \"Code\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Han\\xADdler Class, entry point of AWS Re\\xADquest.\")), mdx(\"p\", null, \"The first issue that I had was the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sync\"), \" Event Han\\xADdler that is pro\\xADvided by AWS. So I had to by pass it with Fu\\xADture. In the Han\\xADdler class I first ini\\xADti\\xADate Vertx in\\xADstance in a sta\\xADtic block and de\\xADploy few Ver\\xADti\\xADcles that will do the work. This class only re\\xADceives the event, ex\\xADtracts needed data from the re\\xADquest and passes the data to Vertx Event\\xADBus. After the Con\\xADsumers han\\xADdle the re\\xADquest, Han\\xADdler class will gen\\xADer\\xADate a proper re\\xADsponse and fin\\xADish the AWS re\\xADquest.\"), mdx(Gist, {\n    url: \"https://gist.github.com/pendula95/583eb45bd0a7990136fba029bdcd555b\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Line 4-18:\"), \" This is where Vertx in\\xADstance is cre\\xADated, Ver\\xADti\\xADcles are de\\xADployed and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Async JDBC\"), \" client is cre\\xADated. I fig\\xADured out that it is bet\\xADter to cre\\xADated JDBC client here as in some cases I was time\\xADout when that logic was in the Ver\\xADti\\xADcle start method.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Line 27-36:\"), \" These are helper lines, pars\\xADing and for\\xADmat\\xADting the data so I can pass it to the Ver\\xADti\\xADcles.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Line 38-45:\"), \" I have de\\xADcided to map the con\\xADsumers to the ad\\xADdress that is made of re\\xADquest method and url path, ex\\xADam\\xADple POST/api. This means each API re\\xADquest is mapped to its own con\\xADsumer in Ver\\xADti\\xADcle class.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Line 47-77:\"), \" This is noth\\xADing but a block of code that han\\xADdles the re\\xADsponse that was passed from Ver\\xADti\\xADcles to the Fu\\xADture and gen\\xADer\\xADates the final re\\xADsponse that will be re\\xADturn to API Gate\\xADway.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"UrlSer\\xADvice, Vertx Ver\\xADti\\xADcle.\")), mdx(\"p\", null, \"Ver\\xADti\\xADcle class is pretty for\\xADward. Con\\xADsumers that will process the mes\\xADsage, meth\\xADods for work\\xADing with JDBC and helper meth\\xADods for hash\\xADing/de\\xADhash\\xADing id. The logic be\\xADhind url short\\xADen\\xADing is fairly sim\\xADple here. Each long url is stored in data\\xADbase with a unique id and few ad\\xADdi\\xADtional columns. Row id is hashed and re\\xADturned as short url. When re\\xADtriev\\xADing long url hash is de\\xADcoded to row id and long url is re\\xADtrieved. Later user is redi\\xADrected to long url. With this im\\xADple\\xADmen\\xADta\\xADtion, on 6 char short url (char\\xADac\\xADters after the do\\xADmain) you get 62^6 com\\xADbi\\xADna\\xADtions which is 56 800 235 584 rows for stor\\xADing your urls. TinyURL is cur\\xADrently at 6 long char urls (char\\xADac\\xADters after do\\xADmain). You can of course im\\xADple\\xADment meth\\xADods for reusing and re\\xADcy\\xADcling ids.\"), mdx(Gist, {\n    url: \"https://gist.github.com/pendula95/aeb4479162e6e33504add2af9fa68bc5\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"As said, this is all fairly straight for\\xADward, if you are al\\xADready fa\\xADmil\\xADiar with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \". If you are think\\xADing why have I re\\xADpeated the code for es\\xADtab\\xADlish a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JDBC\"), \" con\\xADnec\\xADtion, here is the ex\\xADpla\\xADna\\xADtion \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(line: 10-16)\"), \". I was get\\xADting Time\\xADouts when cre\\xADat\\xADing JDBC con\\xADnec\\xADtion in Ver\\xADti\\xADcles. To avoid this I also added this code to my Han\\xADdler class. This way con\\xADnec\\xADtion is cre\\xADated there and be\\xADcause of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" im\\xADple\\xADmen\\xADta\\xADtion any later at\\xADtempt to cre\\xADate it again will re\\xADsult in just get\\xADting the in\\xADstances from the first in\\xADvo\\xADca\\xADtion. This es\\xADcaped the need to pass the in\\xADstances di\\xADrectly from the Han\\xADdler class when cre\\xADat\\xADing Ver\\xADti\\xADcle in\\xADstances.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Server\\xADless con\\xADfig\\xADu\\xADra\\xADtion.\")), mdx(\"p\", null, \"Lastly I would like to share the server\\xADless.yml, con\\xADfir\\xADma\\xADtion file that al\\xADlows seam\\xADlessly de\\xADploy and man\\xADage\\xADment of AWS Lambda. With just a few com\\xADmands and lines of con\\xADfig\\xADu\\xADra\\xADtion you are able to con\\xADfig\\xADure all nec\\xADes\\xADsary steps for de\\xADploy\\xADing your AWS Lambda. Frame\\xADwork takes care of mak\\xADing con\\xADfig\\xADu\\xADra\\xADtion of Api-\\u200BGateway and other AWS has\\xADsle that would oth\\xADer\\xADwise needed to be done by hand. In this case Lambda is in\\xADvoked by HTTP events.\"), mdx(Gist, {\n    url: \"https://gist.github.com/pendula95/33adc47265072ed930c7df98c9ace7be\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"performance-and-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#performance-and-tests\"\n  })), \"Performance and Tests\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" async ca\\xADpa\\xADbil\\xADi\\xADties eased the stress and mem\\xADory needs of tra\\xADdi\\xADtional \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS Lamb\\xADdas\"), \" with sync meth\\xADods. After per\\xADform\\xADing load tests Lamb\\xADdas that were writ\\xADten using Vertx frame\\xADwork pre\\xADformed \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"10% faster and con\\xADsumed 40% less mem\\xADory\"), \". As I have read some\\xADwhere in Vertx doc\\xADu\\xADmen\\xADta\\xADtion, Sync meth\\xADods will def\\xADi\\xADnitely fin\\xADish the first re\\xADquest faster but in total Async will be faster in the end. This sav\\xADings in mem\\xADory and time will def\\xADi\\xADnitely re\\xADduce the cost of run\\xADning your Lamb\\xADdas and the lit\\xADtle over\\xADhead with ad\\xADdi\\xADtional code is for sure worth it.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"To fol\\xADlow the pace of de\\xADmand\\xADing needs for fast and re\\xADsilient ser\\xADvices we need to move from tra\\xADdi\\xADtional Mono\\xADliths. Em\\xADbrac\\xADing the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"micro ser\\xADvice\"), \" ar\\xADchi\\xADtec\\xADture alone will not cut it, not any\\xADmore. With the rise and rapid ad\\xADvance\\xADment of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cloud\"), \" so\\xADlu\\xADtions it has never been so easy to make a truly \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server\\xADless\"), \" sys\\xADtems build upon net\\xADwork of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"micro ser\\xADvices\"), \".\\nAs you have seen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" with its async API makes the full ad\\xADvan\\xADtage of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS Lamb\\xADdas\"), \", em\\xADbrac\\xADing them while also im\\xADprov\\xADing the per\\xADfor\\xADmance and low\\xADer\\xADing the costs. With the help from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server\\xADless Frame\\xADwork\"), \" writ\\xADing, de\\xADploy\\xADing and man\\xADag\\xADing your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lamb\\xADdas\"), \" has never been so easy.\"), mdx(\"p\", null, \"If you are in\\xADter\\xADested in the whole project, you can find it on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pendula95/vertx-aws-url-shortener-service/tree/master\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"GitHub\")), \".\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://lazarbulic.com/blog/2017/11/10/aws-lambda-vertx-framework-url-shortener-backend/\"\n  }), \"blog post\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Re­cently, I stum­bled upon <a href=\"http://vertx.io/\"><strong>Vertx</strong></a>. <strong>Event-​driven, asyn­chro­nized, light­weight, re­ac­tive, highly per­for­mant, poly­glot</strong> ap­pli­ca­tion frame­work. Ideal for writ­ing <strong>micro-​services</strong>. I played around with it for a while and re­ally en­joyed the con­cept of <strong>server­less</strong> ap­pli­ca­tions.</p><p>I de­vel­oped a few apps and cases and started to won­der how to run and de­ploy them so that I get a 100% re­li­able ser­vice. I sud­denly re­mem­bered the tech sem­i­nar that I at­tended re­cently, specif­i­cally ses­sion about server­less apps with <a href=\"https://aws.amazon.com/\"><strong>AWS</strong></a> (Ama­zon Web Ser­vices) <strong>Lambda</strong>. Lambda is a server­less com­pute ser­vice that runs your code in re­sponse to events and au­to­mat­i­cally man­ages the un­der­ly­ing com­pute re­sources for you. Fairly sim­i­lar con­cepts <strong>Vertx</strong> and <strong>AWS Lambda</strong>, so maybe they com­ple­ment each other? As it turns out they do, <strong>Vertx</strong> can get most of your <strong>Lamb­das</strong>…</p><p>Using the <a href=\"https://serverless.com/\"><strong>Server­less Frame­work</strong></a> to cre­ate, man­age and de­ploy your new <strong>Lamb­das</strong> I was able to get this <strong>micro-​service</strong> up and run­ning in no time.</p><p><em>Enough with the talk, lets see the im­ple­men­ta­tion.</em></p><h2 id=\"code\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#code\"></a>Code</h2><p><em>Han­dler Class, entry point of AWS Re­quest.</em></p><p>The first issue that I had was the <strong>sync</strong> Event Han­dler that is pro­vided by AWS. So I had to by pass it with Fu­ture. In the Han­dler class I first ini­ti­ate Vertx in­stance in a sta­tic block and de­ploy few Ver­ti­cles that will do the work. This class only re­ceives the event, ex­tracts needed data from the re­quest and passes the data to Vertx Event­Bus. After the Con­sumers han­dle the re­quest, Han­dler class will gen­er­ate a proper re­sponse and fin­ish the AWS re­quest.</p><div>...waiting for Gist...</div><p><em>Line 4-18:</em> This is where Vertx in­stance is cre­ated, Ver­ti­cles are de­ployed and <strong>Async JDBC</strong> client is cre­ated. I fig­ured out that it is bet­ter to cre­ated JDBC client here as in some cases I was time­out when that logic was in the Ver­ti­cle start method.</p><p><em>Line 27-36:</em> These are helper lines, pars­ing and for­mat­ting the data so I can pass it to the Ver­ti­cles.</p><p><em>Line 38-45:</em> I have de­cided to map the con­sumers to the ad­dress that is made of re­quest method and url path, ex­am­ple POST/api. This means each API re­quest is mapped to its own con­sumer in Ver­ti­cle class.</p><p><em>Line 47-77:</em> This is noth­ing but a block of code that han­dles the re­sponse that was passed from Ver­ti­cles to the Fu­ture and gen­er­ates the final re­sponse that will be re­turn to API Gate­way.</p><p><em>UrlSer­vice, Vertx Ver­ti­cle.</em></p><p>Ver­ti­cle class is pretty for­ward. Con­sumers that will process the mes­sage, meth­ods for work­ing with JDBC and helper meth­ods for hash­ing/de­hash­ing id. The logic be­hind url short­en­ing is fairly sim­ple here. Each long url is stored in data­base with a unique id and few ad­di­tional columns. Row id is hashed and re­turned as short url. When re­triev­ing long url hash is de­coded to row id and long url is re­trieved. Later user is redi­rected to long url. With this im­ple­men­ta­tion, on 6 char short url (char­ac­ters after the do­main) you get 62^6 com­bi­na­tions which is 56 800 235 584 rows for stor­ing your urls. TinyURL is cur­rently at 6 long char urls (char­ac­ters after do­main). You can of course im­ple­ment meth­ods for reusing and re­cy­cling ids.</p><div>...waiting for Gist...</div><p>As said, this is all fairly straight for­ward, if you are al­ready fa­mil­iar with <strong>Vertx</strong>. If you are think­ing why have I re­peated the code for es­tab­lish a <strong>JDBC</strong> con­nec­tion, here is the ex­pla­na­tion <em>(line: 10-16)</em>. I was get­ting Time­outs when cre­at­ing JDBC con­nec­tion in Ver­ti­cles. To avoid this I also added this code to my Han­dler class. This way con­nec­tion is cre­ated there and be­cause of the <strong>Vertx</strong> im­ple­men­ta­tion any later at­tempt to cre­ate it again will re­sult in just get­ting the in­stances from the first in­vo­ca­tion. This es­caped the need to pass the in­stances di­rectly from the Han­dler class when cre­at­ing Ver­ti­cle in­stances.</p><p><em>Server­less con­fig­u­ra­tion.</em></p><p>Lastly I would like to share the server­less.yml, con­fir­ma­tion file that al­lows seam­lessly de­ploy and man­age­ment of AWS Lambda. With just a few com­mands and lines of con­fig­u­ra­tion you are able to con­fig­ure all nec­es­sary steps for de­ploy­ing your AWS Lambda. Frame­work takes care of mak­ing con­fig­u­ra­tion of Api-​Gateway and other AWS has­sle that would oth­er­wise needed to be done by hand. In this case Lambda is in­voked by HTTP events.</p><div>...waiting for Gist...</div><h2 id=\"performance-and-tests\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#performance-and-tests\"></a>Performance and Tests</h2><p><strong>Vertx</strong> async ca­pa­bil­i­ties eased the stress and mem­ory needs of tra­di­tional <strong>AWS Lamb­das</strong> with sync meth­ods. After per­form­ing load tests Lamb­das that were writ­ten using Vertx frame­work pre­formed <strong>10% faster and con­sumed 40% less mem­ory</strong>. As I have read some­where in Vertx doc­u­men­ta­tion, Sync meth­ods will def­i­nitely fin­ish the first re­quest faster but in total Async will be faster in the end. This sav­ings in mem­ory and time will def­i­nitely re­duce the cost of run­ning your Lamb­das and the lit­tle over­head with ad­di­tional code is for sure worth it.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>To fol­low the pace of de­mand­ing needs for fast and re­silient ser­vices we need to move from tra­di­tional Mono­liths. Em­brac­ing the <strong>micro ser­vice</strong> ar­chi­tec­ture alone will not cut it, not any­more. With the rise and rapid ad­vance­ment of <strong>Cloud</strong> so­lu­tions it has never been so easy to make a truly <strong>Server­less</strong> sys­tems build upon net­work of <strong>micro ser­vices</strong>.\nAs you have seen <strong>Vertx</strong> with its async API makes the full ad­van­tage of <strong>AWS Lamb­das</strong>, em­brac­ing them while also im­prov­ing the per­for­mance and low­er­ing the costs. With the help from <strong>Server­less Frame­work</strong> writ­ing, de­ploy­ing and man­ag­ing your <strong>Lamb­das</strong> has never been so easy.</p><p>If you are in­ter­ested in the whole project, you can find it on <a href=\"https://github.com/pendula95/vertx-aws-url-shortener-service/tree/master\"><strong>GitHub</strong></a>.</p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"http://lazarbulic.com/blog/2017/11/10/aws-lambda-vertx-framework-url-shortener-backend/\">blog post</a></p></div>","scope":{}},"tfIdfTerms":[{"term":"lambda","tf":13},{"term":"aw","tf":10},{"term":"verticl","tf":10},{"term":"url","tf":10},{"term":"will","tf":9},{"term":"servic","tf":8},{"term":"serverless","tf":8},{"term":"creat","tf":8},{"term":"class","tf":8},{"term":"deploi","tf":7},{"term":"request","tf":7},{"term":"line","tf":7},{"term":"method","tf":7},{"term":"code","tf":6},{"term":"handler","tf":6},{"term":"need","tf":6},{"term":"event","tf":5},{"term":"framework","tf":5},{"term":"pass","tf":5},{"term":"instanc","tf":5},{"term":"consum","tf":5},{"term":"jdbc","tf":5},{"term":"api","tf":5},{"term":"id","tf":5},{"term":"long","tf":5}]}],"numPages":9},"__N_SSG":true}