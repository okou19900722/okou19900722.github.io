{"pageProps":{"categories":["releases","guides","news"],"category":"guides","page":4,"posts":[{"filename":"blog/2017-04-26-building-a-real-time-web-app-with-angular-ngrx-and-vert-x.mdx","date":"2017-04-26","slug":"building-a-real-time-web-app-with-angular-ngrx-and-vert-x","meta":{"title":"Building a real-time web app with Angular/Ngrx and Vert.x","category":"guides","authors":[{"name":"Benoit Hediard","github_id":"benorama"}],"summary":"There are multiple tech stacks to build a real-time web app. What are the best choices to build Angular client apps, connected to a JVM-based backend?"},"readingTime":{"text":"7 min read","minutes":6.23,"time":373800,"words":1246},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Nowa\\xADdays, there are mul\\xADti\\xADple tech stacks to build a real-\\u200Btime web app. What are the best choices to build real-\\u200Btime An\\xADgu\\xADlar client apps, con\\xADnected to a JVM-\\u200Bbased back\\xADend? This ar\\xADti\\xADcle de\\xADscribes an An\\xADgu\\xADlar+Vertx real-\\u200Btime ar\\xADchi\\xADtec\\xADture with a Proof of Con\\xADcept demo app.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@benorama/building-a-realtime-web-app-with-angular-ngrx-and-vert-x-a5381c0397a1\"\n  }), \"Medium post\"))), mdx(\"h2\", {\n    \"id\": \"intro\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#intro\"\n  })), \"Intro\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Wel\\xADcome to the real-\\u200Btime web!\"), \" It\\u2019s time to move on from tra\\xADdi\\xADtional syn\\xADchro\\xADnous HTTP re\\xADquest/re\\xADsponse ar\\xADchi\\xADtec\\xADtures to re\\xADac\\xADtive apps with con\\xADnected clients (ouch\\u2026 that\\u2019s a lot of buzz\\xADwords in just one sen\\xADtence)!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-realtime-angular-ngrx/data-in-motion.jpg\",\n    \"alt\": null\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image source: \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.voxxed.com\"\n  }), \"https://www.voxxed.com\"))), mdx(\"p\", null, \"To build this kind of app, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.meteor.com\"\n  }), \"Me\\xADte\\xADorJS\"), \" is the new cool kid on the block (v1.0 re\\xADleased in oc\\xADto\\xADber 2014): \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a full stack Javascript plat\\xADform to build connected-\\u200Bclient re\\xADac\\xADtive ap\\xADpli\\xADca\\xADtions\"), \". It al\\xADlows JS de\\xADvel\\xADop\\xADers to build and de\\xADploy amaz\\xADing mod\\xADern web and mo\\xADbile apps (iOS/An\\xADdroid) in no time, using a uni\\xADfied back\\xADend+fron\\xADtend code within a sin\\xADgle app repo. That\\u2019s a pretty am\\xADbi\\xADtious ap\\xADproach but it re\\xADquires a very opin\\xADion\\xADated and highly cou\\xADpled JS tech stack and it\\u2019s still a pretty niche frame\\xADwork.\"), mdx(\"p\", null, \"More\\xADover, we are a Java shop on the back\\xADend. At Ago\\xADra\\xADPulse, we rely heav\\xADily on :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://angular.io\"\n  }), \"An\\xADgu\\xADlar\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://ionicframework.com\"\n  }), \"Ionic\"), \" for the JS fron\\xADtend (with a shared busi\\xADness/data ar\\xADchi\\xADtec\\xADture based on \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ngrx/store\"\n  }), \"Ngrx\"), \"),\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.groovy-lang.org\"\n  }), \"Groovy\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://grails.org\"\n  }), \"Grails\"), \" ecosys\\xADtem for the JVM back\\xADend.\")), mdx(\"p\", null, \"So my ques\\xADtion is:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What are the best choices to build real-\\u200Btime An\\xADgu\\xADlar client apps, con\\xADnected to a JVM-\\u200Bbased back\\xADend these days?\")), mdx(\"p\", null, \"Our re\\xADquire\\xADments are pretty basic. We don\\u2019t need full Me\\xADteor\\u2019s end-\\u200Bto-end ap\\xADpli\\xADca\\xADtion model.\\nWe just want to be able to :\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"build a re\\xADac\\xADtive app with an event bus on the JVM, and\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ex\\xADtend the event bus down to the browser to be able to pub\\xADlish/sub\\xADscribe to real-\\u200Btime events from an An\\xADgu\\xADlar app.\")), mdx(\"h3\", {\n    \"id\": \"server-side-jvm\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#server-side-jvm\"\n  })), \"Server side (JVM)\"), mdx(\"p\", null, \"Re\\xADac\\xADtive apps is a hot topic nowa\\xADdays and there are many great libs/plat\\xADforms to build this type of event-\\u200Bdriven ar\\xADchi\\xADtec\\xADture on the JVM:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x\"), \",\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.lightbend.com\"\n  }), \"Light\\xADbend\"), \" plat\\xADform (Play, Akka, Scala),\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://projectreactor.io\"\n  }), \"Project Re\\xADac\\xADtor\"), \" (in\\xADte\\xADgrated into Grails 3.0).\")), mdx(\"h3\", {\n    \"id\": \"client-side\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#client-side\"\n  })), \"Client side\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://facebook.github.io/react/\"\n  }), \"Re\\xADac\\xADtJS\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://angular.io\"\n  }), \"An\\xADgu\\xADlar\"), \" are the two most pop\\xADu\\xADlar frame\\xADwork right now to build mod\\xADern JS apps. Most plat\\xADforms use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sockjs/sockjs-client\"\n  }), \"SockJS\"), \" to han\\xADdle real-\\u200Btime con\\xADnec\\xADtions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/groovy/\"\n  }), \"Vertx-\\u200Bweb\"), \" pro\\xADvides a SockJS server im\\xADple\\xADmen\\xADta\\xADtion with an event bus bridge and a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/groovy/#_sockjs_event_bus_bridge\"\n  }), \"vertx-\\u200Bevenbus.js\"), \" client li\\xADbrary (very easy to use),\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring pro\\xADvides web\\xADsocket SockJS sup\\xADport though Spring Mes\\xADsag\\xADing and Web\\xADsocket libs (see an ex\\xADam\\xADple \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://spring.io/guides/gs/messaging-stomp-websocket/\"\n  }), \"here\"), \")\")), mdx(\"h3\", {\n    \"id\": \"final-choice-vertx--angular\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#final-choice-vertx--angular\"\n  })), \"Final choice: Vert.x + Angular\"), mdx(\"p\", null, \"In the end, I\\u2019ve cho\\xADsen to ex\\xADper\\xADi\\xADment with Vert.x for its ex\\xADcel\\xADlent Groovy sup\\xADport, dis\\xADtrib\\xADuted event bus, scal\\xADa\\xADbil\\xADity and ease of use.\"), mdx(\"p\", null, \"I en\\xADjoyed it very much. Let me show you the re\\xADsult of my ex\\xADper\\xADi\\xADmen\\xADta\\xADtion which is the root of our real-\\u200Btime fea\\xADtures com\\xADing very soon in Ago\\xADra\\xADPulse v6.0!\"), mdx(\"h2\", {\n    \"id\": \"why-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#why-vertx\"\n  })), \"Why Vert.x?\"), mdx(\"p\", null, \"Like other re\\xADac\\xADtive plat\\xADform, Vert.x is event dri\\xADven and non block\\xADing. It scales very well (even more that Node.js).\"), mdx(\"p\", null, \"Un\\xADlike other re\\xADac\\xADtive plat\\xADforms, Vert.x is poly\\xADglot: you can use Vert.x with mul\\xADti\\xADple lan\\xADguages in\\xADclud\\xADing Java, JavaScript, Groovy, Ruby, Cey\\xADlon, Scala and Kotlin.\"), mdx(\"p\", null, \"Un\\xADlike Node.js, Vert.x is a gen\\xADeral pur\\xADpose tool-\\u200Bkit and un\\xADopin\\xADion\\xADated. It\\u2019s a ver\\xADsa\\xADtile plat\\xADform suit\\xADable for many things: from sim\\xADple net\\xADwork util\\xADi\\xADties, so\\xADphis\\xADti\\xADcated mod\\xADern web ap\\xADpli\\xADca\\xADtions, HTTP/REST mi\\xADcroser\\xADvices or a full blown back-\\u200Bend message-\\u200Bbus ap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"Like other re\\xADac\\xADtive plat\\xADforms, it looks scary in the be\\xADgin\\xADing when you read the doc\\xADu\\xADmen\\xADta\\xADtion\\u2026 ;) But once you start play\\xADing with it, it re\\xADmains fun and sim\\xADple to use, es\\xADpe\\xADcially with Groovy! Vert.x re\\xADally al\\xADlows you to build sub\\xADstan\\xADtial sys\\xADtems with\\xADout get\\xADting tan\\xADgled in com\\xADplex\\xADity.\"), mdx(\"p\", null, \"In my case, I was mainly in\\xADter\\xADested by the dis\\xADtrib\\xADuted event-\\u200Bbus pro\\xADvided (a core fea\\xADture of Vert.x).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"To val\\xADi\\xADdate our ap\\xADproach, we built pro\\xADto\\xADtypes with the fol\\xADlow\\xADing goals:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"share and syn\\xADchro\\xADnize a com\\xADmon (Ngrx-\\u200Bbased) state be\\xADtween mul\\xADti\\xADple con\\xADnected clients, and\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dis\\xADtrib\\xADute real-\\u200Btime (Ngrx-\\u200Bbased) ac\\xADtions across mul\\xADti\\xADple con\\xADnected clients, which im\\xADpact local states/re\\xADduc\\xADers.\"))), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ngrx/store\"\n  }), \"@ngrx/store\"), \" is a RxJS pow\\xADered state man\\xADage\\xADment in\\xADspired by Redux for An\\xADgu\\xADlar apps. It\\u2019s cur\\xADrently the most pop\\xADu\\xADlar way to struc\\xADture com\\xADplex busi\\xADness logic in An\\xADgu\\xADlar apps.\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-realtime-angular-ngrx/redux.png\",\n    \"alt\": \"Redux\"\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/\"\n  }), \"https://www.smash\\xADing\\xADmagazine.com/2016/06/an-\\u200Bintroduction-to-redux/\"))), mdx(\"h2\", {\n    \"id\": \"proof-of-concept\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#proof-of-concept\"\n  })), \"PROOF OF CONCEPT\"), mdx(\"p\", null, \"Here is the repo of our ini\\xADtial proof of con\\xADcept:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://github.com/benorama/ngrx-realtime-app\"\n  }), \"http://github.com/beno\\xADrama/ngrx-\\u200Brealtime-app\")), mdx(\"p\", null, \"The repo is di\\xADvided into two sep\\xADa\\xADrate projects:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Vert.x server app\"), \", based on \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x\"), \" (ver\\xADsion 3.3), man\\xADaged by \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gradle.org\"\n  }), \"Gra\\xADdle\"), \", with a main ver\\xADti\\xADcle de\\xADvel\\xADoped in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://groovy-lang.org\"\n  }), \"Groovy\"), \" lang.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"An\\xADgu\\xADlar client app\"), \", based on An\\xADgu\\xADlar (ver\\xADsion 4.0.1), man\\xADaged by \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://angular.io\"\n  }), \"An\\xADgu\\xADlar\"), \" CLI with state, re\\xADduc\\xADers and ac\\xADtions logic based on \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ngrx/store\"\n  }), \"@ngrx/store\"), \" (ver\\xADsion 2.2.1)\")), mdx(\"p\", null, \"For the demo, we are using the counter ex\\xADam\\xADple code (ac\\xADtions and re\\xADduc\\xADers) from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ngrx/store\"\n  }), \"@ngrx/store\"), \".\"), mdx(\"p\", null, \"The counter client busi\\xADness logic is based on:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CounterState\"), \" in\\xADter\\xADface, counter state model,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"counterReducer\"), \" re\\xADducer, counter state man\\xADage\\xADment based on dis\\xADpatched ac\\xADtions, and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"In\\xADcre\\xADment\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"decre\\xADment\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"reset\"), \" counter ac\\xADtions.\")), mdx(\"p\", null, \"State is main\\xADtained server-\\u200Bside with a sim\\xADple sin\\xADgle\\xADton \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CounterService\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-groovy\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"CounterService\"), \" {\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" INCREMENT = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'[Counter] Increment'\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" DECREMENT = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'[Counter] Decrement'\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" RESET = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'[Counter] Reset'\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" total = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" handleEvent(event) {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"switch\"), \"(event.type) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"case\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"INCREMENT:\"), \"\\n                total++\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"case\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"DECREMENT:\"), \"\\n                total--\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"case\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"RESET:\"), \"\\n                total = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \"\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"client-state-initialization-through-requestresponse\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#client-state-initialization-through-requestresponse\"\n  })), \"Client state initialization through Request/Response\"), mdx(\"p\", null, \"Ini\\xADtial state is ini\\xADtial\\xADized with sim\\xADple \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"re\\xADquest/re\\xADsponse\"), \" (or send/reply) on the event bus.\\nOnce the client is con\\xADnected, it sends a re\\xADquest to the event bus at the ad\\xADdress \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"counter::total\"), \". The server replies di\\xADrectly with the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CounterService\"), \" total and the client dis\\xADpatches lo\\xADcally a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reset\"), \" ac\\xADtion with the total value from the reply.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-realtime-angular-ngrx/vertx-request-response.png\",\n    \"alt\": \"Vertx Request Response\"\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier\"\n  }), \"https://www.slideshare.net/Red\\xADHat\\xADDe\\xADvel\\xADop\\xADers/vertx-\\u200Bmicroservices-were-never-so-easy-clement-escoffier\"))), mdx(\"p\", null, \"Here is an ex\\xADtract of the cor\\xADre\\xADspond\\xADing code (from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppEventBusService\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-typescript\"\n  }), \"initializeCounter() {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".eventBusService.send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'counter::total'\"), \", body, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"error, message\"), \") =>\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle reply\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (message && message.body) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"let\"), \" localAction = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" CounterActions.ResetAction();\\n            localAction.payload = message.body; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Total value\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".store.dispatch(localAction);\\n        }\\n    });\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"actions-distribution-through-publishsubscribe\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#actions-distribution-through-publishsubscribe\"\n  })), \"Actions distribution through Publish/Subscribe\"), mdx(\"p\", null, \"Ac\\xADtion dis\\xADtri\\xADb\\xADu\\xADtion/sync uses the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pub\\xADlish/sub\\xADscribe\"), \" pat\\xADtern.\"), mdx(\"p\", null, \"Counter ac\\xADtions are pub\\xADlished from the client to the event bus at the ad\\xADdress \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"counter::ac\\xADtions\"), \".\"), mdx(\"p\", null, \"Any client that have sub\\xADscribed to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"counter::ac\\xADtions\"), \" ad\\xADdress will re\\xADceive the ac\\xADtions and re\\xADdis\\xADpatch them lo\\xADcally to im\\xADpact app states/re\\xADduc\\xADers.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-realtime-angular-ngrx/vertx-publish-subscribe.png\",\n    \"alt\": \"Vertx Publish Subscribe\"\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier\"\n  }), \"https://www.slideshare.net/Red\\xADHat\\xADDe\\xADvel\\xADop\\xADers/vertx-\\u200Bmicroservices-were-never-so-easy-clement-escoffier\"))), mdx(\"p\", null, \"Here is an ex\\xADtract of the cor\\xADre\\xADspond\\xADing code (from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppEventBusService\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-typescript\"\n  }), \"publishAction(action: RemoteAction) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (action.publishedByUser) {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"console\"), \".error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"This action has already been published\\\"\"), \");\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n    }\\n    action.publishedByUser = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".currentUser;\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".eventBusService.publish(action.eventBusAddress, action);\\n}\\nsubscribeToActions(eventBusAddress: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"string\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".eventBusService.registerHandler(eventBusAddress, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"error, message\"), \") =>\"), \" {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Handle message from subscription\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (message.body.publishedByUser === \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".currentUser) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Ignore action sent by current manager\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"let\"), \" localAction = message.body;\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".store.dispatch(localAction);\\n    });\\n}\\n\")), mdx(\"p\", null, \"The event bus pub\\xADlish\\xADing logic is achieved through a sim\\xADple Ngrx Ef\\xADfects. Any ac\\xADtions that ex\\xADtend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RemoteAction\"), \" class will be pub\\xADlished to the event bus.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-typescript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Injectable\"), \"()\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"export\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" AppEventBusEffects {\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"constructor\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" actions$: Actions, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" appEventBusService: AppEventBusService\"), \") {}\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Listen to all actions and publish remote actions to account event bus\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Effect\"), \"({dispatch: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \"}) remoteAction$ = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".actions$\\n        .filter(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"action\"), \" =>\"), \" action \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"instanceof\"), \" RemoteAction && action.publishedByUser == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"undefined\"), \")\\n        .do(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"action: RemoteAction\"), \") =>\"), \" {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".appEventBusService.publishAction(action);\\n        });\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Effect\"), \"({dispatch: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \"}) login$ = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".actions$\\n        .ofType(UserActionTypes.LOGIN)\\n        .do(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"() =>\"), \" {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"this\"), \".appEventBusService.connect();\\n        });\\n}\\n\")), mdx(\"p\", null, \"You can see all of this in ac\\xADtion by lo\\xADcally launch\\xADing the server and the client app in two sep\\xADa\\xADrate browser win\\xADdows.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-realtime-angular-ngrx/demo-app-screen.png\",\n    \"alt\": \"Demo app screen\"\n  }))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Bonus: the demo app also in\\xADcludes user sta\\xADtus (of\\xADfline/on\\xADline), based of the event bus con\\xADnec\\xADtion sta\\xADtus.\")), mdx(\"p\", null, \"The counter state is shared and syn\\xADchro\\xADnized be\\xADtween con\\xADnected clients and each local ac\\xADtion is dis\\xADtrib\\xADuted in real-\\u200Btime to other clients.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mis\\xADsion ac\\xADcom\\xADplished!\")), mdx(Alert, {\n    info: true,\n    title: \"Typescript version of Vertx EventBus Client\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The app uses our own Type\\xADscript ver\\xADsion of the of\\xADfi\\xADcial JS \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"Vertx Event\\xADBus Client\"), \". It can be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/benorama/93373c3c1c3574732d6cc1b4754aab9f\"\n  }), \"here\"), \", any feed\\xADback, im\\xADprove\\xADment sug\\xADges\\xADtions are wel\\xADcome!\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Nowa­days, there are mul­ti­ple tech stacks to build a real-​time web app. What are the best choices to build real-​time An­gu­lar client apps, con­nected to a JVM-​based back­end? This ar­ti­cle de­scribes an An­gu­lar+Vertx real-​time ar­chi­tec­ture with a Proof of Con­cept demo app.</p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"https://medium.com/@benorama/building-a-realtime-web-app-with-angular-ngrx-and-vert-x-a5381c0397a1\">Medium post</a></p></div><h2 id=\"intro\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#intro\"></a>Intro</h2><p><strong>Wel­come to the real-​time web!</strong> It’s time to move on from tra­di­tional syn­chro­nous HTTP re­quest/re­sponse ar­chi­tec­tures to re­ac­tive apps with con­nected clients (ouch… that’s a lot of buzz­words in just one sen­tence)!</p><p><img src=\"/images/blog/vertx-realtime-angular-ngrx/data-in-motion.jpg\"/></p><p><em>Image source: <a href=\"https://www.voxxed.com\">https://www.voxxed.com</a></em></p><p>To build this kind of app, <a href=\"https://www.meteor.com\">Me­te­orJS</a> is the new cool kid on the block (v1.0 re­leased in oc­to­ber 2014): <strong>a full stack Javascript plat­form to build connected-​client re­ac­tive ap­pli­ca­tions</strong>. It al­lows JS de­vel­op­ers to build and de­ploy amaz­ing mod­ern web and mo­bile apps (iOS/An­droid) in no time, using a uni­fied back­end+fron­tend code within a sin­gle app repo. That’s a pretty am­bi­tious ap­proach but it re­quires a very opin­ion­ated and highly cou­pled JS tech stack and it’s still a pretty niche frame­work.</p><p>More­over, we are a Java shop on the back­end. At Ago­ra­Pulse, we rely heav­ily on :</p><ul><li><a href=\"https://angular.io\">An­gu­lar</a> and <a href=\"http://ionicframework.com\">Ionic</a> for the JS fron­tend (with a shared busi­ness/data ar­chi­tec­ture based on <a href=\"https://github.com/ngrx/store\">Ngrx</a>),</li><li><a href=\"http://www.groovy-lang.org\">Groovy</a> and <a href=\"https://grails.org\">Grails</a> ecosys­tem for the JVM back­end.</li></ul><p>So my ques­tion is:</p><blockquote><p>What are the best choices to build real-​time An­gu­lar client apps, con­nected to a JVM-​based back­end these days?</p></blockquote><p>Our re­quire­ments are pretty basic. We don’t need full Me­teor’s end-​to-end ap­pli­ca­tion model.\nWe just want to be able to :</p><ol><li>build a re­ac­tive app with an event bus on the JVM, and</li><li>ex­tend the event bus down to the browser to be able to pub­lish/sub­scribe to real-​time events from an An­gu­lar app.</li></ol><h3 id=\"server-side-jvm\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#server-side-jvm\"></a>Server side (JVM)</h3><p>Re­ac­tive apps is a hot topic nowa­days and there are many great libs/plat­forms to build this type of event-​driven ar­chi­tec­ture on the JVM:</p><ul><li><a href=\"http://vertx.io\">Vert.x</a>,</li><li><a href=\"https://www.lightbend.com\">Light­bend</a> plat­form (Play, Akka, Scala),</li><li>Spring <a href=\"http://projectreactor.io\">Project Re­ac­tor</a> (in­te­grated into Grails 3.0).</li></ul><h3 id=\"client-side\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#client-side\"></a>Client side</h3><p><a href=\"http://facebook.github.io/react/\">Re­ac­tJS</a> and <a href=\"https://angular.io\">An­gu­lar</a> are the two most pop­u­lar frame­work right now to build mod­ern JS apps. Most plat­forms use <a href=\"https://github.com/sockjs/sockjs-client\">SockJS</a> to han­dle real-​time con­nec­tions:</p><ul><li><a href=\"http://vertx.io/docs/vertx-web/groovy/\">Vertx-​web</a> pro­vides a SockJS server im­ple­men­ta­tion with an event bus bridge and a <a href=\"http://vertx.io/docs/vertx-web/groovy/#_sockjs_event_bus_bridge\">vertx-​evenbus.js</a> client li­brary (very easy to use),</li><li>Spring pro­vides web­socket SockJS sup­port though Spring Mes­sag­ing and Web­socket libs (see an ex­am­ple <a href=\"https://spring.io/guides/gs/messaging-stomp-websocket/\">here</a>)</li></ul><h3 id=\"final-choice-vertx--angular\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#final-choice-vertx--angular\"></a>Final choice: Vert.x + Angular</h3><p>In the end, I’ve cho­sen to ex­per­i­ment with Vert.x for its ex­cel­lent Groovy sup­port, dis­trib­uted event bus, scal­a­bil­ity and ease of use.</p><p>I en­joyed it very much. Let me show you the re­sult of my ex­per­i­men­ta­tion which is the root of our real-​time fea­tures com­ing very soon in Ago­ra­Pulse v6.0!</p><h2 id=\"why-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#why-vertx\"></a>Why Vert.x?</h2><p>Like other re­ac­tive plat­form, Vert.x is event dri­ven and non block­ing. It scales very well (even more that Node.js).</p><p>Un­like other re­ac­tive plat­forms, Vert.x is poly­glot: you can use Vert.x with mul­ti­ple lan­guages in­clud­ing Java, JavaScript, Groovy, Ruby, Cey­lon, Scala and Kotlin.</p><p>Un­like Node.js, Vert.x is a gen­eral pur­pose tool-​kit and un­opin­ion­ated. It’s a ver­sa­tile plat­form suit­able for many things: from sim­ple net­work util­i­ties, so­phis­ti­cated mod­ern web ap­pli­ca­tions, HTTP/REST mi­croser­vices or a full blown back-​end message-​bus ap­pli­ca­tion.</p><p>Like other re­ac­tive plat­forms, it looks scary in the be­gin­ing when you read the doc­u­men­ta­tion… ;) But once you start play­ing with it, it re­mains fun and sim­ple to use, es­pe­cially with Groovy! Vert.x re­ally al­lows you to build sub­stan­tial sys­tems with­out get­ting tan­gled in com­plex­ity.</p><p>In my case, I was mainly in­ter­ested by the dis­trib­uted event-​bus pro­vided (a core fea­ture of Vert.x).</p><p><strong>To val­i­date our ap­proach, we built pro­to­types with the fol­low­ing goals:</strong></p><ul><li><strong>share and syn­chro­nize a com­mon (Ngrx-​based) state be­tween mul­ti­ple con­nected clients, and</strong></li><li><strong>dis­trib­ute real-​time (Ngrx-​based) ac­tions across mul­ti­ple con­nected clients, which im­pact local states/re­duc­ers.</strong></li></ul><div class=\"alert info\"><p><a href=\"https://github.com/ngrx/store\">@ngrx/store</a> is a RxJS pow­ered state man­age­ment in­spired by Redux for An­gu­lar apps. It’s cur­rently the most pop­u­lar way to struc­ture com­plex busi­ness logic in An­gu­lar apps.</p></div><p><img src=\"/images/blog/vertx-realtime-angular-ngrx/redux.png\" alt=\"Redux\"/></p><p><em>Source: <a href=\"https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/\">https://www.smash­ing­magazine.com/2016/06/an-​introduction-to-redux/</a></em></p><h2 id=\"proof-of-concept\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#proof-of-concept\"></a>PROOF OF CONCEPT</h2><p>Here is the repo of our ini­tial proof of con­cept:</p><p><a href=\"http://github.com/benorama/ngrx-realtime-app\">http://github.com/beno­rama/ngrx-​realtime-app</a></p><p>The repo is di­vided into two sep­a­rate projects:</p><ul><li><strong>Vert.x server app</strong>, based on <a href=\"http://vertx.io\">Vert.x</a> (ver­sion 3.3), man­aged by <a href=\"https://gradle.org\">Gra­dle</a>, with a main ver­ti­cle de­vel­oped in <a href=\"http://groovy-lang.org\">Groovy</a> lang.</li><li><strong>An­gu­lar client app</strong>, based on An­gu­lar (ver­sion 4.0.1), man­aged by <a href=\"https://angular.io\">An­gu­lar</a> CLI with state, re­duc­ers and ac­tions logic based on <a href=\"https://github.com/ngrx/store\">@ngrx/store</a> (ver­sion 2.2.1)</li></ul><p>For the demo, we are using the counter ex­am­ple code (ac­tions and re­duc­ers) from <a href=\"https://github.com/ngrx/store\">@ngrx/store</a>.</p><p>The counter client busi­ness logic is based on:</p><ul><li><code>CounterState</code> in­ter­face, counter state model,</li><li><code>counterReducer</code> re­ducer, counter state man­age­ment based on dis­patched ac­tions, and</li><li><em>In­cre­ment</em>, <em>decre­ment</em> and <em>reset</em> counter ac­tions.</li></ul><p>State is main­tained server-​side with a sim­ple sin­gle­ton <code>CounterService</code>.</p><pre><code class=\"hljs language-groovy\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterService</span> {</span>\n    <span class=\"hljs-keyword\">static</span> INCREMENT = <span class=\"hljs-string\">&#x27;[Counter] Increment&#x27;</span>\n    <span class=\"hljs-keyword\">static</span> DECREMENT = <span class=\"hljs-string\">&#x27;[Counter] Decrement&#x27;</span>\n    <span class=\"hljs-keyword\">static</span> RESET = <span class=\"hljs-string\">&#x27;[Counter] Reset&#x27;</span>\n    <span class=\"hljs-keyword\">int</span> total = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">void</span> handleEvent(event) {\n        <span class=\"hljs-keyword\">switch</span>(event.type) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">INCREMENT:</span>\n                total++\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">DECREMENT:</span>\n                total--\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">RESET:</span>\n                total = <span class=\"hljs-number\">0</span>\n                <span class=\"hljs-keyword\">break</span>\n        }\n    }\n}\n</code></pre><h3 id=\"client-state-initialization-through-requestresponse\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#client-state-initialization-through-requestresponse\"></a>Client state initialization through Request/Response</h3><p>Ini­tial state is ini­tial­ized with sim­ple <strong>re­quest/re­sponse</strong> (or send/reply) on the event bus.\nOnce the client is con­nected, it sends a re­quest to the event bus at the ad­dress <strong>counter::total</strong>. The server replies di­rectly with the value of <code>CounterService</code> total and the client dis­patches lo­cally a <em>reset</em> ac­tion with the total value from the reply.</p><p><img src=\"/images/blog/vertx-realtime-angular-ngrx/vertx-request-response.png\" alt=\"Vertx Request Response\"/></p><p><em>Source: <a href=\"https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier\">https://www.slideshare.net/Red­Hat­De­vel­op­ers/vertx-​microservices-were-never-so-easy-clement-escoffier</a></em></p><p>Here is an ex­tract of the cor­re­spond­ing code (from <code>AppEventBusService</code>):</p><pre><code class=\"hljs language-typescript\">initializeCounter() {\n    <span class=\"hljs-built_in\">this</span>.eventBusService.send(<span class=\"hljs-string\">&#x27;counter::total&#x27;</span>, body, <span class=\"hljs-function\">(<span class=\"hljs-params\">error, message</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// Handle reply</span>\n    <span class=\"hljs-keyword\">if</span> (message &amp;&amp; message.body) {\n            <span class=\"hljs-keyword\">let</span> localAction = <span class=\"hljs-keyword\">new</span> CounterActions.ResetAction();\n            localAction.payload = message.body; <span class=\"hljs-comment\">// Total value</span>\n            <span class=\"hljs-built_in\">this</span>.store.dispatch(localAction);\n        }\n    });\n}\n</code></pre><h3 id=\"actions-distribution-through-publishsubscribe\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#actions-distribution-through-publishsubscribe\"></a>Actions distribution through Publish/Subscribe</h3><p>Ac­tion dis­tri­b­u­tion/sync uses the <strong>pub­lish/sub­scribe</strong> pat­tern.</p><p>Counter ac­tions are pub­lished from the client to the event bus at the ad­dress <strong>counter::ac­tions</strong>.</p><p>Any client that have sub­scribed to <strong>counter::ac­tions</strong> ad­dress will re­ceive the ac­tions and re­dis­patch them lo­cally to im­pact app states/re­duc­ers.</p><p><img src=\"/images/blog/vertx-realtime-angular-ngrx/vertx-publish-subscribe.png\" alt=\"Vertx Publish Subscribe\"/></p><p><em>Source: <a href=\"https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier\">https://www.slideshare.net/Red­Hat­De­vel­op­ers/vertx-​microservices-were-never-so-easy-clement-escoffier</a></em></p><p>Here is an ex­tract of the cor­re­spond­ing code (from <code>AppEventBusService</code>):</p><pre><code class=\"hljs language-typescript\">publishAction(action: RemoteAction) {\n    <span class=\"hljs-keyword\">if</span> (action.publishedByUser) {\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&quot;This action has already been published&quot;</span>);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    action.publishedByUser = <span class=\"hljs-built_in\">this</span>.currentUser;\n    <span class=\"hljs-built_in\">this</span>.eventBusService.publish(action.eventBusAddress, action);\n}\nsubscribeToActions(eventBusAddress: <span class=\"hljs-built_in\">string</span>) {\n    <span class=\"hljs-built_in\">this</span>.eventBusService.registerHandler(eventBusAddress, <span class=\"hljs-function\">(<span class=\"hljs-params\">error, message</span>) =&gt;</span> {\n        <span class=\"hljs-comment\">// Handle message from subscription</span>\n        <span class=\"hljs-keyword\">if</span> (message.body.publishedByUser === <span class=\"hljs-built_in\">this</span>.currentUser) {\n            <span class=\"hljs-comment\">// Ignore action sent by current manager</span>\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">let</span> localAction = message.body;\n        <span class=\"hljs-built_in\">this</span>.store.dispatch(localAction);\n    });\n}\n</code></pre><p>The event bus pub­lish­ing logic is achieved through a sim­ple Ngrx Ef­fects. Any ac­tions that ex­tend <code>RemoteAction</code> class will be pub­lished to the event bus.</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppEventBusEffects {\n\n    <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> actions$: Actions, <span class=\"hljs-keyword\">private</span> appEventBusService: AppEventBusService</span>) {}\n    <span class=\"hljs-comment\">// Listen to all actions and publish remote actions to account event bus</span>\n    <span class=\"hljs-meta\">@Effect</span>({dispatch: <span class=\"hljs-literal\">false</span>}) remoteAction$ = <span class=\"hljs-built_in\">this</span>.actions$\n        .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> action <span class=\"hljs-keyword\">instanceof</span> RemoteAction &amp;&amp; action.publishedByUser == <span class=\"hljs-literal\">undefined</span>)\n        .do(<span class=\"hljs-function\">(<span class=\"hljs-params\">action: RemoteAction</span>) =&gt;</span> {\n            <span class=\"hljs-built_in\">this</span>.appEventBusService.publishAction(action);\n        });\n\n    <span class=\"hljs-meta\">@Effect</span>({dispatch: <span class=\"hljs-literal\">false</span>}) login$ = <span class=\"hljs-built_in\">this</span>.actions$\n        .ofType(UserActionTypes.LOGIN)\n        .do(<span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">this</span>.appEventBusService.connect();\n        });\n}\n</code></pre><p>You can see all of this in ac­tion by lo­cally launch­ing the server and the client app in two sep­a­rate browser win­dows.</p><p><img src=\"/images/blog/vertx-realtime-angular-ngrx/demo-app-screen.png\" alt=\"Demo app screen\"/></p><p><em>Bonus: the demo app also in­cludes user sta­tus (of­fline/on­line), based of the event bus con­nec­tion sta­tus.</em></p><p>The counter state is shared and syn­chro­nized be­tween con­nected clients and each local ac­tion is dis­trib­uted in real-​time to other clients.</p><p><strong>Mis­sion ac­com­plished!</strong></p><div class=\"alert info\"><div class=\"alert-title\">Typescript version of Vertx EventBus Client</div><p>The app uses our own Type­script ver­sion of the of­fi­cial JS <a href=\"https://github.com/vert-x3/vertx-bus-bower\">Vertx Event­Bus Client</a>. It can be found <a href=\"https://gist.github.com/benorama/93373c3c1c3574732d6cc1b4754aab9f\">here</a>, any feed­back, im­prove­ment sug­ges­tions are wel­come!</p></div>","scope":{}},"tfIdfTerms":[{"term":"app","tf":21},{"term":"client","tf":19},{"term":"action","tf":15},{"term":"event","tf":14},{"term":"time","tf":12},{"term":"angular","tf":12},{"term":"bu","tf":12},{"term":"base","tf":11},{"term":"state","tf":11},{"term":"build","tf":10},{"term":"real","tf":10},{"term":"connect","tf":10},{"term":"counter","tf":10},{"term":"us","tf":9},{"term":"platform","tf":8},{"term":"js","tf":8},{"term":"ngrx","tf":8},{"term":"http","tf":7},{"term":"reactiv","tf":7},{"term":"jvm","tf":6},{"term":"publish","tf":6},{"term":"server","tf":6},{"term":"distribut","tf":6},{"term":"web","tf":5},{"term":"backend","tf":5}]},{"filename":"blog/2017-04-14-dynamic-routing-in-serverless-microservice-with-vert-x-event-bus.mdx","date":"2017-04-14","slug":"dynamic-routing-in-serverless-microservice-with-vert-x-event-bus","meta":{"title":"Dynamic Routing in Serverless Microservice with Vert.x Event Bus","category":"guides","authors":[{"name":"Rowell Belen","github_id":"bytekast"}],"summary":"The Serverless Framework has become the de facto toolkit for building and deploying serverless functions or applications."},"readingTime":{"text":"3 min read","minutes":2.6,"time":156000,"words":520},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/\"\n  }), \"blog post\"))), mdx(\"h2\", {\n    \"id\": \"serverless-framework\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#serverless-framework\"\n  })), \"Serverless framework\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless.com\"\n  }), \"Server\\xADless Frame\\xADwork\"), \" has be\\xADcome the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"De Facto\"), \" toolkit for build\\xADing and de\\xADploy\\xADing Server\\xADless func\\xADtions or ap\\xADpli\\xADca\\xADtions. Its com\\xADmu\\xADnity has done a great job ad\\xADvanc\\xADing the tools around Server\\xADless ar\\xADchi\\xADtec\\xADture.\"), mdx(\"p\", null, \"How\\xADever, in the Server\\xADless com\\xADmu\\xADnity there is de\\xADbate among de\\xADvel\\xADop\\xADers on whether a sin\\xADgle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS Lambda\"), \" func\\xADtion should only be re\\xADspon\\xADsi\\xADble for a sin\\xADgle API end\\xADpoint. My an\\xADswer, based on my real-\\u200Bworld pro\\xADduc\\xADtion ex\\xADpe\\xADri\\xADence, is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NO\"), \". \"), mdx(\"p\", null, \"Imag\\xADine if you are build\\xADing a set of APIs with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"10\"), \" end\\xADpoints and you need to de\\xADploy the APIs to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DEV\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"STAGE\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PROD\"), \" en\\xADvi\\xADron\\xADments. Now you are look\\xADing at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"30\"), \" dif\\xADfer\\xADent func\\xADtions to ver\\xADsion, de\\xADploy and man\\xADage - not to men\\xADtion the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Copy & Paste\"), \" code and con\\xADfig\\xADu\\xADra\\xADtion that will re\\xADsult from this type of set-\\u200Bup. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NO THANKS!!!\"), \" \"), mdx(\"p\", null, \"I be\\xADlieve a more prag\\xADmatic ap\\xADproach is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 Lambda Func\\xADtion\"), \" == \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1 Mi\\xADcroser\\xADvice\"), \".\"), mdx(\"p\", null, \"For ex\\xADam\\xADple, if you were build\\xADing a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" with basic \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CRUD\"), \" func\\xADtion\\xADal\\xADity, you should im\\xADple\\xADment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"READ\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UPDATE\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \" in a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sin\\xADgle\"), \" Lambda func\\xADtion. In the code, you should re\\xADsolve the de\\xADsired ac\\xADtion by in\\xADspect\\xADing the re\\xADquest or the con\\xADtext.\"), mdx(\"h2\", {\n    \"id\": \"vertx-to-the-rescue\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-to-the-rescue\"\n  })), \"Vert.x to the rescue\"), mdx(\"p\", null, \"There are many ben\\xADe\\xADfits to using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \" in any ap\\xADpli\\xADca\\xADtion. With \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \", you get a rock-\\u200Bsolid and light\\xADweight toolkit for build\\xADing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"highly per\\xADfor\\xADmant\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"event-\\u200Bdriven\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"non-\\u200Bblocking\"), \" ap\\xADpli\\xADca\\xADtions. The toolkit even pro\\xADvides asyn\\xADchro\\xADnous \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"APIs\"), \" for ac\\xADcess\\xADing tra\\xADdi\\xADtional block\\xADing dri\\xADvers such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-jdbc-client/groovy/\"\n  }), \"JDBC\")), \".\"), mdx(\"p\", null, \"How\\xADever, for this ex\\xADam\\xADple, we will mainly focus on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/groovy/#event_bus\"\n  }), \"Event Bus\"), \". The event bus al\\xADlows dif\\xADfer\\xADent parts of your ap\\xADpli\\xADca\\xADtion to com\\xADmu\\xADni\\xADcate with each other via event mes\\xADsages. It sup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pub\\xADlish/sub\\xADscribe\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"point to point\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"request-\\u200Bresponse mes\\xADsag\\xADing\"), \".\"), mdx(\"p\", null, \"For the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" ex\\xADam\\xADple above, we could treat the com\\xADbi\\xADna\\xADtion of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP METHOD\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RESOURCE PATH\"), \" as a unique event chan\\xADnel, and reg\\xADis\\xADter the sub\\xADscribers/han\\xADdlers to re\\xADspond ap\\xADpro\\xADpri\\xADately.\"), mdx(\"p\", null, \"Let\\u2019s dive right in.\"), mdx(\"h2\", {\n    \"id\": \"goal\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#goal\"\n  })), \"Goal\"), mdx(\"p\", null, \"Cre\\xADate a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"message-\\u200Bdriven\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asyn\\xADchro\\xADnous\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Mi\\xADcroser\\xADvice\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DELETE\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PUT\"), \" CRUD op\\xADer\\xADa\\xADtions in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sin\\xADgle\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"aws.amazon.com/lambda\"\n  }), \"AWS Lambda Func\\xADtion\")), \" using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverless.com\"\n  }), \"Server\\xADless Frame\\xADwork\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Serverless stack definition\"), \":\"), mdx(Gist, {\n    url: \"https://gist.github.com/bytekast/48daa2ca479156c98d2735cca181ef30\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"solution\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#solution\"\n  })), \"Solution\"), mdx(\"p\", null, \"Use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x\"), \"\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/groovy/#event_bus\"\n  }), \"Event Bus\"), \" to han\\xADdle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dy\\xADnamic rout\\xADing\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"event han\\xADdlers\"), \" based on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HTTP method\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsource path\"), \" from the API input.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Lambda Handler\"), \":\"), mdx(Gist, {\n    url: \"https://gist.github.com/bytekast/d5a544f8cdcd327a12010100b2ba2d66\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"code-review\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#code-review\"\n  })), \"Code review\"), mdx(\"p\", null, \"Lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"14-19\"), \" ini\\xADtial\\xADizes the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \" in\\xADstance. AWS Lambda will hold on to this in\\xADstance for the life of the con\\xADtainer/\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JVM\"), \". It is reused in sub\\xADse\\xADquent re\\xADquests.\"), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"17\"), \" reg\\xADis\\xADters the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User Ser\\xADvice\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdlers\")), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"22\"), \" de\\xADfines the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main han\\xADdler\"), \" method that is called when the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lambda func\\xADtion\"), \" is in\\xADvoked.\"), mdx(\"p\", null, \"Line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"27\"), \" sends the Lambda func\\xADtion input to the (dy\\xADnamic) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ad\\xADdress\"), \" where han\\xADdlers are wait\\xADing to re\\xADspond. \"), mdx(\"p\", null, \"Lines \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"44-66\"), \" de\\xADfines the spe\\xADcific \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdlers\"), \" and binds them to the ap\\xADpro\\xADpri\\xADate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"chan\\xADnels\"), \" (http method + re\\xADsource path)\"), mdx(\"h2\", {\n    \"id\": \"summary\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#summary\"\n  })), \"Summary\"), mdx(\"p\", null, \"As you can see, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x\"), \"\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/groovy/#event_bus\"\n  }), \"Event Bus\"), \" makes it very easy to dy\\xADnam\\xADi\\xADcally sup\\xADport mul\\xADti\\xADple routes in a sin\\xADgle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Server\\xADless\"), \" func\\xADtion. This re\\xADduces the num\\xADber of func\\xADtions you have to man\\xADage, de\\xADploy and main\\xADtain in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AWS\"), \". In ad\\xADdi\\xADtion, you gain ac\\xADcess to asyn\\xADchro\\xADnous, non-\\u200Bblocking APIs that come stan\\xADdard with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Vert.x\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Server\\xADless + Vert.x = BLISS\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"https://www.rowellbelen.com/dynamic-routing-in-serverless-microservice-with-vert-x-event-bus/\">blog post</a></p></div><h2 id=\"serverless-framework\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#serverless-framework\"></a>Serverless framework</h2><p>The <a href=\"https://serverless.com\">Server­less Frame­work</a> has be­come the <em>De Facto</em> toolkit for build­ing and de­ploy­ing Server­less func­tions or ap­pli­ca­tions. Its com­mu­nity has done a great job ad­vanc­ing the tools around Server­less ar­chi­tec­ture.</p><p>How­ever, in the Server­less com­mu­nity there is de­bate among de­vel­op­ers on whether a sin­gle <strong>AWS Lambda</strong> func­tion should only be re­spon­si­ble for a sin­gle API end­point. My an­swer, based on my real-​world pro­duc­tion ex­pe­ri­ence, is <strong>NO</strong>. </p><p>Imag­ine if you are build­ing a set of APIs with <strong>10</strong> end­points and you need to de­ploy the APIs to <strong>DEV</strong>, <strong>STAGE</strong> and <strong>PROD</strong> en­vi­ron­ments. Now you are look­ing at <strong>30</strong> dif­fer­ent func­tions to ver­sion, de­ploy and man­age - not to men­tion the <em>Copy &amp; Paste</em> code and con­fig­u­ra­tion that will re­sult from this type of set-​up. <strong>NO THANKS!!!</strong> </p><p>I be­lieve a more prag­matic ap­proach is <strong>1 Lambda Func­tion</strong> == <strong>1 Mi­croser­vice</strong>.</p><p>For ex­am­ple, if you were build­ing a <strong>User Mi­croser­vice</strong> with basic <strong>CRUD</strong> func­tion­al­ity, you should im­ple­ment <code>CREATE</code>, <code>READ</code>, <code>UPDATE</code> and <code>DELETE</code> in a <strong>sin­gle</strong> Lambda func­tion. In the code, you should re­solve the de­sired ac­tion by in­spect­ing the re­quest or the con­text.</p><h2 id=\"vertx-to-the-rescue\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-to-the-rescue\"></a>Vert.x to the rescue</h2><p>There are many ben­e­fits to using <strong>Vert.x</strong> in any ap­pli­ca­tion. With <strong>Vert.x</strong>, you get a rock-​solid and light­weight toolkit for build­ing <strong>re­ac­tive</strong>, <strong>highly per­for­mant</strong>, <strong>event-​driven</strong> and <strong>non-​blocking</strong> ap­pli­ca­tions. The toolkit even pro­vides asyn­chro­nous <em>APIs</em> for ac­cess­ing tra­di­tional block­ing dri­vers such as <strong><a href=\"http://vertx.io/docs/vertx-jdbc-client/groovy/\">JDBC</a></strong>.</p><p>How­ever, for this ex­am­ple, we will mainly focus on the <a href=\"http://vertx.io/docs/vertx-core/groovy/#event_bus\">Event Bus</a>. The event bus al­lows dif­fer­ent parts of your ap­pli­ca­tion to com­mu­ni­cate with each other via event mes­sages. It sup­ports <em>pub­lish/sub­scribe</em>, <em>point to point</em>, and <em>request-​response mes­sag­ing</em>.</p><p>For the <strong>User Mi­croser­vice</strong> ex­am­ple above, we could treat the com­bi­na­tion of the <code>HTTP METHOD</code> and <code>RESOURCE PATH</code> as a unique event chan­nel, and reg­is­ter the sub­scribers/han­dlers to re­spond ap­pro­pri­ately.</p><p>Let’s dive right in.</p><h2 id=\"goal\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#goal\"></a>Goal</h2><p>Cre­ate a <em>re­ac­tive</em>, <em>message-​driven</em>, <em>asyn­chro­nous</em> <strong>User Mi­croser­vice</strong> with <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>PUT</code> CRUD op­er­a­tions in a <em>sin­gle</em> <strong><a href=\"aws.amazon.com/lambda\">AWS Lambda Func­tion</a></strong> using the <a href=\"https://serverless.com\">Server­less Frame­work</a></p><p><code>Serverless stack definition</code>:</p><div>...waiting for Gist...</div><h2 id=\"solution\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#solution\"></a>Solution</h2><p>Use <a href=\"http://vertx.io\">Vert.x</a>’s <a href=\"http://vertx.io/docs/vertx-core/groovy/#event_bus\">Event Bus</a> to han­dle <strong>dy­namic rout­ing</strong> to <strong>event han­dlers</strong> based on <em>HTTP method</em> and <em>re­source path</em> from the API input.</p><p><code>Lambda Handler</code>:</p><div>...waiting for Gist...</div><h2 id=\"code-review\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#code-review\"></a>Code review</h2><p>Lines <code>14-19</code> ini­tial­izes the <strong>Vert.x</strong> in­stance. AWS Lambda will hold on to this in­stance for the life of the con­tainer/<strong>JVM</strong>. It is reused in sub­se­quent re­quests.</p><p>Line <code>17</code> reg­is­ters the <strong>User Ser­vice</strong> <em>han­dlers</em></p><p>Line <code>22</code> de­fines the <strong>main han­dler</strong> method that is called when the <strong>Lambda func­tion</strong> is in­voked.</p><p>Line <code>27</code> sends the Lambda func­tion input to the (dy­namic) <strong>ad­dress</strong> where han­dlers are wait­ing to re­spond. </p><p>Lines <code>44-66</code> de­fines the spe­cific <em>han­dlers</em> and binds them to the ap­pro­pri­ate <em>chan­nels</em> (http method + re­source path)</p><h2 id=\"summary\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#summary\"></a>Summary</h2><p>As you can see, <a href=\"http://vertx.io\">Vert.x</a>’s <a href=\"http://vertx.io/docs/vertx-core/groovy/#event_bus\">Event Bus</a> makes it very easy to dy­nam­i­cally sup­port mul­ti­ple routes in a sin­gle <strong>Server­less</strong> func­tion. This re­duces the num­ber of func­tions you have to man­age, de­ploy and main­tain in <strong>AWS</strong>. In ad­di­tion, you gain ac­cess to asyn­chro­nous, non-​blocking APIs that come stan­dard with <strong>Vert.x</strong>.</p><blockquote><p>Server­less + Vert.x = BLISS</p></blockquote>","scope":{}},"tfIdfTerms":[{"term":"function","tf":11},{"term":"serverless","tf":8},{"term":"event","tf":8},{"term":"lambda","tf":7},{"term":"api","tf":6},{"term":"handler","tf":6},{"term":"singl","tf":5},{"term":"line","tf":5},{"term":"build","tf":4},{"term":"deploi","tf":4},{"term":"applic","tf":4},{"term":"aw","tf":4},{"term":"microservic","tf":4},{"term":"user","tf":4},{"term":"bu","tf":4},{"term":"framework","tf":3},{"term":"toolkit","tf":3},{"term":"commun","tf":3},{"term":"code","tf":3},{"term":"will","tf":3},{"term":"exampl","tf":3},{"term":"request","tf":3},{"term":"us","tf":3},{"term":"block","tf":3},{"term":"asynchron","tf":3}]},{"filename":"blog/2017-03-20-scala-is-here.mdx","date":"2017-03-20","slug":"scala-is-here","meta":{"title":"Scala is here","category":"guides","authors":[{"name":"Jochen Mader","github_id":"codepitbull"}],"summary":"The rise of Scala as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers."},"readingTime":{"text":"8 min read","minutes":7.065,"time":423900.00000000006,"words":1413},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scala sup\\xADport for Vert.x is here!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is based on Scala 2.12, no sup\\xADport for 2.11 planned\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"all Vert.x-\\u200Bmodules are avail\\xADable in a Scala fla\\xADvor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It\\u2019s awe\\xADsome\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Get started \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-sbt-starter\"\n  }), \"here\"))), mdx(\"h2\", {\n    \"id\": \"intro\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#intro\"\n  })), \"Intro\"), mdx(\"p\", null, \"The rise of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://scala-lang.org/\"\n  }), \"Scala\"), \" as one of the most im\\xADpor\\xADtant lan\\xADguages on the JVM caught many (me in\\xADcluded) by sur\\xADprise. This hy\\xADbrid of func\\xADtional and im\\xADper\\xADa\\xADtive par\\xADa\\xADdigms struck a chord with many de\\xADvel\\xADop\\xADers. Thanks to Scala a lot of peo\\xADple who\\u2019d never have touched a lan\\xADguage like Haskell got ex\\xADposed to func\\xADtional pro\\xADgram\\xADming. This ex\\xADpo\\xADsure was one of the dri\\xADving forces to get streams and lambda into the JVM.\"), mdx(\"p\", null, \"With the re\\xADlease of Vert.x 3.4.0 we fi\\xADnally in\\xADtro\\xADduced Scala to the fam\\xADily of sup\\xADported lan\\xADguages: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-lang-scala\"\n  }), \"vertx-\\u200Blang-scala\"), \".\"), mdx(\"p\", null, \"In this post I will in\\xADtro\\xADduce the new stack and how the power of Scala can be used in your fa\\xADvorite re\\xADac\\xADtive toolkit.\"), mdx(\"h2\", {\n    \"id\": \"basics\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#basics\"\n  })), \"Basics\"), mdx(\"p\", null, \"vertx-\\u200Blang-scala is based on Scala 2.12. There are no plans to sup\\xADport 2.11.\"), mdx(\"p\", null, \"All mod\\xADules avail\\xADable for Vert.x are sup\\xADported (you can check  \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-lang-scala/tree/master/vertx-lang-scala-stack\"\n  }), \"here\"), \" ).\"), mdx(Alert, {\n    info: true,\n    title: \"Future and Promise both need a ExecutionContext\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Mod\\xADules use the fol\\xADlow\\xADing naming-\\u200Bscheme: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"io.vertx:\", \"<\", \"name-\\u200Bof-vertx-module\", \">\", \"-\\u200Bscala_2.12:\", \"<\", \"vertx-\\u200Bmajor-version\", \">\"), \". The Scala ver\\xADsion of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"io.vertx:vert-\\u200Bweb:3.4.0\"), \" would be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"io.vertx:vertx-\\u200Bweb-scala_2.12:3.4.0\"), \".\")), mdx(\"p\", null, \"There is an sbt-\\u200Bbased \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-sbt-starter\"\n  }), \"quickstart-\\u200Bproject\"), \" avail\\xADable that will be up\\xADdated for each Vert.x-\\u200Brelease.\"), mdx(\"p\", null, \"Please note: Al\\xADthough \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.scala-sbt.org/\"\n  }), \"sbt\"), \" is used in this quick\\xADstart it is by no means re\\xADquired. There are no spe\\xADcial plu\\xADg\\xADins in\\xADvolved so vertx-\\u200Blang-scala can eas\\xADily be used with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.gradle.org/current/userguide/scala_plugin.html\"\n  }), \"Gra\\xADdle\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/davidB/scala-maven-plugin\"\n  }), \"Maven\"), \".\"), mdx(\"p\", null, \"I use sbt as it is the de\\xADfault build sys\\xADtem used for Scala projects.\"), mdx(\"h2\", {\n    \"id\": \"quickstart\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#quickstart\"\n  })), \"Quickstart\"), mdx(\"p\", null, \"Let\\u2019s get started by cloning the quick\\xADstart:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"git \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"clone\"), \" git@github.com:vert-x3/vertx-sbt-starter.git\\n\")), mdx(\"p\", null, \"You just got the fol\\xADlow\\xADing things:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An sbt project con\\xADtain\\xADing de\\xADpen\\xADden\\xADcies to Vert.x-\\u200Bcore and Vert.x-web\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The abil\\xADity to cre\\xADate a fat-\\u200Bjat via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sbt assembly\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The abil\\xADity to cre\\xADate a docker con\\xADtainer via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sbt docker\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A few ex\\xADam\\xADple ver\\xADti\\xADcles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unit test ex\\xADam\\xADples\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a pre-\\u200Bconfigured Scala-\\u200Bshell in\\xADside sbt\")), mdx(\"p\", null, \"We will now run the ap\\xADpli\\xADca\\xADtion to get some quick sat\\xADis\\xADfac\\xADtion. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sbt assembly\"), \" to pro\\xADduce the fat-\\u200Bjar fol\\xADlowed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar target/scala-2.12/vertx-scala-sbt-assembly-0.1-SNAPSHOT.jar\"), \". Now point your browser to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8666/hello\"\n  }), \"http://lo\\xADcal\\xADhost:8666/hello\"), \" for a clas\\xADsic wel\\xADcome mes\\xADsage.\"), mdx(\"h2\", {\n    \"id\": \"the-details\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-details\"\n  })), \"The details\"), mdx(\"p\", null, \"Open your IDE so we can take a look at what\\u2019s going on under the hood. We start with the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HttpVer\\xADti\\xADcle\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scala\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.scala.sbt\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.lang.scala.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"ScalaVerticle\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.scala.ext.web.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Router\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" scala.concurrent.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Future\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"HttpVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"ScalaVerticle\"), \" \"), \"{ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <1>\"), \"\\n\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"override\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"startFuture\")), \"(): \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Future\"), \"[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Unit\"), \"] = { \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <2>\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"val\"), \" router = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Router\"), \".router(vertx) \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <3>\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"val\"), \" route = router\\n      .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \")\\n        .handler(_.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"world\\\"\"), \"))\\n\\n    vertx \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//<4>\"), \"\\n      .createHttpServer()\\n      .requestHandler(router.accept)\\n      .listenFuture(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8666\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0\\\"\"), \")  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <5>\"), \"\\n        .map(_ => ()) \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <6>\"), \"\\n  }\\n}\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"ScalaVer\\xADti\\xADcle\"), \" is the base class for all Scala-\\u200BVerticles. It pro\\xADvides all re\\xADquired meth\\xADods to in\\xADte\\xADgrate with the Vert.x-\\u200Bruntime.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"There are two ways to start a Ver\\xADti\\xADcle. Over\\xADrid\\xADing \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"start\\xADFu\\xADture\"), \", like in this ex\\xADam\\xADple, tells Vert.x to only con\\xADsider the Ver\\xADti\\xADcle fully started after the re\\xADturned \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\", \"[Unit]\"), \" has been suc\\xADcess\\xADfully com\\xADpleted. Al\\xADter\\xADna\\xADtively one can over\\xADride \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"start\"), \" and by that sig\\xADnal to Vert.x the in\\xADstant avail\\xADabil\\xADity of the Ver\\xADti\\xADcle.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This block cre\\xADates a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Router\"), \" for in\\xADcom\\xADing HTTP-\\u200Brequests. It reg\\xADis\\xADters a han\\xADdler to an\\xADswer with \\u201Cworld\\u201D if a re\\xADquest to the URL \\u201C/hello\\u201D ar\\xADrives. The class is com\\xADing from the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/scala/\"\n  }), \"Vert.x-\\u200Bweb-module\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Every Ver\\xADti\\xADcle has ac\\xADcess to the Vert.x-\\u200Binstance. Here we use it to cre\\xADate a web\\xADserver and reg\\xADis\\xADter our router to han\\xADdle in\\xADcom\\xADing re\\xADquests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We fi\\xADnally reached the rea\\xADson why I use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"start\\xADFu\\xADture\"), \" in the first place. All op\\xADer\\xADa\\xADtions in Vert.x are asyn\\xADchro\\xADnous. So start\\xADing the web\\xADserver most def\\xADi\\xADnitely means it takes some more time until it bound to the given port (8666 in this case). That\\u2019s why \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"lis\\xADten\\xADFu\\xADture\"), \" is used, which re\\xADturns a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" which in turn con\\xADtains the ac\\xADtual in\\xADstance of the web\\xADserver that just got started. So our Ver\\xADti\\xADcle will be ready to re\\xADceive re\\xADquests \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"after\"), \" the re\\xADturned \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" has been com\\xADpleted.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In most cases we can re\\xADturn the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" di\\xADrectly. In this case the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" re\\xADturned by \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"lis\\xADten\\xADFu\\xADture\"), \" has the wrong type. We get a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\", \"[HttpServer]\"), \" but we need a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\", \"[Unit]\"), \" as you can see in the sig\\xADna\\xADture of \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"start\\xADFu\\xADture\"), \". This call takes care of map\\xADping the given \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\", \"[HttpServer]\"), \" to the re\\xADquired re\\xADturn type.\")), mdx(\"h2\", {\n    \"id\": \"testing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#testing\"\n  })), \"Testing\"), mdx(\"p\", null, \"I use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.scalatest.org/\"\n  }), \"Sca\\xADlaT\\xADest\"), \" for all my test\\xADing needs. It comes with stel\\xADlar sup\\xADport for asyn\\xADchro\\xADnous op\\xADer\\xADa\\xADtions and is a per\\xADfect fit for test\\xADing Vert.x-\\u200Bapplications.\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HttpVer\\xADti\\xADcle\\xADSpec\"), \" shows how to test an HTTP-\\u200BAPI using only Vert.x-\\u200Bclasses. Per\\xADson\\xADally I pre\\xADfer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://rest-assured.io/\"\n  }), \"REST-\\u200Bassured\"), \" with its rich DSL. For this post I wanted to stick with Vert.x-API, so here we go.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scala\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.scala.sbt\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.scalatest.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Matchers\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" scala.concurrent.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Promise\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"HttpVerticleSpec\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"VerticleTesting\"), \"[\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"HttpVerticle\"), \"] \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"with\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Matchers\"), \" \"), \"{ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <1>\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"HttpVerticle\\\"\"), \" should \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bind to 8666 and answer with 'world'\\\"\"), \" in { \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <2>\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"val\"), \" promise = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Promise\"), \"[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"String\"), \"] \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <3>\"), \"\\n\\n    vertx.createHttpClient()  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <4>\"), \"\\n      .getNow(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8666\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"127.0.0.1\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \",\\n        r => {\\n          r.exceptionHandler(promise.failure)\\n          r.bodyHandler(b => promise.success(b.toString))\\n        })\\n\\n    promise.future.map(res => res should equal(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"world\\\"\"), \")) \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <5>\"), \"\\n  }\\n\\n}\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ver\\xADti\\xADcleTest\\xADing\"), \" is a base class for your tests in\\xADcluded with the quickstart-\\u200Bproject. It\\u2019s a small helper that takes care of de\\xADploy\\xADing/un-\\u200Bdeploying the Ver\\xADti\\xADcle to be tested and man\\xADages a Vert.x-\\u200Binstance. It ad\\xADdi\\xADtion\\xADally ex\\xADtends \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.scalatest.org/user_guide/async_testing\"\n  }), \"AsyncFlat\\xADSpec\"), \" so we can use Fu\\xADtures as test-\\u200Breturn-types.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Isn\\u2019t it nice and read\\xADable?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The promise is re\\xADquired as the whole test will run async\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We use the vertx-\\u200Binstance pro\\xADvided by \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ver\\xADti\\xADcleTest\\xADing\"), \" to cre\\xADate a Netty-\\u200Bbased Http\\xADClient. We in\\xADstruct the client to call the spec\\xADi\\xADfied URL and to suc\\xADceed the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Promise\"), \" with the re\\xADturned body.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This cre\\xADates the ac\\xADtual as\\xADser\\xADtion. After get\\xADting the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" from the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Promise\"), \" an as\\xADser\\xADtion is cre\\xADated: \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"The Re\\xADsult should be equal to the String \\u201Cworld\\u201D\"), \". Sca\\xADlaT\\xADest takes care of eval\\xADu\\xADat\\xADing the re\\xADturned \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \".\")), mdx(\"p\", null, \"That\\u2019s all you need to get started!\"), mdx(\"h2\", {\n    \"id\": \"futures-in-vertx-lang-scala\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#futures-in-vertx-lang-scala\"\n  })), \"Futures in vertx-lang-scala\"), mdx(\"p\", null, \"Now for a more in depth topic I think is worth men\\xADtion\\xADing. vertx-\\u200Blang-scala treats async op\\xADer\\xADa\\xADtions the Scala-\\u200Bway which is a lit\\xADtle dif\\xADfer\\xADent from what you might be used from Vert.x. For async op\\xADer\\xADa\\xADtions like sub\\xADscrib\\xADing to the event\\xADbus or de\\xADploy\\xADing a Ver\\xADti\\xADcle you would call a method like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scala\"\n  }), \"vertx.deployVerticle(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"com.foo.OtherVerticle\\\"\"), \", res -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (res.succeeded()) {\\n    startFuture.complete();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    startFuture.fail(res.cause());\\n  }\\n});\\n\")), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"de\\xADployVer\\xADti\\xADcle\"), \" method takes the Verticle-\\u200Bname and a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Han\\xADdler\", \"[Asyn\\xADcRe\\xADsult]\"), \" as its ar\\xADgu\\xADments. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Han\\xADdler\", \"[Asyn\\xADcRe\\xADsult]\"), \" is called after Vert.x tried de\\xADploy\\xADing the Ver\\xADti\\xADcle. This style can also be used for Scala (which might ease the tran\\xADsi\\xADtion when com\\xADing from the Java-\\u200Bworld) but their is a way more \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"scalaish\"), \" way of doing this.\"), mdx(\"p\", null, \"For every method tak\\xADing a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Han\\xADdler\", \"[Asyn\\xADcRe\\xADsult]\"), \" as its ar\\xADgu\\xADment I cre\\xADate an al\\xADter\\xADna\\xADtive method using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docs.scala-lang.org/overviews/core/futures.html\"\n  }), \"Scala-\\u200BFutures\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scala\"\n  }), \"vertx.deployVerticleFuture(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"com.foo.OtherVerticle\\\"\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <1>\"), \"\\n  .onComplete{  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <2>\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"case\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Success\"), \"(s) => println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"s\\\"Verticle id is: \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-subst\"\n  }), \"$s\"), \"\\\"\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// <3>\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"case\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"Failure\"), \"(t) => t.printStackTrace()\\n  }\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A method pro\\xADvid\\xADing a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" based al\\xADter\\xADna\\xADtive gets \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" ap\\xADpended to its name and re\\xADturns a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" in\\xADstead of tak\\xADing a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Han\\xADdler\"), \" as its ar\\xADgu\\xADment.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We are now free to use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Fu\\xADture\"), \" the way we want. In this case on\\xADCom\\xADplete is used to react on the com\\xADple\\xADtion.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pat\\xADtern match\\xADing on the re\\xADsult \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"<\", \"3\"))), mdx(\"p\", null, \"I strongly rec\\xADom\\xADmend using this ap\\xADproach over using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Han\\xADdlers\"), \" as you won\\u2019t run into Callback-\\u200Bhell and you get all the good\\xADies Scala pro\\xADvides for async op\\xADer\\xADa\\xADtions.\"), mdx(Alert, {\n    info: true,\n    title: \"Future and Promise both need a ExecutionContext\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/VertxExecutionContext.scala\"\n  }), \"Vertx\\xADEx\\xADe\\xADcu\\xADtion\\xADCon\\xADtext\"), \" is made im\\xADplic\\xADitly avail\\xADable in\\xADside the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/ScalaVerticle.scala\"\n  }), \"ScalaVer\\xADti\\xADcle\"), \". It makes sure all  op\\xADer\\xADa\\xADtions are ex\\xADe\\xADcuted on the cor\\xADrect Event Loop. If you are using Vert.x with\\xADout Ver\\xADti\\xADcles you have to pro\\xADvide it on your own.\")), mdx(\"h2\", {\n    \"id\": \"using-the-console\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-the-console\"\n  })), \"Using the console\"), mdx(\"p\", null, \"A great fea\\xADture of sbt is the em\\xADbed\\xADded, con\\xADfig\\xADurable Scala-\\u200Bconsole. The con\\xADsole avail\\xADable in the quickstart-\\u200Bproject is pre-\\u200Bconfigured to pro\\xADvide a fresh Vert.x-\\u200Binstance and all re\\xADquired im\\xADports so you can start play\\xADing around with Vert.x in an in\\xADstant.\"), mdx(\"p\", null, \"Ex\\xADe\\xADcute the fol\\xADlow\\xADing com\\xADmands in the project-\\u200Bfolder to de\\xADploy the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HttpVer\\xADti\\xADcle\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"sbt\\n> console\\nscala> vertx.deployVerticle(nameForVerticle[HttpVerticle])\\nscala> vertx.deploymentIDs\\n\")), mdx(\"p\", null, \"After  ex\\xADe\\xADcut\\xADing this se\\xADquence you can now point your browser \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8666/hello\"\n  }), \"http://lo\\xADcal\\xADhost:8666/hello\"), \" to see our mes\\xADsage. The last com\\xADmand is\\xADsued shows the Ids under which Ver\\xADti\\xADcles have been de\\xADployed.\"), mdx(\"p\", null, \"To get rid of the de\\xADploy\\xADment you can now type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.undeploy(vertx.deploymentIDs.head)\"), \".\"), mdx(\"h2\", {\n    \"id\": \"thats-it\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#thats-it\"\n  })), \"That\\u2019s it!\"), mdx(\"p\", null, \"This was a very quick in\\xADtro\\xADduc\\xADtion to our new Scala-\\u200Bstack. I hope to have given you a lit\\xADtle taste of the Scala good\\xADness now avail\\xADable with Vert.x. I rec\\xADom\\xADmend dig\\xADging a lit\\xADtle more through the quick\\xADstart to get a feel\\xADing for what\\u2019s there.\\nIn my next blog post I will ex\\xADplain some of the de\\xADci\\xADsions I made and the ob\\xADsta\\xADcles I faced with the dif\\xADfer\\xADences be\\xADtween Java and Scala /Hint: They are way big\\xADger than I was aware of).\"), mdx(\"p\", null, \"Enjoy!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><strong>TL;DR:</strong></p><ul><li>Scala sup­port for Vert.x is here!</li><li>It is based on Scala 2.12, no sup­port for 2.11 planned</li><li>all Vert.x-​modules are avail­able in a Scala fla­vor</li><li>It’s awe­some</li><li>Get started <a href=\"https://github.com/vert-x3/vertx-sbt-starter\">here</a></li></ul><h2 id=\"intro\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#intro\"></a>Intro</h2><p>The rise of <a href=\"http://scala-lang.org/\">Scala</a> as one of the most im­por­tant lan­guages on the JVM caught many (me in­cluded) by sur­prise. This hy­brid of func­tional and im­per­a­tive par­a­digms struck a chord with many de­vel­op­ers. Thanks to Scala a lot of peo­ple who’d never have touched a lan­guage like Haskell got ex­posed to func­tional pro­gram­ming. This ex­po­sure was one of the dri­ving forces to get streams and lambda into the JVM.</p><p>With the re­lease of Vert.x 3.4.0 we fi­nally in­tro­duced Scala to the fam­ily of sup­ported lan­guages: <a href=\"https://github.com/vert-x3/vertx-lang-scala\">vertx-​lang-scala</a>.</p><p>In this post I will in­tro­duce the new stack and how the power of Scala can be used in your fa­vorite re­ac­tive toolkit.</p><h2 id=\"basics\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#basics\"></a>Basics</h2><p>vertx-​lang-scala is based on Scala 2.12. There are no plans to sup­port 2.11.</p><p>All mod­ules avail­able for Vert.x are sup­ported (you can check  <a href=\"https://github.com/vert-x3/vertx-lang-scala/tree/master/vertx-lang-scala-stack\">here</a> ).</p><div class=\"alert info\"><div class=\"alert-title\">Future and Promise both need a ExecutionContext</div><p>Mod­ules use the fol­low­ing naming-​scheme: <em>io.vertx:<!-- -->&lt;<!-- -->name-​of-vertx-module<!-- -->&gt;<!-- -->-​scala_2.12:<!-- -->&lt;<!-- -->vertx-​major-version<!-- -->&gt;</em>. The Scala ver­sion of <em>io.vertx:vert-​web:3.4.0</em> would be <em>io.vertx:vertx-​web-scala_2.12:3.4.0</em>.</p></div><p>There is an sbt-​based <a href=\"https://github.com/vert-x3/vertx-sbt-starter\">quickstart-​project</a> avail­able that will be up­dated for each Vert.x-​release.</p><p>Please note: Al­though <a href=\"http://www.scala-sbt.org/\">sbt</a> is used in this quick­start it is by no means re­quired. There are no spe­cial plu­g­ins in­volved so vertx-​lang-scala can eas­ily be used with <a href=\"https://docs.gradle.org/current/userguide/scala_plugin.html\">Gra­dle</a> or <a href=\"https://github.com/davidB/scala-maven-plugin\">Maven</a>.</p><p>I use sbt as it is the de­fault build sys­tem used for Scala projects.</p><h2 id=\"quickstart\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#quickstart\"></a>Quickstart</h2><p>Let’s get started by cloning the quick­start:</p><pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:vert-x3/vertx-sbt-starter.git\n</code></pre><p>You just got the fol­low­ing things:</p><ul><li>An sbt project con­tain­ing de­pen­den­cies to Vert.x-​core and Vert.x-web</li><li>The abil­ity to cre­ate a fat-​jat via <code>sbt assembly</code></li><li>The abil­ity to cre­ate a docker con­tainer via <code>sbt docker</code></li><li>A few ex­am­ple ver­ti­cles</li><li>Unit test ex­am­ples</li><li>a pre-​configured Scala-​shell in­side sbt</li></ul><p>We will now run the ap­pli­ca­tion to get some quick sat­is­fac­tion. Use <code>sbt assembly</code> to pro­duce the fat-​jar fol­lowed by <code>java -jar target/scala-2.12/vertx-scala-sbt-assembly-0.1-SNAPSHOT.jar</code>. Now point your browser to <a href=\"http://localhost:8666/hello\">http://lo­cal­host:8666/hello</a> for a clas­sic wel­come mes­sage.</p><h2 id=\"the-details\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-details\"></a>The details</h2><p>Open your IDE so we can take a look at what’s going on under the hood. We start with the <em>HttpVer­ti­cle</em>.</p><pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">package</span> io.vertx.scala.sbt\n\n<span class=\"hljs-keyword\">import</span> io.vertx.lang.scala.<span class=\"hljs-type\">ScalaVerticle</span>\n<span class=\"hljs-keyword\">import</span> io.vertx.scala.ext.web.<span class=\"hljs-type\">Router</span>\n\n<span class=\"hljs-keyword\">import</span> scala.concurrent.<span class=\"hljs-type\">Future</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HttpVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ScalaVerticle</span> </span>{ <span class=\"hljs-comment\">// &lt;1&gt;</span>\n\n\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">startFuture</span></span>(): <span class=\"hljs-type\">Future</span>[<span class=\"hljs-type\">Unit</span>] = { <span class=\"hljs-comment\">// &lt;2&gt;</span>\n    <span class=\"hljs-keyword\">val</span> router = <span class=\"hljs-type\">Router</span>.router(vertx) <span class=\"hljs-comment\">// &lt;3&gt;</span>\n    <span class=\"hljs-keyword\">val</span> route = router\n      .get(<span class=\"hljs-string\">&quot;/hello&quot;</span>)\n        .handler(_.response().end(<span class=\"hljs-string\">&quot;world&quot;</span>))\n\n    vertx <span class=\"hljs-comment\">//&lt;4&gt;</span>\n      .createHttpServer()\n      .requestHandler(router.accept)\n      .listenFuture(<span class=\"hljs-number\">8666</span>, <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>)  <span class=\"hljs-comment\">// &lt;5&gt;</span>\n        .map(_ =&gt; ()) <span class=\"hljs-comment\">// &lt;6&gt;</span>\n  }\n}\n</code></pre><ol><li><em>ScalaVer­ti­cle</em> is the base class for all Scala-​Verticles. It pro­vides all re­quired meth­ods to in­te­grate with the Vert.x-​runtime.</li><li>There are two ways to start a Ver­ti­cle. Over­rid­ing <em>start­Fu­ture</em>, like in this ex­am­ple, tells Vert.x to only con­sider the Ver­ti­cle fully started after the re­turned <em>Fu­ture<!-- -->[Unit]</em> has been suc­cess­fully com­pleted. Al­ter­na­tively one can over­ride <em>start</em> and by that sig­nal to Vert.x the in­stant avail­abil­ity of the Ver­ti­cle.</li><li>This block cre­ates a <em>Router</em> for in­com­ing HTTP-​requests. It reg­is­ters a han­dler to an­swer with “world” if a re­quest to the URL “/hello” ar­rives. The class is com­ing from the <a href=\"http://vertx.io/docs/vertx-web/scala/\">Vert.x-​web-module</a>.</li><li>Every Ver­ti­cle has ac­cess to the Vert.x-​instance. Here we use it to cre­ate a web­server and reg­is­ter our router to han­dle in­com­ing re­quests.</li><li>We fi­nally reached the rea­son why I use <em>start­Fu­ture</em> in the first place. All op­er­a­tions in Vert.x are asyn­chro­nous. So start­ing the web­server most def­i­nitely means it takes some more time until it bound to the given port (8666 in this case). That’s why <em>lis­ten­Fu­ture</em> is used, which re­turns a <em>Fu­ture</em> which in turn con­tains the ac­tual in­stance of the web­server that just got started. So our Ver­ti­cle will be ready to re­ceive re­quests <em>after</em> the re­turned <em>Fu­ture</em> has been com­pleted.</li><li>In most cases we can re­turn the <em>Fu­ture</em> di­rectly. In this case the <em>Fu­ture</em> re­turned by <em>lis­ten­Fu­ture</em> has the wrong type. We get a <em>Fu­ture<!-- -->[HttpServer]</em> but we need a <em>Fu­ture<!-- -->[Unit]</em> as you can see in the sig­na­ture of <em>start­Fu­ture</em>. This call takes care of map­ping the given <em>Fu­ture<!-- -->[HttpServer]</em> to the re­quired re­turn type.</li></ol><h2 id=\"testing\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#testing\"></a>Testing</h2><p>I use <a href=\"http://www.scalatest.org/\">Sca­laT­est</a> for all my test­ing needs. It comes with stel­lar sup­port for asyn­chro­nous op­er­a­tions and is a per­fect fit for test­ing Vert.x-​applications.</p><p>The fol­low­ing <em>HttpVer­ti­cle­Spec</em> shows how to test an HTTP-​API using only Vert.x-​classes. Per­son­ally I pre­fer <a href=\"http://rest-assured.io/\">REST-​assured</a> with its rich DSL. For this post I wanted to stick with Vert.x-API, so here we go.</p><pre><code class=\"hljs language-scala\"><span class=\"hljs-keyword\">package</span> io.vertx.scala.sbt\n\n<span class=\"hljs-keyword\">import</span> org.scalatest.<span class=\"hljs-type\">Matchers</span>\n\n<span class=\"hljs-keyword\">import</span> scala.concurrent.<span class=\"hljs-type\">Promise</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HttpVerticleSpec</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">VerticleTesting</span>[<span class=\"hljs-type\">HttpVerticle</span>] <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">Matchers</span> </span>{ <span class=\"hljs-comment\">// &lt;1&gt;</span>\n\n  <span class=\"hljs-string\">&quot;HttpVerticle&quot;</span> should <span class=\"hljs-string\">&quot;bind to 8666 and answer with &#x27;world&#x27;&quot;</span> in { <span class=\"hljs-comment\">// &lt;2&gt;</span>\n    <span class=\"hljs-keyword\">val</span> promise = <span class=\"hljs-type\">Promise</span>[<span class=\"hljs-type\">String</span>] <span class=\"hljs-comment\">// &lt;3&gt;</span>\n\n    vertx.createHttpClient()  <span class=\"hljs-comment\">// &lt;4&gt;</span>\n      .getNow(<span class=\"hljs-number\">8666</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-string\">&quot;/hello&quot;</span>,\n        r =&gt; {\n          r.exceptionHandler(promise.failure)\n          r.bodyHandler(b =&gt; promise.success(b.toString))\n        })\n\n    promise.future.map(res =&gt; res should equal(<span class=\"hljs-string\">&quot;world&quot;</span>)) <span class=\"hljs-comment\">// &lt;5&gt;</span>\n  }\n\n}\n</code></pre><ol><li><em>Ver­ti­cleTest­ing</em> is a base class for your tests in­cluded with the quickstart-​project. It’s a small helper that takes care of de­ploy­ing/un-​deploying the Ver­ti­cle to be tested and man­ages a Vert.x-​instance. It ad­di­tion­ally ex­tends <a href=\"http://www.scalatest.org/user_guide/async_testing\">AsyncFlat­Spec</a> so we can use Fu­tures as test-​return-types.</li><li>Isn’t it nice and read­able?</li><li>The promise is re­quired as the whole test will run async</li><li>We use the vertx-​instance pro­vided by <em>Ver­ti­cleTest­ing</em> to cre­ate a Netty-​based Http­Client. We in­struct the client to call the spec­i­fied URL and to suc­ceed the <em>Promise</em> with the re­turned body.</li><li>This cre­ates the ac­tual as­ser­tion. After get­ting the <em>Fu­ture</em> from the <em>Promise</em> an as­ser­tion is cre­ated: <em>The Re­sult should be equal to the String “world”</em>. Sca­laT­est takes care of eval­u­at­ing the re­turned <em>Fu­ture</em>.</li></ol><p>That’s all you need to get started!</p><h2 id=\"futures-in-vertx-lang-scala\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#futures-in-vertx-lang-scala\"></a>Futures in vertx-lang-scala</h2><p>Now for a more in depth topic I think is worth men­tion­ing. vertx-​lang-scala treats async op­er­a­tions the Scala-​way which is a lit­tle dif­fer­ent from what you might be used from Vert.x. For async op­er­a­tions like sub­scrib­ing to the event­bus or de­ploy­ing a Ver­ti­cle you would call a method like this:</p><pre><code class=\"hljs language-scala\">vertx.deployVerticle(<span class=\"hljs-string\">&quot;com.foo.OtherVerticle&quot;</span>, res -&gt; {\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    startFuture.complete();\n  } <span class=\"hljs-keyword\">else</span> {\n    startFuture.fail(res.cause());\n  }\n});\n</code></pre><p>The <em>de­ployVer­ti­cle</em> method takes the Verticle-​name and a <em>Han­dler<!-- -->[Asyn­cRe­sult]</em> as its ar­gu­ments. The <em>Han­dler<!-- -->[Asyn­cRe­sult]</em> is called after Vert.x tried de­ploy­ing the Ver­ti­cle. This style can also be used for Scala (which might ease the tran­si­tion when com­ing from the Java-​world) but their is a way more <em>scalaish</em> way of doing this.</p><p>For every method tak­ing a <em>Han­dler<!-- -->[Asyn­cRe­sult]</em> as its ar­gu­ment I cre­ate an al­ter­na­tive method using <a href=\"http://docs.scala-lang.org/overviews/core/futures.html\">Scala-​Futures</a>.</p><pre><code class=\"hljs language-scala\">vertx.deployVerticleFuture(<span class=\"hljs-string\">&quot;com.foo.OtherVerticle&quot;</span>) <span class=\"hljs-comment\">// &lt;1&gt;</span>\n  .onComplete{  <span class=\"hljs-comment\">// &lt;2&gt;</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Success</span>(s) =&gt; println(<span class=\"hljs-string\">s&quot;Verticle id is: <span class=\"hljs-subst\">$s</span>&quot;</span>) <span class=\"hljs-comment\">// &lt;3&gt;</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Failure</span>(t) =&gt; t.printStackTrace()\n  }\n</code></pre><ol><li>A method pro­vid­ing a <em>Fu­ture</em> based al­ter­na­tive gets <em>Fu­ture</em> ap­pended to its name and re­turns a <em>Fu­ture</em> in­stead of tak­ing a <em>Han­dler</em> as its ar­gu­ment.</li><li>We are now free to use <em>Fu­ture</em> the way we want. In this case on­Com­plete is used to react on the com­ple­tion.</li><li>Pat­tern match­ing on the re­sult <em>&lt;<!-- -->3</em></li></ol><p>I strongly rec­om­mend using this ap­proach over using <em>Han­dlers</em> as you won’t run into Callback-​hell and you get all the good­ies Scala pro­vides for async op­er­a­tions.</p><div class=\"alert info\"><div class=\"alert-title\">Future and Promise both need a ExecutionContext</div><p>The <a href=\"https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/VertxExecutionContext.scala\">Vertx­Ex­e­cu­tion­Con­text</a> is made im­plic­itly avail­able in­side the <a href=\"https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/ScalaVerticle.scala\">ScalaVer­ti­cle</a>. It makes sure all  op­er­a­tions are ex­e­cuted on the cor­rect Event Loop. If you are using Vert.x with­out Ver­ti­cles you have to pro­vide it on your own.</p></div><h2 id=\"using-the-console\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-the-console\"></a>Using the console</h2><p>A great fea­ture of sbt is the em­bed­ded, con­fig­urable Scala-​console. The con­sole avail­able in the quickstart-​project is pre-​configured to pro­vide a fresh Vert.x-​instance and all re­quired im­ports so you can start play­ing around with Vert.x in an in­stant.</p><p>Ex­e­cute the fol­low­ing com­mands in the project-​folder to de­ploy the <em>HttpVer­ti­cle</em>:</p><pre><code class=\"hljs language-bash\">sbt\n&gt; console\nscala&gt; vertx.deployVerticle(nameForVerticle[HttpVerticle])\nscala&gt; vertx.deploymentIDs\n</code></pre><p>After  ex­e­cut­ing this se­quence you can now point your browser <a href=\"http://localhost:8666/hello\">http://lo­cal­host:8666/hello</a> to see our mes­sage. The last com­mand is­sued shows the Ids under which Ver­ti­cles have been de­ployed.</p><p>To get rid of the de­ploy­ment you can now type <code>vertx.undeploy(vertx.deploymentIDs.head)</code>.</p><h2 id=\"thats-it\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#thats-it\"></a>That’s it!</h2><p>This was a very quick in­tro­duc­tion to our new Scala-​stack. I hope to have given you a lit­tle taste of the Scala good­ness now avail­able with Vert.x. I rec­om­mend dig­ging a lit­tle more through the quick­start to get a feel­ing for what’s there.\nIn my next blog post I will ex­plain some of the de­ci­sions I made and the ob­sta­cles I faced with the dif­fer­ences be­tween Java and Scala /Hint: They are way big­ger than I was aware of).</p><p>Enjoy!</p>","scope":{}},"tfIdfTerms":[{"term":"scala","tf":25},{"term":"us","tf":23},{"term":"futur","tf":17},{"term":"verticl","tf":13},{"term":"start","tf":10},{"term":"return","tf":10},{"term":"test","tf":9},{"term":"creat","tf":8},{"term":"base","tf":7},{"term":"avail","tf":7},{"term":"quickstart","tf":7},{"term":"take","tf":7},{"term":"support","tf":6},{"term":"will","tf":6},{"term":"sbt","tf":6},{"term":"project","tf":6},{"term":"provid","tf":6},{"term":"method","tf":6},{"term":"handler","tf":6},{"term":"oper","tf":6},{"term":"deploi","tf":6},{"term":"modul","tf":5},{"term":"lang","tf":5},{"term":"follow","tf":5},{"term":"requir","tf":5}]},{"filename":"blog/2017-03-13-data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh.mdx","date":"2017-03-13","slug":"data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh","meta":{"title":"Data-driven Apps made easy with Vert.x 3.4.0 and headless CMS Gentics Mesh","category":"guides","authors":[{"name":"Johannes Schüth","github_id":"jotschi"}],"summary":"I would like to share why Vert.x is not only a robust foundation for the headless Content Management System Gentics Mesh but also how it can be used to build a template-based web server."},"readingTime":{"text":"6 min read","minutes":5.8,"time":348000,"words":1160},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this ar\\xADti\\xADcle, I would like to share why Vert.x is not only a ro\\xADbust foun\\xADda\\xADtion for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/\"\n  }), \"head\\xADless Con\\xADtent Man\\xADage\\xADment Sys\\xADtem Gen\\xADtics Mesh\"), \" but also how the re\\xADcent re\\xADlease 3.4.0 can be used to build a template-\\u200Bbased web server with Gen\\xADtics Mesh and han\\xADdle\\xADbars.\"), mdx(\"p\", null, \"A head\\xADless CMS fo\\xADcuses on de\\xADliv\\xADer\\xADing your con\\xADtent through an API and al\\xADlows ed\\xADi\\xADtors cre\\xADat\\xADing and man\\xADag\\xADing that data through a web-\\u200Bbased in\\xADter\\xADface. Un\\xADlike a tra\\xADdi\\xADtional CMS, it does not pro\\xADvide a specif\\xADi\\xADcally ren\\xADdered out\\xADput. The fron\\xADtend part (the head) is lit\\xADer\\xADally cut off, al\\xADlow\\xADing de\\xADvel\\xADop\\xADers cre\\xADate web\\xADsites, apps, or any other data-\\u200Bdriven projects with their favourite tech\\xADnolo\\xADgies.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/blog/vert-x-3-4-0-is-released/\"\n  }), \"Vert.x 3.4.0\"), \" has just been re\\xADleased and it comes with a bunch of new fea\\xADtures and bug fixes. I am es\\xADpe\\xADcially ex\\xADcited about a small en\\xADhance\\xADment that changes the way in which the han\\xADdle\\xADbars tem\\xADplate en\\xADgine han\\xADdle their con\\xADtext data. Pre\\xADvi\\xADously it was not pos\\xADsi\\xADble to re\\xADsolve Vert.x \\u2018s JsonOb\\xADjects within the ren\\xADder con\\xADtext. With my en\\xADhance\\xADment \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-web/pull/509\"\n  }), \"#509\"), \" - re\\xADleased in Vert.x 3.4.0 - it is now pos\\xADsi\\xADble to ac\\xADcess nested data from these ob\\xADjects within your tem\\xADplates. Pre\\xADvi\\xADously this would have re\\xADquired flat\\xADten\\xADing out each ob\\xADject and re\\xADsolv\\xADing it in\\xADdi\\xADvid\\xADu\\xADally, which would have been very cum\\xADber\\xADsome.\"), mdx(\"p\", null, \"I\\u2019m going to demon\\xADstrate this en\\xADhance\\xADment by show\\xADing how to build a prod\\xADuct cat\\xADa\\xADlogue using Vert.x to\\xADgether with han\\xADdle\\xADbars tem\\xADplates to ren\\xADder and serve the web pages. The prod\\xADuct data is man\\xADaged, stored and de\\xADliv\\xADered by the CMS server as source for JSON data.\"), mdx(\"h2\", {\n    \"id\": \"clone-import-download-start---set-up-your-product-catalogue-website-quickly\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#clone-import-download-start---set-up-your-product-catalogue-website-quickly\"\n  })), \"Clone, Import, Download, Start - Set up your product catalogue website quickly\"), mdx(\"p\", null, \"Let\\u2019s quickly set up every\\xADthing you need to run the web\\xADsite be\\xADfore I walk you through the code.\"), mdx(\"h3\", {\n    \"id\": \"1--clone---get-the-full-vertx-with-gentics-mesh-example-from-github\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#1--clone---get-the-full-vertx-with-gentics-mesh-example-from-github\"\n  })), \"1.  Clone - \", mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"https://github.com/gentics/mesh-vertx-example\"\n  }), \"Get the full Vert.x with Gentics Mesh example from Github\")), mdx(\"p\", null, \"Fire up your ter\\xADmi\\xADnal and clone the ex\\xADam\\xADple ap\\xADpli\\xADca\\xADtion to the di\\xADrec\\xADtory of your choice.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"git \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"clone\"), \" git@github.com:gentics/mesh-vertx-example.git\\n\")), mdx(\"h3\", {\n    \"id\": \"2-import---the-maven-project-in-your-favourite-ide\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#2-import---the-maven-project-in-your-favourite-ide\"\n  })), \"2. Import - The maven project in your favourite IDE\"), mdx(\"p\", null, \"The ap\\xADpli\\xADca\\xADtion is set up as a maven project and can be im\\xADported in Eclipse IDE via File \\u2192 Im\\xADport \\u2192 Ex\\xADist\\xADing Maven Project\"), mdx(\"h3\", {\n    \"id\": \"3-download-----get-the-headless-cms-gentics-mesh\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#3-download-----get-the-headless-cms-gentics-mesh\"\n  })), \"3. Download \\xA0- \\xA0Get the headless CMS Gentics Mesh\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/Download\"\n  }), \"Down\\xADload the lat\\xADest ver\\xADsion of Gen\\xADtics Mesh\"), \" and start the CMS with this one-\\u200Bliner\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar mesh-demo-0.6.xx.jar\\n\")), mdx(\"p\", null, \"For the cur\\xADrent ex\\xADam\\xADple we are going to use the read-\\u200Bonly user cre\\xADden\\xADtials (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"we\\xADb\\xADclient:we\\xADb\\xADclient\"), \").\\nIf you want to play around with the demo data you can point your browser to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8080/mesh-ui/\"\n  }), \"http://lo\\xADcal\\xADhost:8080/mesh-\\u200Bui/\"), \" to reach the Gen\\xADtics Mesh user in\\xADter\\xADface and use one of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/docs/beta/getting-started.html#_startup\"\n  }), \"avail\\xADable demo cre\\xADden\\xADtials\"), \" to login.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-mesh/mesh-ui.jpg\",\n    \"alt\": \"Gentics Mesh User Interface\"\n  }))), mdx(\"h3\", {\n    \"id\": \"4-start---the-application-and-browse-the-product-catalogue\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#4-start---the-application-and-browse-the-product-catalogue\"\n  })), \"4. Start - The application and browse the product catalogue\"), mdx(\"p\", null, \"You can start the Vert.x web server by run\\xADning Server.java.\"), mdx(\"p\", null, \"That\\u2019s it - now you can ac\\xADcess the prod\\xADuct cat\\xADa\\xADlogue web\\xADsite in your browser: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:3000\"\n  }), \"http://lo\\xADcal\\xADhost:3000\")), mdx(\"h2\", {\n    \"id\": \"why-vertx-is-a-good-fit-for-gentics-mesh\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#why-vertx-is-a-good-fit-for-gentics-mesh\"\n  })), \"Why Vert.x is a good fit for Gentics Mesh\"), mdx(\"p\", null, \"Be\\xADfore dig\\xADging into the ex\\xADam\\xADple, let me share a few thoughts on Vert.x and Gen\\xADtics Mesh in com\\xADbi\\xADna\\xADtion. In this ex\\xADam\\xADple Vert.x is part of the fron\\xADtend stack in de\\xADliv\\xADer\\xADing the prod\\xADuct cat\\xADa\\xADlogue web\\xADsite. But it might also be of in\\xADter\\xADest to you that Vert.x is also used at the very heart of Gen\\xADtics Mesh it\\xADself. The Gen\\xADtics Mesh \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/docs/beta/raml/\"\n  }), \"REST API end\\xADpoints\"), \" are built on top of Vert.x as a core com\\xADpo\\xADnent.\"), mdx(\"p\", null, \"The great thing about Vert.x is that there are a lot of de\\xADfault im\\xADple\\xADmen\\xADta\\xADtions for var\\xADi\\xADous tasks such as au\\xADthen\\xADti\\xADca\\xADtion, data\\xADbase in\\xADte\\xADgra\\xADtion, mon\\xADi\\xADtor\\xADing and clus\\xADter\\xADing. It is pos\\xADsi\\xADble to use one or more fea\\xADtures and omit the rest and thus your ap\\xADpli\\xADca\\xADtion re\\xADmains light\\xADweight.\"), mdx(\"h2\", {\n    \"id\": \"curious-about-the-code\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#curious-about-the-code\"\n  })), \"Curious about the code?\"), mdx(\"p\", null, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gentics/mesh-vertx-example\"\n  }), \"https://github.com/gen\\xADtics/mesh-\\u200Bvertx-example\")), mdx(\"p\", null, \"Now that every\\xADthing is up and run\\xADning let\\u2019s have a de\\xADtailed look at the code.\"), mdx(\"p\", null, \"A typ\\xADi\\xADcal de\\xADploy\\xADment unit for Vert.x is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/java/#_verticles\"\n  }), \"ver\\xADti\\xADcle\"), \". In our case we use the ver\\xADti\\xADcle to bun\\xADdle our code and run the web server within it. Once de\\xADployed, Vert.x will run the ver\\xADti\\xADcle and start the HTTP server code.\"), mdx(Gist, {\n    url: \"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120\",\n    file: \"main.java\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/docs/beta/#_java_rest_client\"\n  }), \"Gen\\xADtics Mesh REST client\"), \" is used to com\\xADmu\\xADni\\xADcate with the Gen\\xADtics Mesh server. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/\"\n  }), \"Vert.x web li\\xADbrary\"), \" is used to set up our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts\"\n  }), \"HTTP Router\"), \". As with other rout\\xADing frame\\xADworks like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Silex\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ex\\xADpress\"), \", the router can be used to cre\\xADate routes for in\\xADbound HTTP re\\xADquests. In our case we only need two routes. The main route which ac\\xADcepts the re\\xADquest will uti\\xADlize the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://getmesh.io/docs/beta/#_webroot\"\n  }), \"Gen\\xADtics Mesh We\\xADb\\xADroot API End\\xADpoint\"), \" which is able to re\\xADsolve con\\xADtent by a pro\\xADvided path. It will ex\\xADam\\xADine the re\\xADsponse and add fields to the rout\\xADing con\\xADtext.\"), mdx(\"p\", null, \"The other route is chained and will take the pre\\xADvi\\xADously pre\\xADpared rout\\xADing con\\xADtext and ren\\xADder the de\\xADsired tem\\xADplate using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/#_templates\"\n  }), \"han\\xADdle\\xADbars tem\\xADplate han\\xADdler\"), \".\"), mdx(Gist, {\n    url: \"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120\",\n    file: \"start.java\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"First we can han\\xADdle var\\xADi\\xADous spe\\xADcial re\\xADquests path such as \\u201D/\\u201D for the wel\\xADcome page. Or the typ\\xADi\\xADcal fav\\xADi\\xADcon.ico re\\xADquest. Other re\\xADquests are passed to the We\\xADb\\xADroot API han\\xADdler method.\"), mdx(Gist, {\n    url: \"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120\",\n    file: \"pathHandler.java\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"Once the path has been re\\xADsolved to a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"We\\xADb\\xADRootRe\\xADsponse\"), \" we can ex\\xADam\\xADine that data and de\\xADter\\xADmine whether it is a bi\\xADnary re\\xADsponse or a JSON re\\xADsponse. Bi\\xADnary re\\xADsponses may occur if the re\\xADquested re\\xADsource rep\\xADre\\xADsents an image or any other bi\\xADnary data. Re\\xADsolved bi\\xADnary con\\xADtents are di\\xADrectly passed through to the client and the han\\xADdle\\xADbars route is not in\\xADvoked.\"), mdx(\"p\", null, \"Ex\\xADam\\xADples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://localhost:3000/\"\n  }), \"http://lo\\xADcal\\xADhost:3000/\"), \" \\u2192 wel\\xADcome.hbs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://localhost:3000/Automobiles\"\n  }), \"http://lo\\xADcal\\xADhost:3000/Au\\xADto\\xADmo\\xADbiles\"), \" \\u2192 cat\\xADe\\xADgory \\u2192 pro\\xADductList.hbs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://localhost:3000/Automobiles/Tesla%20Roadster\"\n  }), \"http://lo\\xADcal\\xADhost:3000/Au\\xADto\\xADmo\\xADbiles/Tesla Road\\xADster\"), \" \\u2192 ve\\xADhi\\xADcle \\u2192 pro\\xADduct\\xADDe\\xADtail.hbs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://localhost:3000/Vehicle%20Images/tesla-roadster.jpg\"\n  }), \"http://lo\\xADcal\\xADhost:3000/Ve\\xADhi\\xADcle Im\\xADages/tesla-\\u200Broadster.jpg\"), \" \\u2192 bi\\xADnary passthru\")), mdx(\"p\", null, \"JSON re\\xADsponses on the other hand are ex\\xADam\\xADined to de\\xADter\\xADmine the type of node which was lo\\xADcated. A typ\\xADi\\xADcal node re\\xADsponse con\\xADtains in\\xADfor\\xADma\\xADtion about the schema used by the node. This will ef\\xADfec\\xADtively de\\xADter\\xADmine the type of the lo\\xADcated con\\xADtent (e.g.: cat\\xADe\\xADgory, ve\\xADhi\\xADcle).\"), mdx(Gist, {\n    url: \"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120\",\n    file: \"routeHandler.java\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-mesh/mesh-schemas.jpg\",\n    \"alt\": \"Mesh Schemas\"\n  }))), mdx(\"p\", null, \"The demo ap\\xADpli\\xADca\\xADtion serves dif\\xADfer\\xADent pages which cor\\xADre\\xADspond to the iden\\xADti\\xADfied type.\\nTake a look at the tem\\xADplate sources within \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"src/main/re\\xADsources/tem\\xADplates/\"), \" if you are in\\xADter\\xADested in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://handlebarsjs.com/\"\n  }), \"han\\xADdle\\xADbars syn\\xADtax\"), \".\\nThe tem\\xADplates in the ex\\xADam\\xADple should cover most com\\xADmon cases.   \"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-mesh/mesh-vertx-templates.jpg\",\n    \"alt\": \"Handlebars Template Overview\"\n  }))), mdx(\"p\", null, \"The Mesh REST Client li\\xADbrary in\\xADter\\xADnally makes use of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/java/#_creating_an_http_client\"\n  }), \"Vert.x core HTTP client\"), \".\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ReactiveX/RxJava\"\n  }), \"Rx\\xADJava\"), \" is being used to han\\xADdle these async re\\xADquests. This way we can com\\xADbine all asyn\\xADchro\\xADnously re\\xADquested Gen\\xADtics Mesh re\\xADsources (bread\\xADcrumb, list of prod\\xADucts) and add the loaded data into the rout\\xADing con\\xADtext.\"), mdx(\"p\", null, \"The Vert.x ex\\xADam\\xADple server loads JSON con\\xADtent from the Gen\\xADtics Mesh server. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JsonOb\\xADject\"), \" is placed in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jknack/handlebars.java\"\n  }), \"han\\xADdle\\xADbars\"), \" ren\\xADder con\\xADtext and the tem\\xADplate can ac\\xADcess all nested fields within.\"), mdx(\"p\", null, \"This way it is pos\\xADsi\\xADble to re\\xADsolve any field within the han\\xADdle\\xADbars tem\\xADplate.\"), mdx(Gist, {\n    url: \"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120\",\n    file: \"template.example\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"That\\u2019s it! Fi\\xADnally, we can in\\xADvoke mvn clean pack\\xADage in order to pack\\xADage our web\\xADserver. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://maven.apache.org/plugins/maven-shade-plugin/\"\n  }), \"maven-\\u200Bshade-plugin\"), \" will bun\\xADdle every\\xADthing and cre\\xADate an ex\\xADe\\xADcutable jar.\"), mdx(\"h2\", {\n    \"id\": \"whats-next\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#whats-next\"\n  })), \"What\\u2019s next?\"), mdx(\"p\", null, \"Fu\\xADture re\\xADleases of Gen\\xADtics Mesh will re\\xADfine the Mesh REST Client API and pro\\xADvide a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://graphql.org/\"\n  }), \"GraphQL\"), \" which will re\\xADduce the JSON over\\xADhead. Using GraphQL will also re\\xADduce the amount of re\\xADquests which need to be is\\xADsued.\"), mdx(\"p\", null, \"Thanks for read\\xADing. If you have any futher ques\\xADtions or feed\\xADback don\\u2019t hes\\xADi\\xADtate to send me a tweet to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/Jotschi/\"\n  }), \"@Jotschi\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/genticsmesh/\"\n  }), \"@gen\\xADtic\\xADsmesh\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In this ar­ti­cle, I would like to share why Vert.x is not only a ro­bust foun­da­tion for the <a href=\"http://getmesh.io/\">head­less Con­tent Man­age­ment Sys­tem Gen­tics Mesh</a> but also how the re­cent re­lease 3.4.0 can be used to build a template-​based web server with Gen­tics Mesh and han­dle­bars.</p><p>A head­less CMS fo­cuses on de­liv­er­ing your con­tent through an API and al­lows ed­i­tors cre­at­ing and man­ag­ing that data through a web-​based in­ter­face. Un­like a tra­di­tional CMS, it does not pro­vide a specif­i­cally ren­dered out­put. The fron­tend part (the head) is lit­er­ally cut off, al­low­ing de­vel­op­ers cre­ate web­sites, apps, or any other data-​driven projects with their favourite tech­nolo­gies.</p><p><a href=\"http://vertx.io/blog/vert-x-3-4-0-is-released/\">Vert.x 3.4.0</a> has just been re­leased and it comes with a bunch of new fea­tures and bug fixes. I am es­pe­cially ex­cited about a small en­hance­ment that changes the way in which the han­dle­bars tem­plate en­gine han­dle their con­text data. Pre­vi­ously it was not pos­si­ble to re­solve Vert.x ‘s JsonOb­jects within the ren­der con­text. With my en­hance­ment <a href=\"https://github.com/vert-x3/vertx-web/pull/509\">#509</a> - re­leased in Vert.x 3.4.0 - it is now pos­si­ble to ac­cess nested data from these ob­jects within your tem­plates. Pre­vi­ously this would have re­quired flat­ten­ing out each ob­ject and re­solv­ing it in­di­vid­u­ally, which would have been very cum­ber­some.</p><p>I’m going to demon­strate this en­hance­ment by show­ing how to build a prod­uct cat­a­logue using Vert.x to­gether with han­dle­bars tem­plates to ren­der and serve the web pages. The prod­uct data is man­aged, stored and de­liv­ered by the CMS server as source for JSON data.</p><h2 id=\"clone-import-download-start---set-up-your-product-catalogue-website-quickly\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#clone-import-download-start---set-up-your-product-catalogue-website-quickly\"></a>Clone, Import, Download, Start - Set up your product catalogue website quickly</h2><p>Let’s quickly set up every­thing you need to run the web­site be­fore I walk you through the code.</p><h3 id=\"1--clone---get-the-full-vertx-with-gentics-mesh-example-from-github\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#1--clone---get-the-full-vertx-with-gentics-mesh-example-from-github\"></a>1.  Clone - <a href=\"https://github.com/gentics/mesh-vertx-example\">Get the full Vert.x with Gentics Mesh example from Github</a></h3><p>Fire up your ter­mi­nal and clone the ex­am­ple ap­pli­ca­tion to the di­rec­tory of your choice.</p><pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:gentics/mesh-vertx-example.git\n</code></pre><h3 id=\"2-import---the-maven-project-in-your-favourite-ide\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#2-import---the-maven-project-in-your-favourite-ide\"></a>2. Import - The maven project in your favourite IDE</h3><p>The ap­pli­ca­tion is set up as a maven project and can be im­ported in Eclipse IDE via File → Im­port → Ex­ist­ing Maven Project</p><h3 id=\"3-download-----get-the-headless-cms-gentics-mesh\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#3-download-----get-the-headless-cms-gentics-mesh\"></a>3. Download  -  Get the headless CMS Gentics Mesh</h3><p><a href=\"http://getmesh.io/Download\">Down­load the lat­est ver­sion of Gen­tics Mesh</a> and start the CMS with this one-​liner</p><pre><code class=\"hljs language-bash\">java -jar mesh-demo-0.6.xx.jar\n</code></pre><p>For the cur­rent ex­am­ple we are going to use the read-​only user cre­den­tials (<em>we­b­client:we­b­client</em>).\nIf you want to play around with the demo data you can point your browser to <a href=\"http://localhost:8080/mesh-ui/\">http://lo­cal­host:8080/mesh-​ui/</a> to reach the Gen­tics Mesh user in­ter­face and use one of the <a href=\"http://getmesh.io/docs/beta/getting-started.html#_startup\">avail­able demo cre­den­tials</a> to login.</p><p><img src=\"/images/blog/vertx-mesh/mesh-ui.jpg\" alt=\"Gentics Mesh User Interface\"/></p><h3 id=\"4-start---the-application-and-browse-the-product-catalogue\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#4-start---the-application-and-browse-the-product-catalogue\"></a>4. Start - The application and browse the product catalogue</h3><p>You can start the Vert.x web server by run­ning Server.java.</p><p>That’s it - now you can ac­cess the prod­uct cat­a­logue web­site in your browser: <a href=\"http://localhost:3000\">http://lo­cal­host:3000</a></p><h2 id=\"why-vertx-is-a-good-fit-for-gentics-mesh\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#why-vertx-is-a-good-fit-for-gentics-mesh\"></a>Why Vert.x is a good fit for Gentics Mesh</h2><p>Be­fore dig­ging into the ex­am­ple, let me share a few thoughts on Vert.x and Gen­tics Mesh in com­bi­na­tion. In this ex­am­ple Vert.x is part of the fron­tend stack in de­liv­er­ing the prod­uct cat­a­logue web­site. But it might also be of in­ter­est to you that Vert.x is also used at the very heart of Gen­tics Mesh it­self. The Gen­tics Mesh <a href=\"http://getmesh.io/docs/beta/raml/\">REST API end­points</a> are built on top of Vert.x as a core com­po­nent.</p><p>The great thing about Vert.x is that there are a lot of de­fault im­ple­men­ta­tions for var­i­ous tasks such as au­then­ti­ca­tion, data­base in­te­gra­tion, mon­i­tor­ing and clus­ter­ing. It is pos­si­ble to use one or more fea­tures and omit the rest and thus your ap­pli­ca­tion re­mains light­weight.</p><h2 id=\"curious-about-the-code\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#curious-about-the-code\"></a>Curious about the code?</h2><p>Source: <a href=\"https://github.com/gentics/mesh-vertx-example\">https://github.com/gen­tics/mesh-​vertx-example</a></p><p>Now that every­thing is up and run­ning let’s have a de­tailed look at the code.</p><p>A typ­i­cal de­ploy­ment unit for Vert.x is a <a href=\"http://vertx.io/docs/vertx-core/java/#_verticles\">ver­ti­cle</a>. In our case we use the ver­ti­cle to bun­dle our code and run the web server within it. Once de­ployed, Vert.x will run the ver­ti­cle and start the HTTP server code.</p><div>...waiting for Gist...</div><p>The <a href=\"http://getmesh.io/docs/beta/#_java_rest_client\">Gen­tics Mesh REST client</a> is used to com­mu­ni­cate with the Gen­tics Mesh server. The <a href=\"http://vertx.io/docs/vertx-web/java/\">Vert.x web li­brary</a> is used to set up our <a href=\"http://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts\">HTTP Router</a>. As with other rout­ing frame­works like <em>Silex</em> and <em>Ex­press</em>, the router can be used to cre­ate routes for in­bound HTTP re­quests. In our case we only need two routes. The main route which ac­cepts the re­quest will uti­lize the <a href=\"http://getmesh.io/docs/beta/#_webroot\">Gen­tics Mesh We­b­root API End­point</a> which is able to re­solve con­tent by a pro­vided path. It will ex­am­ine the re­sponse and add fields to the rout­ing con­text.</p><p>The other route is chained and will take the pre­vi­ously pre­pared rout­ing con­text and ren­der the de­sired tem­plate using the <a href=\"http://vertx.io/docs/vertx-web/java/#_templates\">han­dle­bars tem­plate han­dler</a>.</p><div>...waiting for Gist...</div><p>First we can han­dle var­i­ous spe­cial re­quests path such as ”/” for the wel­come page. Or the typ­i­cal fav­i­con.ico re­quest. Other re­quests are passed to the We­b­root API han­dler method.</p><div>...waiting for Gist...</div><p>Once the path has been re­solved to a <em>We­b­RootRe­sponse</em> we can ex­am­ine that data and de­ter­mine whether it is a bi­nary re­sponse or a JSON re­sponse. Bi­nary re­sponses may occur if the re­quested re­source rep­re­sents an image or any other bi­nary data. Re­solved bi­nary con­tents are di­rectly passed through to the client and the han­dle­bars route is not in­voked.</p><p>Ex­am­ples</p><ul><li><a href=\"http://localhost:3000/\">http://lo­cal­host:3000/</a> → wel­come.hbs</li><li><a href=\"http://localhost:3000/Automobiles\">http://lo­cal­host:3000/Au­to­mo­biles</a> → cat­e­gory → pro­ductList.hbs</li><li><a href=\"http://localhost:3000/Automobiles/Tesla%20Roadster\">http://lo­cal­host:3000/Au­to­mo­biles/Tesla Road­ster</a> → ve­hi­cle → pro­duct­De­tail.hbs</li><li><a href=\"http://localhost:3000/Vehicle%20Images/tesla-roadster.jpg\">http://lo­cal­host:3000/Ve­hi­cle Im­ages/tesla-​roadster.jpg</a> → bi­nary passthru</li></ul><p>JSON re­sponses on the other hand are ex­am­ined to de­ter­mine the type of node which was lo­cated. A typ­i­cal node re­sponse con­tains in­for­ma­tion about the schema used by the node. This will ef­fec­tively de­ter­mine the type of the lo­cated con­tent (e.g.: cat­e­gory, ve­hi­cle).</p><div>...waiting for Gist...</div><p><img src=\"/images/blog/vertx-mesh/mesh-schemas.jpg\" alt=\"Mesh Schemas\"/></p><p>The demo ap­pli­ca­tion serves dif­fer­ent pages which cor­re­spond to the iden­ti­fied type.\nTake a look at the tem­plate sources within <em>src/main/re­sources/tem­plates/</em> if you are in­ter­ested in the <a href=\"http://handlebarsjs.com/\">han­dle­bars syn­tax</a>.\nThe tem­plates in the ex­am­ple should cover most com­mon cases.   </p><p><img src=\"/images/blog/vertx-mesh/mesh-vertx-templates.jpg\" alt=\"Handlebars Template Overview\"/></p><p>The Mesh REST Client li­brary in­ter­nally makes use of the <a href=\"http://vertx.io/docs/vertx-core/java/#_creating_an_http_client\">Vert.x core HTTP client</a>.</p><p><a href=\"https://github.com/ReactiveX/RxJava\">Rx­Java</a> is being used to han­dle these async re­quests. This way we can com­bine all asyn­chro­nously re­quested Gen­tics Mesh re­sources (bread­crumb, list of prod­ucts) and add the loaded data into the rout­ing con­text.</p><p>The Vert.x ex­am­ple server loads JSON con­tent from the Gen­tics Mesh server. The <em>JsonOb­ject</em> is placed in the <a href=\"https://github.com/jknack/handlebars.java\">han­dle­bars</a> ren­der con­text and the tem­plate can ac­cess all nested fields within.</p><p>This way it is pos­si­ble to re­solve any field within the han­dle­bars tem­plate.</p><div>...waiting for Gist...</div><p>That’s it! Fi­nally, we can in­voke mvn clean pack­age in order to pack­age our web­server. The <a href=\"https://maven.apache.org/plugins/maven-shade-plugin/\">maven-​shade-plugin</a> will bun­dle every­thing and cre­ate an ex­e­cutable jar.</p><h2 id=\"whats-next\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#whats-next\"></a>What’s next?</h2><p>Fu­ture re­leases of Gen­tics Mesh will re­fine the Mesh REST Client API and pro­vide a <a href=\"http://graphql.org/\">GraphQL</a> which will re­duce the JSON over­head. Using GraphQL will also re­duce the amount of re­quests which need to be is­sued.</p><p>Thanks for read­ing. If you have any futher ques­tions or feed­back don’t hes­i­tate to send me a tweet to <a href=\"https://twitter.com/Jotschi/\">@Jotschi</a> or <a href=\"https://twitter.com/genticsmesh/\">@gen­tic­smesh</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"mesh","tf":20},{"term":"gentic","tf":17},{"term":"us","tf":15},{"term":"templat","tf":11},{"term":"http","tf":11},{"term":"data","tf":10},{"term":"server","tf":9},{"term":"exampl","tf":9},{"term":"will","tf":9},{"term":"rout","tf":9},{"term":"request","tf":9},{"term":"handlebar","tf":8},{"term":"product","tf":7},{"term":"content","tf":6},{"term":"web","tf":6},{"term":"context","tf":6},{"term":"resolv","tf":6},{"term":"within","tf":6},{"term":"localhost","tf":6},{"term":"respons","tf":6},{"term":"3000","tf":5},{"term":"cm","tf":5},{"term":"api","tf":5},{"term":"render","tf":5},{"term":"websit","tf":5}]},{"filename":"blog/2017-02-09-vert-x-3-4-0-beta1-release.mdx","date":"2017-02-09","slug":"vert-x-3-4-0-beta1-release","meta":{"title":"Vert.x 3.4.0.Beta1 release","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great features."},"readingTime":{"text":"6 min read","minutes":5.605,"time":336300,"words":1121},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have re\\xADleased 3.4.0.Beta1, this re\\xADlease is the biggest since Vert.x 3.0.0 with plenty of great fea\\xADtures.\"), mdx(\"p\", null, \"You can use con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/3.4.0.Beta1/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Let me out\\xADline the im\\xADpor\\xADtant changes you can al\\xADready find in this Beta1.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web-client\"\n  })), \"Vert.x Web Client\"), mdx(\"p\", null, \"In a sim\\xADple sen\\xADtence \\u201CVert.x Web Client is to Vert.x Http\\xADClient what Vert.x Web is to HttpServer\\u201D\"), mdx(\"p\", null, \"The Web Client makes it easy to do HTTP re\\xADquest/re\\xADsponse in\\xADter\\xADac\\xADtions with a web server, and pro\\xADvides ad\\xADvanced fea\\xADtures like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Json body en\\xADcod\\xADing / de\\xADcod\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest/re\\xADsponse pump\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest pa\\xADra\\xADme\\xADters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uni\\xADfied error han\\xADdling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"form sub\\xADmis\\xADsions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and more!\")), mdx(\"p\", null, \"Built on top of Http\\xADClient, it nat\\xADu\\xADrally in\\xADher\\xADits its fea\\xADtures and pro\\xADvides a bet\\xADter API, let me give an overview in one ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"WebClient client = WebClient.\\nclient\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .as(BodyCodec.json(User.class))\\n  .send(ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n\\n      HttpResponse<User> response = ar.result();\\n      User user = response.body();\\n\\n      System.out.println(\\\"Received response with status code\\\" + response.statusCode() + \\\" with body \\\" +\\n        user.getFirstName() + \\\" \\\" + user.getLastName());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage());\\n    }\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"rxjava-singles\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#rxjava-singles\"\n  })), \"RxJava singles\"), mdx(\"p\", null, \"Rx\\xADJava is a very pop\\xADu\\xADlar Java ex\\xADten\\xADsion and in this re\\xADlease we fo\\xADcused on the API us\\xADabil\\xADity with the sup\\xADport\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" Rx\\xADJava type.\"), mdx(\"p\", null, \"The new meth\\xADods are pre\\xADfixed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rx\"), \" and dep\\xADre\\xADcates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable\"), \" suf\\xADfixed meth\\xADods.\"), mdx(\"p\", null, \"So in\\xADstead of start\\xADing a server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listenObservable\"), \" now you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rxListen\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"HttpServer server = vertx.createHttpServer();\\nSingle<HttpServer> single = server.rxListen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \");\\nsingle.subscribe(\\n  ok -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started\\\"\"), \"),\\n  err -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + err.getMessage()));\\n\")), mdx(\"p\", null, \"One no\\xADtice\\xADable dif\\xADfer\\xADence with the pre\\xADvi\\xADous API, is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listen\"), \" method is called when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" is sub\\xADscribed.\"), mdx(\"p\", null, \"This is very handy when com\\xADbined with the new web client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Single<HttpResponse<Buffer>> single = client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .rxSend();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request again\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\")), mdx(\"h2\", {\n    \"id\": \"polyglot\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#polyglot\"\n  })), \"Polyglot\"), mdx(\"p\", null, \"In this beta you can try \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \" is based on the Java API and pro\\xADvides also the ex\\xADe\\xADcu\\xADtion of Kotlin Ver\\xADti\\xADcles.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-kotlin\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.*\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.kotlin.core.http.HttpServerOptions\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Server\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"AbstractVerticle\")), \"() {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"override\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"fun\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\")), \" {\\n    vertx.createHttpServer(\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options\"), \"\\n        HttpServerOptions(\\n            port = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \",\\n            host = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \"\\n        ))\\n        .requestHandler() { req ->\\n          req.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello from Kotlin\\\"\"), \")\\n        }\\n        .listen()\\n    println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started on 8080\\\"\"), \")\\n  }\\n}\\n\")), mdx(\"p\", null, \"It can be di\\xADrectly ran from the com\\xADmand line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"julien:vertx-kotlin-example julien$ vertx run Server.kt\\nServer started on 8080\\nSucceeded \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" deploying verticle\\n\")), mdx(\"p\", null, \"As you can see, Kotlin is using the Java API di\\xADrectly, and we thought that it might be a cool thing to do the\\nsame with Groovy sup\\xADport. So we have re\\xADcon\\xADsid\\xADered our Groovy sup\\xADport and now it uses the plain Java API,\\nwith\\xADout los\\xADing the ex\\xADist\\xADing fea\\xADtures.\"), mdx(\"p\", null, \"Thanks to Groovy ex\\xADten\\xADsion meth\\xADods, id\\xADiomatic Groovy is still sup\\xADported while ben\\xADe\\xADfit\\xADing from the full Java API!\"), mdx(\"p\", null, \"Scala sup\\xADport is also planned for 3.4.0 and will be re\\xADleased soon, watch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/vertx_project\"\n  }), \"@vertx_project\"), \".\"), mdx(\"h2\", {\n    \"id\": \"the-microservices-story-goes-on\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-microservices-story-goes-on\"\n  })), \"The microservices story goes on\\u2026\"), mdx(\"p\", null, \"Our APIs have ma\\xADtured and now they have been moved out of tech pre\\xADview, of course this wasn\\u2019t enough and we now\\nhave \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x Con\\xADfig\"), \", an ex\\xADten\\xADsi\\xADble way to con\\xADfig\\xADure Vert.x ap\\xADpli\\xADca\\xADtions sup\\xADport\\xADing File, json, ENV, sys\\xADtem prop\\xADer\\xADties,\\nHTTP, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ku\\xADber\\xADnetes Con\\xADfigmap\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Con\\xADsul\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Spring Con\\xADfig Server\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Redis\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Git\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Zookeeper\"), \", \\u2026 stores as well as\\nsev\\xADeral for\\xADmats: prop\\xADer\\xADties file, YAML and Hocon.\"), mdx(\"p\", null, \"Here is a small ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigStoreOptions httpStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n    .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"host\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/conf\\\"\"), \"));\\n\\nConfigStoreOptions fileStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"file\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my-config.json\\\"\"), \"));\\n\\nConfigStoreOptions sysPropsStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions().setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sys\\\"\"), \");\\n\\nConfigRetrieverOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigRetrieverOptions()\\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\\n\\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\\n\")), mdx(\"p\", null, \"Vert.x Con\\xADfig also sup\\xADports push based no\\xADti\\xADfi\\xADca\\xADtion style:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\\nretriever.configStream()\\n  .endHandler(v -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// retriever closed\"), \"\\n  })\\n  .exceptionHandler(t -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// an error has been caught while retrieving the configuration\"), \"\\n  })\\n  .handler(conf -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the configuration\"), \"\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-mqtt-server\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-mqtt-server\"\n  })), \"Vertx MQTT Server\"), mdx(\"p\", null, \"Vert.x MQTT Server is able to han\\xADdle con\\xADnec\\xADtions, com\\xADmu\\xADni\\xADca\\xADtion and mes\\xADsages ex\\xADchange with re\\xADmote MQTT clients.\\nIts API pro\\xADvides a bunch of events re\\xADlated to pro\\xADto\\xADcol mes\\xADsages re\\xADceived by clients and ex\\xADposes allow to send\\nmes\\xADsages to them.\"), mdx(\"p\", null, \"Here is a small ef\\xADfec\\xADtive ex\\xADam\\xADple of cre\\xADat\\xADing, the Vert.x way!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MqttServerOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MqttServerOptions()\\n  .setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1883\"), \")\\n  .setHost(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0\\\"\"), \");\\n\\nMqttServer server = MqttServer.create(vertx, options);\\n\\nserver.endpointHandler(endpoint -> {\\n\\n  System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connected client \\\"\"), \" + endpoint.clientIdentifier());\\n\\n  endpoint.publishHandler(message -> {\\n\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Just received message on [\\\"\"), \" + message.topicName() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] payload [\\\"\"), \" +\\n      message.payload() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] with QoS [\\\"\"), \" +\\n      message.qosLevel() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"]\\\"\"), \");\\n  });\\n\\n  endpoint.accept(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \");\\n});\\n\\nserver.listen(ar -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server started and listening on port \\\"\"), \" + server.actualPort());\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    System.err.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server error on start\\\"\"), \" + ar.cause().getMessage());\\n  }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-sql-streaming\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-sql-streaming\"\n  })), \"Vert.x SQL streaming\"), mdx(\"p\", null, \"We now sup\\xADport stream\\xADing style for SQL queries:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.queryStream(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"select * from test\\\"\"), \", stream -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (stream.succeeded()) {\\n    SQLRowStream sqlRowStream = stream.result();\\n\\n    sqlRowStream\\n      .handler(row -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do something with the row...\"), \"\\n        System.out.println(row.encode());\\n      })\\n      .endHandler(v -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// no more data available, close the connection\"), \"\\n        connection.close(done -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (done.failed()) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(done.cause());\\n          }\\n        });\\n      });\\n  }\\n});\\n\")), mdx(\"p\", null, \"And with the Rx\\xADJava API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"client\\n  .rx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"GetConnection()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect to the database\"), \"\\n  .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \" -> { \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" With \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"connection\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CREATE TABLE test(col VARCHAR(20))\\\"\"), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...create test table\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val1')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...insert a row\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val2')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...another one\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxQueryStream\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM test\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...get values stream\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \" -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"toObservable\"), \"()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform the stream into an Observable...\"), \"\\n          .\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"do\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"OnTerminate(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"close\"), \")\"), \"; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...and close the connection when the stream is fully read or an error occurs\"), \"\\n      });\\n  }).subscribe(row -> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"System\"), \".\")), \"out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Row : \\\"\"), \" + row.encode\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"()\"), \"));\\n\")), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"In ad\\xADdi\\xADtion to all these bril\\xADlant fea\\xADtures here is a list of more-\\u200Bthan-noticeable things you have in this Beta1:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x In\\xADfin\\xADis\\xADpan re\\xADplaces Vert.x Jgroups clus\\xADter man\\xADager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x Con\\xADsul Client pro\\xADvides a full fledged client for Con\\xADsul\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oauth2 pre\\xADde\\xADfined con\\xADfig\\xADu\\xADra\\xADtion with 16 set\\xADtings from \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Azure Ac\\xADtive Di\\xADrec\\xADtory\"), \", to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Twit\\xADter\"), \" with the usual sus\\xADpects (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Face\\xADbook\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"LinkedIn\"), \", \\u2026)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Http client now fol\\xADlow redi\\xADrects\")), mdx(\"p\", null, \"You can use and con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/3.4.0.Beta1/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Last but not least, I want to per\\xADson\\xADally thank all the peo\\xADple that con\\xADtributed to this re\\xADlease, be\\xADyond the Vert.x core team, the ac\\xADtual\\nVert.x com\\xADmit\\xADters and many other peo\\xADple who have given a lot of ef\\xADfort to this up\\xADcom\\xADing 3.4.0!!!!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We have re­leased 3.4.0.Beta1, this re­lease is the biggest since Vert.x 3.0.0 with plenty of great fea­tures.</p><p>You can use con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"http://vertx.io/docs/3.4.0.Beta1/\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Let me out­line the im­por­tant changes you can al­ready find in this Beta1.</p><h2 id=\"vertx-web-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web-client\"></a>Vert.x Web Client</h2><p>In a sim­ple sen­tence “Vert.x Web Client is to Vert.x Http­Client what Vert.x Web is to HttpServer”</p><p>The Web Client makes it easy to do HTTP re­quest/re­sponse in­ter­ac­tions with a web server, and pro­vides ad­vanced fea­tures like:</p><ul><li>Json body en­cod­ing / de­cod­ing</li><li>re­quest/re­sponse pump­ing</li><li>re­quest pa­ra­me­ters</li><li>uni­fied error han­dling</li><li>form sub­mis­sions</li><li>and more!</li></ul><p>Built on top of Http­Client, it nat­u­rally in­her­its its fea­tures and pro­vides a bet­ter API, let me give an overview in one ex­am­ple:</p><pre><code class=\"hljs language-java\">WebClient client = WebClient.\nclient\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .as(BodyCodec.json(User.class))\n  .send(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      HttpResponse&lt;User&gt; response = ar.result();\n      User user = response.body();\n\n      System.out.println(&quot;Received response with status code&quot; + response.statusCode() + &quot; with body &quot; +\n        user.getFirstName() + &quot; &quot; + user.getLastName());\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage());\n    }\n  });\n</code></pre><h2 id=\"rxjava-singles\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#rxjava-singles\"></a>RxJava singles</h2><p>Rx­Java is a very pop­u­lar Java ex­ten­sion and in this re­lease we fo­cused on the API us­abil­ity with the sup­port\nof the <code>Single</code> Rx­Java type.</p><p>The new meth­ods are pre­fixed by <code>rx</code> and dep­re­cates the <code>Observable</code> suf­fixed meth­ods.</p><p>So in­stead of start­ing a server with <code>listenObservable</code> now you use <code>rxListen</code>:</p><pre><code class=\"hljs language-java\">HttpServer server = vertx.createHttpServer();\nSingle&lt;HttpServer&gt; single = server.rxListen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\nsingle.subscribe(\n  ok -&gt; System.out.println(<span class=\"hljs-string\">&quot;Server started&quot;</span>),\n  err -&gt; System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + err.getMessage()));\n</code></pre><p>One no­tice­able dif­fer­ence with the pre­vi­ous API, is that the <code>listen</code> method is called when the <code>Single</code> is sub­scribed.</p><p>This is very handy when com­bined with the new web client:</p><pre><code class=\"hljs language-java\">Single&lt;HttpResponse&lt;Buffer&gt;&gt; single = client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .rxSend();\n\n<span class=\"hljs-comment\">// Send the request</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n\n<span class=\"hljs-comment\">// Send the request again</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n</code></pre><h2 id=\"polyglot\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#polyglot\"></a>Polyglot</h2><p>In this beta you can try <em>Vert.x for Kotlin</em>.</p><p><em>Vert.x for Kotlin</em> is based on the Java API and pro­vides also the ex­e­cu­tion of Kotlin Ver­ti­cles.</p><pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">import</span> io.vertx.core.*\n<span class=\"hljs-keyword\">import</span> io.vertx.kotlin.core.http.HttpServerOptions\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Server</span> : <span class=\"hljs-type\">AbstractVerticle</span></span>() {\n\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n    vertx.createHttpServer(\n\n        <span class=\"hljs-comment\">// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options</span>\n        HttpServerOptions(\n            port = <span class=\"hljs-number\">8080</span>,\n            host = <span class=\"hljs-string\">&quot;localhost&quot;</span>\n        ))\n        .requestHandler() { req -&gt;\n          req.response().end(<span class=\"hljs-string\">&quot;Hello from Kotlin&quot;</span>)\n        }\n        .listen()\n    println(<span class=\"hljs-string\">&quot;Server started on 8080&quot;</span>)\n  }\n}\n</code></pre><p>It can be di­rectly ran from the com­mand line:</p><pre><code class=\"hljs language-bash\">julien:vertx-kotlin-example julien$ vertx run Server.kt\nServer started on 8080\nSucceeded <span class=\"hljs-keyword\">in</span> deploying verticle\n</code></pre><p>As you can see, Kotlin is using the Java API di­rectly, and we thought that it might be a cool thing to do the\nsame with Groovy sup­port. So we have re­con­sid­ered our Groovy sup­port and now it uses the plain Java API,\nwith­out los­ing the ex­ist­ing fea­tures.</p><p>Thanks to Groovy ex­ten­sion meth­ods, id­iomatic Groovy is still sup­ported while ben­e­fit­ing from the full Java API!</p><p>Scala sup­port is also planned for 3.4.0 and will be re­leased soon, watch <a href=\"https://twitter.com/vertx_project\">@vertx_project</a>.</p><h2 id=\"the-microservices-story-goes-on\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-microservices-story-goes-on\"></a>The microservices story goes on…</h2><p>Our APIs have ma­tured and now they have been moved out of tech pre­view, of course this wasn’t enough and we now\nhave <em>Vert.x Con­fig</em>, an ex­ten­si­ble way to con­fig­ure Vert.x ap­pli­ca­tions sup­port­ing File, json, ENV, sys­tem prop­er­ties,\nHTTP, <em>Ku­ber­netes Con­figmap</em>, <em>Con­sul</em>, <em>Spring Con­fig Server</em>, <em>Redis</em>, <em>Git</em>, <em>Zookeeper</em>, … stores as well as\nsev­eral for­mats: prop­er­ties file, YAML and Hocon.</p><p>Here is a small ex­am­ple:</p><pre><code class=\"hljs language-java\">ConfigStoreOptions httpStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;http&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;/conf&quot;</span>));\n\nConfigStoreOptions fileStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;file&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;my-config.json&quot;</span>));\n\nConfigStoreOptions sysPropsStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">&quot;sys&quot;</span>);\n\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\n</code></pre><p>Vert.x Con­fig also sup­ports push based no­ti­fi­ca­tion style:</p><pre><code class=\"hljs language-java\">ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\nretriever.configStream()\n  .endHandler(v -&gt; {\n    <span class=\"hljs-comment\">// retriever closed</span>\n  })\n  .exceptionHandler(t -&gt; {\n    <span class=\"hljs-comment\">// an error has been caught while retrieving the configuration</span>\n  })\n  .handler(conf -&gt; {\n    <span class=\"hljs-comment\">// the configuration</span>\n  });\n</code></pre><h2 id=\"vertx-mqtt-server\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-mqtt-server\"></a>Vertx MQTT Server</h2><p>Vert.x MQTT Server is able to han­dle con­nec­tions, com­mu­ni­ca­tion and mes­sages ex­change with re­mote MQTT clients.\nIts API pro­vides a bunch of events re­lated to pro­to­col mes­sages re­ceived by clients and ex­poses allow to send\nmes­sages to them.</p><p>Here is a small ef­fec­tive ex­am­ple of cre­at­ing, the Vert.x way!</p><pre><code class=\"hljs language-java\">MqttServerOptions options = <span class=\"hljs-keyword\">new</span> MqttServerOptions()\n  .setPort(<span class=\"hljs-number\">1883</span>)\n  .setHost(<span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>);\n\nMqttServer server = MqttServer.create(vertx, options);\n\nserver.endpointHandler(endpoint -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;connected client &quot;</span> + endpoint.clientIdentifier());\n\n  endpoint.publishHandler(message -&gt; {\n\n    System.out.println(<span class=\"hljs-string\">&quot;Just received message on [&quot;</span> + message.topicName() + <span class=\"hljs-string\">&quot;] payload [&quot;</span> +\n      message.payload() + <span class=\"hljs-string\">&quot;] with QoS [&quot;</span> +\n      message.qosLevel() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  });\n\n  endpoint.accept(<span class=\"hljs-keyword\">false</span>);\n});\n\nserver.listen(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;MQTT server started and listening on port &quot;</span> + server.actualPort());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.err.println(<span class=\"hljs-string\">&quot;MQTT server error on start&quot;</span> + ar.cause().getMessage());\n  }\n});\n</code></pre><h2 id=\"vertx-sql-streaming\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-sql-streaming\"></a>Vert.x SQL streaming</h2><p>We now sup­port stream­ing style for SQL queries:</p><pre><code class=\"hljs language-java\">connection.queryStream(<span class=\"hljs-string\">&quot;select * from test&quot;</span>, stream -&gt; {\n  <span class=\"hljs-keyword\">if</span> (stream.succeeded()) {\n    SQLRowStream sqlRowStream = stream.result();\n\n    sqlRowStream\n      .handler(row -&gt; {\n        <span class=\"hljs-comment\">// do something with the row...</span>\n        System.out.println(row.encode());\n      })\n      .endHandler(v -&gt; {\n        <span class=\"hljs-comment\">// no more data available, close the connection</span>\n        connection.close(done -&gt; {\n          <span class=\"hljs-keyword\">if</span> (done.failed()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(done.cause());\n          }\n        });\n      });\n  }\n});\n</code></pre><p>And with the Rx­Java API:</p><pre><code class=\"hljs language-reasonml\">client\n  .rx<span class=\"hljs-constructor\">GetConnection()</span> <span class=\"hljs-comment\">// Connect to the database</span>\n  .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">conn</span> -&gt; { <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> With <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">connection</span><span class=\"hljs-operator\">...</span>\n    <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;CREATE TABLE test(col VARCHAR(20))&quot;</span>)</span> <span class=\"hljs-comment\">// ...create test table</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val1&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...insert a row</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val2&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...another one</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxQueryStream</span>(<span class=\"hljs-string\">&quot;SELECT * FROM test&quot;</span>)</span>) <span class=\"hljs-comment\">// ...get values stream</span>\n      .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">sqlRowStream</span> -&gt; {\n        <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">sqlRowStream</span>.<span class=\"hljs-params\">toObservable</span>()</span> <span class=\"hljs-comment\">// Transform the stream into an Observable...</span>\n          .<span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">OnTerminate(<span class=\"hljs-params\">conn</span>::<span class=\"hljs-params\">close</span>)</span>; <span class=\"hljs-comment\">// ...and close the connection when the stream is fully read or an error occurs</span>\n      });\n  }).subscribe(row -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;Row : &quot;</span> + row.encode<span class=\"hljs-literal\">()</span>));\n</code></pre><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>In ad­di­tion to all these bril­lant fea­tures here is a list of more-​than-noticeable things you have in this Beta1:</p><ul><li>Vert.x In­fin­is­pan re­places Vert.x Jgroups clus­ter man­ager</li><li>Vert.x Con­sul Client pro­vides a full fledged client for Con­sul</li><li>Oauth2 pre­de­fined con­fig­u­ra­tion with 16 set­tings from <em>Azure Ac­tive Di­rec­tory</em>, to <em>Twit­ter</em> with the usual sus­pects (<em>Face­book</em>, <em>LinkedIn</em>, …)</li><li>Http client now fol­low redi­rects</li></ul><p>You can use and con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"http://vertx.io/docs/3.4.0.Beta1/\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Last but not least, I want to per­son­ally thank all the peo­ple that con­tributed to this re­lease, be­yond the Vert.x core team, the ac­tual\nVert.x com­mit­ters and many other peo­ple who have given a lot of ef­fort to this up­com­ing 3.4.0!!!!</p>","scope":{}},"tfIdfTerms":[{"term":"api","tf":10},{"term":"client","tf":9},{"term":"support","tf":8},{"term":"releas","tf":7},{"term":"web","tf":6},{"term":"featur","tf":5},{"term":"us","tf":5},{"term":"exampl","tf":5},{"term":"server","tf":5},{"term":"provid","tf":5},{"term":"java","tf":5},{"term":"rxjava","tf":4},{"term":"method","tf":4},{"term":"kotlin","tf":4},{"term":"groovi","tf":4},{"term":"beta1","tf":3},{"term":"usual","tf":3},{"term":"preview","tf":3},{"term":"actual","tf":3},{"term":"http","tf":3},{"term":"request","tf":3},{"term":"extens","tf":3},{"term":"config","tf":3},{"term":"consul","tf":3},{"term":"mqtt","tf":3}]},{"filename":"blog/2017-01-31-an-introduction-to-the-vert-x-context-object.mdx","date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object","meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"readingTime":{"text":"6 min read","minutes":5.915,"time":354900,"words":1183},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Under the hood, the vert.x Con\\xADtext class plays a crit\\xADi\\xADcal part in main\\xADtain\\xADing the thread-\\u200Bsafety guar\\xADan\\xADtees of ver\\xADti\\xADcles. Most of the time, vert.x coders don\\u2019t need to make use of Con\\xADtext ob\\xADjects di\\xADrectly. How\\xADever, some\\xADtimes you may need to. This ar\\xADti\\xADcle pro\\xADvides a brief in\\xADtro\\xADduc\\xADtion to the vert.x Con\\xADtext class, which cov\\xADers why it\\u2019s im\\xADpor\\xADtant, and why and when you might wish to make use of the Con\\xADtext di\\xADrectly, based on the au\\xADthor\\u2019s ex\\xADpe\\xADri\\xADence of build\\xADing a generic async li\\xADbrary which can be used with vert.x.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.millross-consultants.com/vertx_context_object.html\"\n  }), \"blog post\"))), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#introduction\"\n  })), \"Introduction\"), mdx(\"p\", null, \"Re\\xADcently I\\u2019ve been look\\xADing at the pos\\xADsi\\xADbil\\xADity of build\\xADing an asyn\\xADchro\\xADnous ver\\xADsion of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.pac4j.org\"\n  }), \"pac4j\"), \" li\\xADbrary, with a view to then mi\\xADgrat\\xADing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pac4j/vertx-pac4j\"\n  }), \"vertx-\\u200Bpac4j\"), \" im\\xADple\\xADmen\\xADta\\xADtion to use the asyn\\xADchro\\xADnous ver\\xADsion of pac4j by de\\xADfault.\"), mdx(\"p\", null, \"I\\u2019m keen (for ob\\xADvi\\xADous rea\\xADsons) that the async ver\\xADsion of pac4j is not tightly cou\\xADpled to  one par\\xADtic\\xADu\\xADlar asyn\\xADchro\\xADnous/non-\\u200Bblocking frame\\xADwork, I de\\xADcided to ex\\xADpose the API via the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\"\n  }), \"Com\\xADpletable\\xADFu\\xADture\"), \" class, using this to wrap val\\xADues which will be de\\xADter\\xADmined in the fu\\xADture. How\\xADever, I opted to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"vert.x\"), \" frame\\xADwork for my asyn\\xADchro\\xADnous test\\xADing as a way of test\\xADing the API as it emerged. This in turn has led me to learn some as\\xADpects of the vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/Context.html\"\n  }), \"Con\\xADtext\"), \" class which I didn\\u2019t re\\xADally un\\xADder\\xADstand be\\xADfore.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The in\\xADfor\\xADma\\xADtion pre\\xADsented re\\xADlates to Vert.x ver\\xADsion 3.3.3. It is con\\xADceiv\\xADable that later ver\\xADsions of vert.x could ren\\xADder as\\xADpects of this ar\\xADti\\xADcle in\\xADcor\\xADrect.\")), mdx(\"h2\", {\n    \"id\": \"introduction-to-the-context-class\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#introduction-to-the-context-class\"\n  })), \"Introduction to the Context class\"), mdx(\"p\", null, \"When\\xADever a vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/Handler.html\"\n  }), \"Han\\xADdler\"), \" is ex\\xADe\\xADcuted, or the start or step method of a ver\\xADti\\xADcle is called, then that ex\\xADe\\xADcu\\xADtion is as\\xADso\\xADci\\xADated with a spe\\xADcific con\\xADtext. Gen\\xADer\\xADally a con\\xADtext is an event-\\u200Bloop con\\xADtext and is there\\xADfore as\\xADso\\xADci\\xADated with an event loop thread (ex\\xADcep\\xADtions are cov\\xADered in the Fur\\xADther Read\\xADing ref\\xADer\\xADenced below). Con\\xADtexts are prop\\xADa\\xADgated. When a han\\xADdler is set by code run\\xADning on a spe\\xADcific con\\xADtext, then that han\\xADdler will also be ex\\xADe\\xADcuted on the same con\\xADtext. This means for ex\\xADam\\xADple, that if the start method of a ver\\xADti\\xADcle in\\xADstance sets a num\\xADber of event bus han\\xADdlers (as many do), then they will all run on the same con\\xADtext as the start method for that ver\\xADti\\xADcle (so all han\\xADdlers for that ver\\xADti\\xADcle in\\xADstance will share a com\\xADmon con\\xADtext). \"), mdx(\"p\", null, \"A schematic of the re\\xADla\\xADtion\\xADships be\\xADtween non-\\u200Bworker ver\\xADti\\xADcles, con\\xADtexts and event\\xADloop threads is shown in Fig\\xADure 1. \"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-intro-to-context-object/VertxContextRelationships.png\",\n    \"alt\": \"Vertx Context/Thread/Verticle Relationships\"\n  }))), mdx(\"p\", null, \"Note that each ver\\xADti\\xADcle ef\\xADfec\\xADtively has only one con\\xADtext for han\\xADdlers cre\\xADated by its start method, and each con\\xADtext is bound to a sin\\xADgle event-\\u200Bloop thread. A given event-\\u200Bloop thread can, how\\xADever, have mul\\xADti\\xADple con\\xADtexts bound to it. \"), mdx(\"h2\", {\n    \"id\": \"when-are-contexts-not-propagated\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#when-are-contexts-not-propagated\"\n  })), \"When are contexts not propagated?\"), mdx(\"p\", null, \"When a ver\\xADti\\xADcle\\u2019s start method is called, a new con\\xADtext is cre\\xADated. If 4 iden\\xADti\\xADcal ver\\xADti\\xADcles are de\\xADployed via the in\\xADstances pa\\xADra\\xADme\\xADter on De\\xADploy\\xADmen\\xADtOp\\xADtions, the start method of each will be on a new con\\xADtext. This is log\\xADi\\xADcal as we may not want all non-\\u200Bworker ver\\xADti\\xADcles to be bound to a sin\\xADgle event\\xADloop thread when mul\\xADti\\xADple event\\xADloop threads are avail\\xADable. \"), mdx(\"h2\", {\n    \"id\": \"threading-guarantees\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#threading-guarantees\"\n  })), \"Threading Guarantees\"), mdx(\"p\", null, \"There are cer\\xADtain con\\xADse\\xADquences of the prop\\xADa\\xADga\\xADtion of con\\xADtexts to han\\xADdlers as men\\xADtioned above. The most im\\xADpor\\xADtant one is that since all han\\xADdlers in a given event\\xADloop ver\\xADti\\xADcle run on the same con\\xADtext (the one on which its start method ran), they all run on the same event\\xADloop thread. This gives rise to the thread\\xADing guar\\xADan\\xADtee within vert.x, that as long as a given ver\\xADti\\xADcle is the only one to ever ac\\xADcess a piece of state, then that state is being ac\\xADcessed by only one thread, so no syn\\xADchro\\xADniza\\xADtion will be nec\\xADes\\xADsary. \"), mdx(\"h2\", {\n    \"id\": \"exception-handling\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#exception-handling\"\n  })), \"Exception Handling\"), mdx(\"p\", null, \"Each con\\xADtext can have its own ex\\xADcep\\xADtion han\\xADdler at\\xADtached for han\\xADdling ex\\xADcep\\xADtions which occur dur\\xADing event loop pro\\xADcess\\xADing.\"), mdx(\"h3\", {\n    \"id\": \"why-might-you-not-want-the-default-exception-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#why-might-you-not-want-the-default-exception-handler\"\n  })), \"Why might you not want the default exception handler?\"), mdx(\"p\", null, \"As one ex\\xADam\\xADple, you might have some ver\\xADti\\xADcles run\\xADning whose job it is to mon\\xADi\\xADtor other ver\\xADti\\xADcles, and if some\\xADthing ap\\xADpears to go wrong with them, un\\xADde\\xADploy and restart them, a fre\\xADquent pat\\xADtern in an actor-\\u200B or microservices-\\u200B style archic\\xADtec\\xADture. So one op\\xADtion could be that when a su\\xADper\\xADvised ver\\xADti\\xADcle en\\xADcoun\\xADters an un\\xADre\\xADcov\\xADer\\xADable error, it could sim\\xADply no\\xADtify its su\\xADper\\xADvi\\xADsor that it has gone wrong via an event\\xADbus mes\\xADsage, and its su\\xADper\\xADvi\\xADsor could then un\\xADde\\xADploy and re\\xADde\\xADploy (and after a num\\xADber of fail\\xADures in rapid suc\\xADces\\xADsion pos\\xADsi\\xADbly give up hope or es\\xADca\\xADlate to its own su\\xADper\\xADvi\\xADsor.\"), mdx(\"h2\", {\n    \"id\": \"going-off-context-and-getting-back-onto-a-particular-context\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#going-off-context-and-getting-back-onto-a-particular-context\"\n  })), \"Going off-context and getting back onto a particular context\"), mdx(\"p\", null, \"There are sev\\xADeral rea\\xADsons why you might ex\\xADe\\xADcute code off-\\u200Bcontext and then want to op\\xADer\\xADate back on a vert.x con\\xADtext when com\\xADplete. I\\u2019ll out\\xADline a cou\\xADple of sce\\xADnar\\xADios below\"), mdx(\"h3\", {\n    \"id\": \"running-code-on-a-separate-thread\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#running-code-on-a-separate-thread\"\n  })), \"Running code on a separate thread\"), mdx(\"p\", null, \"Firstly you might be using an asyn\\xADchro\\xADnous dri\\xADver which is en\\xADtirely vertx-\\u200Bunaware. Its code will run on non-\\u200Beventloop threads but it\\u2019s pos\\xADsi\\xADble you may then want to use the re\\xADsults of that code to up\\xADdate in\\xADfor\\xADma\\xADtion within your ver\\xADti\\xADcle. If you don\\u2019t get back onto the cor\\xADrect con\\xADtext, you can\\u2019t make any guar\\xADan\\xADtees about thread-\\u200Bsafety, so your sub\\xADse\\xADquent pro\\xADcess\\xADing needs to be run back on the cor\\xADrect event\\xADloop thread.\"), mdx(\"h3\", {\n    \"id\": \"using-asynchronous-java-8-apis\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-asynchronous-java-8-apis\"\n  })), \"Using asynchronous Java 8 APIs\"), mdx(\"p\", null, \"APIs such as Com\\xADpletable\\xADFu\\xADture are context-\\u200Bunaware. In one ex\\xADam\\xADple, I cre\\xADated an al\\xADready com\\xADpleted fu\\xADture on the vert.x event loop in a test. I then at\\xADtached sub\\xADse\\xADquent pro\\xADcess\\xADing to it via then run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@RunWith(VertxUnitRunner.class)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"ImmediateCompletionTest\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Rule\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" RunTestOnContext rule = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RunTestOnContext();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testImmediateCompletion\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Async async = context.async();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Vertx vertx = rule.vertx();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" CompletableFuture<Integer> toComplete = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" CompletableFuture<>();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// delay future completion by 500 ms\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String threadName = Thread.currentThread().getName();\\n        toComplete.complete(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \");\\n        toComplete.thenRun(() -> {\\n            assertThat(Thread.currentThread().getName(), is(threadName));\\n            async.complete();\\n        });\\n    }\\n}\\n\")), mdx(\"p\", null, \"Naively one might ex\\xADpect this to au\\xADto\\xADmat\\xADi\\xADcally run on the con\\xADtext, since it hasn\\u2019t left the event\\xADloop thread on which the fu\\xADture was com\\xADpleted, and in\\xADdeed it\\u2019s prov\\xADable that it is on the cor\\xADrect thread. How\\xADever, it will not be on the cor\\xADrect con\\xADtext. This would mean that it wouldn\\u2019t, for ex\\xADam\\xADple, in\\xADvoke any mod\\xADi\\xADfied ex\\xADcep\\xADtion han\\xADdler at\\xADtached to the con\\xADtext.\"), mdx(\"h3\", {\n    \"id\": \"getting-back-on-context\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#getting-back-on-context\"\n  })), \"Getting back on context\"), mdx(\"p\", null, \"For\\xADtu\\xADnately, once we\\u2019ve left the con\\xADtext, it\\u2019s quite straight\\xADfor\\xADward to re\\xADturn to it. Prior to de\\xADf\\xADi\\xADn\\xADi\\xADtion of the code block within then\\xADRun, we can use Vertx.cur\\xADrent\\xADCon\\xADtext() or vertx.getOr\\xADCre\\xADate\\xADCon\\xADtext() to get a han\\xADdle to the con\\xADtext on which our event\\xADloop code is run\\xADning, We can then ex\\xADe\\xADcute the code block in\\xADside a call to Con\\xADtext::runOn\\xADCon\\xADtext, sim\\xADi\\xADlar to\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Context currentContext = vertx.getOrCreateContext();\\ntoComplete.thenRun(() -> {\\n        currentContext.runOnContext(v -> {\\n        assertThat(Thread.currentThread().getName(), is(threadName));\\n        async.complete();\\n    }\\n});\\n\")), mdx(\"p\", null, \"While get\\xADting back onto the cor\\xADrect con\\xADtext may not be crit\\xADi\\xADcal if you have re\\xADmained on the event loop thread through\\xADout, it is crit\\xADi\\xADcal if you are going to in\\xADvoke sub\\xADse\\xADquent vert.x han\\xADdlers, up\\xADdate ver\\xADti\\xADcle state or any\\xADthing sim\\xADi\\xADlar, so it\\u2019s a sen\\xADsi\\xADble gen\\xADeral ap\\xADproach.\"), mdx(\"h2\", {\n    \"id\": \"further-reading\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#further-reading\"\n  })), \"Further Reading\"), mdx(\"p\", null, \"The vert.x team them\\xADselves offer an ex\\xADcel\\xADlent blog about the Vert.x event\\xADloop, with ex\\xADcel\\xADlent ma\\xADte\\xADr\\xADial on the con\\xADtext, on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc\"\n  }), \"Github\"), \".\"), mdx(\"h2\", {\n    \"id\": \"thanks\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#thanks\"\n  })), \"Thanks\"), mdx(\"p\", null, \"Thanks very much to the vert.x core team for their clear github pages on the event\\xADloop, and also to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/alexlehm?lang=en\"\n  }), \"Alexan\\xADder Lehmann\"), \" for his an\\xADswers to my stu\\xADpid and naive ques\\xADtions on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://groups.google.com/forum/#!forum/vertx\"\n  }), \"Vert.x google group\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Under the hood, the vert.x Con­text class plays a crit­i­cal part in main­tain­ing the thread-​safety guar­an­tees of ver­ti­cles. Most of the time, vert.x coders don’t need to make use of Con­text ob­jects di­rectly. How­ever, some­times you may need to. This ar­ti­cle pro­vides a brief in­tro­duc­tion to the vert.x Con­text class, which cov­ers why it’s im­por­tant, and why and when you might wish to make use of the Con­text di­rectly, based on the au­thor’s ex­pe­ri­ence of build­ing a generic async li­brary which can be used with vert.x.</p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"http://www.millross-consultants.com/vertx_context_object.html\">blog post</a></p></div><h2 id=\"introduction\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#introduction\"></a>Introduction</h2><p>Re­cently I’ve been look­ing at the pos­si­bil­ity of build­ing an asyn­chro­nous ver­sion of the <a href=\"http://www.pac4j.org\">pac4j</a> li­brary, with a view to then mi­grat­ing the <a href=\"https://github.com/pac4j/vertx-pac4j\">vertx-​pac4j</a> im­ple­men­ta­tion to use the asyn­chro­nous ver­sion of pac4j by de­fault.</p><p>I’m keen (for ob­vi­ous rea­sons) that the async ver­sion of pac4j is not tightly cou­pled to  one par­tic­u­lar asyn­chro­nous/non-​blocking frame­work, I de­cided to ex­pose the API via the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\">Com­pletable­Fu­ture</a> class, using this to wrap val­ues which will be de­ter­mined in the fu­ture. How­ever, I opted to use the <a href=\"http://vertx.io\">vert.x</a> frame­work for my asyn­chro­nous test­ing as a way of test­ing the API as it emerged. This in turn has led me to learn some as­pects of the vert.x <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/Context.html\">Con­text</a> class which I didn’t re­ally un­der­stand be­fore.</p><div class=\"alert info\"><p>The in­for­ma­tion pre­sented re­lates to Vert.x ver­sion 3.3.3. It is con­ceiv­able that later ver­sions of vert.x could ren­der as­pects of this ar­ti­cle in­cor­rect.</p></div><h2 id=\"introduction-to-the-context-class\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#introduction-to-the-context-class\"></a>Introduction to the Context class</h2><p>When­ever a vert.x <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/Handler.html\">Han­dler</a> is ex­e­cuted, or the start or step method of a ver­ti­cle is called, then that ex­e­cu­tion is as­so­ci­ated with a spe­cific con­text. Gen­er­ally a con­text is an event-​loop con­text and is there­fore as­so­ci­ated with an event loop thread (ex­cep­tions are cov­ered in the Fur­ther Read­ing ref­er­enced below). Con­texts are prop­a­gated. When a han­dler is set by code run­ning on a spe­cific con­text, then that han­dler will also be ex­e­cuted on the same con­text. This means for ex­am­ple, that if the start method of a ver­ti­cle in­stance sets a num­ber of event bus han­dlers (as many do), then they will all run on the same con­text as the start method for that ver­ti­cle (so all han­dlers for that ver­ti­cle in­stance will share a com­mon con­text). </p><p>A schematic of the re­la­tion­ships be­tween non-​worker ver­ti­cles, con­texts and event­loop threads is shown in Fig­ure 1. </p><p><img src=\"/images/blog/vertx3-intro-to-context-object/VertxContextRelationships.png\" alt=\"Vertx Context/Thread/Verticle Relationships\"/></p><p>Note that each ver­ti­cle ef­fec­tively has only one con­text for han­dlers cre­ated by its start method, and each con­text is bound to a sin­gle event-​loop thread. A given event-​loop thread can, how­ever, have mul­ti­ple con­texts bound to it. </p><h2 id=\"when-are-contexts-not-propagated\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#when-are-contexts-not-propagated\"></a>When are contexts not propagated?</h2><p>When a ver­ti­cle’s start method is called, a new con­text is cre­ated. If 4 iden­ti­cal ver­ti­cles are de­ployed via the in­stances pa­ra­me­ter on De­ploy­men­tOp­tions, the start method of each will be on a new con­text. This is log­i­cal as we may not want all non-​worker ver­ti­cles to be bound to a sin­gle event­loop thread when mul­ti­ple event­loop threads are avail­able. </p><h2 id=\"threading-guarantees\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#threading-guarantees\"></a>Threading Guarantees</h2><p>There are cer­tain con­se­quences of the prop­a­ga­tion of con­texts to han­dlers as men­tioned above. The most im­por­tant one is that since all han­dlers in a given event­loop ver­ti­cle run on the same con­text (the one on which its start method ran), they all run on the same event­loop thread. This gives rise to the thread­ing guar­an­tee within vert.x, that as long as a given ver­ti­cle is the only one to ever ac­cess a piece of state, then that state is being ac­cessed by only one thread, so no syn­chro­niza­tion will be nec­es­sary. </p><h2 id=\"exception-handling\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#exception-handling\"></a>Exception Handling</h2><p>Each con­text can have its own ex­cep­tion han­dler at­tached for han­dling ex­cep­tions which occur dur­ing event loop pro­cess­ing.</p><h3 id=\"why-might-you-not-want-the-default-exception-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#why-might-you-not-want-the-default-exception-handler\"></a>Why might you not want the default exception handler?</h3><p>As one ex­am­ple, you might have some ver­ti­cles run­ning whose job it is to mon­i­tor other ver­ti­cles, and if some­thing ap­pears to go wrong with them, un­de­ploy and restart them, a fre­quent pat­tern in an actor-​ or microservices-​ style archic­tec­ture. So one op­tion could be that when a su­per­vised ver­ti­cle en­coun­ters an un­re­cov­er­able error, it could sim­ply no­tify its su­per­vi­sor that it has gone wrong via an event­bus mes­sage, and its su­per­vi­sor could then un­de­ploy and re­de­ploy (and after a num­ber of fail­ures in rapid suc­ces­sion pos­si­bly give up hope or es­ca­late to its own su­per­vi­sor.</p><h2 id=\"going-off-context-and-getting-back-onto-a-particular-context\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#going-off-context-and-getting-back-onto-a-particular-context\"></a>Going off-context and getting back onto a particular context</h2><p>There are sev­eral rea­sons why you might ex­e­cute code off-​context and then want to op­er­ate back on a vert.x con­text when com­plete. I’ll out­line a cou­ple of sce­nar­ios below</p><h3 id=\"running-code-on-a-separate-thread\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#running-code-on-a-separate-thread\"></a>Running code on a separate thread</h3><p>Firstly you might be using an asyn­chro­nous dri­ver which is en­tirely vertx-​unaware. Its code will run on non-​eventloop threads but it’s pos­si­ble you may then want to use the re­sults of that code to up­date in­for­ma­tion within your ver­ti­cle. If you don’t get back onto the cor­rect con­text, you can’t make any guar­an­tees about thread-​safety, so your sub­se­quent pro­cess­ing needs to be run back on the cor­rect event­loop thread.</p><h3 id=\"using-asynchronous-java-8-apis\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-asynchronous-java-8-apis\"></a>Using asynchronous Java 8 APIs</h3><p>APIs such as Com­pletable­Fu­ture are context-​unaware. In one ex­am­ple, I cre­ated an al­ready com­pleted fu­ture on the vert.x event loop in a test. I then at­tached sub­se­quent pro­cess­ing to it via then run:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@RunWith(VertxUnitRunner.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImmediateCompletionTest</span> </span>{\n    <span class=\"hljs-meta\">@Rule</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> RunTestOnContext rule = <span class=\"hljs-keyword\">new</span> RunTestOnContext();\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testImmediateCompletion</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n\n        <span class=\"hljs-keyword\">final</span> Async async = context.async();\n        <span class=\"hljs-keyword\">final</span> Vertx vertx = rule.vertx();\n        <span class=\"hljs-keyword\">final</span> CompletableFuture&lt;Integer&gt; toComplete = <span class=\"hljs-keyword\">new</span> CompletableFuture&lt;&gt;();\n        <span class=\"hljs-comment\">// delay future completion by 500 ms</span>\n        <span class=\"hljs-keyword\">final</span> String threadName = Thread.currentThread().getName();\n        toComplete.complete(<span class=\"hljs-number\">100</span>);\n        toComplete.thenRun(() -&gt; {\n            assertThat(Thread.currentThread().getName(), is(threadName));\n            async.complete();\n        });\n    }\n}\n</code></pre><p>Naively one might ex­pect this to au­to­mat­i­cally run on the con­text, since it hasn’t left the event­loop thread on which the fu­ture was com­pleted, and in­deed it’s prov­able that it is on the cor­rect thread. How­ever, it will not be on the cor­rect con­text. This would mean that it wouldn’t, for ex­am­ple, in­voke any mod­i­fied ex­cep­tion han­dler at­tached to the con­text.</p><h3 id=\"getting-back-on-context\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#getting-back-on-context\"></a>Getting back on context</h3><p>For­tu­nately, once we’ve left the con­text, it’s quite straight­for­ward to re­turn to it. Prior to de­f­i­n­i­tion of the code block within then­Run, we can use Vertx.cur­rent­Con­text() or vertx.getOr­Cre­ate­Con­text() to get a han­dle to the con­text on which our event­loop code is run­ning, We can then ex­e­cute the code block in­side a call to Con­text::runOn­Con­text, sim­i­lar to</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">final</span> Context currentContext = vertx.getOrCreateContext();\ntoComplete.thenRun(() -&gt; {\n        currentContext.runOnContext(v -&gt; {\n        assertThat(Thread.currentThread().getName(), is(threadName));\n        async.complete();\n    }\n});\n</code></pre><p>While get­ting back onto the cor­rect con­text may not be crit­i­cal if you have re­mained on the event loop thread through­out, it is crit­i­cal if you are going to in­voke sub­se­quent vert.x han­dlers, up­date ver­ti­cle state or any­thing sim­i­lar, so it’s a sen­si­ble gen­eral ap­proach.</p><h2 id=\"further-reading\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#further-reading\"></a>Further Reading</h2><p>The vert.x team them­selves offer an ex­cel­lent blog about the Vert.x event­loop, with ex­cel­lent ma­te­r­ial on the con­text, on <a href=\"https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc\">Github</a>.</p><h2 id=\"thanks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#thanks\"></a>Thanks</h2><p>Thanks very much to the vert.x core team for their clear github pages on the event­loop, and also to <a href=\"https://twitter.com/alexlehm?lang=en\">Alexan­der Lehmann</a> for his an­swers to my stu­pid and naive ques­tions on the <a href=\"https://groups.google.com/forum/#!forum/vertx\">Vert.x google group</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"context","tf":39},{"term":"thread","tf":18},{"term":"verticl","tf":17},{"term":"handler","tf":12},{"term":"run","tf":11},{"term":"eventloop","tf":11},{"term":"us","tf":10},{"term":"on","tf":10},{"term":"will","tf":8},{"term":"event","tf":8},{"term":"code","tf":8},{"term":"start","tf":7},{"term":"method","tf":7},{"term":"loop","tf":7},{"term":"asynchron","tf":6},{"term":"not","tf":6},{"term":"except","tf":6},{"term":"back","tf":6},{"term":"class","tf":5},{"term":"version","tf":5},{"term":"execut","tf":5},{"term":"correct","tf":5},{"term":"guarante","tf":4},{"term":"howev","tf":4},{"term":"mai","tf":4}]}],"numPages":9},"__N_SSG":true}