{"pageProps":{"categories":["releases","guides","news"],"category":"guides","page":7,"posts":[{"filename":"blog/2016-01-03-ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x.mdx","date":"2016-01-03","slug":"ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x","meta":{"title":"ECMAScript 6/7 on the JVM with TypeScript and Vert.x","category":"guides","authors":[{"name":"Michel Kr√§mer","github_id":"michel-kraemer"}],"summary":"I figured it would be a good idea to give you a couple of examples how teaming\n  Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today."},"readingTime":{"text":"4 min read","minutes":3.775,"time":226500,"words":755},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fol\\xADlow\\xADing the lat\\xADest re\\xADleases of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x 3.2\"), \" and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript\"\n  }), \"vertx-\\u200Blang-typescript 1.1.0\"), \"\\nI fig\\xADured it would be a good idea to give you a cou\\xADple of ex\\xADam\\xADples how team\\xADing\\nVert.x and Type\\xADScript helps you use EC\\xADMAScript 6 and 7 fea\\xADtures on the JVM today.\"), mdx(\"p\", null, \"The vertx-\\u200Blang-typescript li\\xADbrary adds \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.typescriptlang.org/\"\n  }), \"Type\\xADScript\"), \" sup\\xADport to Vert.x 3.\\nType\\xADScript is a typed su\\xADper\\xADset of JavaScript that com\\xADpiles to plain JavaScript. It sup\\xADports the\\nEC\\xADMAScript 6 (EC\\xADMAScript 2015, ES6) stan\\xADdard and also a few parts of EC\\xADMAScript 7 (ES7) al\\xADready.\"), mdx(\"p\", null, \"The li\\xADbrary au\\xADto\\xADmat\\xADi\\xADcally com\\xADpiles Vert.x ver\\xADti\\xADcles writ\\xADten in\\nType\\xADScript to JavaScript and ex\\xADe\\xADcutes them on the JVM. vertx-\\u200Blang-typescript also pro\\xADvides\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions for the Vert.x JavaScript API. Use them in your favourite\\nType\\xADScript ed\\xADi\\xADtor/IDE to get auto-\\u200Bcompletion, API doc\\xADu\\xADmen\\xADta\\xADtion and mean\\xADing\\xADful error\\nmes\\xADsages. See the fol\\xADlow\\xADing screen\\xADcast:\"), mdx(\"img\", {\n    src: \"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\"\n  }), mdx(\"h2\", {\n    \"id\": \"ecmascript-67-and-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#ecmascript-67-and-vertx\"\n  })), \"ECMAScript 6/7 and Vert.x\"), mdx(\"p\", null, \"Below you find an ex\\xADam\\xADple ver\\xADti\\xADcle writ\\xADten in Type\\xADScript. Well, I left all\\nthe TypeScript-\\u200Bspecific parts out. In fact the ver\\xADti\\xADcle is valid EC\\xADMAScript 6\\n(ex\\xADcept for the last snip\\xADpet \", \"[9]\", \" which is EC\\xADMAScript 7).\"), mdx(\"p\", null, \"First, fol\\xADlow the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\"\n  }), \"vertx-\\u200Blang-typescript README\"), \"\\nto in\\xADstall the li\\xADbrary and to en\\xADable Type\\xADScript in Vert.x. Then ex\\xADtract the\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-lang-typescript-1.1.0-typings.zip\"), \") into a new di\\xADrec\\xADtory.\\nCre\\xADate a new file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"es7verticle.ts\"), \" in this di\\xADrec\\xADtory and copy the code\\nbelow into it. Fi\\xADnally, open your com\\xADmand prompt and ex\\xADe\\xADcute\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"vertx run es7verticle.ts\\n\")), mdx(\"p\", null, \"This will run a small HTTP server that lis\\xADtens to re\\xADquests on port 8080. If you\\nopen your browser and go to http://lo\\xADcal\\xADhost:8080 you will see the fol\\xADlow\\xADing:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\",\n    \"alt\": \"Output of the verticle written in TypeScript\"\n  }))), mdx(\"p\", null, \"So far so good. Now let\\u2019s have a look at the code. I num\\xADbered the in\\xADdi\\xADvid\\xADual\\nEC\\xADMAScript fea\\xADtures used. Here\\u2019s a com\\xADplete list:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"arrow func\\xADtion\"), \" to cre\\xADate a re\\xADquest han\\xADdler (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Block-\\u200Bscoped vari\\xADables\"), \" do not pol\\xADlute your global name\\xADspace (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Spec\\xADify a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"de\\xADfault value\"), \" for a func\\xADtion pa\\xADra\\xADme\\xADter (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"rest pa\\xADra\\xADme\\xADters\"), \" to col\\xADlect mul\\xADti\\xADple pa\\xADra\\xADme\\xADters in an array (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Spread\"), \" the con\\xADtents of an array to func\\xADtion pa\\xADra\\xADme\\xADters (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It\\xADer\\xADate over array con\\xADtents using the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"for\\u2026of loop\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tem\\xADplate strings\"), \" en\\xADable \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"string in\\xADter\\xADpo\\xADla\\xADtion\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"multi-\\u200Bline strings\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"classes\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"in\\xADher\\xADi\\xADtance\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the new \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \" as a short\\xADcut for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Math.pow()\"), \" (ES7)\")), mdx(Gist, {\n    url: \"https://gist.github.com/michel-kraemer/892866038dabcb8376e6\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"The ex\\xADam\\xADple demon\\xADstrates very well how you can use EC\\xADMAScript 6 (and parts of\\n7) on the JVM today. In fact, there are a lot more\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://es6-features.org/\"\n  }), \"cool ES6 fea\\xADtures\"), \" not in\\xADcluded in the ex\\xADam\\xADple such\\nas con\\xADstants (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \"), the prop\\xADerty short\\xADhand or method prop\\xADer\\xADties.\"), mdx(\"p\", null, \"Type\\xADScript is so much more than just ES6. It ac\\xADtu\\xADally has a\\nvery good sta\\xADtic type sys\\xADtem that al\\xADlows you to make compile-\\u200Btime type checks.\\nThis is makes it much eas\\xADier to write large Vert.x ap\\xADpli\\xADca\\xADtions with many\\nver\\xADti\\xADcles. Per\\xADson\\xADally I re\\xADally like the sup\\xADport that I get from my IDE when\\npro\\xADgram\\xADming Type\\xADScript. Since vertx-\\u200Blang-typescript comes with type de\\xADf\\xADi\\xADn\\xADi\\xADtions\\nfor the Vert.x JavaScript API I get auto-\\u200Bcompletion and ac\\xADcess to the doc\\xADu\\xADmen\\xADta\\xADtion\\nright in the ed\\xADi\\xADtor. I mostly use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.sublimetext.com/\"\n  }), \"Sub\\xADlime\"), \" by the\\nway, but I have tested it suc\\xADcess\\xADfully with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), \"Vi\\xADsual Stu\\xADdio Code\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.eclipse.org/\"\n  }), \"Eclipse\"), \"\\nand \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://atom.io/\"\n  }), \"Atom\"), \".\"), mdx(\"p\", null, \"Un\\xADfor\\xADtu\\xADnately, the only ES7 fea\\xADture that you can use at the mo\\xADment with\\nvertx-\\u200Blang-typescript is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \". Type\\xADScript 1.7 also\\nsup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dec\\xADo\\xADra\\xADtors\"), \" but this fea\\xADture is dis\\xADabled at the mo\\xADment in\\nvertx-\\u200Blang-typescript be\\xADcause it is ex\\xADper\\xADi\\xADmen\\xADtal and sub\\xADject to change. I\\u2019ll\\nkeep you up to date when new fea\\xADtures are in\\xADtro\\xADduced.\"), mdx(\"h2\", {\n    \"id\": \"alternatives\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#alternatives\"\n  })), \"Alternatives\"), mdx(\"p\", null, \"We\\u2019ve re\\xADcently \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-es6-back-to-the-future/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"pub\\xADlished a post\")), \"\\non how to use EC\\xADMAScript 6 with Vert.x here on this blog. We used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://babeljs.io/\"\n  }), \"Babel\"), \", a\\ncom\\xADpiler that trans\\xADlates ES6 to ES5.\"), mdx(\"p\", null, \"Al\\xADthough this ap\\xADproach works well it is a bit harder to set up and use than the\\none pre\\xADsented here. First, you need to wrap your Vert.x ap\\xADpli\\xADca\\xADtion in a NPM pack\\xADage.\\nSec\\xADond, in order to run your ap\\xADpli\\xADca\\xADtion, you need to ex\\xADe\\xADcute two com\\xADmands.\\nYou have to com\\xADpile it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run build\"), \" and then then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \".\\nWith vertx-\\u200Blang-typescript you only need one com\\xADmand. vertx-\\u200Blang-typescript\\nalso al\\xADlows you to embed the Type\\xADScript ver\\xADti\\xADcle in a larger Vert.x ap\\xADpli\\xADca\\xADtion\\nand also mix mul\\xADti\\xADple lan\\xADguages in one project. This is not pos\\xADsi\\xADble if you wrap\\nevery\\xADthing in a NPM pack\\xADage.\"), mdx(\"p\", null, \"Fi\\xADnally, the ap\\xADproach based on Babel only sup\\xADports EC\\xADMAScript 6 (2015), al\\xADthough\\nmore fea\\xADtures from ES7 will surely be in\\xADtro\\xADduced in Babel in the fu\\xADture.\\nType\\xADScript on the other hand gives you much more fea\\xADtures such as sta\\xADtic\\ntyp\\xADing that you will cer\\xADtainly find use\\xADful for any larger project.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Fol¬≠low¬≠ing the lat¬≠est re¬≠leases of <a href=\"http://vertx.io\">Vert.x 3.2</a> and\n<a href=\"https://github.com/michel-kraemer/vertx-lang-typescript\">vertx-‚Äãlang-typescript 1.1.0</a>\nI fig¬≠ured it would be a good idea to give you a cou¬≠ple of ex¬≠am¬≠ples how team¬≠ing\nVert.x and Type¬≠Script helps you use EC¬≠MAScript 6 and 7 fea¬≠tures on the JVM today.</p><p>The vertx-‚Äãlang-typescript li¬≠brary adds <a href=\"http://www.typescriptlang.org/\">Type¬≠Script</a> sup¬≠port to Vert.x 3.\nType¬≠Script is a typed su¬≠per¬≠set of JavaScript that com¬≠piles to plain JavaScript. It sup¬≠ports the\nEC¬≠MAScript 6 (EC¬≠MAScript 2015, ES6) stan¬≠dard and also a few parts of EC¬≠MAScript 7 (ES7) al¬≠ready.</p><p>The li¬≠brary au¬≠to¬≠mat¬≠i¬≠cally com¬≠piles Vert.x ver¬≠ti¬≠cles writ¬≠ten in\nType¬≠Script to JavaScript and ex¬≠e¬≠cutes them on the JVM. vertx-‚Äãlang-typescript also pro¬≠vides\ntype de¬≠f¬≠i¬≠n¬≠i¬≠tions for the Vert.x JavaScript API. Use them in your favourite\nType¬≠Script ed¬≠i¬≠tor/IDE to get auto-‚Äãcompletion, API doc¬≠u¬≠men¬≠ta¬≠tion and mean¬≠ing¬≠ful error\nmes¬≠sages. See the fol¬≠low¬≠ing screen¬≠cast:</p><img src=\"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\"/><h2 id=\"ecmascript-67-and-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#ecmascript-67-and-vertx\"></a>ECMAScript 6/7 and Vert.x</h2><p>Below you find an ex¬≠am¬≠ple ver¬≠ti¬≠cle writ¬≠ten in Type¬≠Script. Well, I left all\nthe TypeScript-‚Äãspecific parts out. In fact the ver¬≠ti¬≠cle is valid EC¬≠MAScript 6\n(ex¬≠cept for the last snip¬≠pet <!-- -->[9]<!-- --> which is EC¬≠MAScript 7).</p><p>First, fol¬≠low the <a href=\"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\">vertx-‚Äãlang-typescript README</a>\nto in¬≠stall the li¬≠brary and to en¬≠able Type¬≠Script in Vert.x. Then ex¬≠tract the\ntype de¬≠f¬≠i¬≠n¬≠i¬≠tions (<code>vertx-lang-typescript-1.1.0-typings.zip</code>) into a new di¬≠rec¬≠tory.\nCre¬≠ate a new file named <code>es7verticle.ts</code> in this di¬≠rec¬≠tory and copy the code\nbelow into it. Fi¬≠nally, open your com¬≠mand prompt and ex¬≠e¬≠cute</p><pre><code class=\"hljs language-bash\">vertx run es7verticle.ts\n</code></pre><p>This will run a small HTTP server that lis¬≠tens to re¬≠quests on port 8080. If you\nopen your browser and go to http://lo¬≠cal¬≠host:8080 you will see the fol¬≠low¬≠ing:</p><p><img src=\"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\" alt=\"Output of the verticle written in TypeScript\"/></p><p>So far so good. Now let‚Äôs have a look at the code. I num¬≠bered the in¬≠di¬≠vid¬≠ual\nEC¬≠MAScript fea¬≠tures used. Here‚Äôs a com¬≠plete list:</p><ol><li>Use an <em>arrow func¬≠tion</em> to cre¬≠ate a re¬≠quest han¬≠dler (ES6)</li><li><em>Block-‚Äãscoped vari¬≠ables</em> do not pol¬≠lute your global name¬≠space (ES6)</li><li>Spec¬≠ify a <em>de¬≠fault value</em> for a func¬≠tion pa¬≠ra¬≠me¬≠ter (ES6)</li><li>Use <em>rest pa¬≠ra¬≠me¬≠ters</em> to col¬≠lect mul¬≠ti¬≠ple pa¬≠ra¬≠me¬≠ters in an array (ES6)</li><li><em>Spread</em> the con¬≠tents of an array to func¬≠tion pa¬≠ra¬≠me¬≠ters (ES6)</li><li>It¬≠er¬≠ate over array con¬≠tents using the <em>for‚Ä¶of loop</em> (ES6)</li><li><em>tem¬≠plate strings</em> en¬≠able <em>string in¬≠ter¬≠po¬≠la¬≠tion</em> and <em>multi-‚Äãline strings</em> (ES6)</li><li>Use <em>classes</em> and <em>in¬≠her¬≠i¬≠tance</em> (ES6)</li><li>Use the new <em>ex¬≠po¬≠nen¬≠ti¬≠a¬≠tion op¬≠er¬≠a¬≠tor</em> as a short¬≠cut for <code>Math.pow()</code> (ES7)</li></ol><div>...waiting for Gist...</div><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>The ex¬≠am¬≠ple demon¬≠strates very well how you can use EC¬≠MAScript 6 (and parts of\n7) on the JVM today. In fact, there are a lot more\n<a href=\"http://es6-features.org/\">cool ES6 fea¬≠tures</a> not in¬≠cluded in the ex¬≠am¬≠ple such\nas con¬≠stants (<code>const</code>), the prop¬≠erty short¬≠hand or method prop¬≠er¬≠ties.</p><p>Type¬≠Script is so much more than just ES6. It ac¬≠tu¬≠ally has a\nvery good sta¬≠tic type sys¬≠tem that al¬≠lows you to make compile-‚Äãtime type checks.\nThis is makes it much eas¬≠ier to write large Vert.x ap¬≠pli¬≠ca¬≠tions with many\nver¬≠ti¬≠cles. Per¬≠son¬≠ally I re¬≠ally like the sup¬≠port that I get from my IDE when\npro¬≠gram¬≠ming Type¬≠Script. Since vertx-‚Äãlang-typescript comes with type de¬≠f¬≠i¬≠n¬≠i¬≠tions\nfor the Vert.x JavaScript API I get auto-‚Äãcompletion and ac¬≠cess to the doc¬≠u¬≠men¬≠ta¬≠tion\nright in the ed¬≠i¬≠tor. I mostly use <a href=\"http://www.sublimetext.com/\">Sub¬≠lime</a> by the\nway, but I have tested it suc¬≠cess¬≠fully with\n<a href=\"https://code.visualstudio.com/\">Vi¬≠sual Stu¬≠dio Code</a>, <a href=\"http://www.eclipse.org/\">Eclipse</a>\nand <a href=\"https://atom.io/\">Atom</a>.</p><p>Un¬≠for¬≠tu¬≠nately, the only ES7 fea¬≠ture that you can use at the mo¬≠ment with\nvertx-‚Äãlang-typescript is the <em>ex¬≠po¬≠nen¬≠ti¬≠a¬≠tion op¬≠er¬≠a¬≠tor</em>. Type¬≠Script 1.7 also\nsup¬≠ports <em>dec¬≠o¬≠ra¬≠tors</em> but this fea¬≠ture is dis¬≠abled at the mo¬≠ment in\nvertx-‚Äãlang-typescript be¬≠cause it is ex¬≠per¬≠i¬≠men¬≠tal and sub¬≠ject to change. I‚Äôll\nkeep you up to date when new fea¬≠tures are in¬≠tro¬≠duced.</p><h2 id=\"alternatives\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#alternatives\"></a>Alternatives</h2><p>We‚Äôve re¬≠cently <a href=\"/blog/vert-x-es6-back-to-the-future/\">pub¬≠lished a post</a>\non how to use EC¬≠MAScript 6 with Vert.x here on this blog. We used <a href=\"https://babeljs.io/\">Babel</a>, a\ncom¬≠piler that trans¬≠lates ES6 to ES5.</p><p>Al¬≠though this ap¬≠proach works well it is a bit harder to set up and use than the\none pre¬≠sented here. First, you need to wrap your Vert.x ap¬≠pli¬≠ca¬≠tion in a NPM pack¬≠age.\nSec¬≠ond, in order to run your ap¬≠pli¬≠ca¬≠tion, you need to ex¬≠e¬≠cute two com¬≠mands.\nYou have to com¬≠pile it with <code>npm run build</code> and then then call <code>npm start</code>.\nWith vertx-‚Äãlang-typescript you only need one com¬≠mand. vertx-‚Äãlang-typescript\nalso al¬≠lows you to embed the Type¬≠Script ver¬≠ti¬≠cle in a larger Vert.x ap¬≠pli¬≠ca¬≠tion\nand also mix mul¬≠ti¬≠ple lan¬≠guages in one project. This is not pos¬≠si¬≠ble if you wrap\nevery¬≠thing in a NPM pack¬≠age.</p><p>Fi¬≠nally, the ap¬≠proach based on Babel only sup¬≠ports EC¬≠MAScript 6 (2015), al¬≠though\nmore fea¬≠tures from ES7 will surely be in¬≠tro¬≠duced in Babel in the fu¬≠ture.\nType¬≠Script on the other hand gives you much more fea¬≠tures such as sta¬≠tic\ntyp¬≠ing that you will cer¬≠tainly find use¬≠ful for any larger project.</p>","scope":{}},"tfIdfTerms":[{"term":"typescript","tf":22},{"term":"us","tf":15},{"term":"es6","tf":12},{"term":"ecmascript","tf":11},{"term":"lang","tf":9},{"term":"featur","tf":8},{"term":"type","tf":7},{"term":"support","tf":5},{"term":"javascript","tf":5},{"term":"compil","tf":5},{"term":"verticl","tf":5},{"term":"follow","tf":4},{"term":"exampl","tf":4},{"term":"es7","tf":4},{"term":"new","tf":4},{"term":"will","tf":4},{"term":"paramet","tf":4},{"term":"applic","tf":4},{"term":"good","tf":3},{"term":"jvm","tf":3},{"term":"librari","tf":3},{"term":"part","tf":3},{"term":"execut","tf":3},{"term":"definit","tf":3},{"term":"api","tf":3}]},{"filename":"blog/2015-12-20-automatic-redeployment-in-eclipse-ide.mdx","date":"2015-12-20","slug":"automatic-redeployment-in-eclipse-ide","meta":{"title":"Automatic redeployment in Eclipse IDE","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x 3.1 has (re-)introduced the redeploy feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE."},"readingTime":{"text":"3 min read","minutes":2.035,"time":122100.00000000001,"words":407},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.1 has (re-)in\\xADtro\\xADduced the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy\"), \" fea\\xADture. This blog post ex\\xADplains how to use this fea\\xADture in the Eclipse IDE. How\\xADever, you can eas\\xADily adapt the con\\xADtent to your IDE.\"), mdx(\"h2\", {\n    \"id\": \"how-does-redeploy-work\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#how-does-redeploy-work\"\n  })), \"How does redeploy work\"), mdx(\"p\", null, \"How is im\\xADple\\xADmented the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redeploy\"), \" is not as you may ex\\xADpect. First, the re\\xADde\\xADploy does not rely on a build tool, but is in\\xADte\\xADgrated in vert.x. How\\xADever you can plug your build tools with the re\\xADde\\xADploy fea\\xADture. This fea\\xADture is of\\xADfered by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.Launcher\"), \" class. The re\\xADde\\xADploy\\xADment process is ac\\xADtu\\xADally very sim\\xADple:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"re\\xADde\\xADploy mode\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it lis\\xADtens for file changes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"when a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"match\\xADing\"), \" file is changed, it stops the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it ex\\xADe\\xADcutes the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"on-redeploy\"), \" ac\\xADtions if any\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it restarts the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"back to (2)\")), mdx(\"p\", null, \"Ini\\xADtially the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy mode\"), \". The ap\\xADpli\\xADca\\xADtion is ac\\xADtu\\xADally launched in back\\xADground, in a sep\\xADa\\xADrated process. Vert.x lis\\xADtens for file changes. You give it a set of (Ant-\\u200Bstyle) pat\\xADterns and every time a match\\xADing file changes, Vert.x stops the whole ap\\xADpli\\xADca\\xADtion and restarts it. Op\\xADtion\\xADally you can con\\xADfig\\xADure a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on-redeploy\"), \" ac\\xADtion to plug in your build tools.\"), mdx(\"p\", null, \"To in\\xADte\\xADgrate this process in Eclipse (or in your IDE), you just need to con\\xADfig\\xADure the set of lis\\xADtened files, and let the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Launcher\"), \" class starts and stops your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"redeploy-in-eclipse\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-in-eclipse\"\n  })), \"Redeploy in Eclipse\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing screen\\xADcast ex\\xADplains how you con\\xADfig\\xADure a vert.x ap\\xADpli\\xADca\\xADtion to be run in Eclipse and how to con\\xADfig\\xADure the re\\xADde\\xADploy:\"), mdx(\"div\", {\n    className: \"youtube-embed\"\n  }, mdx(\"iframe\", {\n    src: \"https://www.youtube.com/embed/iyZwAzEVX-o\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"p\", null, \"To sum\\xADma\\xADrize the last con\\xADfig\\xADu\\xADra\\xADtion:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it\\u2019s a Java ap\\xADpli\\xADca\\xADtion con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" as main class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Pro\\xADgram ar\\xADgu\\xADments\"), \" (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ar\\xADgu\\xADments\"), \" tab), write: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run org.acme.verticle.MyMainVerticle --redeploy=\\\"src/**/*.java\\\" --launcher-class=io.vertx.core.Launcher\"))), mdx(\"h2\", {\n    \"id\": \"redeploy-with-your-own-main-class\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-with-your-own-main-class\"\n  })), \"Redeploy with your own Main class\"), mdx(\"p\", null, \"Let\\u2019s now imag\\xADine that you have your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, start\\xADing your ap\\xADpli\\xADca\\xADtion. For in\\xADstance, it can be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" org.acme.vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Main\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"main\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String[] args)\"), \" \"), \"{\\n        Vertx vertx = Vertx.vertx();\\n        vertx.deployVerticle(MyMainVerticle.class.getName());\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"The re\\xADde\\xADploy fea\\xADture from vert.x lets you use your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Cre\\xADate an\\xADother \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run\"), \" con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Main-Class\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" (yes, the one from vert.x not yours)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the ap\\xADpli\\xADca\\xADtion pa\\xADra\\xADme\\xADter add: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run --redeploy=\\\"src/**/*.java\\\" --launcher-class=org.acme.vertx.Main\"))), mdx(\"p\", null, \"With this con\\xADfig\\xADu\\xADra\\xADtion, the ap\\xADpli\\xADca\\xADtion is launched in back\\xADground using your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, and will restart the ap\\xADpli\\xADca\\xADtion every time you change your source code (you can even change the source code of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class).\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.1 has (re-)in¬≠tro¬≠duced the <em>re¬≠de¬≠ploy</em> fea¬≠ture. This blog post ex¬≠plains how to use this fea¬≠ture in the Eclipse IDE. How¬≠ever, you can eas¬≠ily adapt the con¬≠tent to your IDE.</p><h2 id=\"how-does-redeploy-work\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#how-does-redeploy-work\"></a>How does redeploy work</h2><p>How is im¬≠ple¬≠mented the <code>redeploy</code> is not as you may ex¬≠pect. First, the re¬≠de¬≠ploy does not rely on a build tool, but is in¬≠te¬≠grated in vert.x. How¬≠ever you can plug your build tools with the re¬≠de¬≠ploy fea¬≠ture. This fea¬≠ture is of¬≠fered by the <code>io.vertx.core.Launcher</code> class. The re¬≠de¬≠ploy¬≠ment process is ac¬≠tu¬≠ally very sim¬≠ple:</p><ol><li>the ap¬≠pli¬≠ca¬≠tion is launched in <em>re¬≠de¬≠ploy mode</em>.</li><li>it lis¬≠tens for file changes</li><li>when a <em>match¬≠ing</em> file is changed, it stops the ap¬≠pli¬≠ca¬≠tion</li><li>it ex¬≠e¬≠cutes the <code>on-redeploy</code> ac¬≠tions if any</li><li>it restarts the ap¬≠pli¬≠ca¬≠tion</li><li>back to (2)</li></ol><p>Ini¬≠tially the ap¬≠pli¬≠ca¬≠tion is launched in <em>re¬≠de¬≠ploy mode</em>. The ap¬≠pli¬≠ca¬≠tion is ac¬≠tu¬≠ally launched in back¬≠ground, in a sep¬≠a¬≠rated process. Vert.x lis¬≠tens for file changes. You give it a set of (Ant-‚Äãstyle) pat¬≠terns and every time a match¬≠ing file changes, Vert.x stops the whole ap¬≠pli¬≠ca¬≠tion and restarts it. Op¬≠tion¬≠ally you can con¬≠fig¬≠ure a <code>on-redeploy</code> ac¬≠tion to plug in your build tools.</p><p>To in¬≠te¬≠grate this process in Eclipse (or in your IDE), you just need to con¬≠fig¬≠ure the set of lis¬≠tened files, and let the <code>Launcher</code> class starts and stops your ap¬≠pli¬≠ca¬≠tion.</p><h2 id=\"redeploy-in-eclipse\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-in-eclipse\"></a>Redeploy in Eclipse</h2><p>The fol¬≠low¬≠ing screen¬≠cast ex¬≠plains how you con¬≠fig¬≠ure a vert.x ap¬≠pli¬≠ca¬≠tion to be run in Eclipse and how to con¬≠fig¬≠ure the re¬≠de¬≠ploy:</p><div class=\"youtube-embed\"><iframe src=\"https://www.youtube.com/embed/iyZwAzEVX-o\" frameBorder=\"0\" allowfullscreen=\"\"></iframe></div><p>To sum¬≠ma¬≠rize the last con¬≠fig¬≠u¬≠ra¬≠tion:</p><ul><li>it‚Äôs a Java ap¬≠pli¬≠ca¬≠tion con¬≠fig¬≠u¬≠ra¬≠tion</li><li>it uses <code>io.vertx.core.Launcher</code> as main class</li><li>In the <em>Pro¬≠gram ar¬≠gu¬≠ments</em> (<em>Ar¬≠gu¬≠ments</em> tab), write: <code>run org.acme.verticle.MyMainVerticle --redeploy=&quot;src/**/*.java&quot; --launcher-class=io.vertx.core.Launcher</code></li></ul><h2 id=\"redeploy-with-your-own-main-class\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-with-your-own-main-class\"></a>Redeploy with your own Main class</h2><p>Let‚Äôs now imag¬≠ine that you have your own <code>Main</code> class, start¬≠ing your ap¬≠pli¬≠ca¬≠tion. For in¬≠stance, it can be some¬≠thing like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> org.acme.vertx;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Vertx;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Vertx vertx = Vertx.vertx();\n        vertx.deployVerticle(MyMainVerticle.class.getName());\n    }\n\n}\n</code></pre><p>The re¬≠de¬≠ploy fea¬≠ture from vert.x lets you use your own <code>Main</code> class:</p><ol><li>Cre¬≠ate an¬≠other <code>Run</code> con¬≠fig¬≠u¬≠ra¬≠tion</li><li>Set the <code>Main-Class</code> to <code>io.vertx.core.Launcher</code> (yes, the one from vert.x not yours)</li><li>In the ap¬≠pli¬≠ca¬≠tion pa¬≠ra¬≠me¬≠ter add: <code>run --redeploy=&quot;src/**/*.java&quot; --launcher-class=org.acme.vertx.Main</code></li></ol><p>With this con¬≠fig¬≠u¬≠ra¬≠tion, the ap¬≠pli¬≠ca¬≠tion is launched in back¬≠ground using your own <code>Main</code> class, and will restart the ap¬≠pli¬≠ca¬≠tion every time you change your source code (you can even change the source code of your <code>Main</code> class).</p>","scope":{}},"tfIdfTerms":[{"term":"applic","tf":13},{"term":"redeploi","tf":10},{"term":"class","tf":8},{"term":"configur","tf":8},{"term":"chang","tf":6},{"term":"featur","tf":5},{"term":"file","tf":5},{"term":"us","tf":4},{"term":"launch","tf":4},{"term":"id","tf":3},{"term":"not","tf":3},{"term":"build","tf":3},{"term":"tool","tf":3},{"term":"process","tf":3},{"term":"listen","tf":3},{"term":"stop","tf":3},{"term":"restart","tf":3},{"term":"set","tf":3},{"term":"let","tf":3},{"term":"explain","tf":2},{"term":"howev","tf":2},{"term":"integr","tf":2},{"term":"plug","tf":2},{"term":"actual","tf":2},{"term":"mode","tf":2}]},{"filename":"blog/2015-11-30-combine-vert-x-and-mongo-to-build-a-giant.mdx","date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant","meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"readingTime":{"text":"10 min read","minutes":9.07,"time":544200,"words":1814},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This blog post is part of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in\\xADtro\\xADduc\\xADtion to vert.x\"), \" se\\xADries. Last time, we have seen how we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-jdbc-client\"), \" to con\\xADnect to a data\\xADbase using a JDBC dri\\xADver. In this post, we are going to re\\xADplace this JDBC client by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-mongo-client\"), \", and thus con\\xADnect to a Mongo data\\xADbase.\"), mdx(\"p\", null, \"You don\\u2019t un\\xADder\\xADstand the title, check the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mongodb.org\"\n  }), \"mon\\xADgoDB\"), \" web\\xADsite.\"), mdx(\"p\", null, \"But be\\xADfore going fur\\xADther, let\\u2019s recap.\"), mdx(\"h2\", {\n    \"id\": \"previously-in--introduction-to-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#previously-in--introduction-to-vertx\"\n  })), \"Previously in  \\u2018introduction to vert.x\\u2019\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"first post\")), \" has de\\xADscribed how to build a vert.x ap\\xADpli\\xADca\\xADtion with Maven and ex\\xADe\\xADcute unit tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-application-configuration/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"sec\\xADond post\")), \" has de\\xADscribed how this ap\\xADpli\\xADca\\xADtion can be\\xADcome con\\xADfig\\xADurable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"third post\")), \" has in\\xADtro\\xADduced \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/\"\n  }), \"vertx-\\u200Bweb\"), \", and a small col\\xADlec\\xADtion man\\xADage\\xADment ap\\xADpli\\xADca\\xADtion has been de\\xADvel\\xADoped. This ap\\xADpli\\xADca\\xADtion of\\xADfers a REST API used by a HTML/JavaScript fron\\xADtend.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/unit-and-integration-tests/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"fourth post\")), \" has pre\\xADsented how you can run in\\xADte\\xADgra\\xADtion tests to en\\xADsure the be\\xADhav\\xADior of your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/using-the-asynchronous-sql-client/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"last post\")), \" has pre\\xADsented how you can in\\xADter\\xADact with a JDBC data\\xADbase using the vertx-\\u200Bjdbc-client.\")), mdx(\"p\", null, \"This post shows an\\xADother client that lets you use Mon\\xADgoDB in a vert.x ap\\xADpli\\xADca\\xADtion. This client pro\\xADvides an vert.x API to ac\\xADcess asyn\\xADchro\\xADnously to the Mongo data\\xADbase. We won\\u2019t com\\xADpare whether or not JDBC is su\\xADpe\\xADrior to Mongo, they have both pros and cons, and you should use the one that meet your re\\xADquire\\xADments. Vert.x lets you choose, that\\u2019s the point.\"), mdx(\"p\", null, \"The vertx-\\u200Bmongo-client doc\\xADu\\xADmen\\xADta\\xADtion is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-mongo-client/java/\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"The code de\\xADvel\\xADoped in this blog post is avail\\xADable in the branch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-6\"\n  }), \"post-6\"), \". Our start\\xADing point is the code from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\"\n  }), \"post-5 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"asynchronous-data-access\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#asynchronous-data-access\"\n  })), \"Asynchronous data access\"), mdx(\"p\", null, \"One of the vert.x char\\xADac\\xADter\\xADis\\xADtics is being asyn\\xADchro\\xADnous. With an asyn\\xADchro\\xADnous API, you don\\u2019t wait for a re\\xADsult, but you are no\\xADti\\xADfied when this re\\xADsult is ready. Thanks to vert.x, this no\\xADti\\xADfi\\xADca\\xADtion hap\\xADpens in the same thread (un\\xADder\\xADstand event loop) as the ini\\xADtial re\\xADquest:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/intro-series/async-data.png\",\n    \"alt\": \"Asynchronous data access\"\n  }))), mdx(\"p\", null, \"Your code (on the left) is going to in\\xADvoke the mongo client and pass a call\\xADback that will be in\\xADvoked when the re\\xADsult is avail\\xADable. The in\\xADvo\\xADca\\xADtion to the mongo client is non block\\xADing and re\\xADturns im\\xADme\\xADdi\\xADately. The client is deal\\xADing with the mongo data\\xADbase and when the re\\xADsult has been com\\xADputed / re\\xADtrieved, it in\\xADvokes the call\\xADback in the same event loop as the re\\xADquest.\"), mdx(\"p\", null, \"This model is par\\xADtic\\xADu\\xADlarly pow\\xADer\\xADful as it avoids the syn\\xADchro\\xADniza\\xADtion pit\\xADfalls. In\\xADdeed, your code is only called by a sin\\xADgle thread, no need to syn\\xADchro\\xADnize any\\xADthing.\"), mdx(\"h2\", {\n    \"id\": \"as-with-every-maven-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#as-with-every-maven-project\"\n  })), \"As with every Maven project\\u2026\"), mdx(\"p\", null, \"\\u2026 we need to up\\xADdate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file first.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, re\\xADplace the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-jdbc-client\"), \" by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-mongo-client\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-mongo-client\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Un\\xADlike JDBC where we were in\\xADstan\\xADti\\xADat\\xADing a data\\xADbase on the fly, here we need to ex\\xADplic\\xADitly starts a Mon\\xADgoDB server. In order to launch a Mongo server in our test, we are going to add an\\xADother de\\xADpen\\xADdency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"de.flapdoodle.embed\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"de.flapdoodle.embed.mongo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.50.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"This de\\xADpen\\xADdency will be used in our unit tests, as it lets us start a mongo server pro\\xADgram\\xADmat\\xADi\\xADcally. For our in\\xADte\\xADgra\\xADtion tests, we are going to use a Maven plug\\xADin start\\xADing and stop\\xADping the mongo server be\\xADfore and after our in\\xADte\\xADgra\\xADtion tests. Add this plug\\xADin to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<plugins/>\"), \" sec\\xADtion of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"com.github.joelittlejohn.embedmongo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"embedmongo-maven-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"0.2.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"start\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"start\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"port\"), \">\"), \"37017\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"port\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"stop\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"stop\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"No\\xADtice the port we use here (37017), we will use this port later.\"), mdx(\"h2\", {\n    \"id\": \"enough-xml-for-today\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#enough-xml-for-today\"\n  })), \"Enough XML for today\"), mdx(\"p\", null, \"Now that we have up\\xADdated our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, it\\u2019s time to change our ver\\xADti\\xADcle. The first thing to do is to re\\xADplace the jdbc client by the mongo client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"mongo = MongoClient.createShared(vertx, config());\\n\")), mdx(\"p\", null, \"This client is con\\xADfig\\xADured with the con\\xADfig\\xADu\\xADra\\xADtion given to the ver\\xADti\\xADcle (more on this below).\"), mdx(\"p\", null, \"Once done, we need to change how we start the ap\\xADpli\\xADca\\xADtion. With the mongo client, no need to ac\\xADquire a con\\xADnec\\xADtion, it han\\xADdles this in\\xADter\\xADnally. So our startup se\\xADquence is a bit more sim\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"createSomeData(\\n    (nothing) -> startWebApp(\\n        (http) -> completeStartup(http, fut)\\n    ), fut);\\n\")), mdx(\"p\", null, \"As in the pre\\xADvi\\xADous post, we need to in\\xADsert some pre\\xADde\\xADfined data if the data\\xADbase is empty:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createSomeData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Handler<AsyncResult<Void>> next, Future<Void> fut)\"), \" \"), \"{\\n  Whisky bowmore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \");\\n  Whisky talisker = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \");\\n  System.out.println(bowmore.toJson());\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Do we have data in the collection ?\"), \"\\n  mongo.count(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(), count -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (count.succeeded()) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (count.result() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \") {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// no whiskies, insert data\"), \"\\n        mongo.insert(COLLECTION, bowmore.toJson(), ar -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n            fut.fail(ar.cause());\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            mongo.insert(COLLECTION, talisker.toJson(), ar2 -> {\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar2.failed()) {\\n                fut.failed();\\n              } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                next.handle(Future.<Void>succeededFuture());\\n              }\\n            });\\n          }\\n        });\\n      } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        next.handle(Future.<Void>succeededFuture());\\n      }\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// report the error\"), \"\\n      fut.fail(count.cause());\\n    }\\n  });\\n}\\n\")), mdx(\"p\", null, \"To de\\xADtect whether or not the data\\xADbase al\\xADready con\\xADtains some data, we re\\xADtrieve the num\\xADber of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"doc\\xADu\\xADments\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"whiskies\"), \" col\\xADlec\\xADtion. This is done with : \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.count(COLLECTION, new JsonObject(), count -> {})\"), \". The sec\\xADond pa\\xADra\\xADme\\xADter is the query. In our case, we want to count all doc\\xADu\\xADments. This is done using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new JsonObject()\"), \" that would cre\\xADate a query ac\\xADcept\\xADing all doc\\xADu\\xADments from the col\\xADlec\\xADtion (it\\u2019s equiv\\xADa\\xADlent to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT * FROM ...\"), \").\"), mdx(\"p\", null, \"Also no\\xADtice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" calls. Doc\\xADu\\xADments are passed as JSON ob\\xADject, so to in\\xADsert an ob\\xADject, just se\\xADri\\xADal\\xADize it to JSON and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.insert(COLLECTION, json, completion handler)\"), \".\"), mdx(\"h2\", {\n    \"id\": \"mongo-ize-the-rest-handlers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#mongo-ize-the-rest-handlers\"\n  })), \"Mongo-ize the REST handlers\"), mdx(\"p\", null, \"Now that the ap\\xADpli\\xADca\\xADtion boot se\\xADquence has been mi\\xADgrated to mongo, it\\u2019s time to up\\xADdate the code han\\xADdling the REST re\\xADquests.\"), mdx(\"p\", null, \"Let\\u2019s start by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \" method that re\\xADturns all stored prod\\xADucts. To im\\xADple\\xADment this, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"find\"), \" method. As we saw for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" method, we pass an empty json ob\\xADject to de\\xADscribe a query ac\\xADcept\\xADing all doc\\xADu\\xADments:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getAll\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  mongo.find(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(), results -> {\\n    List<JsonObject> objects = results.result();\\n    List<Whisky> whiskies = objects.stream().map(Whisky::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \").collect(Collectors.toList());\\n    routingContext.response()\\n        .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n        .end(Json.encodePrettily(whiskies));\\n  });\\n}\\n\")), mdx(\"p\", null, \"The query re\\xADsults are passed as a list of JSON ob\\xADjects. From this list we can cre\\xADate our prod\\xADuct in\\xADstances, and fill the HTTP re\\xADsponse with this set.\"), mdx(\"p\", null, \"To delete a spe\\xADcific doc\\xADu\\xADment we need to se\\xADlect the doc\\xADu\\xADment using its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"deleteOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  String id = routingContext.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (id == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    mongo.removeOne(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"_id\\\"\"), \", id),\\n        ar -> routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"204\"), \").end());\\n  }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new JsonObject().put(\\\"_id\\\", id)\"), \" de\\xADscribes a query se\\xADlect\\xADing a sin\\xADgle doc\\xADu\\xADment (se\\xADlected by its unique \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \", so it\\u2019s the equiv\\xADa\\xADlent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT * WHERE id=...\"), \"). No\\xADtice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" which is a mongo trick to se\\xADlect a doc\\xADu\\xADment by id.\"), mdx(\"p\", null, \"Up\\xADdat\\xADing a doc\\xADu\\xADment is a less triv\\xADial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"updateOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String id = routingContext.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n  JsonObject json = routingContext.getBodyAsJson();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (id == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" || json == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    mongo.update(COLLECTION,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"_id\\\"\"), \", id), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Select a unique document\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The update syntax: {$set, the json object containing the fields to update}\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"$set\\\"\"), \", json),\\n        v -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (v.failed()) {\\n            routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"404\"), \").end();\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            routingContext.response()\\n                .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n                .end(Json.encodePrettily(\\n                  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(id, json.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \"),\\n                    json.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin\\\"\"), \"))));\\n          }\\n        });\\n  }\\n}\\n\")), mdx(\"p\", null, \"As we can see, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update\"), \" method takes two JSON ob\\xADjects as pa\\xADra\\xADme\\xADter:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The first one de\\xADnotes the query (here we se\\xADlect a sin\\xADgle doc\\xADu\\xADment using its id).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The sec\\xADond ob\\xADject ex\\xADpresses the change to apply to the se\\xADlected doc\\xADu\\xADment. It uses a mongo syn\\xADtax. In our case, we up\\xADdate the doc\\xADu\\xADment using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$set\"), \" op\\xADer\\xADa\\xADtor.\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"In this code we up\\xADdate the doc\\xADu\\xADment and re\\xADplace only a set of fields. You can also re\\xADplace the whole doc\\xADu\\xADment using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.replace(...)\"), \".\")), mdx(\"p\", null, \"I def\\xADi\\xADnitely rec\\xADom\\xADmend to have a look to the Mon\\xADgoDB doc\\xADu\\xADmen\\xADta\\xADtion, es\\xADpe\\xADcially:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.mongodb.org/manual/tutorial/query-documents/\",\n    \"title\": \"MongoDB Query Documentation\"\n  }), \"Query syn\\xADtax doc\\xADu\\xADmen\\xADta\\xADtion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.mongodb.org/manual/tutorial/modify-documents/\",\n    \"title\": \"MongoDB Update Documentation\"\n  }), \"Up\\xADdate syn\\xADtax doc\\xADu\\xADmen\\xADta\\xADtion\"))), mdx(\"h2\", {\n    \"id\": \"time-for-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#time-for-configuration\"\n  })), \"Time for configuration\"), mdx(\"p\", null, \"Well, the code is mi\\xADgrated, but we still need to up\\xADdate the con\\xADfig\\xADu\\xADra\\xADtion. With JDBC we passed the JDBC url and the dri\\xADver class in the con\\xADfig\\xADu\\xADra\\xADtion. With mongo, we need to con\\xADfig\\xADure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connection_string\"), \" - the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo://\"), \" url on which the ap\\xADpli\\xADca\\xADtion is con\\xADnected, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db_name\"), \" - a name for the data source.\"), mdx(\"p\", null, \"Let\\u2019s start by the unit test. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVerticleTest\"), \" file and add the fol\\xADlow\\xADing code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" MongodProcess MONGO;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" MONGO_PORT = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"12345\"), \";\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@BeforeClass\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"initialize\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throws\"), \" IOException \"), \"{\\n  MongodStarter starter = MongodStarter.getDefaultInstance();\\n  IMongodConfig mongodConfig = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MongodConfigBuilder()\\n      .version(Version.Main.PRODUCTION)\\n      .net(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Net(MONGO_PORT, Network.localhostIsIPv6()))\\n      .build();\\n  MongodExecutable mongodExecutable =\\n      starter.prepare(mongodConfig);\\n  MONGO = mongodExecutable.start();\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@AfterClass\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"shutdown\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{  MONGO.stop(); }\\n\")), mdx(\"p\", null, \"Be\\xADfore our tests, we start (pro\\xADgram\\xADmat\\xADi\\xADcally) a mongo data\\xADbase on the port 12345. When all our tests have been ex\\xADe\\xADcuted, we shut\\xADdown the data\\xADbase.\"), mdx(\"p\", null, \"So now that the mongo server is man\\xADaged, we need to to give the right con\\xADfig\\xADu\\xADra\\xADtion to our ver\\xADti\\xADcle. Up\\xADdate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOption\"), \" in\\xADstance with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"DeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port)\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"db_name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies-test\\\"\"), \")\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connection_string\\\"\"), \",\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:\\\"\"), \" + MONGO_PORT)\\n);\\n\")), mdx(\"p\", null, \"That\\u2019s all for the unit tests.\"), mdx(\"p\", null, \"For the integration-\\u200Btest, we are using an ex\\xADter\\xADnal\\xADized json file. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/my-it-config.json\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": ${http.port},\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"db_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies-it\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"connection_string\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:37017\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"No\\xADtice the port we are using for the mongo server. This port was con\\xADfig\\xADured in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file.\"), mdx(\"p\", null, \"Last but not least, we still have a con\\xADfig\\xADu\\xADra\\xADtion file to edit: the con\\xADfig\\xADu\\xADra\\xADtion you use to launch the ap\\xADpli\\xADca\\xADtion in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"production\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"db_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"connection_string\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:27017\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"Here you would need to edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:27017\"), \" with the right url for your mongo server.\"), mdx(Alert, {\n    info: true,\n    title: \"Some changes in the integration tests\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Be\\xADcause mongo doc\\xADu\\xADment id are String and not in\\xADte\\xADger, we have to slightly change doc\\xADu\\xADment se\\xADlec\\xADtion in the in\\xADte\\xADgra\\xADtion test.\")), mdx(\"h2\", {\n    \"id\": \"time-for-a-run\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#time-for-a-run\"\n  })), \"Time for a run\"), mdx(\"p\", null, \"It\\u2019s time to pack\\xADage and run the ap\\xADpli\\xADca\\xADtion and check that every\\xADthing works as ex\\xADpected. Let\\u2019s pack\\xADage the ap\\xADpli\\xADca\\xADtion using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"mvn clean verify\\n\")), mdx(\"p\", null, \"And then to launch it, start your mongo server and launch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf.json\\n\")), mdx(\"p\", null, \"If you are, like me, using docker / docker-\\u200Bmachine for al\\xADmost every\\xADthing, edit the con\\xADfig\\xADu\\xADra\\xADtion file to refer to the right host (lo\\xADcal\\xADhost for docker, the docker-\\u200Bmachine ip if you use docker-\\u200Bmachine) and then launch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"docker run -d -p 27017:27017 mongo\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf.json\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# or\"), \"\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf-docker-machine.json\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/intro-series/whisky-mongo.png\",\n    \"alt\": \"The application live and running\"\n  }))), mdx(\"h2\", {\n    \"id\": \"thats-all-folks\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#thats-all-folks\"\n  })), \"That\\u2019s all folks!\"), mdx(\"p\", null, \"We are reach\\xADing the end of this post. We saw how you can use the vert-\\u200Bmongo-client to ac\\xADcess asyn\\xADchro\\xADnously data stored in\\xADside a mongo data\\xADbase as well as in\\xADsert\\xADing/up\\xADdat\\xADing this data. Now you have the choice be\\xADtween JDBC or Mongo. In ad\\xADdi\\xADtion, vert.x pro\\xADvides a client for Redis.\"), mdx(\"p\", null, \"Next time, we will see how the ver\\xADti\\xADcle class can be split in two ver\\xADti\\xADcles in order to bet\\xADter or\\xADga\\xADnize your code. The in\\xADter\\xADac\\xADtion be\\xADtween the two ver\\xADti\\xADcles will uses \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ser\\xADvices\"), \".\"), mdx(\"p\", null, \"Stay tuned & Happy cod\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This blog post is part of the <em>in¬≠tro¬≠duc¬≠tion to vert.x</em> se¬≠ries. Last time, we have seen how we can use the <code>vertx-jdbc-client</code> to con¬≠nect to a data¬≠base using a JDBC dri¬≠ver. In this post, we are going to re¬≠place this JDBC client by the <code>vertx-mongo-client</code>, and thus con¬≠nect to a Mongo data¬≠base.</p><p>You don‚Äôt un¬≠der¬≠stand the title, check the <a href=\"https://www.mongodb.org\">mon¬≠goDB</a> web¬≠site.</p><p>But be¬≠fore going fur¬≠ther, let‚Äôs recap.</p><h2 id=\"previously-in--introduction-to-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#previously-in--introduction-to-vertx\"></a>Previously in  ‚Äòintroduction to vert.x‚Äô</h2><ol><li>The <a href=\"/blog/my-first-vert-x-3-application/\">first post</a> has de¬≠scribed how to build a vert.x ap¬≠pli¬≠ca¬≠tion with Maven and ex¬≠e¬≠cute unit tests.</li><li>The <a href=\"/blog/vert-x-application-configuration/\">sec¬≠ond post</a> has de¬≠scribed how this ap¬≠pli¬≠ca¬≠tion can be¬≠come con¬≠fig¬≠urable.</li><li>The <a href=\"/blog/some-rest-with-vert-x/\">third post</a> has in¬≠tro¬≠duced <a href=\"http://vertx.io/docs/vertx-web/java/\">vertx-‚Äãweb</a>, and a small col¬≠lec¬≠tion man¬≠age¬≠ment ap¬≠pli¬≠ca¬≠tion has been de¬≠vel¬≠oped. This ap¬≠pli¬≠ca¬≠tion of¬≠fers a REST API used by a HTML/JavaScript fron¬≠tend.</li><li>The <a href=\"/blog/unit-and-integration-tests/\">fourth post</a> has pre¬≠sented how you can run in¬≠te¬≠gra¬≠tion tests to en¬≠sure the be¬≠hav¬≠ior of your ap¬≠pli¬≠ca¬≠tion.</li><li>The <a href=\"/blog/using-the-asynchronous-sql-client/\">last post</a> has pre¬≠sented how you can in¬≠ter¬≠act with a JDBC data¬≠base using the vertx-‚Äãjdbc-client.</li></ol><p>This post shows an¬≠other client that lets you use Mon¬≠goDB in a vert.x ap¬≠pli¬≠ca¬≠tion. This client pro¬≠vides an vert.x API to ac¬≠cess asyn¬≠chro¬≠nously to the Mongo data¬≠base. We won‚Äôt com¬≠pare whether or not JDBC is su¬≠pe¬≠rior to Mongo, they have both pros and cons, and you should use the one that meet your re¬≠quire¬≠ments. Vert.x lets you choose, that‚Äôs the point.</p><p>The vertx-‚Äãmongo-client doc¬≠u¬≠men¬≠ta¬≠tion is avail¬≠able <a href=\"http://vertx.io/docs/vertx-mongo-client/java/\">here</a>.</p><p>The code de¬≠vel¬≠oped in this blog post is avail¬≠able in the branch <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-6\">post-6</a>. Our start¬≠ing point is the code from the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\">post-5 branch</a>.</p><h2 id=\"asynchronous-data-access\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#asynchronous-data-access\"></a>Asynchronous data access</h2><p>One of the vert.x char¬≠ac¬≠ter¬≠is¬≠tics is being asyn¬≠chro¬≠nous. With an asyn¬≠chro¬≠nous API, you don‚Äôt wait for a re¬≠sult, but you are no¬≠ti¬≠fied when this re¬≠sult is ready. Thanks to vert.x, this no¬≠ti¬≠fi¬≠ca¬≠tion hap¬≠pens in the same thread (un¬≠der¬≠stand event loop) as the ini¬≠tial re¬≠quest:</p><p><img src=\"/images/blog/intro-series/async-data.png\" alt=\"Asynchronous data access\"/></p><p>Your code (on the left) is going to in¬≠voke the mongo client and pass a call¬≠back that will be in¬≠voked when the re¬≠sult is avail¬≠able. The in¬≠vo¬≠ca¬≠tion to the mongo client is non block¬≠ing and re¬≠turns im¬≠me¬≠di¬≠ately. The client is deal¬≠ing with the mongo data¬≠base and when the re¬≠sult has been com¬≠puted / re¬≠trieved, it in¬≠vokes the call¬≠back in the same event loop as the re¬≠quest.</p><p>This model is par¬≠tic¬≠u¬≠larly pow¬≠er¬≠ful as it avoids the syn¬≠chro¬≠niza¬≠tion pit¬≠falls. In¬≠deed, your code is only called by a sin¬≠gle thread, no need to syn¬≠chro¬≠nize any¬≠thing.</p><h2 id=\"as-with-every-maven-project\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#as-with-every-maven-project\"></a>As with every Maven project‚Ä¶</h2><p>‚Ä¶ we need to up¬≠date the <code>pom.xml</code> file first.</p><p>In the <code>pom.xml</code> file, re¬≠place the <code>vertx-jdbc-client</code> by the <code>vertx-mongo-client</code>:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mongo-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Un¬≠like JDBC where we were in¬≠stan¬≠ti¬≠at¬≠ing a data¬≠base on the fly, here we need to ex¬≠plic¬≠itly starts a Mon¬≠goDB server. In order to launch a Mongo server in our test, we are going to add an¬≠other de¬≠pen¬≠dency:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>de.flapdoodle.embed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.50.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>This de¬≠pen¬≠dency will be used in our unit tests, as it lets us start a mongo server pro¬≠gram¬≠mat¬≠i¬≠cally. For our in¬≠te¬≠gra¬≠tion tests, we are going to use a Maven plug¬≠in start¬≠ing and stop¬≠ping the mongo server be¬≠fore and after our in¬≠te¬≠gra¬≠tion tests. Add this plug¬≠in to the <code>&lt;plugins/&gt;</code> sec¬≠tion of your <code>pom.xml</code> file.</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.joelittlejohn.embedmongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>embedmongo-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span>37017<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">port</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>stop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>stop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>No¬≠tice the port we use here (37017), we will use this port later.</p><h2 id=\"enough-xml-for-today\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#enough-xml-for-today\"></a>Enough XML for today</h2><p>Now that we have up¬≠dated our <code>pom.xml</code> file, it‚Äôs time to change our ver¬≠ti¬≠cle. The first thing to do is to re¬≠place the jdbc client by the mongo client:</p><pre><code class=\"hljs language-java\">mongo = MongoClient.createShared(vertx, config());\n</code></pre><p>This client is con¬≠fig¬≠ured with the con¬≠fig¬≠u¬≠ra¬≠tion given to the ver¬≠ti¬≠cle (more on this below).</p><p>Once done, we need to change how we start the ap¬≠pli¬≠ca¬≠tion. With the mongo client, no need to ac¬≠quire a con¬≠nec¬≠tion, it han¬≠dles this in¬≠ter¬≠nally. So our startup se¬≠quence is a bit more sim¬≠ple:</p><pre><code class=\"hljs language-java\">createSomeData(\n    (nothing) -&gt; startWebApp(\n        (http) -&gt; completeStartup(http, fut)\n    ), fut);\n</code></pre><p>As in the pre¬≠vi¬≠ous post, we need to in¬≠sert some pre¬≠de¬≠fined data if the data¬≠base is empty:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createSomeData</span><span class=\"hljs-params\">(Handler&lt;AsyncResult&lt;Void&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n  Whisky bowmore = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>);\n  Whisky talisker = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Talisker 57¬∞ North&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>);\n  System.out.println(bowmore.toJson());\n  <span class=\"hljs-comment\">// Do we have data in the collection ?</span>\n  mongo.count(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject(), count -&gt; {\n    <span class=\"hljs-keyword\">if</span> (count.succeeded()) {\n      <span class=\"hljs-keyword\">if</span> (count.result() == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// no whiskies, insert data</span>\n        mongo.insert(COLLECTION, bowmore.toJson(), ar -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n            fut.fail(ar.cause());\n          } <span class=\"hljs-keyword\">else</span> {\n            mongo.insert(COLLECTION, talisker.toJson(), ar2 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar2.failed()) {\n                fut.failed();\n              } <span class=\"hljs-keyword\">else</span> {\n                next.handle(Future.&lt;Void&gt;succeededFuture());\n              }\n            });\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        next.handle(Future.&lt;Void&gt;succeededFuture());\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// report the error</span>\n      fut.fail(count.cause());\n    }\n  });\n}\n</code></pre><p>To de¬≠tect whether or not the data¬≠base al¬≠ready con¬≠tains some data, we re¬≠trieve the num¬≠ber of <em>doc¬≠u¬≠ments</em> from the <code>whiskies</code> col¬≠lec¬≠tion. This is done with : <code>mongo.count(COLLECTION, new JsonObject(), count -&gt; {})</code>. The sec¬≠ond pa¬≠ra¬≠me¬≠ter is the query. In our case, we want to count all doc¬≠u¬≠ments. This is done using <code>new JsonObject()</code> that would cre¬≠ate a query ac¬≠cept¬≠ing all doc¬≠u¬≠ments from the col¬≠lec¬≠tion (it‚Äôs equiv¬≠a¬≠lent to a <code>SELECT * FROM ...</code>).</p><p>Also no¬≠tice the <code>insert</code> calls. Doc¬≠u¬≠ments are passed as JSON ob¬≠ject, so to in¬≠sert an ob¬≠ject, just se¬≠ri¬≠al¬≠ize it to JSON and use <code>mongo.insert(COLLECTION, json, completion handler)</code>.</p><h2 id=\"mongo-ize-the-rest-handlers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#mongo-ize-the-rest-handlers\"></a>Mongo-ize the REST handlers</h2><p>Now that the ap¬≠pli¬≠ca¬≠tion boot se¬≠quence has been mi¬≠grated to mongo, it‚Äôs time to up¬≠date the code han¬≠dling the REST re¬≠quests.</p><p>Let‚Äôs start by the <code>getAll</code> method that re¬≠turns all stored prod¬≠ucts. To im¬≠ple¬≠ment this, we use the <code>find</code> method. As we saw for the <code>count</code> method, we pass an empty json ob¬≠ject to de¬≠scribe a query ac¬≠cept¬≠ing all doc¬≠u¬≠ments:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  mongo.find(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject(), results -&gt; {\n    List&lt;JsonObject&gt; objects = results.result();\n    List&lt;Whisky&gt; whiskies = objects.stream().map(Whisky::<span class=\"hljs-keyword\">new</span>).collect(Collectors.toList());\n    routingContext.response()\n        .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n        .end(Json.encodePrettily(whiskies));\n  });\n}\n</code></pre><p>The query re¬≠sults are passed as a list of JSON ob¬≠jects. From this list we can cre¬≠ate our prod¬≠uct in¬≠stances, and fill the HTTP re¬≠sponse with this set.</p><p>To delete a spe¬≠cific doc¬≠u¬≠ment we need to se¬≠lect the doc¬≠u¬≠ment using its <code>id</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  String id = routingContext.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span>) {\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).end();\n  } <span class=\"hljs-keyword\">else</span> {\n    mongo.removeOne(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;_id&quot;</span>, id),\n        ar -&gt; routingContext.response().setStatusCode(<span class=\"hljs-number\">204</span>).end());\n  }\n}\n</code></pre><p>The <code>new JsonObject().put(&quot;_id&quot;, id)</code> de¬≠scribes a query se¬≠lect¬≠ing a sin¬≠gle doc¬≠u¬≠ment (se¬≠lected by its unique <code>id</code>, so it‚Äôs the equiv¬≠a¬≠lent to <code>SELECT * WHERE id=...</code>). No¬≠tice the <code>_id</code> which is a mongo trick to se¬≠lect a doc¬≠u¬≠ment by id.</p><p>Up¬≠dat¬≠ing a doc¬≠u¬≠ment is a less triv¬≠ial:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  <span class=\"hljs-keyword\">final</span> String id = routingContext.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  JsonObject json = routingContext.getBodyAsJson();\n  <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span> || json == <span class=\"hljs-keyword\">null</span>) {\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).end();\n  } <span class=\"hljs-keyword\">else</span> {\n    mongo.update(COLLECTION,\n        <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;_id&quot;</span>, id), <span class=\"hljs-comment\">// Select a unique document</span>\n        <span class=\"hljs-comment\">// The update syntax: {$set, the json object containing the fields to update}</span>\n        <span class=\"hljs-keyword\">new</span> JsonObject()\n            .put(<span class=\"hljs-string\">&quot;$set&quot;</span>, json),\n        v -&gt; {\n          <span class=\"hljs-keyword\">if</span> (v.failed()) {\n            routingContext.response().setStatusCode(<span class=\"hljs-number\">404</span>).end();\n          } <span class=\"hljs-keyword\">else</span> {\n            routingContext.response()\n                .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n                .end(Json.encodePrettily(\n                  <span class=\"hljs-keyword\">new</span> Whisky(id, json.getString(<span class=\"hljs-string\">&quot;name&quot;</span>),\n                    json.getString(<span class=\"hljs-string\">&quot;origin&quot;</span>))));\n          }\n        });\n  }\n}\n</code></pre><p>As we can see, the <code>update</code> method takes two JSON ob¬≠jects as pa¬≠ra¬≠me¬≠ter:</p><ol><li>The first one de¬≠notes the query (here we se¬≠lect a sin¬≠gle doc¬≠u¬≠ment using its id).</li><li>The sec¬≠ond ob¬≠ject ex¬≠presses the change to apply to the se¬≠lected doc¬≠u¬≠ment. It uses a mongo syn¬≠tax. In our case, we up¬≠date the doc¬≠u¬≠ment using the <code>$set</code> op¬≠er¬≠a¬≠tor.</li></ol><div class=\"alert info\"><p>In this code we up¬≠date the doc¬≠u¬≠ment and re¬≠place only a set of fields. You can also re¬≠place the whole doc¬≠u¬≠ment using <code>mongo.replace(...)</code>.</p></div><p>I def¬≠i¬≠nitely rec¬≠om¬≠mend to have a look to the Mon¬≠goDB doc¬≠u¬≠men¬≠ta¬≠tion, es¬≠pe¬≠cially:</p><ul><li><a href=\"https://docs.mongodb.org/manual/tutorial/query-documents/\" title=\"MongoDB Query Documentation\">Query syn¬≠tax doc¬≠u¬≠men¬≠ta¬≠tion</a></li><li><a href=\"https://docs.mongodb.org/manual/tutorial/modify-documents/\" title=\"MongoDB Update Documentation\">Up¬≠date syn¬≠tax doc¬≠u¬≠men¬≠ta¬≠tion</a></li></ul><h2 id=\"time-for-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#time-for-configuration\"></a>Time for configuration</h2><p>Well, the code is mi¬≠grated, but we still need to up¬≠date the con¬≠fig¬≠u¬≠ra¬≠tion. With JDBC we passed the JDBC url and the dri¬≠ver class in the con¬≠fig¬≠u¬≠ra¬≠tion. With mongo, we need to con¬≠fig¬≠ure the <code>connection_string</code> - the <code>mongo://</code> url on which the ap¬≠pli¬≠ca¬≠tion is con¬≠nected, and <code>db_name</code> - a name for the data source.</p><p>Let‚Äôs start by the unit test. Edit the <code>MyFirstVerticleTest</code> file and add the fol¬≠low¬≠ing code:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> MongodProcess MONGO;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> MONGO_PORT = <span class=\"hljs-number\">12345</span>;\n<span class=\"hljs-meta\">@BeforeClass</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  MongodStarter starter = MongodStarter.getDefaultInstance();\n  IMongodConfig mongodConfig = <span class=\"hljs-keyword\">new</span> MongodConfigBuilder()\n      .version(Version.Main.PRODUCTION)\n      .net(<span class=\"hljs-keyword\">new</span> Net(MONGO_PORT, Network.localhostIsIPv6()))\n      .build();\n  MongodExecutable mongodExecutable =\n      starter.prepare(mongodConfig);\n  MONGO = mongodExecutable.start();\n}\n\n<span class=\"hljs-meta\">@AfterClass</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">shutdown</span><span class=\"hljs-params\">()</span> </span>{  MONGO.stop(); }\n</code></pre><p>Be¬≠fore our tests, we start (pro¬≠gram¬≠mat¬≠i¬≠cally) a mongo data¬≠base on the port 12345. When all our tests have been ex¬≠e¬≠cuted, we shut¬≠down the data¬≠base.</p><p>So now that the mongo server is man¬≠aged, we need to to give the right con¬≠fig¬≠u¬≠ra¬≠tion to our ver¬≠ti¬≠cle. Up¬≠date the <code>DeploymentOption</code> in¬≠stance with:</p><pre><code class=\"hljs language-java\">DeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port)\n        .put(<span class=\"hljs-string\">&quot;db_name&quot;</span>, <span class=\"hljs-string\">&quot;whiskies-test&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>,\n            <span class=\"hljs-string\">&quot;mongodb://localhost:&quot;</span> + MONGO_PORT)\n);\n</code></pre><p>That‚Äôs all for the unit tests.</p><p>For the integration-‚Äãtest, we are using an ex¬≠ter¬≠nal¬≠ized json file. Edit the <code>src/test/resources/my-it-config.json</code> with the fol¬≠low¬≠ing con¬≠tent:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: ${http.port},\n  <span class=\"hljs-attr\">&quot;db_name&quot;</span>: <span class=\"hljs-string\">&quot;whiskies-it&quot;</span>,\n  <span class=\"hljs-attr\">&quot;connection_string&quot;</span>: <span class=\"hljs-string\">&quot;mongodb://localhost:37017&quot;</span>\n}\n</code></pre><p>No¬≠tice the port we are using for the mongo server. This port was con¬≠fig¬≠ured in the <code>pom.xml</code> file.</p><p>Last but not least, we still have a con¬≠fig¬≠u¬≠ra¬≠tion file to edit: the con¬≠fig¬≠u¬≠ra¬≠tion you use to launch the ap¬≠pli¬≠ca¬≠tion in <code>production</code>:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: <span class=\"hljs-number\">8082</span>,\n  <span class=\"hljs-attr\">&quot;db_name&quot;</span>: <span class=\"hljs-string\">&quot;whiskies&quot;</span>,\n  <span class=\"hljs-attr\">&quot;connection_string&quot;</span>: <span class=\"hljs-string\">&quot;mongodb://localhost:27017&quot;</span>\n}\n</code></pre><p>Here you would need to edit the <code>localhost:27017</code> with the right url for your mongo server.</p><div class=\"alert info\"><div class=\"alert-title\">Some changes in the integration tests</div><p>Be¬≠cause mongo doc¬≠u¬≠ment id are String and not in¬≠te¬≠ger, we have to slightly change doc¬≠u¬≠ment se¬≠lec¬≠tion in the in¬≠te¬≠gra¬≠tion test.</p></div><h2 id=\"time-for-a-run\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#time-for-a-run\"></a>Time for a run</h2><p>It‚Äôs time to pack¬≠age and run the ap¬≠pli¬≠ca¬≠tion and check that every¬≠thing works as ex¬≠pected. Let‚Äôs pack¬≠age the ap¬≠pli¬≠ca¬≠tion using:</p><pre><code class=\"hljs language-text\">mvn clean verify\n</code></pre><p>And then to launch it, start your mongo server and launch:</p><pre><code class=\"hljs language-text\">java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n</code></pre><p>If you are, like me, using docker / docker-‚Äãmachine for al¬≠most every¬≠thing, edit the con¬≠fig¬≠u¬≠ra¬≠tion file to refer to the right host (lo¬≠cal¬≠host for docker, the docker-‚Äãmachine ip if you use docker-‚Äãmachine) and then launch:</p><pre><code class=\"hljs language-bash\">docker run -d -p 27017:27017 mongo\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n<span class=\"hljs-comment\"># or</span>\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf-docker-machine.json\n</code></pre><p><img src=\"/images/blog/intro-series/whisky-mongo.png\" alt=\"The application live and running\"/></p><h2 id=\"thats-all-folks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#thats-all-folks\"></a>That‚Äôs all folks!</h2><p>We are reach¬≠ing the end of this post. We saw how you can use the vert-‚Äãmongo-client to ac¬≠cess asyn¬≠chro¬≠nously data stored in¬≠side a mongo data¬≠base as well as in¬≠sert¬≠ing/up¬≠dat¬≠ing this data. Now you have the choice be¬≠tween JDBC or Mongo. In ad¬≠di¬≠tion, vert.x pro¬≠vides a client for Redis.</p><p>Next time, we will see how the ver¬≠ti¬≠cle class can be split in two ver¬≠ti¬≠cles in order to bet¬≠ter or¬≠ga¬≠nize your code. The in¬≠ter¬≠ac¬≠tion be¬≠tween the two ver¬≠ti¬≠cles will uses <em>ser¬≠vices</em>.</p><p>Stay tuned &amp; Happy cod¬≠ing!</p>","scope":{}},"tfIdfTerms":[{"term":"us","tf":27},{"term":"mongo","tf":26},{"term":"document","tf":21},{"term":"client","tf":14},{"term":"post","tf":13},{"term":"applic","tf":12},{"term":"test","tf":12},{"term":"configur","tf":12},{"term":"databas","tf":11},{"term":"need","tf":11},{"term":"jdbc","tf":10},{"term":"code","tf":10},{"term":"updat","tf":10},{"term":"start","tf":9},{"term":"file","tf":9},{"term":"server","tf":8},{"term":"time","tf":7},{"term":"let","tf":7},{"term":"queri","tf":7},{"term":"select","tf":7},{"term":"data","tf":6},{"term":"verticl","tf":6},{"term":"json","tf":6},{"term":"object","tf":6},{"term":"go","tf":5}]},{"filename":"blog/2015-11-25-vert-x-es6-back-to-the-future.mdx","date":"2015-11-25","slug":"vert-x-es6-back-to-the-future","meta":{"title":"Vert.x ES6 back to the future","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"On October 21th, 2015 we all rejoiced with the return from the past of Marty McFly with his flying car and so on, however in the Vert.x world we were quite sad about our rather old JavaScript support."},"readingTime":{"text":"3 min read","minutes":2.42,"time":145200,"words":484},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"On \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://backtothefuture.wikia.com/wiki/2015\"\n  }), \"Oc\\xADto\\xADber 21th, 2015\"), \" we all re\\xADjoiced with the re\\xADturn from the past of\\nMarty McFly with his fly\\xADing car and so on, how\\xADever in the Vert.x world we were quite sad that the JavaScript sup\\xADport we\\nhave was still using a tech\\xADnol\\xADogy re\\xADleased in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\n  }), \"De\\xADcem\\xADber 2009\"), \". The\\nsup\\xADport for ES5 is not some\\xADthing that we Vert.x team con\\xADtrols but some\\xADthing that is in\\xADher\\xADited from run\\xADning on top of\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://openjdk.java.net/projects/nashorn/\"\n  }), \"Nashorn\"), \".\"), mdx(\"p\", null, \"With all these nos\\xADtal\\xADgic thoughts on my mind I\\u2019ve de\\xADcided to bring us back to the fu\\xADture and by fu\\xADture I mean, let\\u2019s\\nstart using a mod\\xADern JavaScript, or more cor\\xADrectly, let\\u2019s start using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://es6-features.org/\"\n  }), \"EC\\xADMAScript 6\"), \".\"), mdx(\"p\", null, \"It turned out to be quite sim\\xADple to achieve this so I\\u2019ll pick the hello world ex\\xADam\\xADple and write it in ES6 just to show\\nhow you can port your code to ES6 and still use the cur\\xADrent Vert.x APIs. Note that Vert.x in\\xADter\\xADnals still are ES5 and\\nhave not been touched or mod\\xADi\\xADfied to sup\\xADport any of ES6 fea\\xADtures.\"), mdx(\"h2\", {\n    \"id\": \"main\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#main\"\n  })), \"main\"), mdx(\"p\", null, \"Tra\\xADdi\\xADtion\\xADally your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" file would re\\xADside in the root of your mod\\xADule (this is where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NPM\"), \" will look for it by\\nde\\xADfault); how\\xADever as we are going to tran\\xADspile to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ES5\"), \" you\\u2019ll want to put your index file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/main.js\"), \".\"), mdx(\"p\", null, \"How\\xADever, be\\xADcause we are tran\\xADspiling to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ES5\"), \", your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \"\\u2019s main block should point to the tran\\xADspiled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \"\\nfile in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/lib\"), \" di\\xADrec\\xADtory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-es6\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"version\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.1\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"private\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \",\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"main\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"lib/main.js\\\"\"), \",\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"scripts\\\"\"), \": {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"build\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"rm -Rf lib && ./node_modules/.bin/babel --out-dir lib src\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"start\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"./node_modules/.bin/vertx run lib/main.js\\\"\"), \"\\n  },\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"dependencies\\\"\"), \": {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"vertx3-full\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"3.1.0\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"babel-cli\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"6.2.0\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"babel-preset-es2015\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"6.1.18\\\"\"), \"\\n  }\\n}\\n\")), mdx(\"p\", null, \"As you can see, the main idea is to in\\xADvoke the tran\\xADspiler (Babel) when we are build\\xADing our project, and run it using the\\ngen\\xADer\\xADated files. This is slightly equiv\\xADa\\xADlent to a com\\xADpi\\xADla\\xADtion process you would have using com\\xADpiled lan\\xADguage.\"), mdx(\"h2\", {\n    \"id\": \"npmignore\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#npmignore\"\n  })), \".npmignore\"), mdx(\"p\", null, \"If you\\u2019re plan\\xADning to de\\xADploy your pack\\xADage to npm ei\\xADther local or pri\\xADvate you should be aware that npm will ex\\xADclude\\nany\\xADthing listed on your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" since we should ig\\xADnore the gen\\xADer\\xADated code from git it need to in\\xADform npm to ig\\xADnore\\nthat rule and keep the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib\"), \" di\\xADrec\\xADtory. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" should be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"/lib\\n/node_modules\\n\")), mdx(\"p\", null, \"And the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".npmignore\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"/.gitignore\\n\")), mdx(\"h2\", {\n    \"id\": \"hello-fat-arrows-and-let-keywords\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#hello-fat-arrows-and-let-keywords\"\n  })), \"Hello fat arrows and let keywords\"), mdx(\"p\", null, \"So all the heavy work has been done, in order to cre\\xADate our hello world we just need to code some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ES6\"), \" in our\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" Router = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-web-js/router\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" server = vertx.createHttpServer();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" router = Router.router(vertx);\\n\\nrouter.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"ctx\"), \") =>\"), \" {\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"let\"), \" response = ctx.response();\\n    response.putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/plain\\\"\"), \");\\n\\n    response.end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello ES6 World!\\\"\"), \");\\n});\\n\\nserver.requestHandler(router.accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \"As you can see we\\u2019re using fat ar\\xADrows in\\xADstead of writ\\xADing a func\\xADtion clo\\xADsure and scoped vari\\xADables using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" key\\xADword. If\\nyou now com\\xADpile your project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-dockerfile\"\n  }), \"npm \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"run\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" build\"), \"\\n\")), mdx(\"p\", null, \"And then start it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-coffeescript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"npm\"), \" start\\n\")), mdx(\"p\", null, \"You have your first back to the fu\\xADture \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ES6\"), \" ver\\xADti\\xADcle!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>On <a href=\"http://backtothefuture.wikia.com/wiki/2015\">Oc¬≠to¬≠ber 21th, 2015</a> we all re¬≠joiced with the re¬≠turn from the past of\nMarty McFly with his fly¬≠ing car and so on, how¬≠ever in the Vert.x world we were quite sad that the JavaScript sup¬≠port we\nhave was still using a tech¬≠nol¬≠ogy re¬≠leased in <a href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\">De¬≠cem¬≠ber 2009</a>. The\nsup¬≠port for ES5 is not some¬≠thing that we Vert.x team con¬≠trols but some¬≠thing that is in¬≠her¬≠ited from run¬≠ning on top of\n<a href=\"http://openjdk.java.net/projects/nashorn/\">Nashorn</a>.</p><p>With all these nos¬≠tal¬≠gic thoughts on my mind I‚Äôve de¬≠cided to bring us back to the fu¬≠ture and by fu¬≠ture I mean, let‚Äôs\nstart using a mod¬≠ern JavaScript, or more cor¬≠rectly, let‚Äôs start using <a href=\"http://es6-features.org/\">EC¬≠MAScript 6</a>.</p><p>It turned out to be quite sim¬≠ple to achieve this so I‚Äôll pick the hello world ex¬≠am¬≠ple and write it in ES6 just to show\nhow you can port your code to ES6 and still use the cur¬≠rent Vert.x APIs. Note that Vert.x in¬≠ter¬≠nals still are ES5 and\nhave not been touched or mod¬≠i¬≠fied to sup¬≠port any of ES6 fea¬≠tures.</p><h2 id=\"main\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#main\"></a>main</h2><p>Tra¬≠di¬≠tion¬≠ally your <code>main.js</code> file would re¬≠side in the root of your mod¬≠ule (this is where <code>NPM</code> will look for it by\nde¬≠fault); how¬≠ever as we are going to tran¬≠spile to <code>ES5</code> you‚Äôll want to put your index file in <code>/src/main.js</code>.</p><p>How¬≠ever, be¬≠cause we are tran¬≠spiling to <code>ES5</code>, your <code>package.json</code>‚Äôs main block should point to the tran¬≠spiled <code>index.js</code>\nfile in the <code>/lib</code> di¬≠rec¬≠tory.</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;vertx-es6&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n  <span class=\"hljs-attr\">&quot;private&quot;</span>: <span class=\"hljs-literal\">true</span>,\n\n  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;lib/main.js&quot;</span>,\n\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;rm -Rf lib &amp;&amp; ./node_modules/.bin/babel --out-dir lib src&quot;</span>,\n    <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;./node_modules/.bin/vertx run lib/main.js&quot;</span>\n  },\n\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;vertx3-full&quot;</span>: <span class=\"hljs-string\">&quot;3.1.0&quot;</span>,\n    <span class=\"hljs-attr\">&quot;babel-cli&quot;</span>: <span class=\"hljs-string\">&quot;6.2.0&quot;</span>,\n    <span class=\"hljs-attr\">&quot;babel-preset-es2015&quot;</span>: <span class=\"hljs-string\">&quot;6.1.18&quot;</span>\n  }\n}\n</code></pre><p>As you can see, the main idea is to in¬≠voke the tran¬≠spiler (Babel) when we are build¬≠ing our project, and run it using the\ngen¬≠er¬≠ated files. This is slightly equiv¬≠a¬≠lent to a com¬≠pi¬≠la¬≠tion process you would have using com¬≠piled lan¬≠guage.</p><h2 id=\"npmignore\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#npmignore\"></a>.npmignore</h2><p>If you‚Äôre plan¬≠ning to de¬≠ploy your pack¬≠age to npm ei¬≠ther local or pri¬≠vate you should be aware that npm will ex¬≠clude\nany¬≠thing listed on your <code>.gitignore</code> since we should ig¬≠nore the gen¬≠er¬≠ated code from git it need to in¬≠form npm to ig¬≠nore\nthat rule and keep the <code>lib</code> di¬≠rec¬≠tory. The <code>.gitignore</code> should be some¬≠thing like:</p><pre><code class=\"hljs language-text\">/lib\n/node_modules\n</code></pre><p>And the <code>.npmignore</code>:</p><pre><code class=\"hljs language-text\">/.gitignore\n</code></pre><h2 id=\"hello-fat-arrows-and-let-keywords\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#hello-fat-arrows-and-let-keywords\"></a>Hello fat arrows and let keywords</h2><p>So all the heavy work has been done, in order to cre¬≠ate our hello world we just need to code some <code>ES6</code> in our\n<code>src/main.js</code> file:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-web-js/router&quot;</span>);\n<span class=\"hljs-keyword\">var</span> server = vertx.createHttpServer();\n\n<span class=\"hljs-keyword\">var</span> router = Router.router(vertx);\n\nrouter.get(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(<span class=\"hljs-function\">(<span class=\"hljs-params\">ctx</span>) =&gt;</span> {\n\n    <span class=\"hljs-keyword\">let</span> response = ctx.response();\n    response.putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/plain&quot;</span>);\n\n    response.end(<span class=\"hljs-string\">&quot;Hello ES6 World!&quot;</span>);\n});\n\nserver.requestHandler(router.accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p>As you can see we‚Äôre using fat ar¬≠rows in¬≠stead of writ¬≠ing a func¬≠tion clo¬≠sure and scoped vari¬≠ables using <code>let</code> key¬≠word. If\nyou now com¬≠pile your project:</p><pre><code class=\"hljs language-dockerfile\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> build</span>\n</code></pre><p>And then start it:</p><pre><code class=\"hljs language-coffeescript\"><span class=\"hljs-built_in\">npm</span> start\n</code></pre><p>You have your first back to the fu¬≠ture <code>ES6</code> ver¬≠ti¬≠cle!</p>","scope":{}},"tfIdfTerms":[{"term":"us","tf":9},{"term":"file","tf":5},{"term":"transpil","tf":4},{"term":"howev","tf":3},{"term":"world","tf":3},{"term":"support","tf":3},{"term":"someth","tf":3},{"term":"futur","tf":3},{"term":"let","tf":3},{"term":"start","tf":3},{"term":"hello","tf":3},{"term":"es6","tf":3},{"term":"code","tf":3},{"term":"main","tf":3},{"term":"compil","tf":3},{"term":"npm","tf":3},{"term":"quit","tf":2},{"term":"javascript","tf":2},{"term":"es5","tf":2},{"term":"not","tf":2},{"term":"run","tf":2},{"term":"back","tf":2},{"term":"ll","tf":2},{"term":"write","tf":2},{"term":"just","tf":2}]},{"filename":"blog/2015-10-19-using-the-asynchronous-sql-client.mdx","date":"2015-10-19","slug":"using-the-asynchronous-sql-client","meta":{"title":"Using the asynchronous SQL client","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Finally, back... This post is the fifth post of the introduction to vert.x blog series, after a not-that-small break. In this post we are going to see how we can use JDBC in a vert.x application."},"readingTime":{"text":"10 min read","minutes":9.095,"time":545700,"words":1819},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fi\\xADnally, back\\u2026 This post is the fifth post of the in\\xADtro\\xADduc\\xADtion to vert.x blog se\\xADries, after a not-\\u200Bthat-small break. In this post we are going to see how we can use JDBC in a vert.x ap\\xADpli\\xADca\\xADtion, and this, using the asyn\\xADchro\\xADnous API pro\\xADvided by the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-jdbc-client/java/\"\n  }), \"vertx-\\u200Bjdbc-client\"), \".\"), mdx(\"h2\", {\n    \"id\": \"previously-in-the-introduction-to-vertx-series\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#previously-in-the-introduction-to-vertx-series\"\n  })), \"Previously in the introduction to vert.x series\"), mdx(\"p\", null, \"As it was quite some time since the last post, let\\u2019s start by re\\xADfresh\\xADing our mind about the four pre\\xADvi\\xADous posts:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"first post\")), \" has de\\xADscribed how to build a vert.x ap\\xADpli\\xADca\\xADtion with Maven and ex\\xADe\\xADcute unit tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-application-configuration/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"sec\\xADond post\")), \" has de\\xADscribed how this ap\\xADpli\\xADca\\xADtion can be\\xADcome con\\xADfig\\xADurable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"third post\")), \" has in\\xADtro\\xADduced \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/\"\n  }), \"vertx-\\u200Bweb\"), \", and a small col\\xADlec\\xADtion man\\xADage\\xADment ap\\xADpli\\xADca\\xADtion has been de\\xADvel\\xADoped. This ap\\xADpli\\xADca\\xADtion of\\xADfers a REST API used by a HTML/JavaScript fron\\xADtend.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/unit-and-integration-tests/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"pre\\xADvi\\xADous post\")), \" has pre\\xADsented how you can run in\\xADte\\xADgra\\xADtion tests to en\\xADsure the be\\xADhav\\xADior of your ap\\xADpli\\xADca\\xADtion.\")), mdx(\"p\", null, \"In this post, back to code. The cur\\xADrent ap\\xADpli\\xADca\\xADtion uses an in-\\u200Bmemory map to store the prod\\xADucts. It\\u2019s time to use a data\\xADbase. In this post we are going to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://hsqldb.org/\"\n  }), \"HSQL\"), \", but you can use any data\\xADbase pro\\xADvid\\xADing a JDBC dri\\xADver. In\\xADter\\xADac\\xADtions with the data\\xADbase will be asyn\\xADchro\\xADnous and made using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-jdbc-client/java/\"\n  }), \"vertx-\\u200Bjdbc-client\"), \".\"), mdx(\"p\", null, \"The code of this post are avail\\xADable on this Github \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app\"\n  }), \"project\"), \", in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\"\n  }), \"post-5 branch\"), \" branch.\"), mdx(\"h2\", {\n    \"id\": \"asynchronous\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#asynchronous\"\n  })), \"Asynchronous?\"), mdx(\"p\", null, \"One of the vert.x char\\xADac\\xADter\\xADis\\xADtics is being asyn\\xADchro\\xADnous. With an asyn\\xADchro\\xADnous API, you don\\u2019t wait for a re\\xADsult, but you are no\\xADti\\xADfied when this re\\xADsult is ready. Just to il\\xADlus\\xADtrate this, let\\u2019s take a very sim\\xADple ex\\xADam\\xADple.\"), mdx(\"p\", null, \"Let\\u2019s imag\\xADine an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" method. Tra\\xADdi\\xADtion\\xADally, you would use it like this: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int r = add(1, 1)\"), \". This is a syn\\xADchro\\xADnous API as you are wait\\xADing for the re\\xADsult. An asyn\\xADchro\\xADnous ver\\xADsion of this API would be: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add(1, 1, r -> { /* do something with the result */ })\"), \". In this ver\\xADsion, you pass a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler\"), \" called when the re\\xADsult has been com\\xADputed. The method does not re\\xADturn any\\xADthing, and could be im\\xADple\\xADmented as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"add\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" a, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" b, Handler<Integer> resultHandler)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" r = a + b;\\n    resultHandler.handle(r);\\n}\\n\")), mdx(\"p\", null, \"Just to avoid mis\\xADcon\\xADcep\\xADtions, asyn\\xADchro\\xADnous API are not about threads. As we can see in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add\"), \" ex\\xADam\\xADple, there are no threads in\\xADvolved.\"), mdx(\"h2\", {\n    \"id\": \"jdbc-yes-but-asynchronous\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#jdbc-yes-but-asynchronous\"\n  })), \"JDBC yes, but asynchronous\"), mdx(\"p\", null, \"So, now that we have seen some ba\\xADsics about asyn\\xADchro\\xADnous API, let\\u2019s have a look to the vertx-\\u200Bjdbc-client. This com\\xADpo\\xADnent lets us in\\xADter\\xADact with a data\\xADbase through a JDBC dri\\xADver. These in\\xADter\\xADac\\xADtions are asyn\\xADchro\\xADnous, so when you were doing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"String sql = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Products\\\"\"), \";\\nResultSet rs = stmt.executeQuery(sql);\\n\")), mdx(\"p\", null, \"it will be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Products\\\"\"), \", result -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do something with the result\"), \"\\n});\\n\")), mdx(\"p\", null, \"This model is more ef\\xADfi\\xADcient as it avoids wait\\xADing for the re\\xADsult. You are no\\xADti\\xADfied when the re\\xADsult is avail\\xADable.\"), mdx(\"p\", null, \"Let\\u2019s now mod\\xADify our ap\\xADpli\\xADca\\xADtion to use a data\\xADbase to store our prod\\xADucts.\"), mdx(\"h2\", {\n    \"id\": \"some-maven-dependencies\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#some-maven-dependencies\"\n  })), \"Some maven dependencies\"), mdx(\"p\", null, \"The first things we need to do it to de\\xADclare two new Maven de\\xADpen\\xADden\\xADcies in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-jdbc-client\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.hsqldb\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"hsqldb\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.3.3\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"The first de\\xADpen\\xADdency pro\\xADvides the vertx-\\u200Bjdbc-client, while the sec\\xADond one pro\\xADvide the HSQL JDBC dri\\xADver. If you want to use an\\xADother data\\xADbase, change this de\\xADpen\\xADdency. You will also need to change the JDBC url and JDBC dri\\xADver class name later.\"), mdx(\"h2\", {\n    \"id\": \"initializing-the-jdbc-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#initializing-the-jdbc-client\"\n  })), \"Initializing the JDBC client\"), mdx(\"p\", null, \"Now that we have added these de\\xADpen\\xADden\\xADcies, it\\u2019s time to cre\\xADate our JDBC client:\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVerticle\"), \" class, de\\xADclare a new field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JDBCClient jdbc;\"), \", and add the fol\\xADlow\\xADing line at the be\\xADgin\\xADning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"jdbc = JDBCClient.createShared(vertx, config(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"My-Whisky-Collection\\\"\"), \");\\n\")), mdx(\"p\", null, \"This cre\\xADates an in\\xADstance of JDBC client, con\\xADfig\\xADured with the con\\xADfig\\xADu\\xADra\\xADtion pro\\xADvided to the ver\\xADti\\xADcle. To work cor\\xADrectly this con\\xADfig\\xADu\\xADra\\xADtion needs to pro\\xADvide:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"url\"), \" - the JDBC url such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jdbc:hsqldb:mem:db?shutdown=true\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"dri\\xADver_class\"), \" - the JDBC dri\\xADver class such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.hsqldb.jdbcDriver\"))), mdx(\"p\", null, \"Ok, we have the client, we need a con\\xADnec\\xADtion to the data\\xADbase. This is achieved using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jdbc.getConnection\"), \" that take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler<AsyncResult<SQLConnection>>\"), \" as pa\\xADra\\xADme\\xADter. Let\\u2019s have a deeper look to this type. It\\u2019s a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler\"), \", so it is called when the re\\xADsult is ready. This re\\xADsult is an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<SQLConnection>\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult\"), \" is a struc\\xADture pro\\xADvided by vert.x that lets us know if the op\\xADer\\xADa\\xADtion was com\\xADpleted suc\\xADcess\\xADfully or failed. In case of suc\\xADcess, it pro\\xADvides the re\\xADsult, here an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \".\"), mdx(\"p\", null, \"When you re\\xADceive an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult\"), \", your code gen\\xADer\\xADally looks like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n  System.err.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The operation has failed...: \\\"\"), \"\\n      + ar.cause().getMessage());\\n} \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Use the result:\"), \"\\n  result = ar.result();\\n }\\n\")), mdx(\"p\", null, \"So, let\\u2019s go back to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \". We need to re\\xADtrieve it, and then start the rest of the ap\\xADpli\\xADca\\xADtion. This changes how we start the ap\\xADpli\\xADca\\xADtion, as it will be\\xADcome asyn\\xADchro\\xADnous. So, if we di\\xADvide our startup se\\xADquence into small chunks it would be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"startBackend(\\n (connection) -> createSomeData(connection,\\n     (nothing) -> startWebApp(\\n         (http) -> completeStartup(http, fut)\\n     ), fut\\n ), fut);\\n\")), mdx(\"p\", null, \"with:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"startBackend\"), \" - re\\xADtrieves a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SQLConnection\"), \" and then calls the next step\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"createSomeData\"), \" - ini\\xADtial\\xADizes the data\\xADbase and in\\xADserts some data. When done, it calls the next step\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"startWebApp\"), \" - starts our web ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"completeStartup\"), \" - fi\\xADnal\\xADizes our start se\\xADquence\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fut\"), \" is the com\\xADple\\xADtion fu\\xADture passed by vert.x that let us re\\xADport when we are started, or if an issue has been en\\xADcoun\\xADtered while start\\xADing.\"), mdx(\"p\", null, \"Let\\u2019s have a look to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startBackend\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"startBackend\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Handler<AsyncResult<SQLConnection>> next, Future<Void> fut)\"), \" \"), \"{\\n  jdbc.getConnection(ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n      fut.fail(ar.cause());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      next.handle(Future.succeededFuture(ar.result()));\\n    }\\n  });\\n}\\n\")), mdx(\"p\", null, \"This method re\\xADtrieves a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \", check whether this op\\xADer\\xADa\\xADtion suc\\xADceeded. If so, it calls the next step. In case of fail\\xADure, it re\\xADports it.\"), mdx(\"p\", null, \"The other meth\\xADods fol\\xADlow the same pat\\xADtern: 1) check if the last op\\xADer\\xADa\\xADtion has suc\\xADceeded, 2) do the task, 3) call the next step.\"), mdx(\"h3\", {\n    \"id\": \"a-bit-of-sql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#a-bit-of-sql\"\n  })), \"A bit of SQL\\u2026\"), mdx(\"p\", null, \"Our client is ready, let\\u2019s now write some SQL state\\xADments. Let\\u2019s start by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createSomeData\"), \" method that is part of the startup se\\xADquence:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createSomeData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(AsyncResult<SQLConnection> result,\\n    Handler<AsyncResult<Void>> next, Future<Void> fut)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.failed()) {\\n      fut.fail(result.cause());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      SQLConnection connection = result.result();\\n      connection.execute(\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), \\\"\"), \" +\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin varchar(100))\\\"\"), \",\\n          ar -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n              fut.fail(ar.cause());\\n              connection.close();\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n            }\\n            connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Whisky\\\"\"), \", select -> {\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (select.failed()) {\\n                fut.fail(ar.cause());\\n                connection.close();\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n              }\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (select.result().getNumRows() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \") {\\n                insert(\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \"),\\n                    connection,\\n                    (v) -> insert(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \"),\\n                        connection,\\n                        (r) -> {\\n                          next.handle(Future.<Void>succeededFuture());\\n                          connection.close();\\n                        }));                                                    \\n              } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                next.handle(Future.<Void>succeededFuture());\\n                connection.close();\\n              }\\n            });\\n          });\\n    }\\n  }\\n\")), mdx(\"p\", null, \"This method checks that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \" is avail\\xADable and then start ex\\xADe\\xADcut\\xADing some SQL state\\xADments. First, it cre\\xADates the ta\\xADbles if there are not there yet. As you can see, the method called is struc\\xADtured as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.execute(\\n    SQL statement,\\n    handler called when the statement has been executed\\n)\\n\")), mdx(\"p\", null, \"The han\\xADdler re\\xADceives an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncResult<Void>\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"i.e.\"), \" a no\\xADti\\xADfi\\xADca\\xADtion of the com\\xADple\\xADtion with\\xADout an ac\\xADtual re\\xADsult.\"), mdx(Alert, {\n    info: true,\n    title: \"Closing connection\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Don\\u2019t for\\xADget to close the SQL con\\xADnec\\xADtion when you are done. The con\\xADnec\\xADtion will be given back to the con\\xADnec\\xADtion pool and be reused.\")), mdx(\"p\", null, \"In the code of this han\\xADdler, we check whether or not the state\\xADment has been ex\\xADe\\xADcuted cor\\xADrectly, and if so we check to see if the table al\\xADready con\\xADtains some data, if not, it in\\xADserts data using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"insert\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Whisky whisky, SQLConnection connection, Handler<AsyncResult<Whisky>> next)\"), \" \"), \"{\\n  String sql = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO Whisky (name, origin) VALUES ?, ?\\\"\"), \";\\n  connection.updateWithParams(sql,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray().add(whisky.getName()).add(whisky.getOrigin()),\\n      (ar) -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n          next.handle(Future.failedFuture(ar.cause()));\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n        }\\n        UpdateResult result = ar.result();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Build a new whisky instance with the generated id.\"), \"\\n        Whisky w = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(result.getKeys().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"), whisky.getName(), whisky.getOrigin());\\n        next.handle(Future.succeededFuture(w));\\n      });\\n}\\n\")), mdx(\"p\", null, \"This method uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateWithParams\"), \" method with an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IN\\xADSERT\"), \" state\\xADment, and pass val\\xADues. This ap\\xADproach avoids SQL in\\xADjec\\xADtion. Once the the state\\xADment has been ex\\xADe\\xADcuted, we cre\\xADates a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Whisky\"), \" ob\\xADject with the cre\\xADated (auto-\\u200Bgenerated) id.\"), mdx(\"h2\", {\n    \"id\": \"some-rest-with-a-pinch-of-sql\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#some-rest-with-a-pinch-of-sql\"\n  })), \"Some REST with a pinch of SQL\"), mdx(\"p\", null, \"The method de\\xADscribed  above is part of our start se\\xADquence. But what about the method in\\xADvoked by our REST API. Let\\u2019s have a look to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \" method. This method is called by the web front-\\u200Bend to re\\xADtrieve all stored prod\\xADucts:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getAll\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n    jdbc.getConnection(ar -> {\\n      SQLConnection connection = ar.result();\\n      connection.query(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM Whisky\\\"\"), \", result -> {\\n        List<Whisky> whiskies = result.result().getRows().stream().map(Whisky::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \").collect(Collectors.toList());\\n        routingContext.response()\\n            .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n            .end(Json.encodePrettily(whiskies));\\n        connection.close(); \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Close the connection     \"), \"\\n      });\\n    });\\n  }\\n\")), mdx(\"p\", null, \"This method gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SQLConnection\"), \", and then issue a query. Once the re\\xADsult has been re\\xADtrieved it writes the HTTP re\\xADsponse as be\\xADfore. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getOne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteOne\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateOne\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addOne\"), \" meth\\xADods fol\\xADlow the same pat\\xADtern. No\\xADtice that the con\\xADnec\\xADtion can be closed after the re\\xADsponse has been writ\\xADten.\"), mdx(\"p\", null, \"Let\\u2019s have a look to the re\\xADsult pro\\xADvided to the han\\xADdler passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" method. It gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResultSet\"), \", which con\\xADtains the query re\\xADsult. Each row is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \", so if your data ob\\xADject has a con\\xADstruc\\xADtor tak\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" as unique ar\\xADgu\\xADment, cre\\xADat\\xADing there ob\\xADjects is straight\\xADfor\\xADward.\"), mdx(\"h2\", {\n    \"id\": \"test-test-and-test-again\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#test-test-and-test-again\"\n  })), \"Test, test, and test again\"), mdx(\"p\", null, \"We need to slightly up\\xADdate our tests to con\\xADfig\\xADure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JDBCClient\"), \". In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVertilceTest\"), \" class, change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOption\"), \" ob\\xADject cre\\xADated in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" method to be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"DeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port)\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"url\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:mem:test?shutdown=true\\\"\"), \")\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"driver_class\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \")\\n    );\\n\")), mdx(\"p\", null, \"In ad\\xADdi\\xADtion to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \", we also put the JDBC url and the class of the JDBC dri\\xADver. We use an in-\\u200Bmemory data\\xADbase for tests.\"), mdx(\"p\", null, \"The same mod\\xADi\\xADfi\\xADca\\xADtion needs to be done in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/my-it-config.json\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": ${http.port},\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"url\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:mem:it-test?shutdown=true\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"driver_class\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/conf/my-application-conf.json\"), \" file also needs to be up\\xADdated, not for the tests, but to run the ap\\xADpli\\xADca\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"url\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"jdbc:hsqldb:file:db/whiskies\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"driver_class\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.hsqldb.jdbcDriver\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"The JDBC url is a bit dif\\xADfer\\xADent in this last file, as we store the data\\xADbase on the file sys\\xADtem.\"), mdx(\"h2\", {\n    \"id\": \"show-time\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#show-time\"\n  })), \"Show time!\"), mdx(\"p\", null, \"Let\\u2019s now build our ap\\xADpli\\xADca\\xADtion:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mvn clean package\")), mdx(\"p\", null, \"As we didn\\u2019t change the API (nei\\xADther the pub\\xADlic java one nor the REST), test should run smoothly.\"), mdx(\"p\", null, \"Then launch the ap\\xADpli\\xADca\\xADtion with:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json \")), mdx(\"p\", null, \"Open your browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8082/assets/index.html\"), \", and you should see the ap\\xADpli\\xADca\\xADtion using the data\\xADbase. This time the prod\\xADucts are stored in a data\\xADbase per\\xADsisted on the file sys\\xADtem. So, if we stop and restart the ap\\xADpli\\xADca\\xADtion, the data is re\\xADstored.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this post, we saw how you can use JDBC data\\xADbase with vert.x, and thus with\\xADout too much bur\\xADden. You may have been sur\\xADprised by the asyn\\xADchro\\xADnous de\\xADvel\\xADop\\xADment model, but once you start using it, it\\u2019s hard to come back.\"), mdx(\"p\", null, \"In the \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/combine-vert-x-and-mongo-to-build-a-giant/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"next post\")), \", we see how the same ap\\xADpli\\xADca\\xADtion can use Mon\\xADgoDB in\\xADstead of HSQL.\"), mdx(\"p\", null, \"Stay tuned, and happy cod\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Fi¬≠nally, back‚Ä¶ This post is the fifth post of the in¬≠tro¬≠duc¬≠tion to vert.x blog se¬≠ries, after a not-‚Äãthat-small break. In this post we are going to see how we can use JDBC in a vert.x ap¬≠pli¬≠ca¬≠tion, and this, using the asyn¬≠chro¬≠nous API pro¬≠vided by the <a href=\"http://vertx.io/docs/vertx-jdbc-client/java/\">vertx-‚Äãjdbc-client</a>.</p><h2 id=\"previously-in-the-introduction-to-vertx-series\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#previously-in-the-introduction-to-vertx-series\"></a>Previously in the introduction to vert.x series</h2><p>As it was quite some time since the last post, let‚Äôs start by re¬≠fresh¬≠ing our mind about the four pre¬≠vi¬≠ous posts:</p><ol><li>The <a href=\"/blog/my-first-vert-x-3-application/\">first post</a> has de¬≠scribed how to build a vert.x ap¬≠pli¬≠ca¬≠tion with Maven and ex¬≠e¬≠cute unit tests.</li><li>The <a href=\"/blog/vert-x-application-configuration/\">sec¬≠ond post</a> has de¬≠scribed how this ap¬≠pli¬≠ca¬≠tion can be¬≠come con¬≠fig¬≠urable.</li><li>The <a href=\"/blog/some-rest-with-vert-x/\">third post</a> has in¬≠tro¬≠duced <a href=\"http://vertx.io/docs/vertx-web/java/\">vertx-‚Äãweb</a>, and a small col¬≠lec¬≠tion man¬≠age¬≠ment ap¬≠pli¬≠ca¬≠tion has been de¬≠vel¬≠oped. This ap¬≠pli¬≠ca¬≠tion of¬≠fers a REST API used by a HTML/JavaScript fron¬≠tend.</li><li>The <a href=\"/blog/unit-and-integration-tests/\">pre¬≠vi¬≠ous post</a> has pre¬≠sented how you can run in¬≠te¬≠gra¬≠tion tests to en¬≠sure the be¬≠hav¬≠ior of your ap¬≠pli¬≠ca¬≠tion.</li></ol><p>In this post, back to code. The cur¬≠rent ap¬≠pli¬≠ca¬≠tion uses an in-‚Äãmemory map to store the prod¬≠ucts. It‚Äôs time to use a data¬≠base. In this post we are going to use <a href=\"http://hsqldb.org/\">HSQL</a>, but you can use any data¬≠base pro¬≠vid¬≠ing a JDBC dri¬≠ver. In¬≠ter¬≠ac¬≠tions with the data¬≠base will be asyn¬≠chro¬≠nous and made using the <a href=\"http://vertx.io/docs/vertx-jdbc-client/java/\">vertx-‚Äãjdbc-client</a>.</p><p>The code of this post are avail¬≠able on this Github <a href=\"https://github.com/cescoffier/my-vertx-first-app\">project</a>, in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\">post-5 branch</a> branch.</p><h2 id=\"asynchronous\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#asynchronous\"></a>Asynchronous?</h2><p>One of the vert.x char¬≠ac¬≠ter¬≠is¬≠tics is being asyn¬≠chro¬≠nous. With an asyn¬≠chro¬≠nous API, you don‚Äôt wait for a re¬≠sult, but you are no¬≠ti¬≠fied when this re¬≠sult is ready. Just to il¬≠lus¬≠trate this, let‚Äôs take a very sim¬≠ple ex¬≠am¬≠ple.</p><p>Let‚Äôs imag¬≠ine an <code>add</code> method. Tra¬≠di¬≠tion¬≠ally, you would use it like this: <code>int r = add(1, 1)</code>. This is a syn¬≠chro¬≠nous API as you are wait¬≠ing for the re¬≠sult. An asyn¬≠chro¬≠nous ver¬≠sion of this API would be: <code>add(1, 1, r -&gt; { /* do something with the result */ })</code>. In this ver¬≠sion, you pass a <code>Handler</code> called when the re¬≠sult has been com¬≠puted. The method does not re¬≠turn any¬≠thing, and could be im¬≠ple¬≠mented as:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b, Handler&lt;Integer&gt; resultHandler)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> r = a + b;\n    resultHandler.handle(r);\n}\n</code></pre><p>Just to avoid mis¬≠con¬≠cep¬≠tions, asyn¬≠chro¬≠nous API are not about threads. As we can see in the <code>add</code> ex¬≠am¬≠ple, there are no threads in¬≠volved.</p><h2 id=\"jdbc-yes-but-asynchronous\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#jdbc-yes-but-asynchronous\"></a>JDBC yes, but asynchronous</h2><p>So, now that we have seen some ba¬≠sics about asyn¬≠chro¬≠nous API, let‚Äôs have a look to the vertx-‚Äãjdbc-client. This com¬≠po¬≠nent lets us in¬≠ter¬≠act with a data¬≠base through a JDBC dri¬≠ver. These in¬≠ter¬≠ac¬≠tions are asyn¬≠chro¬≠nous, so when you were doing:</p><pre><code class=\"hljs language-java\">String sql = <span class=\"hljs-string\">&quot;SELECT * FROM Products&quot;</span>;\nResultSet rs = stmt.executeQuery(sql);\n</code></pre><p>it will be:</p><pre><code class=\"hljs language-java\">connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Products&quot;</span>, result -&gt; {\n        <span class=\"hljs-comment\">// do something with the result</span>\n});\n</code></pre><p>This model is more ef¬≠fi¬≠cient as it avoids wait¬≠ing for the re¬≠sult. You are no¬≠ti¬≠fied when the re¬≠sult is avail¬≠able.</p><p>Let‚Äôs now mod¬≠ify our ap¬≠pli¬≠ca¬≠tion to use a data¬≠base to store our prod¬≠ucts.</p><h2 id=\"some-maven-dependencies\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#some-maven-dependencies\"></a>Some maven dependencies</h2><p>The first things we need to do it to de¬≠clare two new Maven de¬≠pen¬≠den¬≠cies in our <code>pom.xml</code> file:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-jdbc-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hsqldb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hsqldb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>The first de¬≠pen¬≠dency pro¬≠vides the vertx-‚Äãjdbc-client, while the sec¬≠ond one pro¬≠vide the HSQL JDBC dri¬≠ver. If you want to use an¬≠other data¬≠base, change this de¬≠pen¬≠dency. You will also need to change the JDBC url and JDBC dri¬≠ver class name later.</p><h2 id=\"initializing-the-jdbc-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#initializing-the-jdbc-client\"></a>Initializing the JDBC client</h2><p>Now that we have added these de¬≠pen¬≠den¬≠cies, it‚Äôs time to cre¬≠ate our JDBC client:</p><p>In the <code>MyFirstVerticle</code> class, de¬≠clare a new field <code>JDBCClient jdbc;</code>, and add the fol¬≠low¬≠ing line at the be¬≠gin¬≠ning of the <code>start</code> method:</p><pre><code class=\"hljs language-java\">jdbc = JDBCClient.createShared(vertx, config(), <span class=\"hljs-string\">&quot;My-Whisky-Collection&quot;</span>);\n</code></pre><p>This cre¬≠ates an in¬≠stance of JDBC client, con¬≠fig¬≠ured with the con¬≠fig¬≠u¬≠ra¬≠tion pro¬≠vided to the ver¬≠ti¬≠cle. To work cor¬≠rectly this con¬≠fig¬≠u¬≠ra¬≠tion needs to pro¬≠vide:</p><ul><li><em>url</em> - the JDBC url such as <code>jdbc:hsqldb:mem:db?shutdown=true</code></li><li><em>dri¬≠ver_class</em> - the JDBC dri¬≠ver class such as <code>org.hsqldb.jdbcDriver</code></li></ul><p>Ok, we have the client, we need a con¬≠nec¬≠tion to the data¬≠base. This is achieved using the <code>jdbc.getConnection</code> that take a <code>Handler&lt;AsyncResult&lt;SQLConnection&gt;&gt;</code> as pa¬≠ra¬≠me¬≠ter. Let‚Äôs have a deeper look to this type. It‚Äôs a <code>Handler</code>, so it is called when the re¬≠sult is ready. This re¬≠sult is an in¬≠stance of <code>AsyncResult&lt;SQLConnection&gt;</code>. <code>AsyncResult</code> is a struc¬≠ture pro¬≠vided by vert.x that lets us know if the op¬≠er¬≠a¬≠tion was com¬≠pleted suc¬≠cess¬≠fully or failed. In case of suc¬≠cess, it pro¬≠vides the re¬≠sult, here an in¬≠stance of <code>SQLConnection</code>.</p><p>When you re¬≠ceive an in¬≠stance of <code>AsyncResult</code>, your code gen¬≠er¬≠ally looks like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">if</span> (ar.failed()) {\n  System.err.println(<span class=\"hljs-string\">&quot;The operation has failed...: &quot;</span>\n      + ar.cause().getMessage());\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// Use the result:</span>\n  result = ar.result();\n }\n</code></pre><p>So, let‚Äôs go back to our <code>SQLConnection</code>. We need to re¬≠trieve it, and then start the rest of the ap¬≠pli¬≠ca¬≠tion. This changes how we start the ap¬≠pli¬≠ca¬≠tion, as it will be¬≠come asyn¬≠chro¬≠nous. So, if we di¬≠vide our startup se¬≠quence into small chunks it would be some¬≠thing like:</p><pre><code class=\"hljs language-java\">startBackend(\n (connection) -&gt; createSomeData(connection,\n     (nothing) -&gt; startWebApp(\n         (http) -&gt; completeStartup(http, fut)\n     ), fut\n ), fut);\n</code></pre><p>with:</p><ol><li><code>startBackend</code> - re¬≠trieves a <code>SQLConnection</code> and then calls the next step</li><li><code>createSomeData</code> - ini¬≠tial¬≠izes the data¬≠base and in¬≠serts some data. When done, it calls the next step</li><li><code>startWebApp</code> - starts our web ap¬≠pli¬≠ca¬≠tion</li><li><code>completeStartup</code> - fi¬≠nal¬≠izes our start se¬≠quence</li></ol><p><code>fut</code> is the com¬≠ple¬≠tion fu¬≠ture passed by vert.x that let us re¬≠port when we are started, or if an issue has been en¬≠coun¬≠tered while start¬≠ing.</p><p>Let‚Äôs have a look to <code>startBackend</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startBackend</span><span class=\"hljs-params\">(Handler&lt;AsyncResult&lt;SQLConnection&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n  jdbc.getConnection(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n      fut.fail(ar.cause());\n    } <span class=\"hljs-keyword\">else</span> {\n      next.handle(Future.succeededFuture(ar.result()));\n    }\n  });\n}\n</code></pre><p>This method re¬≠trieves a <code>SQLConnection</code>, check whether this op¬≠er¬≠a¬≠tion suc¬≠ceeded. If so, it calls the next step. In case of fail¬≠ure, it re¬≠ports it.</p><p>The other meth¬≠ods fol¬≠low the same pat¬≠tern: 1) check if the last op¬≠er¬≠a¬≠tion has suc¬≠ceeded, 2) do the task, 3) call the next step.</p><h3 id=\"a-bit-of-sql\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#a-bit-of-sql\"></a>A bit of SQL‚Ä¶</h3><p>Our client is ready, let‚Äôs now write some SQL state¬≠ments. Let‚Äôs start by the <code>createSomeData</code> method that is part of the startup se¬≠quence:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createSomeData</span><span class=\"hljs-params\">(AsyncResult&lt;SQLConnection&gt; result,\n    Handler&lt;AsyncResult&lt;Void&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (result.failed()) {\n      fut.fail(result.cause());\n    } <span class=\"hljs-keyword\">else</span> {\n      SQLConnection connection = result.result();\n      connection.execute(\n          <span class=\"hljs-string\">&quot;CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), &quot;</span> +\n          <span class=\"hljs-string\">&quot;origin varchar(100))&quot;</span>,\n          ar -&gt; {\n            <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n              fut.fail(ar.cause());\n              connection.close();\n              <span class=\"hljs-keyword\">return</span>;\n            }\n            connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Whisky&quot;</span>, select -&gt; {\n              <span class=\"hljs-keyword\">if</span> (select.failed()) {\n                fut.fail(ar.cause());\n                connection.close();\n                <span class=\"hljs-keyword\">return</span>;\n              }\n              <span class=\"hljs-keyword\">if</span> (select.result().getNumRows() == <span class=\"hljs-number\">0</span>) {\n                insert(\n                    <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>),\n                    connection,\n                    (v) -&gt; insert(<span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Talisker 57¬∞ North&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>),\n                        connection,\n                        (r) -&gt; {\n                          next.handle(Future.&lt;Void&gt;succeededFuture());\n                          connection.close();\n                        }));                                                    \n              } <span class=\"hljs-keyword\">else</span> {\n                next.handle(Future.&lt;Void&gt;succeededFuture());\n                connection.close();\n              }\n            });\n          });\n    }\n  }\n</code></pre><p>This method checks that the <code>SQLConnection</code> is avail¬≠able and then start ex¬≠e¬≠cut¬≠ing some SQL state¬≠ments. First, it cre¬≠ates the ta¬≠bles if there are not there yet. As you can see, the method called is struc¬≠tured as fol¬≠lows:</p><pre><code class=\"hljs language-java\">connection.execute(\n    SQL statement,\n    handler called when the statement has been executed\n)\n</code></pre><p>The han¬≠dler re¬≠ceives an <code>AsyncResult&lt;Void&gt;</code>, <em>i.e.</em> a no¬≠ti¬≠fi¬≠ca¬≠tion of the com¬≠ple¬≠tion with¬≠out an ac¬≠tual re¬≠sult.</p><div class=\"alert info\"><div class=\"alert-title\">Closing connection</div><p>Don‚Äôt for¬≠get to close the SQL con¬≠nec¬≠tion when you are done. The con¬≠nec¬≠tion will be given back to the con¬≠nec¬≠tion pool and be reused.</p></div><p>In the code of this han¬≠dler, we check whether or not the state¬≠ment has been ex¬≠e¬≠cuted cor¬≠rectly, and if so we check to see if the table al¬≠ready con¬≠tains some data, if not, it in¬≠serts data using the <code>insert</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Whisky whisky, SQLConnection connection, Handler&lt;AsyncResult&lt;Whisky&gt;&gt; next)</span> </span>{\n  String sql = <span class=\"hljs-string\">&quot;INSERT INTO Whisky (name, origin) VALUES ?, ?&quot;</span>;\n  connection.updateWithParams(sql,\n      <span class=\"hljs-keyword\">new</span> JsonArray().add(whisky.getName()).add(whisky.getOrigin()),\n      (ar) -&gt; {\n        <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n          next.handle(Future.failedFuture(ar.cause()));\n          <span class=\"hljs-keyword\">return</span>;\n        }\n        UpdateResult result = ar.result();\n        <span class=\"hljs-comment\">// Build a new whisky instance with the generated id.</span>\n        Whisky w = <span class=\"hljs-keyword\">new</span> Whisky(result.getKeys().getInteger(<span class=\"hljs-number\">0</span>), whisky.getName(), whisky.getOrigin());\n        next.handle(Future.succeededFuture(w));\n      });\n}\n</code></pre><p>This method uses the <code>updateWithParams</code> method with an <em>IN¬≠SERT</em> state¬≠ment, and pass val¬≠ues. This ap¬≠proach avoids SQL in¬≠jec¬≠tion. Once the the state¬≠ment has been ex¬≠e¬≠cuted, we cre¬≠ates a new <code>Whisky</code> ob¬≠ject with the cre¬≠ated (auto-‚Äãgenerated) id.</p><h2 id=\"some-rest-with-a-pinch-of-sql\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#some-rest-with-a-pinch-of-sql\"></a>Some REST with a pinch of SQL</h2><p>The method de¬≠scribed  above is part of our start se¬≠quence. But what about the method in¬≠voked by our REST API. Let‚Äôs have a look to the <code>getAll</code> method. This method is called by the web front-‚Äãend to re¬≠trieve all stored prod¬≠ucts:</p><pre><code class=\"hljs language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n    jdbc.getConnection(ar -&gt; {\n      SQLConnection connection = ar.result();\n      connection.query(<span class=\"hljs-string\">&quot;SELECT * FROM Whisky&quot;</span>, result -&gt; {\n        List&lt;Whisky&gt; whiskies = result.result().getRows().stream().map(Whisky::<span class=\"hljs-keyword\">new</span>).collect(Collectors.toList());\n        routingContext.response()\n            .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n            .end(Json.encodePrettily(whiskies));\n        connection.close(); <span class=\"hljs-comment\">// Close the connection     </span>\n      });\n    });\n  }\n</code></pre><p>This method gets a <code>SQLConnection</code>, and then issue a query. Once the re¬≠sult has been re¬≠trieved it writes the HTTP re¬≠sponse as be¬≠fore. The <code>getOne</code>, <code>deleteOne</code>, <code>updateOne</code> and <code>addOne</code> meth¬≠ods fol¬≠low the same pat¬≠tern. No¬≠tice that the con¬≠nec¬≠tion can be closed after the re¬≠sponse has been writ¬≠ten.</p><p>Let‚Äôs have a look to the re¬≠sult pro¬≠vided to the han¬≠dler passed to the <code>query</code> method. It gets a <code>ResultSet</code>, which con¬≠tains the query re¬≠sult. Each row is a <code>JsonObject</code>, so if your data ob¬≠ject has a con¬≠struc¬≠tor tak¬≠ing a <code>JsonObject</code> as unique ar¬≠gu¬≠ment, cre¬≠at¬≠ing there ob¬≠jects is straight¬≠for¬≠ward.</p><h2 id=\"test-test-and-test-again\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#test-test-and-test-again\"></a>Test, test, and test again</h2><p>We need to slightly up¬≠date our tests to con¬≠fig¬≠ure the <code>JDBCClient</code>. In the <code>MyFirstVertilceTest</code> class, change the <code>DeploymentOption</code> ob¬≠ject cre¬≠ated in the <code>setUp</code> method to be:</p><pre><code class=\"hljs language-java\">DeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port)\n        .put(<span class=\"hljs-string\">&quot;url&quot;</span>, <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:test?shutdown=true&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;driver_class&quot;</span>, <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>)\n    );\n</code></pre><p>In ad¬≠di¬≠tion to the <code>http.port</code>, we also put the JDBC url and the class of the JDBC dri¬≠ver. We use an in-‚Äãmemory data¬≠base for tests.</p><p>The same mod¬≠i¬≠fi¬≠ca¬≠tion needs to be done in the <code>src/test/resources/my-it-config.json</code> file:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: ${http.port},\n  <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;jdbc:hsqldb:mem:it-test?shutdown=true&quot;</span>,\n  <span class=\"hljs-attr\">&quot;driver_class&quot;</span>: <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>\n}\n</code></pre><p>The <code>src/main/conf/my-application-conf.json</code> file also needs to be up¬≠dated, not for the tests, but to run the ap¬≠pli¬≠ca¬≠tion:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span> : <span class=\"hljs-number\">8082</span>,\n  <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;jdbc:hsqldb:file:db/whiskies&quot;</span>,\n  <span class=\"hljs-attr\">&quot;driver_class&quot;</span>: <span class=\"hljs-string\">&quot;org.hsqldb.jdbcDriver&quot;</span>\n}\n</code></pre><p>The JDBC url is a bit dif¬≠fer¬≠ent in this last file, as we store the data¬≠base on the file sys¬≠tem.</p><h2 id=\"show-time\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#show-time\"></a>Show time!</h2><p>Let‚Äôs now build our ap¬≠pli¬≠ca¬≠tion:</p><p><code>mvn clean package</code></p><p>As we didn‚Äôt change the API (nei¬≠ther the pub¬≠lic java one nor the REST), test should run smoothly.</p><p>Then launch the ap¬≠pli¬≠ca¬≠tion with:</p><p><code>java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json </code></p><p>Open your browser to <code>http://localhost:8082/assets/index.html</code>, and you should see the ap¬≠pli¬≠ca¬≠tion using the data¬≠base. This time the prod¬≠ucts are stored in a data¬≠base per¬≠sisted on the file sys¬≠tem. So, if we stop and restart the ap¬≠pli¬≠ca¬≠tion, the data is re¬≠stored.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this post, we saw how you can use JDBC data¬≠base with vert.x, and thus with¬≠out too much bur¬≠den. You may have been sur¬≠prised by the asyn¬≠chro¬≠nous de¬≠vel¬≠op¬≠ment model, but once you start using it, it‚Äôs hard to come back.</p><p>In the <a href=\"/blog/combine-vert-x-and-mongo-to-build-a-giant/\">next post</a>, we see how the same ap¬≠pli¬≠ca¬≠tion can use Mon¬≠goDB in¬≠stead of HSQL.</p><p>Stay tuned, and happy cod¬≠ing!</p>","scope":{}},"tfIdfTerms":[{"term":"us","tf":22},{"term":"jdbc","tf":20},{"term":"method","tf":19},{"term":"applic","tf":17},{"term":"let","tf":16},{"term":"post","tf":15},{"term":"databas","tf":13},{"term":"result","tf":13},{"term":"asynchron","tf":12},{"term":"start","tf":11},{"term":"api","tf":9},{"term":"provid","tf":9},{"term":"client","tf":9},{"term":"test","tf":9},{"term":"call","tf":8},{"term":"need","tf":8},{"term":"not","tf":7},{"term":"creat","tf":7},{"term":"driver","tf":6},{"term":"look","tf":6},{"term":"file","tf":6},{"term":"sql","tf":6},{"term":"back","tf":5},{"term":"time","tf":5},{"term":"configur","tf":5}]},{"filename":"blog/2015-09-17-contract-driven-rest-services-with-vert-x3.mdx","date":"2015-09-17","slug":"contract-driven-rest-services-with-vert-x3","meta":{"title":"Contract Driven REST Services with Vert.x3","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"We see a new trend in development where we are shifting from developing applications to APIs. More and more we see services being offered as REST APIs that we are allowed to consume."},"readingTime":{"text":"8 min read","minutes":7.185,"time":431099.99999999994,"words":1437},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We see a new trend in de\\xADvel\\xADop\\xADment where we are shift\\xADing from de\\xADvel\\xADop\\xADing ap\\xADpli\\xADca\\xADtions to de\\xADvelop APIs. More and more we see ser\\xADvices being of\\xADfered as REST APIs that we are al\\xADlowed to con\\xADsume and we al\\xADready see this trend from the big names in the in\\xADdus\\xADtry, e.g.: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.facebook.com/\"\n  }), \"Face\\xADbook\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mediawiki.org/wiki/API:Main_page\"\n  }), \"Wikipedia\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.amazon.com/public/apis\"\n  }), \"Ama\\xADzon\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.twitter.com/overview/documentation\"\n  }), \"Twit\\xADter\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.google.com/apis-explorer/#p/\"\n  }), \"Google\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.reddit.com/dev/api\"\n  }), \"Red\\xADdit\"), \" they all offer APIs.\"), mdx(\"p\", null, \"Of course mak\\xADing an REST API using Vert.x is quite sim\\xADple, just use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/#web\"\n  }), \"Vert.x Web\"), \" and you can start writ\\xADing your API in sec\\xADonds, how\\xADever an API with\\xADout doc\\xADu\\xADmen\\xADta\\xADtion is not an API since no de\\xADvel\\xADoper will know how to use it. How\\xADever this is one of the most sen\\xADsi\\xADtive is\\xADsues to tackle in soft\\xADware de\\xADvel\\xADop\\xADment, no\\xADbody likes to write doc\\xADu\\xADmen\\xADta\\xADtion. How\\xADever, in the REST age where REST-\\u200Bbased web-\\u200Bservices are ubiq\\xADui\\xADtous, doc\\xADu\\xADmen\\xADta\\xADtion for pub\\xADlic web-\\u200Bservices is a ne\\xADces\\xADsity. There are a lot of tools out there, two of the most pop\\xADu\\xADlar are with\\xADout a doubt:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://swagger.io\"\n  }), \"Swag\\xADger\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://raml.org\"\n  }), \"RAML\"))), mdx(\"p\", null, \"Both frame\\xADworks have a large ecosys\\xADtem of tools and tool\\xADing around but they tackle the doc\\xADu\\xADmen\\xADta\\xADtion from two dif\\xADfer\\xADent per\\xADspec\\xADtives. While Swag\\xADger is purely a doc\\xADu\\xADmen\\xADta\\xADtion tool it tack\\xADles the prob\\xADlem from bot\\xADtom up and RAML does doc\\xADu\\xADment top down. They both rely on a doc\\xADu\\xADment (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" for Swag\\xADger, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"YAML\"), \" for RAML).\"), mdx(\"p\", null, \"I\\u2019ll now go over build\\xADing a sim\\xADple Hello World API, doc\\xADu\\xADment it and test it. For this ex\\xADam\\xADple I\\u2019ll choose RAML since it feels more nat\\xADural to the way we code with Vert.x Web.\"), mdx(\"h2\", {\n    \"id\": \"define-the-hello-world-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#define-the-hello-world-api\"\n  })), \"Define the Hello World API\"), mdx(\"p\", null, \"We need a con\\xADtract and as with any other de\\xADvel\\xADop\\xADment we need some spec\\xADi\\xADfi\\xADca\\xADtion, You can learn about RAML in its \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://raml.org\"\n  }), \"web\\xADsite\"), \" and quickly see how easy it is to get started. So we start with the fol\\xADlow\\xADing spec\\xADi\\xADfi\\xADca\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"#%RAML 0.8\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"title:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"Hello\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"world\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"REST\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"API\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"baseUri:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"http://localhost:8080/\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"version:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"v1\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"/hello:\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"get:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"responses:\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"200:\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"body:\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"application/json:\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"schema:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"|\\n              { \\\"$schema\\\": \\\"http://json-schema.org/schema\\\",\\n                \\\"type\\\": \\\"object\\\",\\n                \\\"description\\\": \\\"Hello World Greeting\\\",\\n                \\\"properties\\\": {\\n                  \\\"greeting\\\":  { \\\"type\\\": \\\"string\\\" }\\n                },\\n                \\\"required\\\": [ \\\"greeting\\\" ]\\n              }\\n\"))), mdx(\"p\", null, \"So if you didn\\u2019t un\\xADder\\xADstood why I named RAML as a top down doc\\xADu\\xADmen\\xADta\\xADtion tool, I think it be\\xADcomes clear now. So there are some basic de\\xADf\\xADi\\xADn\\xADi\\xADtion on the top of the file like, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseUri\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"version\"), \" which should be self ex\\xADplana\\xADtory.\"), mdx(\"p\", null, \"And then we start with the API doc\\xADu\\xADmen\\xADta\\xADtion, so we spec\\xADify that at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URL\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/hello\"), \" using the HTTP verb \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" you are ex\\xADpected to get a re\\xADsponse with sta\\xADtus code \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"200\"), \" and the body of the re\\xADsponse should have con\\xADtent type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application/json\"), \". This is a very min\\xADi\\xADmal doc\\xADu\\xADment, one could go over and spec\\xADify the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://json-schema.org/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"json schema\")), \" for the re\\xADsponse, input val\\xADues, etc\\u2026, how\\xADever lets just keep it sim\\xADple for this ex\\xADam\\xADple.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"If you do not like to write yaml in your ed\\xADi\\xADtor you can al\\xADways use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://raml.org/projects.html\"\n  }), \"API De\\xADsigner\"), \" which gives you in\\xADstant feed\\xADback on your API doc\\xADu\\xADment and pro\\xADvides a test\\xADing plat\\xADform.\")), mdx(\"h2\", {\n    \"id\": \"implement-the-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implement-the-api\"\n  })), \"Implement the API\"), mdx(\"p\", null, \"So you got your con\\xADtract, time to im\\xADple\\xADment it, this is a very sim\\xADple API so I\\u2019ll jump to the code im\\xADme\\xADdi\\xADately:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Router router = Router.router(vertx);\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \").handler(rc -> {\\n      rc.response()\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")\\n          .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello World!\\\"\"), \").encode());\\n    });\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n  }\\n}\\n\")), mdx(\"p\", null, \"As you can see the code re\\xADsem\\xADbles the con\\xADtract doc\\xADu\\xADment, when there is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" re\\xADquest to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/hello\"), \" we send to the client a empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" doc\\xADu\\xADment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{}\"), \".\"), mdx(\"h2\", {\n    \"id\": \"are-we-done\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#are-we-done\"\n  })), \"Are we done?\"), mdx(\"p\", null, \"The an\\xADswer is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NO!!!\"), \" how can we be sure that our im\\xADple\\xADmen\\xADta\\xADtion does com\\xADply to the con\\xADtract? We need to test. As I wrote be\\xADfore there is no spe\\xADcific sup\\xADport for Vert.x from RAML or other tools how\\xADever in this case it is not a prob\\xADlem we can still test our code with\\xADout hav\\xADing the need to im\\xADple\\xADment a test frame\\xADwork from the ground up.\"), mdx(\"h2\", {\n    \"id\": \"testing-our-contract\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#testing-our-contract\"\n  })), \"Testing our contract\"), mdx(\"p\", null, \"The ini\\xADtial step is to setup a test, this should be triv\\xADial we are using Java (al\\xADthough we could test any of Vert.x\\nsup\\xADported lan\\xADguages using the same tech\\xADnique). We cre\\xADate a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://junit.org/\"\n  }), \"JUnit\"), \" unit test.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"For this ex\\xADam\\xADple, I will be using JUnit in\\xADstead of Vert.x Test mostly to let you know that Vert.x isn\\u2019t an opin\\xADion\\xADated frame\\xADwork, so you are free to choose the tool that best fits you.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"APITest\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@BeforeClass\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"bootApp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Runner.run(App.class);\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testHelloEndpoint\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n  }\\n}\\n\")), mdx(\"p\", null, \"So at this mo\\xADment you have a sim\\xADple test, I\\u2019ll share the code of the run\\xADner class (ba\\xADsi\\xADcally it just in\\xADstan\\xADti\\xADates a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" in\\xADstance and load the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"verticle\"), \" we just im\\xADple\\xADmented above) and has a empty test \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testHelloEndpoint\"), \".\"), mdx(\"h3\", {\n    \"id\": \"load-the-api-definition-into-the-test\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#load-the-api-definition-into-the-test\"\n  })), \"Load the API definition into the test\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"APITest\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" RamlDefinition api = RamlLoaders.fromClasspath()\\n        .load(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/hello.raml\\\"\"), \")\\n        .assumingBaseUri(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080/\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" CheckingWebTarget checking;\\n\\n  ...\\n}\\n\")), mdx(\"p\", null, \"So the first step is to load the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"API\"), \" de\\xADf\\xADi\\xADn\\xADi\\xADtion into our test and have a ref\\xADer\\xADence to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckingWebTarget\"), \" ob\\xADject. The check\\xADing ob\\xADject is where you can per\\xADform as\\xADser\\xADtions, but to do this we need some client make REST calls in order to test.\"), mdx(\"h3\", {\n    \"id\": \"create-a-rest-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#create-a-rest-client\"\n  })), \"Create a REST client\"), mdx(\"p\", null, \"There are many op\\xADtions for this, you could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAX-RS\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RestAssured\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RestEasy\"), \", etc\\u2026 so I\\u2019ll pick \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RestEasy\"), \" for now:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"APITest\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" RamlDefinition api = RamlLoaders.fromClasspath()\\n      .load(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/hello.raml\\\"\"), \")\\n      .assumingBaseUri(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080/\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" ResteasyClient client = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ResteasyClientBuilder().build();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" CheckingWebTarget checking;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@BeforeClass\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"bootApp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Runner.run(App.class);\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Before\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createTarget\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    checking = api.createWebTarget(client.target(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080\\\"\"), \"));\\n  }\\n\\n  ...\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"implement-the-test\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implement-the-test\"\n  })), \"Implement the test\"), mdx(\"p\", null, \"All of the boil\\xADer\\xADplate code is in place and if you look at the pre\\xADvi\\xADous sec\\xADtion you will see that it wasn\\u2019t that bad, just a few lines and you loaded the RAML con\\xADtract, cre\\xADated a REST client and started up your ap\\xADpli\\xADca\\xADtion and all this under ~10 lines of code.\"), mdx(\"p\", null, \"So lets fin\\xADish and im\\xADple\\xADment the ver\\xADi\\xADfi\\xADca\\xADtion of the con\\xADtract:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"APITest\"), \" \"), \"{\\n  ...\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testHelloEndpoint\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    checking.path(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \").request().get();\\n    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());\\n  }\\n}\\n\")), mdx(\"p\", null, \"Once you run your tests, you will see:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-css\"\n  }), \"13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.200\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".a\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".h\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".i\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".conn\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".DefaultClientConnection\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Sending\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"request\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"GET\"), \" /\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"hello\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.201\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  >> \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"GET\"), \" /\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"hello\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  >> \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Accept-Encoding\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"gzip\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"deflate\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  >> \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Host\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"localhost\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":8080\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  >> \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Connection\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Keep-Alive\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  >> \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" >> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"GET\"), \" /\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"hello\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.202\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" >> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Accept-Encoding\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"gzip\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"deflate\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.203\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" >> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Host\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"localhost\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":8080\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.203\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" >> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Connection\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Keep-Alive\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.412\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  << \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), \" 200 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"OK\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.413\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  << \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"content-type\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"application\"), \"/\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"json\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.413\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  << \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Content-Length\"), \": 2\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.413\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  << \\\"\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\r]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[\\\\n]\"), \"\\\"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.414\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".a\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".h\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".i\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".conn\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".DefaultClientConnection\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Receiving\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"response\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), \" 200 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"OK\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.414\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" << \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"HTTP\"), \"/1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".1\"), \" 200 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"OK\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.415\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" << \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"content-type\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"application\"), \"/\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"json\"), \"\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.415\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".headers\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \" << \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Content-Length\"), \": 2\\n13\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":09\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-pseudo\"\n  }), \":28.429\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-attr\"\n  }), \"[main]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"DEBUG\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"org\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".apache\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".http\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".wire\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"-\"), \"  << \\\"{}\\\"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Tests\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"run\"), \": 1, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Failures\"), \": 0, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Errors\"), \": 0, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Skipped\"), \": 0, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Time\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"elapsed\"), \": 1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-class\"\n  }), \".076\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"sec\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Results\"), \" :\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Tests\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"run\"), \": 1, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Failures\"), \": 0, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Errors\"), \": 0, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-selector-tag\"\n  }), \"Skipped\"), \": 0\\n\")), mdx(\"p\", null, \"And we are done, we now have a API that fol\\xADlow the con\\xADtract, you can now keep de\\xADvel\\xADop\\xADing your API and im\\xADple\\xADmen\\xADta\\xADtion and have a test dri\\xADven ap\\xADproach to be sure that the con\\xADtract is not bro\\xADken.\"), mdx(\"h2\", {\n    \"id\": \"next-steps\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#next-steps\"\n  })), \"Next steps\"), mdx(\"p\", null, \"Until now you have learn how to in\\xADte\\xADgrate RAML into Vert.x and CI, how\\xADever the users of your API will not be able to know much about the API yet since its doc\\xADu\\xADmen\\xADta\\xADtion is not pub\\xADlicly avail\\xADable. So lets pub\\xADlish on\\xADline the doc\\xADu\\xADmen\\xADta\\xADtion of your API, of course if your API is pri\\xADvate you do not need to fol\\xADlow these steps.\"), mdx(\"p\", null, \"In order to do this all we need it to in\\xADclude in our ap\\xADpli\\xADca\\xADtion the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mulesoft/api-console\"\n  }), \"RAML con\\xADsole\"), \", the fastest way to do this is just down\\xADload a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mulesoft/api-console/releases\"\n  }), \"re\\xADlease\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resouces/webroot\"), \" and in the orig\\xADi\\xADnal ap\\xADpli\\xADca\\xADtion Vert.x Router we add a Sta\\xADtic Con\\xADtent Han\\xADdler to serve the con\\xADsole files. Your ap\\xADpli\\xADca\\xADtion source code should look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Router router = Router.router(vertx);\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/hello\\\"\"), \").handler(rc -> {\\n      rc.response()\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")\\n          .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"greeting\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello World!\\\"\"), \").encode());\\n    });\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// optionally enable the web console so users can play with your API\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// online from their web browsers\"), \"\\n    router.route().handler(StaticHandler.create());\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n  }\\n}\\n\")), mdx(\"p\", null, \"Once you start you ap\\xADpli\\xADca\\xADtion open a browser point\\xADing at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8080?raml=/api/hello.raml\"\n  }), \"con\\xADsole\"), \". Once you do that you should be pre\\xADsented with some\\xADthing sim\\xADi\\xADlar to this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-contract-driven-rest-services/raml-console.png\",\n    \"alt\": \"apiconsole\"\n  }))), mdx(\"h2\", {\n    \"id\": \"article-source-code\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#article-source-code\"\n  })), \"Article source code\"), mdx(\"p\", null, \"You can get the full source code for this ar\\xADti\\xADcle \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/tree/experiments/raml\"\n  }), \"here\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We see a new trend in de¬≠vel¬≠op¬≠ment where we are shift¬≠ing from de¬≠vel¬≠op¬≠ing ap¬≠pli¬≠ca¬≠tions to de¬≠velop APIs. More and more we see ser¬≠vices being of¬≠fered as REST APIs that we are al¬≠lowed to con¬≠sume and we al¬≠ready see this trend from the big names in the in¬≠dus¬≠try, e.g.: <a href=\"https://developers.facebook.com/\">Face¬≠book</a>, <a href=\"https://www.mediawiki.org/wiki/API:Main_page\">Wikipedia</a>, <a href=\"https://developer.amazon.com/public/apis\">Ama¬≠zon</a>, <a href=\"https://dev.twitter.com/overview/documentation\">Twit¬≠ter</a>, <a href=\"https://developers.google.com/apis-explorer/#p/\">Google</a> and <a href=\"https://www.reddit.com/dev/api\">Red¬≠dit</a> they all offer APIs.</p><p>Of course mak¬≠ing an REST API using Vert.x is quite sim¬≠ple, just use <a href=\"http://vertx.io/docs/#web\">Vert.x Web</a> and you can start writ¬≠ing your API in sec¬≠onds, how¬≠ever an API with¬≠out doc¬≠u¬≠men¬≠ta¬≠tion is not an API since no de¬≠vel¬≠oper will know how to use it. How¬≠ever this is one of the most sen¬≠si¬≠tive is¬≠sues to tackle in soft¬≠ware de¬≠vel¬≠op¬≠ment, no¬≠body likes to write doc¬≠u¬≠men¬≠ta¬≠tion. How¬≠ever, in the REST age where REST-‚Äãbased web-‚Äãservices are ubiq¬≠ui¬≠tous, doc¬≠u¬≠men¬≠ta¬≠tion for pub¬≠lic web-‚Äãservices is a ne¬≠ces¬≠sity. There are a lot of tools out there, two of the most pop¬≠u¬≠lar are with¬≠out a doubt:</p><ul><li><a href=\"http://swagger.io\">Swag¬≠ger</a></li><li><a href=\"http://raml.org\">RAML</a></li></ul><p>Both frame¬≠works have a large ecosys¬≠tem of tools and tool¬≠ing around but they tackle the doc¬≠u¬≠men¬≠ta¬≠tion from two dif¬≠fer¬≠ent per¬≠spec¬≠tives. While Swag¬≠ger is purely a doc¬≠u¬≠men¬≠ta¬≠tion tool it tack¬≠les the prob¬≠lem from bot¬≠tom up and RAML does doc¬≠u¬≠ment top down. They both rely on a doc¬≠u¬≠ment (<code>JSON</code> for Swag¬≠ger, <code>YAML</code> for RAML).</p><p>I‚Äôll now go over build¬≠ing a sim¬≠ple Hello World API, doc¬≠u¬≠ment it and test it. For this ex¬≠am¬≠ple I‚Äôll choose RAML since it feels more nat¬≠ural to the way we code with Vert.x Web.</p><h2 id=\"define-the-hello-world-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#define-the-hello-world-api\"></a>Define the Hello World API</h2><p>We need a con¬≠tract and as with any other de¬≠vel¬≠op¬≠ment we need some spec¬≠i¬≠fi¬≠ca¬≠tion, You can learn about RAML in its <a href=\"http://raml.org\">web¬≠site</a> and quickly see how easy it is to get started. So we start with the fol¬≠low¬≠ing spec¬≠i¬≠fi¬≠ca¬≠tion:</p><pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\">#%RAML 0.8</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">Hello</span> <span class=\"hljs-string\">world</span> <span class=\"hljs-string\">REST</span> <span class=\"hljs-string\">API</span>\n<span class=\"hljs-attr\">baseUri:</span> <span class=\"hljs-string\">http://localhost:8080/</span>\n<span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-string\">/hello:</span>\n  <span class=\"hljs-attr\">get:</span>\n    <span class=\"hljs-attr\">responses:</span>\n      <span class=\"hljs-attr\">200:</span>\n        <span class=\"hljs-attr\">body:</span>\n          <span class=\"hljs-attr\">application/json:</span>\n            <span class=\"hljs-attr\">schema:</span> <span class=\"hljs-string\">|\n              { &quot;$schema&quot;: &quot;http://json-schema.org/schema&quot;,\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;description&quot;: &quot;Hello World Greeting&quot;,\n                &quot;properties&quot;: {\n                  &quot;greeting&quot;:  { &quot;type&quot;: &quot;string&quot; }\n                },\n                &quot;required&quot;: [ &quot;greeting&quot; ]\n              }\n</span></code></pre><p>So if you didn‚Äôt un¬≠der¬≠stood why I named RAML as a top down doc¬≠u¬≠men¬≠ta¬≠tion tool, I think it be¬≠comes clear now. So there are some basic de¬≠f¬≠i¬≠n¬≠i¬≠tion on the top of the file like, <code>title</code>, <code>baseUri</code> and <code>version</code> which should be self ex¬≠plana¬≠tory.</p><p>And then we start with the API doc¬≠u¬≠men¬≠ta¬≠tion, so we spec¬≠ify that at the <code>URL</code> <code>/hello</code> using the HTTP verb <code>GET</code> you are ex¬≠pected to get a re¬≠sponse with sta¬≠tus code <code>200</code> and the body of the re¬≠sponse should have con¬≠tent type <code>application/json</code>. This is a very min¬≠i¬≠mal doc¬≠u¬≠ment, one could go over and spec¬≠ify the <a href=\"http://json-schema.org/\"><code>json schema</code></a> for the re¬≠sponse, input val¬≠ues, etc‚Ä¶, how¬≠ever lets just keep it sim¬≠ple for this ex¬≠am¬≠ple.</p><div class=\"alert info\"><p>If you do not like to write yaml in your ed¬≠i¬≠tor you can al¬≠ways use the <a href=\"http://raml.org/projects.html\">API De¬≠signer</a> which gives you in¬≠stant feed¬≠back on your API doc¬≠u¬≠ment and pro¬≠vides a test¬≠ing plat¬≠form.</p></div><h2 id=\"implement-the-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implement-the-api\"></a>Implement the API</h2><p>So you got your con¬≠tract, time to im¬≠ple¬≠ment it, this is a very sim¬≠ple API so I‚Äôll jump to the code im¬≠me¬≠di¬≠ately:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n    Router router = Router.router(vertx);\n\n    router.get(<span class=\"hljs-string\">&quot;/hello&quot;</span>).handler(rc -&gt; {\n      rc.response()\n          .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>)\n          .end(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;greeting&quot;</span>, <span class=\"hljs-string\">&quot;Hello World!&quot;</span>).encode());\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n  }\n}\n</code></pre><p>As you can see the code re¬≠sem¬≠bles the con¬≠tract doc¬≠u¬≠ment, when there is a <code>GET</code> re¬≠quest to <code>/hello</code> we send to the client a empty <code>JSON</code> doc¬≠u¬≠ment <code>{}</code>.</p><h2 id=\"are-we-done\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#are-we-done\"></a>Are we done?</h2><p>The an¬≠swer is <strong>NO!!!</strong> how can we be sure that our im¬≠ple¬≠men¬≠ta¬≠tion does com¬≠ply to the con¬≠tract? We need to test. As I wrote be¬≠fore there is no spe¬≠cific sup¬≠port for Vert.x from RAML or other tools how¬≠ever in this case it is not a prob¬≠lem we can still test our code with¬≠out hav¬≠ing the need to im¬≠ple¬≠ment a test frame¬≠work from the ground up.</p><h2 id=\"testing-our-contract\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#testing-our-contract\"></a>Testing our contract</h2><p>The ini¬≠tial step is to setup a test, this should be triv¬≠ial we are using Java (al¬≠though we could test any of Vert.x\nsup¬≠ported lan¬≠guages using the same tech¬≠nique). We cre¬≠ate a <a href=\"http://junit.org/\">JUnit</a> unit test.</p><div class=\"alert info\"><p>For this ex¬≠am¬≠ple, I will be using JUnit in¬≠stead of Vert.x Test mostly to let you know that Vert.x isn‚Äôt an opin¬≠ion¬≠ated frame¬≠work, so you are free to choose the tool that best fits you.</p></div><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">APITest</span> </span>{\n\n  <span class=\"hljs-meta\">@BeforeClass</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bootApp</span><span class=\"hljs-params\">()</span> </span>{\n    Runner.run(App.class);\n  }\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testHelloEndpoint</span><span class=\"hljs-params\">()</span> </span>{\n  }\n}\n</code></pre><p>So at this mo¬≠ment you have a sim¬≠ple test, I‚Äôll share the code of the run¬≠ner class (ba¬≠si¬≠cally it just in¬≠stan¬≠ti¬≠ates a\n<code>Vertx</code> in¬≠stance and load the <code>verticle</code> we just im¬≠ple¬≠mented above) and has a empty test <code>testHelloEndpoint</code>.</p><h3 id=\"load-the-api-definition-into-the-test\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#load-the-api-definition-into-the-test\"></a>Load the API definition into the test</h3><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">APITest</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> RamlDefinition api = RamlLoaders.fromClasspath()\n        .load(<span class=\"hljs-string\">&quot;/api/hello.raml&quot;</span>)\n        .assumingBaseUri(<span class=\"hljs-string\">&quot;http://localhost:8080/&quot;</span>);\n\n  <span class=\"hljs-keyword\">private</span> CheckingWebTarget checking;\n\n  ...\n}\n</code></pre><p>So the first step is to load the <code>API</code> de¬≠f¬≠i¬≠n¬≠i¬≠tion into our test and have a ref¬≠er¬≠ence to a <code>CheckingWebTarget</code> ob¬≠ject. The check¬≠ing ob¬≠ject is where you can per¬≠form as¬≠ser¬≠tions, but to do this we need some client make REST calls in order to test.</p><h3 id=\"create-a-rest-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#create-a-rest-client\"></a>Create a REST client</h3><p>There are many op¬≠tions for this, you could use <code>JAX-RS</code>, <code>RestAssured</code>, <code>RestEasy</code>, etc‚Ä¶ so I‚Äôll pick <code>RestEasy</code> for now:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">APITest</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> RamlDefinition api = RamlLoaders.fromClasspath()\n      .load(<span class=\"hljs-string\">&quot;/api/hello.raml&quot;</span>)\n      .assumingBaseUri(<span class=\"hljs-string\">&quot;http://localhost:8080/&quot;</span>);\n\n  <span class=\"hljs-keyword\">private</span> ResteasyClient client = <span class=\"hljs-keyword\">new</span> ResteasyClientBuilder().build();\n  <span class=\"hljs-keyword\">private</span> CheckingWebTarget checking;\n\n  <span class=\"hljs-meta\">@BeforeClass</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bootApp</span><span class=\"hljs-params\">()</span> </span>{\n    Runner.run(App.class);\n  }\n\n  <span class=\"hljs-meta\">@Before</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createTarget</span><span class=\"hljs-params\">()</span> </span>{\n    checking = api.createWebTarget(client.target(<span class=\"hljs-string\">&quot;http://localhost:8080&quot;</span>));\n  }\n\n  ...\n}\n</code></pre><h3 id=\"implement-the-test\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implement-the-test\"></a>Implement the test</h3><p>All of the boil¬≠er¬≠plate code is in place and if you look at the pre¬≠vi¬≠ous sec¬≠tion you will see that it wasn‚Äôt that bad, just a few lines and you loaded the RAML con¬≠tract, cre¬≠ated a REST client and started up your ap¬≠pli¬≠ca¬≠tion and all this under ~10 lines of code.</p><p>So lets fin¬≠ish and im¬≠ple¬≠ment the ver¬≠i¬≠fi¬≠ca¬≠tion of the con¬≠tract:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">APITest</span> </span>{\n  ...\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testHelloEndpoint</span><span class=\"hljs-params\">()</span> </span>{\n    checking.path(<span class=\"hljs-string\">&quot;/hello&quot;</span>).request().get();\n    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());\n  }\n}\n</code></pre><p>Once you run your tests, you will see:</p><pre><code class=\"hljs language-css\">13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.200</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">o</span><span class=\"hljs-selector-class\">.a</span><span class=\"hljs-selector-class\">.h</span><span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.conn</span><span class=\"hljs-selector-class\">.DefaultClientConnection</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Sending</span> <span class=\"hljs-selector-tag\">request</span>: <span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">hello</span> <span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.201</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &gt;&gt; &quot;<span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">hello</span> <span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &gt;&gt; &quot;<span class=\"hljs-selector-tag\">Accept-Encoding</span>: <span class=\"hljs-selector-tag\">gzip</span>, <span class=\"hljs-selector-tag\">deflate</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &gt;&gt; &quot;<span class=\"hljs-selector-tag\">Host</span>: <span class=\"hljs-selector-tag\">localhost</span><span class=\"hljs-selector-pseudo\">:8080</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &gt;&gt; &quot;<span class=\"hljs-selector-tag\">Connection</span>: <span class=\"hljs-selector-tag\">Keep-Alive</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &gt;&gt; &quot;<span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &gt;&gt; <span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">hello</span> <span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.202</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &gt;&gt; <span class=\"hljs-selector-tag\">Accept-Encoding</span>: <span class=\"hljs-selector-tag\">gzip</span>, <span class=\"hljs-selector-tag\">deflate</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.203</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &gt;&gt; <span class=\"hljs-selector-tag\">Host</span>: <span class=\"hljs-selector-tag\">localhost</span><span class=\"hljs-selector-pseudo\">:8080</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.203</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &gt;&gt; <span class=\"hljs-selector-tag\">Connection</span>: <span class=\"hljs-selector-tag\">Keep-Alive</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.412</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &lt;&lt; &quot;<span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span> 200 <span class=\"hljs-selector-tag\">OK</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.413</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &lt;&lt; &quot;<span class=\"hljs-selector-tag\">content-type</span>: <span class=\"hljs-selector-tag\">application</span>/<span class=\"hljs-selector-tag\">json</span><span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.413</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &lt;&lt; &quot;<span class=\"hljs-selector-tag\">Content-Length</span>: 2<span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.413</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &lt;&lt; &quot;<span class=\"hljs-selector-attr\">[\\r]</span><span class=\"hljs-selector-attr\">[\\n]</span>&quot;\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.414</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">o</span><span class=\"hljs-selector-class\">.a</span><span class=\"hljs-selector-class\">.h</span><span class=\"hljs-selector-class\">.i</span><span class=\"hljs-selector-class\">.conn</span><span class=\"hljs-selector-class\">.DefaultClientConnection</span> <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Receiving</span> <span class=\"hljs-selector-tag\">response</span>: <span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span> 200 <span class=\"hljs-selector-tag\">OK</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.414</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &lt;&lt; <span class=\"hljs-selector-tag\">HTTP</span>/1<span class=\"hljs-selector-class\">.1</span> 200 <span class=\"hljs-selector-tag\">OK</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.415</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &lt;&lt; <span class=\"hljs-selector-tag\">content-type</span>: <span class=\"hljs-selector-tag\">application</span>/<span class=\"hljs-selector-tag\">json</span>\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.415</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.headers</span> <span class=\"hljs-selector-tag\">-</span> &lt;&lt; <span class=\"hljs-selector-tag\">Content-Length</span>: 2\n13<span class=\"hljs-selector-pseudo\">:09</span><span class=\"hljs-selector-pseudo\">:28.429</span> <span class=\"hljs-selector-attr\">[main]</span> <span class=\"hljs-selector-tag\">DEBUG</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.wire</span> <span class=\"hljs-selector-tag\">-</span>  &lt;&lt; &quot;{}&quot;\n<span class=\"hljs-selector-tag\">Tests</span> <span class=\"hljs-selector-tag\">run</span>: 1, <span class=\"hljs-selector-tag\">Failures</span>: 0, <span class=\"hljs-selector-tag\">Errors</span>: 0, <span class=\"hljs-selector-tag\">Skipped</span>: 0, <span class=\"hljs-selector-tag\">Time</span> <span class=\"hljs-selector-tag\">elapsed</span>: 1<span class=\"hljs-selector-class\">.076</span> <span class=\"hljs-selector-tag\">sec</span>\n\n<span class=\"hljs-selector-tag\">Results</span> :\n\n<span class=\"hljs-selector-tag\">Tests</span> <span class=\"hljs-selector-tag\">run</span>: 1, <span class=\"hljs-selector-tag\">Failures</span>: 0, <span class=\"hljs-selector-tag\">Errors</span>: 0, <span class=\"hljs-selector-tag\">Skipped</span>: 0\n</code></pre><p>And we are done, we now have a API that fol¬≠low the con¬≠tract, you can now keep de¬≠vel¬≠op¬≠ing your API and im¬≠ple¬≠men¬≠ta¬≠tion and have a test dri¬≠ven ap¬≠proach to be sure that the con¬≠tract is not bro¬≠ken.</p><h2 id=\"next-steps\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#next-steps\"></a>Next steps</h2><p>Until now you have learn how to in¬≠te¬≠grate RAML into Vert.x and CI, how¬≠ever the users of your API will not be able to know much about the API yet since its doc¬≠u¬≠men¬≠ta¬≠tion is not pub¬≠licly avail¬≠able. So lets pub¬≠lish on¬≠line the doc¬≠u¬≠men¬≠ta¬≠tion of your API, of course if your API is pri¬≠vate you do not need to fol¬≠low these steps.</p><p>In order to do this all we need it to in¬≠clude in our ap¬≠pli¬≠ca¬≠tion the <a href=\"https://github.com/mulesoft/api-console\">RAML con¬≠sole</a>, the fastest way to do this is just down¬≠load a <a href=\"https://github.com/mulesoft/api-console/releases\">re¬≠lease</a> to <code>src/main/resouces/webroot</code> and in the orig¬≠i¬≠nal ap¬≠pli¬≠ca¬≠tion Vert.x Router we add a Sta¬≠tic Con¬≠tent Han¬≠dler to serve the con¬≠sole files. Your ap¬≠pli¬≠ca¬≠tion source code should look like this:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n    Router router = Router.router(vertx);\n\n    router.get(<span class=\"hljs-string\">&quot;/hello&quot;</span>).handler(rc -&gt; {\n      rc.response()\n          .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>)\n          .end(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;greeting&quot;</span>, <span class=\"hljs-string\">&quot;Hello World!&quot;</span>).encode());\n    });\n\n    <span class=\"hljs-comment\">// optionally enable the web console so users can play with your API</span>\n    <span class=\"hljs-comment\">// online from their web browsers</span>\n    router.route().handler(StaticHandler.create());\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n  }\n}\n</code></pre><p>Once you start you ap¬≠pli¬≠ca¬≠tion open a browser point¬≠ing at the <a href=\"http://localhost:8080?raml=/api/hello.raml\">con¬≠sole</a>. Once you do that you should be pre¬≠sented with some¬≠thing sim¬≠i¬≠lar to this:</p><p><img src=\"/images/blog/vertx3-contract-driven-rest-services/raml-console.png\" alt=\"apiconsole\"/></p><h2 id=\"article-source-code\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#article-source-code\"></a>Article source code</h2><p>You can get the full source code for this ar¬≠ti¬≠cle <a href=\"https://github.com/pmlopes/vert-x3-experiments/tree/experiments/raml\">here</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"api","tf":21},{"term":"test","tf":18},{"term":"document","tf":16},{"term":"code","tf":11},{"term":"raml","tf":10},{"term":"us","tf":9},{"term":"contract","tf":9},{"term":"implement","tf":8},{"term":"develop","tf":7},{"term":"rest","tf":7},{"term":"not","tf":7},{"term":"tool","tf":7},{"term":"need","tf":7},{"term":"applic","tf":6},{"term":"just","tf":6},{"term":"start","tf":6},{"term":"howev","tf":6},{"term":"simpl","tf":5},{"term":"will","tf":5},{"term":"ll","tf":5},{"term":"web","tf":4},{"term":"let","tf":4},{"term":"client","tf":4},{"term":"step","tf":4},{"term":"load","tf":4}]}],"numPages":9},"__N_SSG":true}