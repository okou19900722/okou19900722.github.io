{"pageProps":{"categories":["releases","guides","news"],"category":"guides","page":8,"posts":[{"filename":"blog/2015-09-14-writing-secure-vert-x-web-apps.mdx","date":"2015-09-14","slug":"writing-secure-vert-x-web-apps","meta":{"title":"Writing secure Vert.x Web apps","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"This is a starting guide for securing Vert.x web applications. Standard rules and practices apply to Vert.x apps as if they would to any other web framework."},"readingTime":{"text":"5 min read","minutes":4.215,"time":252899.99999999997,"words":843},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a start\\xADing guide for se\\xADcur\\xADing vert.x web ap\\xADpli\\xADca\\xADtions. It is by no means a com\\xADpre\\xADhen\\xADsive guide on web ap\\xADpli\\xADca\\xADtion se\\xADcu\\xADrity such as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.owasp.org\"\n  }), \"OWASP\"), \". Stan\\xADdard rules and prac\\xADtices apply to vert.x apps as if they would to any other web frame\\xADwork.\"), mdx(\"p\", null, \"The post will cover the items that al\\xADways seem to come up on fo\\xADrums.\"), mdx(\"h2\", {\n    \"id\": \"dont-run-as-root\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dont-run-as-root\"\n  })), \"Don\\u2019t run as root\"), mdx(\"p\", null, \"It is a com\\xADmon prac\\xADtise that your de\\xADvops team mem\\xADber will con\\xADstantly say, one shall run a ser\\xADvice with the least amount of priv\\xADi\\xADleges nec\\xADes\\xADsary and no more. Al\\xADthough this might sound like folk\\xADlore to less ex\\xADpe\\xADri\\xADenced de\\xADvel\\xADop\\xADers that hit an issue when try\\xADing to run on priv\\xADi\\xADleged ports 80, 443, run\\xADning as root solves it quickly but open a door to big\\xADger prob\\xADlems. Lets look at this code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n\\n    router.route().handler(StaticHandler.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"));\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"80\"), \");\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"When started with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CWD\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -Dvertx.cwd=/ ...\"), \") you just cre\\xADated a sim\\xADple file server for all your server stor\\xADage. Now imag\\xADine that you want to start this ap\\xADpli\\xADca\\xADtion you will hit the error:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Aug 26, 2015 2:02:18 PM io.vertx.core.http.impl.HttpServerImpl\\nSEVERE: java.net.SocketException: Permission denied\\n\")), mdx(\"p\", null, \"So if you do now run as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root\"), \" it will start, how\\xADever in your browser now try to nav\\xADi\\xADgate to: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost/etc/shadow\"), \" con\\xADgrat\\xADu\\xADla\\xADtions you just ex\\xADposed your server \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"logins\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"and\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"passwords\"), \"!\"), mdx(\"p\", null, \"There are sev\\xADeral ways to run as a under priv\\xADi\\xADleged user, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iptables\"), \" to for\\xADward re\\xADquests to higher ports, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"authbind\"), \", run be\\xADhind a proxy like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ngnix\"), \", etc\\u2026\"), mdx(\"h2\", {\n    \"id\": \"sessions\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#sessions\"\n  })), \"Sessions\"), mdx(\"p\", null, \"Many ap\\xADpli\\xADca\\xADtions are going to deal with user ses\\xADsions at some point.\"), mdx(\"p\", null, \"Ses\\xADsion cook\\xADies should have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SECURE\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTPOnly\"), \" flags set. This en\\xADsures that they can only be sent over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTPS\"), \" (you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTPS\"), \" right?) and there is no script ac\\xADcess to the cookie client side:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Router router = Router.router(vertx);\\n\\nrouter.route().handler(CookieHandler.create());\\nrouter.route().handler(SessionHandler\\n    .create(LocalSessionStore.create(vertx))\\n    .setCookieHttpOnlyFlag(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \")\\n    .setCookieSecureFlag(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \")\\n);\\n\\nrouter.route().handler(routingContext -> {\\n\\n  Session session = routingContext.session();\\n\\n  Integer cnt = session.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"hitcount\\\"\"), \");\\n  cnt = (cnt == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" ? \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \" : cnt) + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n\\n  session.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"hitcount\\\"\"), \", cnt);\\n\\n  routingContext.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hitcount: \\\"\"), \" + cnt);\\n});\\n\\nvertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \"And in this case when in\\xADspect\\xADing your browser you should see:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-secure-webapps/nocookie.png\",\n    \"alt\": \"nocookie\"\n  }))), mdx(\"p\", null, \"Of course if you do not do that any script on your browser has the ca\\xADpa\\xADbil\\xADity of read\\xADing, sniff\\xADing hi\\xADjack\\xADing or tam\\xADper\\xADing your ses\\xADsions.\"), mdx(\"h2\", {\n    \"id\": \"security-headers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#security-headers\"\n  })), \"Security Headers\"), mdx(\"p\", null, \"There are plenty of se\\xADcu\\xADrity head\\xADers that help im\\xADprove se\\xADcu\\xADrity with just a cou\\xADple of lines of code. There is no need to ex\\xADplain them here since there are good \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://recxltd.blogspot.nl/2012/03/seven-web-server-http-headers-that.html\"\n  }), \"ar\\xADti\\xADcles\"), \" on\\xADline that will prob\\xADa\\xADbly do it bet\\xADter than me.\"), mdx(\"p\", null, \"Here is how one could im\\xADple\\xADment a cou\\xADple of them:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n    router.route().handler(ctx -> {\\n      ctx.response()\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do not allow proxies to cache the data\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Cache-Control\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"no-store, no-cache\\\"\"), \")\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// prevents Internet Explorer from MIME - sniffing a\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// response away from the declared content-type\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"X-Content-Type-Options\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"nosniff\\\"\"), \")\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Strict HTTPS (for about ~6Months)\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Strict-Transport-Security\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"max-age=\\\"\"), \" + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"15768000\"), \")\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// IE8+ do not allow opening of attachments in the context of this resource\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"X-Download-Options\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"noopen\\\"\"), \")\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// enable XSS for IE\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"X-XSS-Protection\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1; mode=block\\\"\"), \")\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// deny frames\"), \"\\n          .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"X-FRAME-OPTIONS\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"DENY\\\"\"), \");\\n    });\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"cross-site-request-forgery-csrf-protection\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#cross-site-request-forgery-csrf-protection\"\n  })), \"Cross-Site Request Forgery (CSRF) Protection\"), mdx(\"p\", null, \"Vert.x web pro\\xADvides CSRF pro\\xADtec\\xADtion using an in\\xADcluded han\\xADdler. To en\\xADable CSRF pro\\xADtec\\xADtions you need to add it to your router as you would add any other han\\xADdler:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n\\n    router.route().handler(CookieHandler.create());\\n    router.route().handler(SessionHandler\\n        .create(LocalSessionStore.create(vertx))\\n        .setCookieSecureFlag(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \")\\n    );\\n    router.route().handler(CSRFHandler.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"not a good secret\\\"\"), \"));\\n\\n    router.route().handler(ctx -> {\\n      ...\\n    });\\n\")), mdx(\"p\", null, \"The han\\xADdler adds a CSRF token to re\\xADquests which mu\\xADtate state. In order change the state a (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"XSRF-TOKEN\"), \") cookie is set with a unique token, that is ex\\xADpected to be sent back in a (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X-XSRF-TOKEN\"), \") header.\"), mdx(\"h2\", {\n    \"id\": \"limit-uploads\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#limit-uploads\"\n  })), \"Limit uploads\"), mdx(\"p\", null, \"When deal\\xADing with up\\xADloads \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"al\\xADways\"), \" de\\xADfine a upper bound, oth\\xADer\\xADwise you will be vul\\xADner\\xADa\\xADble to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DDoS\"), \" at\\xADtacks. For ex\\xADam\\xADple lets say that you have the fol\\xADlow\\xADing code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n\\n    router.route().handler(BodyHandler.create());\\n\\n    router.route().handler(ctx -> {\\n      ...\\n\")), mdx(\"p\", null, \"Now a bad in\\xADten\\xADtioned per\\xADson could gen\\xADer\\xADate a ran\\xADdom file with 1GB of trash:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-routeros\"\n  }), \"dd \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"if\"), \"=/dev/urandom \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"of\"), \"=ddos \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"bs\"), \"=1G \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"count\"), \"=1\\n\")), mdx(\"p\", null, \"And then up\\xADload it to your server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-nginx\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"curl\"), \" --data-binary \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"@ddos\"), \"\\\"\"), \" -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Content-Type: application/octet-stream\\\"\"), \" -X POST http://localhost:8080/\\n\")), mdx(\"p\", null, \"Your ap\\xADpli\\xADca\\xADtion will hap\\xADpily try to han\\xADdle this until one of 2 things hap\\xADpens, it will run out of disk space or mem\\xADory. In order to mit\\xADi\\xADgate these kind of at\\xADtacks al\\xADways spec\\xADify the max\\xADi\\xADmum al\\xADlowed up\\xADload size:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" KB = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1024\"), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" MB = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1024\"), \" * KB;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n    router.route().handler(BodyHandler.create().setBodyLimit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"50\"), \" * MB));\\n\")), mdx(\"h2\", {\n    \"id\": \"final-words\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#final-words\"\n  })), \"Final Words\"), mdx(\"p\", null, \"Al\\xADthough this is just a small list of things you should re\\xADmem\\xADber when im\\xADple\\xADment\\xADing your ap\\xADpli\\xADca\\xADtion there are more com\\xADpre\\xADhen\\xADsive check\\xADlists to check:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\"\n  }), \"OWASP Top Ten Project\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.owasp.org/index.php/Preventing_SQL_Injection_in_Java\"\n  }), \"Pre\\xADvent\\xADing SQL In\\xADjec\\xADtion in Java\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.owasp.org/index.php/Testing_for_NoSQL_injection\"\n  }), \"Test\\xADing for NoSQL in\\xADjec\\xADtion\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This is a start­ing guide for se­cur­ing vert.x web ap­pli­ca­tions. It is by no means a com­pre­hen­sive guide on web ap­pli­ca­tion se­cu­rity such as <a href=\"https://www.owasp.org\">OWASP</a>. Stan­dard rules and prac­tices apply to vert.x apps as if they would to any other web frame­work.</p><p>The post will cover the items that al­ways seem to come up on fo­rums.</p><h2 id=\"dont-run-as-root\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dont-run-as-root\"></a>Don’t run as root</h2><p>It is a com­mon prac­tise that your de­vops team mem­ber will con­stantly say, one shall run a ser­vice with the least amount of priv­i­leges nec­es­sary and no more. Al­though this might sound like folk­lore to less ex­pe­ri­enced de­vel­op­ers that hit an issue when try­ing to run on priv­i­leged ports 80, 443, run­ning as root solves it quickly but open a door to big­ger prob­lems. Lets look at this code:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(StaticHandler.create(<span class=\"hljs-string\">&quot;&quot;</span>));\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">80</span>);\n  }\n}\n\n</code></pre><p>When started with the <code>CWD</code> set to <code>/</code> (<code>java -Dvertx.cwd=/ ...</code>) you just cre­ated a sim­ple file server for all your server stor­age. Now imag­ine that you want to start this ap­pli­ca­tion you will hit the error:</p><pre><code class=\"hljs language-text\">Aug 26, 2015 2:02:18 PM io.vertx.core.http.impl.HttpServerImpl\nSEVERE: java.net.SocketException: Permission denied\n</code></pre><p>So if you do now run as <code>root</code> it will start, how­ever in your browser now try to nav­i­gate to: <code>http://localhost/etc/shadow</code> con­grat­u­la­tions you just ex­posed your server <code>logins</code> <strong>and</strong> <code>passwords</code>!</p><p>There are sev­eral ways to run as a under priv­i­leged user, you can use <code>iptables</code> to for­ward re­quests to higher ports, use <code>authbind</code>, run be­hind a proxy like <code>ngnix</code>, etc…</p><h2 id=\"sessions\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#sessions\"></a>Sessions</h2><p>Many ap­pli­ca­tions are going to deal with user ses­sions at some point.</p><p>Ses­sion cook­ies should have the <code>SECURE</code> and <code>HTTPOnly</code> flags set. This en­sures that they can only be sent over <code>HTTPS</code> (you are using <code>HTTPS</code> right?) and there is no script ac­cess to the cookie client side:</p><pre><code class=\"hljs language-java\">Router router = Router.router(vertx);\n\nrouter.route().handler(CookieHandler.create());\nrouter.route().handler(SessionHandler\n    .create(LocalSessionStore.create(vertx))\n    .setCookieHttpOnlyFlag(<span class=\"hljs-keyword\">true</span>)\n    .setCookieSecureFlag(<span class=\"hljs-keyword\">true</span>)\n);\n\nrouter.route().handler(routingContext -&gt; {\n\n  Session session = routingContext.session();\n\n  Integer cnt = session.get(<span class=\"hljs-string\">&quot;hitcount&quot;</span>);\n  cnt = (cnt == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : cnt) + <span class=\"hljs-number\">1</span>;\n\n  session.put(<span class=\"hljs-string\">&quot;hitcount&quot;</span>, cnt);\n\n  routingContext.response().end(<span class=\"hljs-string\">&quot;Hitcount: &quot;</span> + cnt);\n});\n\nvertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p>And in this case when in­spect­ing your browser you should see:</p><p><img src=\"/images/blog/vertx3-secure-webapps/nocookie.png\" alt=\"nocookie\"/></p><p>Of course if you do not do that any script on your browser has the ca­pa­bil­ity of read­ing, sniff­ing hi­jack­ing or tam­per­ing your ses­sions.</p><h2 id=\"security-headers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#security-headers\"></a>Security Headers</h2><p>There are plenty of se­cu­rity head­ers that help im­prove se­cu­rity with just a cou­ple of lines of code. There is no need to ex­plain them here since there are good <a href=\"http://recxltd.blogspot.nl/2012/03/seven-web-server-http-headers-that.html\">ar­ti­cles</a> on­line that will prob­a­bly do it bet­ter than me.</p><p>Here is how one could im­ple­ment a cou­ple of them:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n    router.route().handler(ctx -&gt; {\n      ctx.response()\n          <span class=\"hljs-comment\">// do not allow proxies to cache the data</span>\n          .putHeader(<span class=\"hljs-string\">&quot;Cache-Control&quot;</span>, <span class=\"hljs-string\">&quot;no-store, no-cache&quot;</span>)\n          <span class=\"hljs-comment\">// prevents Internet Explorer from MIME - sniffing a</span>\n          <span class=\"hljs-comment\">// response away from the declared content-type</span>\n          .putHeader(<span class=\"hljs-string\">&quot;X-Content-Type-Options&quot;</span>, <span class=\"hljs-string\">&quot;nosniff&quot;</span>)\n          <span class=\"hljs-comment\">// Strict HTTPS (for about ~6Months)</span>\n          .putHeader(<span class=\"hljs-string\">&quot;Strict-Transport-Security&quot;</span>, <span class=\"hljs-string\">&quot;max-age=&quot;</span> + <span class=\"hljs-number\">15768000</span>)\n          <span class=\"hljs-comment\">// IE8+ do not allow opening of attachments in the context of this resource</span>\n          .putHeader(<span class=\"hljs-string\">&quot;X-Download-Options&quot;</span>, <span class=\"hljs-string\">&quot;noopen&quot;</span>)\n          <span class=\"hljs-comment\">// enable XSS for IE</span>\n          .putHeader(<span class=\"hljs-string\">&quot;X-XSS-Protection&quot;</span>, <span class=\"hljs-string\">&quot;1; mode=block&quot;</span>)\n          <span class=\"hljs-comment\">// deny frames</span>\n          .putHeader(<span class=\"hljs-string\">&quot;X-FRAME-OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;DENY&quot;</span>);\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n  }\n}\n</code></pre><h2 id=\"cross-site-request-forgery-csrf-protection\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#cross-site-request-forgery-csrf-protection\"></a>Cross-Site Request Forgery (CSRF) Protection</h2><p>Vert.x web pro­vides CSRF pro­tec­tion using an in­cluded han­dler. To en­able CSRF pro­tec­tions you need to add it to your router as you would add any other han­dler:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieSecureFlag(<span class=\"hljs-keyword\">true</span>)\n    );\n    router.route().handler(CSRFHandler.create(<span class=\"hljs-string\">&quot;not a good secret&quot;</span>));\n\n    router.route().handler(ctx -&gt; {\n      ...\n    });\n</code></pre><p>The han­dler adds a CSRF token to re­quests which mu­tate state. In order change the state a (<code>XSRF-TOKEN</code>) cookie is set with a unique token, that is ex­pected to be sent back in a (<code>X-XSRF-TOKEN</code>) header.</p><h2 id=\"limit-uploads\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#limit-uploads\"></a>Limit uploads</h2><p>When deal­ing with up­loads <strong>al­ways</strong> de­fine a upper bound, oth­er­wise you will be vul­ner­a­ble to <code>DDoS</code> at­tacks. For ex­am­ple lets say that you have the fol­low­ing code:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(BodyHandler.create());\n\n    router.route().handler(ctx -&gt; {\n      ...\n</code></pre><p>Now a bad in­ten­tioned per­son could gen­er­ate a ran­dom file with 1GB of trash:</p><pre><code class=\"hljs language-routeros\">dd <span class=\"hljs-attribute\">if</span>=/dev/urandom <span class=\"hljs-attribute\">of</span>=ddos <span class=\"hljs-attribute\">bs</span>=1G <span class=\"hljs-attribute\">count</span>=1\n</code></pre><p>And then up­load it to your server:</p><pre><code class=\"hljs language-nginx\"><span class=\"hljs-attribute\">curl</span> --data-binary <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">@ddos</span>&quot;</span> -H <span class=\"hljs-string\">&quot;Content-Type: application/octet-stream&quot;</span> -X POST http://localhost:8080/\n</code></pre><p>Your ap­pli­ca­tion will hap­pily try to han­dle this until one of 2 things hap­pens, it will run out of disk space or mem­ory. In order to mit­i­gate these kind of at­tacks al­ways spec­ify the max­i­mum al­lowed up­load size:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> KB = <span class=\"hljs-number\">1024</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MB = <span class=\"hljs-number\">1024</span> * KB;\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create().setBodyLimit(<span class=\"hljs-number\">50</span> * MB));\n</code></pre><h2 id=\"final-words\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#final-words\"></a>Final Words</h2><p>Al­though this is just a small list of things you should re­mem­ber when im­ple­ment­ing your ap­pli­ca­tion there are more com­pre­hen­sive check­lists to check:</p><ul><li><a href=\"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\">OWASP Top Ten Project</a></li><li><a href=\"https://www.owasp.org/index.php/Preventing_SQL_Injection_in_Java\">Pre­vent­ing SQL In­jec­tion in Java</a></li><li><a href=\"https://www.owasp.org/index.php/Testing_for_NoSQL_injection\">Test­ing for NoSQL in­jec­tion</a></li></ul>","scope":{}},"tfIdfTerms":[{"term":"will","tf":8},{"term":"run","tf":8},{"term":"applic","tf":6},{"term":"secur","tf":5},{"term":"start","tf":4},{"term":"web","tf":4},{"term":"no","tf":4},{"term":"just","tf":4},{"term":"server","tf":4},{"term":"us","tf":4},{"term":"session","tf":4},{"term":"csrf","tf":4},{"term":"upload","tf":4},{"term":"alwai","tf":3},{"term":"on","tf":3},{"term":"privileg","tf":3},{"term":"try","tf":3},{"term":"code","tf":3},{"term":"set","tf":3},{"term":"browser","tf":3},{"term":"request","tf":3},{"term":"cooki","tf":3},{"term":"header","tf":3},{"term":"protect","tf":3},{"term":"handler","tf":3}]},{"filename":"blog/2015-08-31-vert-x3-real-time-web-apps.mdx","date":"2015-08-31","slug":"vert-x3-real-time-web-apps","meta":{"title":"Vert.x 3 real time web apps","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of Vert.x is the SockJS event bus bridge. It allows external applications to communicate with Vert.x event bus using Websockets."},"readingTime":{"text":"7 min read","minutes":7.005,"time":420300,"words":1401},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One of the in\\xADter\\xADest\\xADing fea\\xADtures of Vert.x is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sockjs.org\"\n  }), \"SockJS\"), \" event bus bridge. This piece of soft\\xADware\\nal\\xADlows ex\\xADter\\xADnal ap\\xADpli\\xADca\\xADtions to com\\xADmu\\xADni\\xADcate with Vert.x event bus using Web\\xADsock\\xADets and if your browser does not\\nsup\\xADport it then it grace\\xADfully de\\xADgrades to pool\\xADing AJAX calls.\"), mdx(\"p\", null, \"Web\\xADSock\\xADets bring a new level of in\\xADter\\xADac\\xADtion to the web, they re\\xADally bring real time to web ap\\xADpli\\xADca\\xADtions due to the\\nfact that its com\\xADmu\\xADni\\xADca\\xADtion model is bi-\\u200Bdirectional in con\\xADtrast to the tra\\xADdi\\xADtional HTTP model where a client can\\nini\\xADti\\xADate a data re\\xADquest to a server but not the other way around.\"), mdx(\"p\", null, \"In this small post I will demon\\xADstrate how you can cre\\xADate a sim\\xADple col\\xADlab\\xADo\\xADra\\xADtive draw\\xADing app. The idea is sim\\xADple, all\\nusers that open the app will be be pre\\xADsented with a empty can\\xADvas and what they draw or is drawn on other can\\xADvas is\\nshared in real time on their screen.\"), mdx(\"p\", null, \"For the sake of sim\\xADplic\\xADity and mak\\xADing this post light there is no se\\xADcu\\xADrity in\\xADvolved so, every\\xADone is free to lis\\xADten to\\nwhat is being drawn, how\\xADever the ex\\xADter\\xADnal ap\\xADpli\\xADca\\xADtion has lim\\xADited read write ac\\xADcess to a sin\\xADgle ad\\xADdress on Vert.x\\nevent bus, en\\xADsur\\xADing that other ser\\xADvices run\\xADning on the clus\\xADter will not be ex\\xADposed.\"), mdx(\"p\", null, \"This is what you should ex\\xADpect to see:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-realtime-webapps/screencast.gif\",\n    \"alt\": \"Screencast\"\n  }))), mdx(\"h2\", {\n    \"id\": \"bootstrap-a-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#bootstrap-a-project\"\n  })), \"Bootstrap a project\"), mdx(\"p\", null, \"If you fol\\xADlowed the pre\\xADvi\\xADous \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"se\\xADries\")), \" on Vert.x de\\xADvel\\xADop\\xADment, you saw\\nthat Java and Maven were the main topic, since Vert.x is poly\\xADglot I will focus on JavaScript and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/\"\n  }), \"NPM\"), \" as my pro\\xADgram\\xADming lan\\xADguage and pack\\xADage man\\xADage\\xADment tool.\"), mdx(\"p\", null, \"With NPM start by cre\\xADat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \", in order to do this we should run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"npm init\\n\")), mdx(\"p\", null, \"This will present a se\\xADlec\\xADtion of ques\\xADtions and in the end you should have a basic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" file. This\\ncon\\xADfig\\xADu\\xADra\\xADtion is very basic so you need to add a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-full\"\n  }), \"de\\xADpen\\xADdency\"), \" to Vert.x so\\nyou can run the ap\\xADpli\\xADca\\xADtion. You can add it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependencies\"), \" prop\\xADerty and it should look more or less like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"draw\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"private\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"dependencies\\\"\"), \": {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx3-full\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"3.0.0-1\\\"\"), \"\\n  },\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"scripts\\\"\"), \": {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"start\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx run server.js\\\"\"), \"\\n  },\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"version\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1.0.0\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"main\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"server.js\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"devDependencies\\\"\"), \": {},\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"author\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"license\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"ISC\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"A Real Time Drawing App\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"If you do not know why there is the de\\xADpen\\xADdency on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx3-full\"), \" or why the added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scripts\"), \" prop\\xADerty please check the \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x3-says-hello-to-npm-users/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"older\")), \" blog post about it.\"), mdx(\"h2\", {\n    \"id\": \"project-structure\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#project-structure\"\n  })), \"Project Structure\"), mdx(\"p\", null, \"This post has no pref\\xADer\\xADence over project struc\\xADture, so if you do not agree with the struc\\xADture used here feel free to\\nuse what you feel best. For this ex\\xADam\\xADple I will keep it to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 server.js\\n\\u2514\\u2500\\u2500 webroot\\n  \\u251C\\u2500\\u2500 assets\\n  \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 js\\n  \\u2502\\xA0\\xA0   \\u251C\\u2500\\u2500 script.js\\n  \\u2502\\xA0\\xA0   \\u2514\\u2500\\u2500 vertxbus.js\\n  \\u2514\\u2500\\u2500 index.html\\n\\n3 directories, 5 files\\n\")), mdx(\"p\", null, \"As you can imag\\xADine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.js\"), \" will be our Vert.x ap\\xADpli\\xADca\\xADtion and every\\xADthing under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webroot\"), \" will be the client\\nap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"The client ap\\xADpli\\xADca\\xADtion is not re\\xADally Vert.x spe\\xADcific and could in the\\xADory be used by any other frame\\xADwork so I will go\\nlightly over its code.\"), mdx(\"h3\", {\n    \"id\": \"client-application\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#client-application\"\n  })), \"Client Application\"), mdx(\"p\", null, \"Our ap\\xADpli\\xADca\\xADtion main entry point is as one can ex\\xADpect \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \". In the index file de\\xADfine the fol\\xADlow\\xADing HTML:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-html\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"<!DOCTYPE \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-meta-keyword\"\n  }), \"html\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"html\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"head\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"meta\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"charset\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"utf-8\\\"\"), \"/>\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"title\"), \">\"), \"Real time drawing App\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"title\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!--[if lt IE 9]>\\n  <script src=\\\"http://html5shiv.googlecode.com/svn/trunk/html5.js\\\"></script>\\n  <![endif]-->\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"head\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"body\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"canvas\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"id\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"paper\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"width\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1900\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"height\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"1000\\\"\"), \">\"), \"\\n  Your browser needs to support canvas for this to work!\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"canvas\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!-- JavaScript includes. -->\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"src\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://code.jquery.com/jquery-1.8.0.min.js\\\"\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"src\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\\\"\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"src\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'assets/js/vertxbus.js'\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"src\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"assets/js/script.js\\\"\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"script\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"body\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"html\"), \">\"), \"\\n\")), mdx(\"p\", null, \"As I pre\\xADvi\\xADously wrote, the idea is to keep it as sim\\xADple as pos\\xADsi\\xADble so it is all about hav\\xADing a can\\xADvas el\\xADe\\xADment and a\\nap\\xADpli\\xADca\\xADtion main script \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"script.js\"), \". All the rest are files served by CDNs that pro\\xADvide com\\xADmon web ap\\xADpli\\xADca\\xADtion\\nli\\xADbraries such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jQuery\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML5\"), \" shim for older browsers, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \" client and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertxbus\"), \" bridge.\"), mdx(\"p\", null, \"The main code is on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"script.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"$(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// This demo depends on the canvas element\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'getContext'\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \".createElement(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'canvas'\"), \"))) {\\n    alert(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'Sorry, it looks like your browser does not support canvas!'\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \";\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" doc = $(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \"),\\n    canvas = $(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'#paper'\"), \"),\\n    ctx = canvas[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"].getContext(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'2d'\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Generate an unique ID\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" id = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"Math\"), \".round($.now() * \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"Math\"), \".random());\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// A flag for drawing activity\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" drawing = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" clients = {};\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// create a event bus bridge to the server that served this file\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" eb = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" vertx.EventBus(\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".location.protocol + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'//'\"), \" + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".location.hostname + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"':'\"), \" + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".location.port + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'/eventbus'\"), \");\\n\\n  eb.onopen = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// listen to draw events\"), \"\\n    eb.registerHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'draw'\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"data\"), \") \"), \"{\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Is the user drawing?\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (data.drawing && clients[data.id]) {\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Draw a line on the canvas. clients[data.id] holds\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the previous position of this user's mouse pointer\"), \"\\n\\n        drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);\\n      }\\n\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Saving the current client state\"), \"\\n      clients[data.id] = data;\\n      clients[data.id].updated = $.now();\\n    });\\n  };\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" prev = {};\\n\\n  canvas.on(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'mousedown'\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"e\"), \") \"), \"{\\n    e.preventDefault();\\n    drawing = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \";\\n    prev.x = e.pageX;\\n    prev.y = e.pageY;\\n  });\\n\\n  doc.bind(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'mouseup mouseleave'\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    drawing = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"false\"), \";\\n  });\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" lastEmit = $.now();\\n\\n  doc.on(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'mousemove'\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"e\"), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" ($.now() - lastEmit > \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"30\"), \") {\\n      eb.publish(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'draw'\"), \", {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'x'\"), \": e.pageX,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'y'\"), \": e.pageY,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'drawing'\"), \": drawing,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'id'\"), \": id\\n      });\\n      lastEmit = $.now();\\n    }\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Draw a line for the current user's movement, as it is\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// not received in the eventbus\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (drawing) {\\n\\n      drawLine(prev.x, prev.y, e.pageX, e.pageY);\\n\\n      prev.x = e.pageX;\\n      prev.y = e.pageY;\\n    }\\n  });\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Remove inactive clients after 10 seconds of inactivity\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"setInterval\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" ident \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" clients) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (clients.hasOwnProperty(ident)) {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" ($.now() - clients[ident].updated > \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"10000\"), \") {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Last update was more than 10 seconds ago.\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// This user has probably closed the page\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"delete\"), \" clients[ident];\\n        }\\n      }\\n    }\\n\\n  }, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"10000\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"drawLine\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"fromx, fromy, tox, toy\"), \") \"), \"{\\n    ctx.moveTo(fromx, fromy);\\n    ctx.lineTo(tox, toy);\\n    ctx.stroke();\\n  }\\n\\n});\\n\")), mdx(\"p\", null, \"The most im\\xADpor\\xADtant part in this code is all the code re\\xADlated to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eb\"), \". The vari\\xADable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eb\"), \" is our bridge to the event\\nbus, Start by cre\\xADat\\xADing a bridge using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.EventBus\"), \" ob\\xADject and de\\xADfine where to con\\xADnect, using the de\\xADtails\\nof the cur\\xADrent win\\xADdow lo\\xADca\\xADtion.\"), mdx(\"p\", null, \"Then add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onopen\"), \" lis\\xADtener that will sub\\xADscribe to the ad\\xADdress \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw\"), \" on the event bus so it can lis\\xADten to all\\nmes\\xADsages re\\xADgard\\xADing draw\\xADing and per\\xADform the draw\\xADing ac\\xADtions. Since lis\\xADten\\xADing is not enough I also add a mouse lis\\xADtener\\nto the doc\\xADu\\xADment so when it moves it pub\\xADlishes events to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw\"), \" ad\\xADdress.\"), mdx(\"p\", null, \"Note that I am using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publish\"), \" and not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send\"), \", the rea\\xADson should be ob\\xADvi\\xADous, I want every\\xADone to know this users mouse\\nmove\\xADments, I am not in\\xADter\\xADested on send\\xADing the events to just a sin\\xADgle user. You can see now that if you want to have\\na draw\\xADing app in a one on one user basis then in\\xADstead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publish()\"), \" you should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send()\"), \".\"), mdx(\"h3\", {\n    \"id\": \"server-application\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#server-application\"\n  })), \"Server Application\"), mdx(\"p\", null, \"The server code is quite straight for\\xADward, all you need is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" Router = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-web-js/router\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" SockJSHandler = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-web-js/sock_js_handler\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" StaticHandler = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-web-js/static_handler\\\"\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" router = Router.router(vertx);\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Allow outbound traffic to the draw address\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" options = {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"outboundPermitteds\\\"\"), \" : [{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"address\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"draw\\\"\"), \"}],\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"inboundPermitteds\\\"\"), \" :  [{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"address\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"draw\\\"\"), \"}]\\n};\\n\\nrouter.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/eventbus/*\\\"\"), \").handler(SockJSHandler.create(vertx).bridge(options).handle);\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Serve the static resources\"), \"\\nrouter.route().handler(StaticHandler.create().handle);\\n\\nvertx.createHttpServer().requestHandler(router.accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\")), mdx(\"p\", null, \"We start with the usual im\\xADports, we im\\xADport a ref\\xADer\\xADence to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" ob\\xADject and a cou\\xADple of helper han\\xADdlers\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJSHandler\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StaticHandler\"), \". As their names should tell you one han\\xADdler will be re\\xADspon\\xADsi\\xADble to han\\xADdle all\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \" data and the other all HTTP file serv\\xADing re\\xADquests.\"), mdx(\"p\", null, \"We then add then to a router and start a HTTP server that will han\\xADdle all in\\xADcom\\xADing re\\xADquest using the han\\xADdler ac\\xADcept\\nfunc\\xADtion. Fi\\xADnally we lis\\xADten on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8080\"), \" and we are ready.\"), mdx(\"p\", null, \"Note that there is a op\\xADtions ob\\xADject where a cou\\xADple of prop\\xADer\\xADties are de\\xADfined \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"outbound/inbound\"), \" per\\xADmit\\xADted ad\\xADdresses.\\nWith\\xADout this con\\xADfig\\xADu\\xADra\\xADtion the ex\\xADter\\xADnal ap\\xADpli\\xADca\\xADtion will not be al\\xADlowed to con\\xADnect to the vert.x bus, in fact the\\nde\\xADfault con\\xADfig\\xADu\\xADra\\xADtion of the Sock\\xADJSHan\\xADdler is deny all. So you must spec\\xADify ex\\xADplic\\xADitly which ad\\xADdress are al\\xADlowed to\\nre\\xADceive mes\\xADsages from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \" and which ones are al\\xADlowed to send/pub\\xADlish to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \".\"), mdx(\"p\", null, \"Now you can start your ap\\xADpli\\xADca\\xADtion, don\\u2019t for\\xADget to in\\xADstall the de\\xADpen\\xADden\\xADcies for the first time:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"npm install\\n\")), mdx(\"p\", null, \"And then run the ap\\xADpli\\xADca\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"npm start\\n\")), mdx(\"p\", null, \"If you now open 2 browser win\\xADdows you will be able to draw nice pic\\xADtures and see the draw\\xADing show\\xADing in \\u201Creal time\\u201D\\non the other win\\xADdow, if you then draw on the sec\\xADond you should get the mir\\xADror ef\\xADfect on the first win\\xADdow.\"), mdx(\"p\", null, \"Have fun!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>One of the in­ter­est­ing fea­tures of Vert.x is the <a href=\"http://sockjs.org\">SockJS</a> event bus bridge. This piece of soft­ware\nal­lows ex­ter­nal ap­pli­ca­tions to com­mu­ni­cate with Vert.x event bus using Web­sock­ets and if your browser does not\nsup­port it then it grace­fully de­grades to pool­ing AJAX calls.</p><p>Web­Sock­ets bring a new level of in­ter­ac­tion to the web, they re­ally bring real time to web ap­pli­ca­tions due to the\nfact that its com­mu­ni­ca­tion model is bi-​directional in con­trast to the tra­di­tional HTTP model where a client can\nini­ti­ate a data re­quest to a server but not the other way around.</p><p>In this small post I will demon­strate how you can cre­ate a sim­ple col­lab­o­ra­tive draw­ing app. The idea is sim­ple, all\nusers that open the app will be be pre­sented with a empty can­vas and what they draw or is drawn on other can­vas is\nshared in real time on their screen.</p><p>For the sake of sim­plic­ity and mak­ing this post light there is no se­cu­rity in­volved so, every­one is free to lis­ten to\nwhat is being drawn, how­ever the ex­ter­nal ap­pli­ca­tion has lim­ited read write ac­cess to a sin­gle ad­dress on Vert.x\nevent bus, en­sur­ing that other ser­vices run­ning on the clus­ter will not be ex­posed.</p><p>This is what you should ex­pect to see:</p><p><img src=\"/images/blog/vertx3-realtime-webapps/screencast.gif\" alt=\"Screencast\"/></p><h2 id=\"bootstrap-a-project\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#bootstrap-a-project\"></a>Bootstrap a project</h2><p>If you fol­lowed the pre­vi­ous <a href=\"/blog/my-first-vert-x-3-application/\">se­ries</a> on Vert.x de­vel­op­ment, you saw\nthat Java and Maven were the main topic, since Vert.x is poly­glot I will focus on JavaScript and\n<a href=\"https://www.npmjs.com/\">NPM</a> as my pro­gram­ming lan­guage and pack­age man­age­ment tool.</p><p>With NPM start by cre­at­ing a <code>package.json</code>, in order to do this we should run:</p><pre><code class=\"hljs language-bash\">npm init\n</code></pre><p>This will present a se­lec­tion of ques­tions and in the end you should have a basic <code>package.json</code> file. This\ncon­fig­u­ra­tion is very basic so you need to add a <a href=\"https://www.npmjs.com/package/vertx3-full\">de­pen­dency</a> to Vert.x so\nyou can run the ap­pli­ca­tion. You can add it to the <code>dependencies</code> prop­erty and it should look more or less like this:</p><pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;draw&quot;</span>,\n  <span class=\"hljs-string\">&quot;private&quot;</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">&quot;dependencies&quot;</span>: {\n    <span class=\"hljs-string\">&quot;vertx3-full&quot;</span>: <span class=\"hljs-string\">&quot;3.0.0-1&quot;</span>\n  },\n  <span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;vertx run server.js&quot;</span>\n  },\n  <span class=\"hljs-string\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,\n  <span class=\"hljs-string\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;server.js&quot;</span>,\n  <span class=\"hljs-string\">&quot;devDependencies&quot;</span>: {},\n  <span class=\"hljs-string\">&quot;author&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-string\">&quot;license&quot;</span>: <span class=\"hljs-string\">&quot;ISC&quot;</span>,\n  <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;A Real Time Drawing App&quot;</span>\n}\n</code></pre><p>If you do not know why there is the de­pen­dency on <code>vertx3-full</code> or why the added <code>scripts</code> prop­erty please check the <a href=\"/blog/vert-x3-says-hello-to-npm-users/\">older</a> blog post about it.</p><h2 id=\"project-structure\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#project-structure\"></a>Project Structure</h2><p>This post has no pref­er­ence over project struc­ture, so if you do not agree with the struc­ture used here feel free to\nuse what you feel best. For this ex­am­ple I will keep it to:</p><pre><code class=\"hljs language-text\">├── package.json\n├── server.js\n└── webroot\n  ├── assets\n  │   └── js\n  │     ├── script.js\n  │     └── vertxbus.js\n  └── index.html\n\n3 directories, 5 files\n</code></pre><p>As you can imag­ine <code>server.js</code> will be our Vert.x ap­pli­ca­tion and every­thing under <code>webroot</code> will be the client\nap­pli­ca­tion.</p><p>The client ap­pli­ca­tion is not re­ally Vert.x spe­cific and could in the­ory be used by any other frame­work so I will go\nlightly over its code.</p><h3 id=\"client-application\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#client-application\"></a>Client Application</h3><p>Our ap­pli­ca­tion main entry point is as one can ex­pect <code>index.html</code>. In the index file de­fine the fol­low­ing HTML:</p><pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Real time drawing App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--[if lt IE 9]&gt;\n  &lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;\n  &lt;![endif]--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;paper&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;1900&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;1000&quot;</span>&gt;</span>\n  Your browser needs to support canvas for this to work!\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- JavaScript includes. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://code.jquery.com/jquery-1.8.0.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;assets/js/vertxbus.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;assets/js/script.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>As I pre­vi­ously wrote, the idea is to keep it as sim­ple as pos­si­ble so it is all about hav­ing a can­vas el­e­ment and a\nap­pli­ca­tion main script <code>script.js</code>. All the rest are files served by CDNs that pro­vide com­mon web ap­pli­ca­tion\nli­braries such as <code>jQuery</code>, <code>HTML5</code> shim for older browsers, <code>SockJS</code> client and <code>vertxbus</code> bridge.</p><p>The main code is on <code>script.js</code> file:</p><pre><code class=\"hljs language-javascript\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// This demo depends on the canvas element</span>\n  <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-string\">&#x27;getContext&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>))) {\n    alert(<span class=\"hljs-string\">&#x27;Sorry, it looks like your browser does not support canvas!&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">var</span> doc = $(<span class=\"hljs-built_in\">document</span>),\n    canvas = $(<span class=\"hljs-string\">&#x27;#paper&#x27;</span>),\n    ctx = canvas[<span class=\"hljs-number\">0</span>].getContext(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n\n  <span class=\"hljs-comment\">// Generate an unique ID</span>\n  <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-built_in\">Math</span>.round($.now() * <span class=\"hljs-built_in\">Math</span>.random());\n\n  <span class=\"hljs-comment\">// A flag for drawing activity</span>\n  <span class=\"hljs-keyword\">var</span> drawing = <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-keyword\">var</span> clients = {};\n  <span class=\"hljs-comment\">// create a event bus bridge to the server that served this file</span>\n  <span class=\"hljs-keyword\">var</span> eb = <span class=\"hljs-keyword\">new</span> vertx.EventBus(\n      <span class=\"hljs-built_in\">window</span>.location.protocol + <span class=\"hljs-string\">&#x27;//&#x27;</span> + <span class=\"hljs-built_in\">window</span>.location.hostname + <span class=\"hljs-string\">&#x27;:&#x27;</span> + <span class=\"hljs-built_in\">window</span>.location.port + <span class=\"hljs-string\">&#x27;/eventbus&#x27;</span>);\n\n  eb.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// listen to draw events</span>\n    eb.registerHandler(<span class=\"hljs-string\">&#x27;draw&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n      <span class=\"hljs-comment\">// Is the user drawing?</span>\n      <span class=\"hljs-keyword\">if</span> (data.drawing &amp;&amp; clients[data.id]) {\n\n        <span class=\"hljs-comment\">// Draw a line on the canvas. clients[data.id] holds</span>\n        <span class=\"hljs-comment\">// the previous position of this user&#x27;s mouse pointer</span>\n\n        drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);\n      }\n\n      <span class=\"hljs-comment\">// Saving the current client state</span>\n      clients[data.id] = data;\n      clients[data.id].updated = $.now();\n    });\n  };\n\n  <span class=\"hljs-keyword\">var</span> prev = {};\n\n  canvas.on(<span class=\"hljs-string\">&#x27;mousedown&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    e.preventDefault();\n    drawing = <span class=\"hljs-literal\">true</span>;\n    prev.x = e.pageX;\n    prev.y = e.pageY;\n  });\n\n  doc.bind(<span class=\"hljs-string\">&#x27;mouseup mouseleave&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    drawing = <span class=\"hljs-literal\">false</span>;\n  });\n\n  <span class=\"hljs-keyword\">var</span> lastEmit = $.now();\n\n  doc.on(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> ($.now() - lastEmit &gt; <span class=\"hljs-number\">30</span>) {\n      eb.publish(<span class=\"hljs-string\">&#x27;draw&#x27;</span>, {\n        <span class=\"hljs-string\">&#x27;x&#x27;</span>: e.pageX,\n        <span class=\"hljs-string\">&#x27;y&#x27;</span>: e.pageY,\n        <span class=\"hljs-string\">&#x27;drawing&#x27;</span>: drawing,\n        <span class=\"hljs-string\">&#x27;id&#x27;</span>: id\n      });\n      lastEmit = $.now();\n    }\n\n    <span class=\"hljs-comment\">// Draw a line for the current user&#x27;s movement, as it is</span>\n    <span class=\"hljs-comment\">// not received in the eventbus</span>\n\n    <span class=\"hljs-keyword\">if</span> (drawing) {\n\n      drawLine(prev.x, prev.y, e.pageX, e.pageY);\n\n      prev.x = e.pageX;\n      prev.y = e.pageY;\n    }\n  });\n\n  <span class=\"hljs-comment\">// Remove inactive clients after 10 seconds of inactivity</span>\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> ident <span class=\"hljs-keyword\">in</span> clients) {\n      <span class=\"hljs-keyword\">if</span> (clients.hasOwnProperty(ident)) {\n        <span class=\"hljs-keyword\">if</span> ($.now() - clients[ident].updated &gt; <span class=\"hljs-number\">10000</span>) {\n          <span class=\"hljs-comment\">// Last update was more than 10 seconds ago.</span>\n          <span class=\"hljs-comment\">// This user has probably closed the page</span>\n          <span class=\"hljs-keyword\">delete</span> clients[ident];\n        }\n      }\n    }\n\n  }, <span class=\"hljs-number\">10000</span>);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">drawLine</span>(<span class=\"hljs-params\">fromx, fromy, tox, toy</span>) </span>{\n    ctx.moveTo(fromx, fromy);\n    ctx.lineTo(tox, toy);\n    ctx.stroke();\n  }\n\n});\n</code></pre><p>The most im­por­tant part in this code is all the code re­lated to <code>eb</code>. The vari­able <code>eb</code> is our bridge to the event\nbus, Start by cre­at­ing a bridge using the <code>vertx.EventBus</code> ob­ject and de­fine where to con­nect, using the de­tails\nof the cur­rent win­dow lo­ca­tion.</p><p>Then add a <code>onopen</code> lis­tener that will sub­scribe to the ad­dress <code>draw</code> on the event bus so it can lis­ten to all\nmes­sages re­gard­ing draw­ing and per­form the draw­ing ac­tions. Since lis­ten­ing is not enough I also add a mouse lis­tener\nto the doc­u­ment so when it moves it pub­lishes events to the <code>draw</code> ad­dress.</p><p>Note that I am using <code>publish</code> and not <code>send</code>, the rea­son should be ob­vi­ous, I want every­one to know this users mouse\nmove­ments, I am not in­ter­ested on send­ing the events to just a sin­gle user. You can see now that if you want to have\na draw­ing app in a one on one user basis then in­stead of <code>publish()</code> you should use <code>send()</code>.</p><h3 id=\"server-application\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#server-application\"></a>Server Application</h3><p>The server code is quite straight for­ward, all you need is:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-web-js/router&quot;</span>);\n<span class=\"hljs-keyword\">var</span> SockJSHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-web-js/sock_js_handler&quot;</span>);\n<span class=\"hljs-keyword\">var</span> StaticHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-web-js/static_handler&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> router = Router.router(vertx);\n\n<span class=\"hljs-comment\">// Allow outbound traffic to the draw address</span>\n\n<span class=\"hljs-keyword\">var</span> options = {\n  <span class=\"hljs-string\">&quot;outboundPermitteds&quot;</span> : [{<span class=\"hljs-string\">&quot;address&quot;</span> : <span class=\"hljs-string\">&quot;draw&quot;</span>}],\n  <span class=\"hljs-string\">&quot;inboundPermitteds&quot;</span> :  [{<span class=\"hljs-string\">&quot;address&quot;</span> : <span class=\"hljs-string\">&quot;draw&quot;</span>}]\n};\n\nrouter.route(<span class=\"hljs-string\">&quot;/eventbus/*&quot;</span>).handler(SockJSHandler.create(vertx).bridge(options).handle);\n\n<span class=\"hljs-comment\">// Serve the static resources</span>\nrouter.route().handler(StaticHandler.create().handle);\n\nvertx.createHttpServer().requestHandler(router.accept).listen(<span class=\"hljs-number\">8080</span>);\n</code></pre><p>We start with the usual im­ports, we im­port a ref­er­ence to the <code>Router</code> ob­ject and a cou­ple of helper han­dlers\n<code>SockJSHandler</code> and <code>StaticHandler</code>. As their names should tell you one han­dler will be re­spon­si­ble to han­dle all\n<code>SockJS</code> data and the other all HTTP file serv­ing re­quests.</p><p>We then add then to a router and start a HTTP server that will han­dle all in­com­ing re­quest using the han­dler ac­cept\nfunc­tion. Fi­nally we lis­ten on port <code>8080</code> and we are ready.</p><p>Note that there is a op­tions ob­ject where a cou­ple of prop­er­ties are de­fined <code>outbound/inbound</code> per­mit­ted ad­dresses.\nWith­out this con­fig­u­ra­tion the ex­ter­nal ap­pli­ca­tion will not be al­lowed to con­nect to the vert.x bus, in fact the\nde­fault con­fig­u­ra­tion of the Sock­JSHan­dler is deny all. So you must spec­ify ex­plic­itly which ad­dress are al­lowed to\nre­ceive mes­sages from <code>SockJS</code> and which ones are al­lowed to send/pub­lish to <code>SockJS</code>.</p><p>Now you can start your ap­pli­ca­tion, don’t for­get to in­stall the de­pen­den­cies for the first time:</p><pre><code class=\"hljs language-bash\">npm install\n</code></pre><p>And then run the ap­pli­ca­tion:</p><pre><code class=\"hljs language-bash\">npm start\n</code></pre><p>If you now open 2 browser win­dows you will be able to draw nice pic­tures and see the draw­ing show­ing in “real time”\non the other win­dow, if you then draw on the sec­ond you should get the mir­ror ef­fect on the first win­dow.</p><p>Have fun!</p>","scope":{}},"tfIdfTerms":[{"term":"applic","tf":15},{"term":"will","tf":14},{"term":"not","tf":10},{"term":"us","tf":9},{"term":"draw","tf":8},{"term":"event","tf":7},{"term":"on","tf":6},{"term":"bu","tf":6},{"term":"listen","tf":6},{"term":"client","tf":5},{"term":"address","tf":5},{"term":"start","tf":5},{"term":"file","tf":5},{"term":"add","tf":5},{"term":"code","tf":5},{"term":"bridg","tf":4},{"term":"allow","tf":4},{"term":"time","tf":4},{"term":"server","tf":4},{"term":"post","tf":4},{"term":"user","tf":4},{"term":"run","tf":4},{"term":"main","tf":4},{"term":"window","tf":4},{"term":"extern","tf":3}]},{"filename":"blog/2015-08-03-unit-and-integration-tests.mdx","date":"2015-08-03","slug":"unit-and-integration-tests","meta":{"title":"Unit and Integration Tests","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let’s refresh our mind about what we developed so far in the introduction to vert.x series. We forgot an important task. We didn’t test the API."},"readingTime":{"text":"15 min read","minutes":14.29,"time":857400,"words":2858},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let\\u2019s re\\xADfresh our mind about what we de\\xADvel\\xADoped so far in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in\\xADtro\\xADduc\\xADtion to vert.x\"), \" se\\xADries. In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the first post\")), \", we de\\xADvel\\xADoped a very sim\\xADple Vert.x 3 ap\\xADpli\\xADca\\xADtion, and saw how this ap\\xADpli\\xADca\\xADtion can be tested, pack\\xADaged and ex\\xADe\\xADcuted. In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-application-configuration/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the sec\\xADond post\")), \", we saw how this ap\\xADpli\\xADca\\xADtion be\\xADcame con\\xADfig\\xADurable and how we can use a ran\\xADdom port in test, and use an\\xADother con\\xADfig\\xADurable port in pro\\xADduc\\xADtion. Fi\\xADnally, the \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"pre\\xADvi\\xADous post\")), \" has shown how to use vertx-\\u200Bweb and how to im\\xADple\\xADment a small REST API. How\\xADever, we for\\xADgot an im\\xADpor\\xADtant task. We didn\\u2019t test the API. In this post we will in\\xADcrease the con\\xADfi\\xADdence we have on this ap\\xADpli\\xADca\\xADtion by im\\xADple\\xADment\\xADing unit and in\\xADte\\xADgra\\xADtion tests.\"), mdx(\"p\", null, \"The code of this post is avail\\xADable in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-4\"\n  }), \"post-4 branch\"), \" of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app\"\n  }), \"project\"), \". The start\\xADing post, how\\xADever is the code avail\\xADable in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\"\n  }), \"post-3 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"tests-tests-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#tests-tests-tests\"\n  })), \"Tests, Tests, Tests\\u2026\"), mdx(\"p\", null, \"This post is mainly about tests. We dis\\xADtin\\xADguish two types of tests: unit tests and in\\xADte\\xADgra\\xADtion tests. Both are equally im\\xADpor\\xADtant, but have dif\\xADfer\\xADent focus. Unit tests en\\xADsure that one \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADpo\\xADnent\"), \" of your ap\\xADpli\\xADca\\xADtion, gen\\xADer\\xADally a class in the Java world, be\\xADhaves as ex\\xADpected. The ap\\xADpli\\xADca\\xADtion is not tested as a whole, but pieces by pieces. In\\xADte\\xADgra\\xADtion tests are more \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"black box\"), \" in the sense that the ap\\xADpli\\xADca\\xADtion is started and tested gen\\xADer\\xADally ex\\xADter\\xADnally.\"), mdx(\"p\", null, \"In this post we are going to start with some more unit tests as a warm up ses\\xADsion and then focus on in\\xADte\\xADgra\\xADtion tests. If you al\\xADready im\\xADple\\xADmented in\\xADte\\xADgra\\xADtion tests, you may be a bit scared, and it makes sense. But don\\u2019t worry, with Vert.x there are no hid\\xADden sur\\xADprises.\"), mdx(\"h2\", {\n    \"id\": \"warmup-some-more-unit-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#warmup-some-more-unit-tests\"\n  })), \"Warmup: Some more unit tests\"), mdx(\"p\", null, \"Let\\u2019s start slowly. Re\\xADmem\\xADber in the first post we have im\\xADple\\xADmented a unit test with \", mdx(Link, {\n    href: \"/docs/[[...slug]]\",\n    as: \"/docs/vertx-unit/java/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"vertx-\\u200Bunit\")), \". The test we did is dead sim\\xADple:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"we started the ap\\xADpli\\xADca\\xADtion be\\xADfore the test\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"we checks that it replies \\u201CHello\\u201D\")), mdx(\"p\", null, \"Just to re\\xADfresh your mind, let\\u2019s have a look at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java\"\n  }), \"code\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Before\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setUp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throws\"), \" IOException \"), \"{\\n  vertx = Vertx.vertx();\\n  ServerSocket socket = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ServerSocket(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \");\\n  port = socket.getLocalPort();\\n  socket.close();\\n  DeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n      .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port)\\n      );\\n  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" method is in\\xADvoked be\\xADfore each test (as in\\xADstructed by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Before\"), \" an\\xADno\\xADta\\xADtion). It, first, cre\\xADates a new in\\xADstance of Vert.x. Then, it gets a free port and then de\\xADploys our ver\\xADti\\xADcle with the right con\\xADfig\\xADu\\xADra\\xADtion. Thanks to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context.asyncAssertSuccess()\"), \" it waits until the suc\\xADcess\\xADful de\\xADploy\\xADment of the ver\\xADti\\xADcle.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tearDown\"), \" is straight\\xADfor\\xADward and just closes the Vert.x in\\xADstance. It au\\xADto\\xADmat\\xADi\\xADcally un-\\u200Bdeploys the ver\\xADti\\xADcles:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@After\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"tearDown\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n  vertx.close(context.asyncAssertSuccess());\\n}\\n\")), mdx(\"p\", null, \"Fi\\xADnally, our sin\\xADgle test is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testMyApplication\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Async async = context.async();\\n  vertx.createHttpClient().getNow(port, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \", response -> {\\n    response.handler(body -> {\\n      context.assertTrue(body.toString().contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello\\\"\"), \"));\\n      async.complete();\\n    });\\n  });\\n }\\n\")), mdx(\"p\", null, \"It is only check\\xADing that the ap\\xADpli\\xADca\\xADtion replies \\u201CHello\\u201D when we emit a HTTP re\\xADquest on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \".\"), mdx(\"p\", null, \"Let\\u2019s now try to im\\xADple\\xADment some unit tests checkin that our web ap\\xADpli\\xADca\\xADtion and the REST API be\\xADhave as ex\\xADpected. Let\\u2019s start by check\\xADing that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" page is cor\\xADrectly served. This test is very sim\\xADi\\xADlar to the pre\\xADvi\\xADous one:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"checkThatTheIndexPageIsServed\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n  Async async = context.async();\\n  vertx.createHttpClient().getNow(port, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/assets/index.html\\\"\"), \", response -> {\\n    context.assertEquals(response.statusCode(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \");\\n    context.assertEquals(response.headers().get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \"), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \");\\n    response.bodyHandler(body -> {\\n      context.assertTrue(body.toString().contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<title>My Whisky Collection</title>\\\"\"), \"));\\n      async.complete();\\n    });\\n  });\\n}\\n\")), mdx(\"p\", null, \"We re\\xADtrieve the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" page and check:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it\\u2019s there (sta\\xADtus code 200)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it\\u2019s a HTML page (con\\xADtent type set to \\u201Ctext/html\\u201D)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it has the right title (\\u201CMy Whisky Col\\xADlec\\xADtion\\u201D)\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"As you can see, we can test the sta\\xADtus code and the head\\xADers di\\xADrectly on the HTTP re\\xADsponse, but en\\xADsure that the body is right, we need to re\\xADtrieve it. This is done with a body han\\xADdler that re\\xADceives the com\\xADplete body as pa\\xADra\\xADme\\xADter. Once the last check is made, we re\\xADlease the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" by call\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"complete\"), \".\")), mdx(\"p\", null, \"Ok, great, but this ac\\xADtu\\xADally does not test our REST API. Let\\u2019s en\\xADsure that we can add a bot\\xADtle to the col\\xADlec\\xADtion. Un\\xADlike the pre\\xADvi\\xADous tests, this one is using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"post\"), \" data to the server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"checkThatWeCanAdd\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n  Async async = context.async();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String json = Json.encodePrettily(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Jameson\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Ireland\\\"\"), \"));\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String length = Integer.toString(json.length());\\n  vertx.createHttpClient().post(port, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies\\\"\"), \")\\n      .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")\\n      .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-length\\\"\"), \", length)\\n      .handler(response -> {\\n        context.assertEquals(response.statusCode(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"201\"), \");\\n        context.assertTrue(response.headers().get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \").contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \"));\\n        response.bodyHandler(body -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Whisky whisky = Json.decodeValue(body.toString(), Whisky.class);\\n          context.assertEquals(whisky.getName(), \\\"Jameson\\\");\\n          context.assertEquals(whisky.getOrigin(), \\\"Ireland\\\");\\n          context.assertNotNull(whisky.getId());\\n          async.complete();\\n        });\\n      })\\n      .write(json)\\n      .end();\\n}\\n\")), mdx(\"p\", null, \"First we cre\\xADate the con\\xADtent we want to add. The server con\\xADsumes JSON data, so we need a JSON string. You can ei\\xADther write your JSON doc\\xADu\\xADment man\\xADu\\xADally, or use the Vert.x method (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Json.encodePrettily\"), \") as done here. Once we have the con\\xADtent, we cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \" re\\xADquest. We need to con\\xADfig\\xADure some head\\xADers to be cor\\xADrectly read by the server. First, we say that we are send\\xADing JSON data and we also set the con\\xADtent length. We also at\\xADtach a re\\xADsponse han\\xADdler very close to the checks made in the pre\\xADvi\\xADous test. No\\xADtice that we can re\\xADbuild our ob\\xADject from the JSON doc\\xADu\\xADment send by the server using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON.decodeValue\"), \" method. It\\u2019s very con\\xADve\\xADnient as it avoids lots of boil\\xADer\\xADplate code.  At this point the re\\xADquest is not emit\\xADted, we need to write the data and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end()\"), \" method. This is made using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".write(json).end();\"), \".\"), mdx(\"p\", null, \"The order of the meth\\xADods is im\\xADpor\\xADtant. You can\\xADnot \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"write\"), \" data if you don\\u2019t have a re\\xADsponse han\\xADdler con\\xADfig\\xADured. Fi\\xADnally don\\u2019t for\\xADget to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \".\"), mdx(\"p\", null, \"So, let\\u2019s try this. You can run the test using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\n\")), mdx(\"p\", null, \"We could con\\xADtinue writ\\xADing more unit test like that, but it could be\\xADcome quite com\\xADplex. Let\\u2019s see how we could con\\xADtinue our tests using in\\xADte\\xADgra\\xADtion tests.\"), mdx(\"h2\", {\n    \"id\": \"it-hurts\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#it-hurts\"\n  })), \"IT hurts\"), mdx(\"p\", null, \"Well, I think we need to make that clear, in\\xADte\\xADgra\\xADtion test\\xADing hurts. If you have ex\\xADpe\\xADri\\xADence in this area, can you re\\xADmem\\xADber how long did it take to setup every\\xADthing cor\\xADrectly? I get new white hairs by just think\\xADing about it. Why are in\\xADte\\xADgra\\xADtion tests more com\\xADpli\\xADcated? It\\u2019s ba\\xADsi\\xADcally be\\xADcause of the setup:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We must start the ap\\xADpli\\xADca\\xADtion in a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"close to pro\\xADduc\\xADtion\"), \" way\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We must then run the tests (and con\\xADfig\\xADure them to hit the right ap\\xADpli\\xADca\\xADtion in\\xADstance)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We must stop the ap\\xADpli\\xADca\\xADtion\")), mdx(\"p\", null, \"That does not sound un\\xADcon\\xADquer\\xADable like that, but if you need Linux, MacOS X and Win\\xADdows sup\\xADport, it quickly get messy. There are plenty of great frame\\xADworks eas\\xADing this such as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://arquillian.org\"\n  }), \"Ar\\xADquil\\xADlian\"), \", but let\\u2019s do it with\\xADout any frame\\xADwork to un\\xADder\\xADstand how it works.\"), mdx(\"h2\", {\n    \"id\": \"we-need-a-battle-plan\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#we-need-a-battle-plan\"\n  })), \"We need a battle plan\"), mdx(\"p\", null, \"Be\\xADfore rush\\xADing into the com\\xADplex con\\xADfig\\xADu\\xADra\\xADtion, let\\u2019s think a minute about the tasks:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Step 1 - Re\\xADserve a free port\"), \"\\nWe need to get a free port on which the ap\\xADpli\\xADca\\xADtion can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lis\\xADten\"), \", and we need to in\\xADject this port in our in\\xADte\\xADgra\\xADtion tests.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Step 2 - Gen\\xADer\\xADate the ap\\xADpli\\xADca\\xADtion con\\xADfig\\xADu\\xADra\\xADtion\"), \"\\nOnce we have the free port, we need to write a JSON file con\\xADfig\\xADur\\xADing the ap\\xADpli\\xADca\\xADtion HTTP Port to this port.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Step 3 - Start the ap\\xADpli\\xADca\\xADtion\"), \"\\nSounds easy right? Well it\\u2019s not that sim\\xADple as we need to launch our ap\\xADpli\\xADca\\xADtion in a back\\xADground process.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Step 4 - Ex\\xADe\\xADcute the in\\xADte\\xADgra\\xADtion tests\"), \"\\nFi\\xADnally, the cen\\xADtral part, run the tests. But be\\xADfore that we should im\\xADple\\xADment some in\\xADte\\xADgra\\xADtion tests. Let\\u2019s come to that later.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Step 5 - Stop the ap\\xADpli\\xADca\\xADtion\"), \"\\nOnce the tests have been ex\\xADe\\xADcuted, re\\xADgard\\xADless if there are fail\\xADures or er\\xADrors in the tests, we need to stop the ap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"There are mul\\xADti\\xADple way to im\\xADple\\xADment this plan. We are going to use a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"generic\"), \" way. It\\u2019s not nec\\xADes\\xADsar\\xADily the bet\\xADter, but can be ap\\xADplied al\\xADmost every\\xADwhere. The ap\\xADproach is tight to Apache Maven. If you want to pro\\xADpose an al\\xADter\\xADna\\xADtive using Gra\\xADdle or a dif\\xADfer\\xADent tool, I will be happy to add your way to the post.\"), mdx(\"h2\", {\n    \"id\": \"implement-the-plan\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implement-the-plan\"\n  })), \"Implement the plan\"), mdx(\"p\", null, \"As said above, this sec\\xADtion is Maven-\\u200Bcentric, and most of the code goes in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/pom.xml\"\n  }), \"pom.xml\"), \" file. If you never used the dif\\xADfer\\xADent Maven life\\xADcy\\xADcle phases, I rec\\xADom\\xADmend you to look at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\"\n  }), \"in\\xADtro\\xADduc\\xADtion to the Maven life\\xADcy\\xADcle\"), \".\"), mdx(\"p\", null, \"We need to add and con\\xADfig\\xADure a cou\\xADple of plu\\xADg\\xADins. Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file and in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<plugins>\"), \" sec\\xADtion add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.codehaus.mojo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"build-helper-maven-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.9.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"reserve-network-port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"reserve-network-port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"process-sources\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"portNames\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"portName\"), \">\"), \"http.port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"portName\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"portNames\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"We use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build-helper-maven-plugin\"), \" (a plug\\xADin to know if you are often using Maven) to pick up a free port. Once found, the plug\\xADin as\\xADsigns the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" vari\\xADable to the picked port. We ex\\xADe\\xADcute this plug\\xADin early in the build (dur\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process-sources\"), \" phase), so we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" vari\\xADable in the other plug\\xADin. This was for the first step.\"), mdx(\"p\", null, \"Two ac\\xADtions are re\\xADquired for the sec\\xADond step. First, in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, just below the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<build>\"), \" open\\xADing tag, add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"testResources\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"testResource\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"directory\"), \">\"), \"src/test/resources\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"directory\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"filtering\"), \">\"), \"true\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"filtering\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"testResource\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"testResources\"), \">\"), \"\\n\")), mdx(\"p\", null, \"This in\\xADstructs Maven to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fil\\xADter\"), \" re\\xADsources from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources\"), \" di\\xADrec\\xADtory. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Fil\\xADter\"), \" means re\\xADplac\\xADing place\\xADhold\\xADers by ac\\xADtual val\\xADues. That\\u2019s ex\\xADactly what we need as we now have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" vari\\xADable. So cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/my-it-config.json\"), \" file with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \": ${http.port}\\n}\\n\")), mdx(\"p\", null, \"This con\\xADfig\\xADu\\xADra\\xADtion file is sim\\xADi\\xADlar to the one we did in pre\\xADvi\\xADous posts. The only dif\\xADfer\\xADence is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${http.port}\"), \" which is the (de\\xADfault) Maven syn\\xADtax for fil\\xADter\\xADing. So, when Maven is going to process or file it will re\\xADplace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${http.port}\"), \" by the se\\xADlected port. That\\u2019s all for the sec\\xADond step.\"), mdx(\"p\", null, \"The step 3 and 5 are a bit more tricky. We should start and stop the ap\\xADpli\\xADca\\xADtion. We are going to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maven-antrun-plugin\"), \" to achieve this. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, below the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build-helper-maven-plugin\"), \", add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!-- We use the maven-antrun-plugin to start the application before the integration tests\\nand stop them afterward -->\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"maven-antrun-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.8\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"start-vertx-app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"pre-integration-test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"run\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!--\\n          Launch the application as in 'production' using the fatjar.\\n          We pass the generated configuration, configuring the http port to the picked one\\n          -->\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"executable\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${java.home}/bin/java\\\"\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"dir\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${project.build.directory}\\\"\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"spawn\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"true\\\"\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"-jar\\\"\"), \"/>\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${project.artifactId}-${project.version}-fat.jar\\\"\"), \"/>\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"-conf\\\"\"), \"/>\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${project.build.directory}/test-classes/my-it-config.json\\\"\"), \"/>\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"stop-vertx-app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"post-integration-test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"run\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!--\\n          Kill the started process.\\n          Finding the right process is a bit tricky. Windows command in in the windows profile (below)\\n          -->\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"executable\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bash\\\"\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"dir\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${project.build.directory}\\\"\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"spawn\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"false\\\"\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"-c\\\"\"), \"/>\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"ps ax | grep -Ei '[\\\\-]DtestPort=${http.port}\\\\s+\\\\-jar\\\\s+${project.artifactId}' | awk 'NR==1{print $1}' | xargs kill -SIGTERM\\\"\"), \"/>\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"That\\u2019s a huge piece of XML, isn\\u2019t it ? We con\\xADfig\\xADure two ex\\xADe\\xADcu\\xADtions of the plug\\xADin. The first one, hap\\xADpen\\xADing in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre-integration-test\"), \" phase, ex\\xADe\\xADcutes a set of bash com\\xADmand to start the ap\\xADpli\\xADca\\xADtion. It ba\\xADsi\\xADcally ex\\xADe\\xADcutes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar my-first-app-1.0-SNAPSHOT-fat.jar -conf .../my-it-config.json\\n\")), mdx(Alert, {\n    info: true,\n    title: \"Is the fatjar created?\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The fat jar em\\xADbed\\xADding our ap\\xADpli\\xADca\\xADtion is cre\\xADated in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package\"), \" phase, pre\\xADced\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre-integration-test\"), \", so yes, the fat jar is cre\\xADated.\")), mdx(\"p\", null, \"As men\\xADtioned above, we launch the ap\\xADpli\\xADca\\xADtion as we would in a pro\\xADduc\\xADtion en\\xADvi\\xADron\\xADment.\"), mdx(\"p\", null, \"Once, the in\\xADte\\xADgra\\xADtion tests are ex\\xADe\\xADcuted (step 4 we didn\\u2019t look at it yet), we need to stop the ap\\xADpli\\xADca\\xADtion (so in the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post-integration-test\"), \" phase).  To close the ap\\xADpli\\xADca\\xADtion, we are going to in\\xADvoke some shell magic com\\xADmand to find our process in with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ps\"), \" com\\xADmand and send the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SIGTERM\"), \" sig\\xADnal. It is equiv\\xADa\\xADlent to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"ps\\n.... -> find your process id\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"kill\"), \" your_process_id -SIGTERM\\n\")), mdx(Alert, {\n    info: true,\n    title: \"And Windows?\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"I men\\xADtioned it above, we want Win\\xADdows to be sup\\xADported and these com\\xADmands are not going to work on Win\\xADdows. Don\\u2019t worry, Win\\xADdows con\\xADfig\\xADu\\xADra\\xADtion is below \\u2026\")), mdx(\"p\", null, \"We should now do the fourth step we (silently) skipped. To ex\\xADe\\xADcute our in\\xADte\\xADgra\\xADtion tests, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maven-failsafe-plugin\"), \". Add the fol\\xADlow\\xADing plug\\xADin con\\xADfig\\xADu\\xADra\\xADtion to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.apache.maven.plugins\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"maven-failsafe-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.18.1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"integration-test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"verify\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"systemProperties\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"http.port\"), \">\"), \"${http.port}\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"http.port\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"systemProperties\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"As you can see, we pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" prop\\xADerty as a sys\\xADtem vari\\xADable, so our tests are able to con\\xADnect on the right port.\"), mdx(\"p\", null, \"That\\u2019s all! Wow\\u2026 Let\\u2019s try this (for win\\xADdows users, you will need to be pa\\xADtient or to jump to the last sec\\xADtion).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean verify\\n\")), mdx(\"p\", null, \"We should not use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mvn integration-test\"), \" be\\xADcause the ap\\xADpli\\xADca\\xADtion would still be run\\xADning. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"verify\"), \" phase is after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post-integration-test\"), \" phase and will analyse the integration-\\u200Btests re\\xADsults. Build fail\\xADures be\\xADcause of in\\xADte\\xADgra\\xADtion tests failed as\\xADser\\xADtions are re\\xADported in this phase.\"), mdx(\"h2\", {\n    \"id\": \"hey-we-dont-have-integration-tests-\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#hey-we-dont-have-integration-tests-\"\n  })), \"Hey, we don\\u2019t have integration tests !\"), mdx(\"p\", null, \"And that\\u2019s right, we set up every\\xADthing, but we don\\u2019t have a sin\\xADgle in\\xADte\\xADgra\\xADtion test. To ease the im\\xADple\\xADmen\\xADta\\xADtion, let\\u2019s use two li\\xADbraries: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://joel-costigliola.github.io/assertj/\"\n  }), \"As\\xADsertJ\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jayway/rest-assured\"\n  }), \"Rest-\\u200BAssured\"), \".\"), mdx(\"p\", null, \"As\\xADsertJ pro\\xADposes a set of as\\xADser\\xADtions that you can chain and use flu\\xADently. Rest As\\xADsured is a frame\\xADwork to test REST API.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, add the two fol\\xADlow\\xADing de\\xADpen\\xADden\\xADcies just be\\xADfore \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"</dependencies>\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"com.jayway.restassured\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"rest-assured\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.4.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.assertj\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"assertj-core\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Then, cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/java/io/vertx/blog/first/MyRestIT.java\"), \" file. Un\\xADlike unit test, in\\xADte\\xADgra\\xADtion test ends with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IT\"), \". It\\u2019s a con\\xADven\\xADtion from the Fail\\xADsafe plug\\xADin to dis\\xADtin\\xADguish unit (start\\xADing or end\\xADing with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Test\"), \") from in\\xADte\\xADgra\\xADtion tests (start\\xADing or end\\xADing with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IT\"), \"). In the cre\\xADated file add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.blog.first;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" com.jayway.restassured.RestAssured;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.AfterClass;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.BeforeClass;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyRestIT\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@BeforeClass\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"configureRestAssured\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    RestAssured.baseURI = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost\\\"\"), \";\\n    RestAssured.port = Integer.getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@AfterClass\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"unconfigureRestAssured\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    RestAssured.reset();\\n  }\\n}\\n\")), mdx(\"p\", null, \"The meth\\xADods an\\xADno\\xADtated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@BeforeClass\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@AfterClass\"), \" are in\\xADvoked once be\\xADfore / after all tests of the class. Here, we just re\\xADtrieve the http port (passed as a sys\\xADtem prop\\xADerty) and we con\\xADfig\\xADure REST As\\xADsured.\"), mdx(Alert, {\n    info: true,\n    title: \"Am I ready to serve?\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"You may need to wait in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"configureRestAssured\"), \" method that the HTTP server has been started. We rec\\xADom\\xADmend the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jayway/awaitility\"\n  }), \"await\\xADil\\xADity\"), \" test frame\\xADwork to check that the re\\xADquest can be served. It would fail the test if the server does not start.\")), mdx(\"p\", null, \"It\\u2019s now time to im\\xADple\\xADment a real test. Let\\u2019s check we can re\\xADtrieve an in\\xADdi\\xADvid\\xADual prod\\xADuct:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"checkThatWeCanRetrieveIndividualProduct\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Get the list of bottles, ensure it's a success and extract the first id.\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" id = get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies\\\"\"), \").then()\\n      .assertThat()\\n      .statusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \")\\n      .extract()\\n      .jsonPath().getInt(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"find { it.name=='Bowmore 15 Years Laimrig' }.id\\\"\"), \");\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Now get the individual resource and check the content\"), \"\\n  get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies/\\\"\"), \" + id).then()\\n      .assertThat()\\n      .statusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \")\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \", equalTo(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \"))\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin\\\"\"), \", equalTo(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \"))\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \", equalTo(id));\\n}\\n\")), mdx(\"p\", null, \"Here you can ap\\xADpre\\xADci\\xADate the power and ex\\xADpres\\xADsive\\xADness of Rest As\\xADsured. We re\\xADtrieve the list of prod\\xADuct, en\\xADsure the re\\xADsponse is cor\\xADrect, and ex\\xADtract the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"id\"), \" of a spe\\xADcific bot\\xADtle using a JSON (Groovy) Path ex\\xADpres\\xADsion.\"), mdx(\"p\", null, \"Then, we try to re\\xADtrieve the meta\\xADdata of this in\\xADdi\\xADvid\\xADual prod\\xADuct, and check the re\\xADsult.\"), mdx(\"p\", null, \"Let\\u2019s now im\\xADple\\xADment a more so\\xADphis\\xADti\\xADcated sce\\xADnario. Let\\u2019s add and delete a prod\\xADuct:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"checkWeCanAddAndDeleteAProduct\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create a new bottle and retrieve the result (as a Whisky instance).\"), \"\\n  Whisky whisky = given()\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Jameson\\\\\\\", \\\\\\\"origin\\\\\\\":\\\\\\\"Ireland\\\\\\\"}\\\"\"), \").request().post(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies\\\"\"), \").thenReturn().as(Whisky.class);\\n  assertThat(whisky.getName()).isEqualToIgnoringCase(\\\"Jameson\\\");\\n  assertThat(whisky.getOrigin()).isEqualToIgnoringCase(\\\"Ireland\\\");\\n  assertThat(whisky.getId()).isNotZero();\\n  // Check that it has created an individual resource, and check the content.\\n  get(\\\"/api/whiskies/\\\" + whisky.getId()).then()\\n      .assertThat()\\n      .statusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \")\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \", equalTo(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Jameson\\\"\"), \"))\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin\\\"\"), \", equalTo(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Ireland\\\"\"), \"))\\n      .body(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \", equalTo(whisky.getId()));\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Delete the bottle\"), \"\\n  delete(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies/\\\"\"), \" + whisky.getId()).then().assertThat().statusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"204\"), \");\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Check that the resource is not available anymore\"), \"\\n  get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies/\\\"\"), \" + whisky.getId()).then()\\n      .assertThat()\\n      .statusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"404\"), \");\\n}\\n\")), mdx(\"p\", null, \"So, now we have in\\xADte\\xADgra\\xADtion tests let\\u2019s try:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean verify\\n\")), mdx(\"p\", null, \"Sim\\xADple no? Well, sim\\xADple once the setup is done right\\u2026 You can con\\xADtinue im\\xADple\\xADment\\xADing other in\\xADte\\xADgra\\xADtion tests to be sure that every\\xADthing be\\xADhave as you ex\\xADpect.\"), mdx(\"h2\", {\n    \"id\": \"dear-windows-users\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dear-windows-users\"\n  })), \"Dear Windows users\\u2026\"), mdx(\"p\", null, \"This sec\\xADtion is the bonus part for Win\\xADdows user, or peo\\xADple want\\xADing to run their in\\xADte\\xADgra\\xADtion tests on Win\\xADdows ma\\xADchine too. The com\\xADmand we ex\\xADe\\xADcute to stop the ap\\xADpli\\xADca\\xADtion is not going to work on Win\\xADdows. Luck\\xADily, it\\u2019s pos\\xADsi\\xADble to ex\\xADtend the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" with a pro\\xADfile ex\\xADe\\xADcuted on Win\\xADdows.\"), mdx(\"p\", null, \"In your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \", just after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"</build>\"), \", add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"profiles\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"<!-- A profile for windows as the stop command is different -->\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"profile\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"windows\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"activation\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"os\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"family\"), \">\"), \"windows\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"family\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"os\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"activation\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"build\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugins\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"maven-antrun-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.8\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"stop-vertx-app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"post-integration-test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"run\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n                  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"executable\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"wmic\\\"\"), \"\\n                      \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"dir\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"${project.build.directory}\\\"\"), \"\\n                      \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"spawn\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"false\\\"\"), \">\"), \"\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"process\\\"\"), \"/>\"), \"\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"where\\\"\"), \"/>\"), \"\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CommandLine like '%${project.artifactId}%' and not name='wmic.exe'\\\"\"), \"/>\"), \"\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"arg\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"delete\\\"\"), \"/>\"), \"\\n                  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"exec\"), \">\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugins\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"build\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"profile\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"profiles\"), \">\"), \"\\n\")), mdx(\"p\", null, \"This pro\\xADfile re\\xADplaces the ac\\xADtions de\\xADscribed above to stop the ap\\xADpli\\xADca\\xADtion with a ver\\xADsion work\\xADing on win\\xADdows. The pro\\xADfile is au\\xADto\\xADmat\\xADi\\xADcally en\\xADabled on Win\\xADdows. As on oth\\xADers op\\xADer\\xADat\\xADing sys\\xADtems, ex\\xADe\\xADcute with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean verify\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"Wow, what a trip ! We are done\\u2026 In this post we have seen how we can gain con\\xADfi\\xADdence in Vert.x ap\\xADpli\\xADca\\xADtions by im\\xADple\\xADment\\xADing both unit and in\\xADte\\xADgra\\xADtion tests. Unit tests, thanks to vert.x unit, are able to check the asyn\\xADchro\\xADnous as\\xADpect of Vert.x ap\\xADpli\\xADca\\xADtion, but could be com\\xADplex for large sce\\xADnar\\xADios. Thanks to Rest As\\xADsured and As\\xADsertJ, in\\xADte\\xADgra\\xADtion tests are dead sim\\xADple to write\\u2026 but the setup is not straight\\xADfor\\xADward. This post have shown how it can be con\\xADfig\\xADured eas\\xADily. Ob\\xADvi\\xADously, you could also use As\\xADsertJ and Rest As\\xADsured in your unit tests.\"), mdx(\"p\", null, \"In the \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/using-the-asynchronous-sql-client/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"next post\")), \", we re\\xADplace the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in mem\\xADory\"), \" back\\xADend with a data\\xADbase, and use asyn\\xADchro\\xADnous in\\xADte\\xADgra\\xADtion with this data\\xADbase.\"), mdx(\"p\", null, \"Stay Tuned & Happy Cod\\xADing !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Let’s re­fresh our mind about what we de­vel­oped so far in the <em>in­tro­duc­tion to vert.x</em> se­ries. In <a href=\"/blog/my-first-vert-x-3-application/\">the first post</a>, we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. In <a href=\"/blog/vert-x-application-configuration/\">the sec­ond post</a>, we saw how this ap­pli­ca­tion be­came con­fig­urable and how we can use a ran­dom port in test, and use an­other con­fig­urable port in pro­duc­tion. Fi­nally, the <a href=\"/blog/some-rest-with-vert-x/\">pre­vi­ous post</a> has shown how to use vertx-​web and how to im­ple­ment a small REST API. How­ever, we for­got an im­por­tant task. We didn’t test the API. In this post we will in­crease the con­fi­dence we have on this ap­pli­ca­tion by im­ple­ment­ing unit and in­te­gra­tion tests.</p><p>The code of this post is avail­able in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-4\">post-4 branch</a> of the <a href=\"https://github.com/cescoffier/my-vertx-first-app\">project</a>. The start­ing post, how­ever is the code avail­able in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\">post-3 branch</a>.</p><h2 id=\"tests-tests-tests\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#tests-tests-tests\"></a>Tests, Tests, Tests…</h2><p>This post is mainly about tests. We dis­tin­guish two types of tests: unit tests and in­te­gra­tion tests. Both are equally im­por­tant, but have dif­fer­ent focus. Unit tests en­sure that one <em>com­po­nent</em> of your ap­pli­ca­tion, gen­er­ally a class in the Java world, be­haves as ex­pected. The ap­pli­ca­tion is not tested as a whole, but pieces by pieces. In­te­gra­tion tests are more <em>black box</em> in the sense that the ap­pli­ca­tion is started and tested gen­er­ally ex­ter­nally.</p><p>In this post we are going to start with some more unit tests as a warm up ses­sion and then focus on in­te­gra­tion tests. If you al­ready im­ple­mented in­te­gra­tion tests, you may be a bit scared, and it makes sense. But don’t worry, with Vert.x there are no hid­den sur­prises.</p><h2 id=\"warmup-some-more-unit-tests\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#warmup-some-more-unit-tests\"></a>Warmup: Some more unit tests</h2><p>Let’s start slowly. Re­mem­ber in the first post we have im­ple­mented a unit test with <a href=\"/docs/vertx-unit/java/\">vertx-​unit</a>. The test we did is dead sim­ple:</p><ol><li>we started the ap­pli­ca­tion be­fore the test</li><li>we checks that it replies “Hello”</li></ol><p>Just to re­fresh your mind, let’s have a look at the <a href=\"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java\">code</a></p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Before</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUp</span><span class=\"hljs-params\">(TestContext context)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  vertx = Vertx.vertx();\n  ServerSocket socket = <span class=\"hljs-keyword\">new</span> ServerSocket(<span class=\"hljs-number\">0</span>);\n  port = socket.getLocalPort();\n  socket.close();\n  DeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n      .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port)\n      );\n  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n}\n</code></pre><p>The <code>setUp</code> method is in­voked be­fore each test (as in­structed by the <code>@Before</code> an­no­ta­tion). It, first, cre­ates a new in­stance of Vert.x. Then, it gets a free port and then de­ploys our ver­ti­cle with the right con­fig­u­ra­tion. Thanks to the <code>context.asyncAssertSuccess()</code> it waits until the suc­cess­ful de­ploy­ment of the ver­ti­cle.</p><p>The <code>tearDown</code> is straight­for­ward and just closes the Vert.x in­stance. It au­to­mat­i­cally un-​deploys the ver­ti­cles:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@After</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tearDown</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n  vertx.close(context.asyncAssertSuccess());\n}\n</code></pre><p>Fi­nally, our sin­gle test is:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testMyApplication</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n  <span class=\"hljs-keyword\">final</span> Async async = context.async();\n  vertx.createHttpClient().getNow(port, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>, response -&gt; {\n    response.handler(body -&gt; {\n      context.assertTrue(body.toString().contains(<span class=\"hljs-string\">&quot;Hello&quot;</span>));\n      async.complete();\n    });\n  });\n }\n</code></pre><p>It is only check­ing that the ap­pli­ca­tion replies “Hello” when we emit a HTTP re­quest on <code>/</code>.</p><p>Let’s now try to im­ple­ment some unit tests checkin that our web ap­pli­ca­tion and the REST API be­have as ex­pected. Let’s start by check­ing that the <code>index.html</code> page is cor­rectly served. This test is very sim­i­lar to the pre­vi­ous one:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkThatTheIndexPageIsServed</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n  Async async = context.async();\n  vertx.createHttpClient().getNow(port, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/assets/index.html&quot;</span>, response -&gt; {\n    context.assertEquals(response.statusCode(), <span class=\"hljs-number\">200</span>);\n    context.assertEquals(response.headers().get(<span class=\"hljs-string\">&quot;content-type&quot;</span>), <span class=\"hljs-string\">&quot;text/html&quot;</span>);\n    response.bodyHandler(body -&gt; {\n      context.assertTrue(body.toString().contains(<span class=\"hljs-string\">&quot;&lt;title&gt;My Whisky Collection&lt;/title&gt;&quot;</span>));\n      async.complete();\n    });\n  });\n}\n</code></pre><p>We re­trieve the <code>index.html</code> page and check:</p><ol><li>it’s there (sta­tus code 200)</li><li>it’s a HTML page (con­tent type set to “text/html”)</li><li>it has the right title (“My Whisky Col­lec­tion”)</li></ol><div class=\"alert info\"><p>As you can see, we can test the sta­tus code and the head­ers di­rectly on the HTTP re­sponse, but en­sure that the body is right, we need to re­trieve it. This is done with a body han­dler that re­ceives the com­plete body as pa­ra­me­ter. Once the last check is made, we re­lease the <code>async</code> by call­ing <code>complete</code>.</p></div><p>Ok, great, but this ac­tu­ally does not test our REST API. Let’s en­sure that we can add a bot­tle to the col­lec­tion. Un­like the pre­vi­ous tests, this one is using <code>post</code> to <em>post</em> data to the server:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkThatWeCanAdd</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n  Async async = context.async();\n  <span class=\"hljs-keyword\">final</span> String json = Json.encodePrettily(<span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Jameson&quot;</span>, <span class=\"hljs-string\">&quot;Ireland&quot;</span>));\n  <span class=\"hljs-keyword\">final</span> String length = Integer.toString(json.length());\n  vertx.createHttpClient().post(port, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/api/whiskies&quot;</span>)\n      .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>)\n      .putHeader(<span class=\"hljs-string\">&quot;content-length&quot;</span>, length)\n      .handler(response -&gt; {\n        context.assertEquals(response.statusCode(), <span class=\"hljs-number\">201</span>);\n        context.assertTrue(response.headers().get(<span class=\"hljs-string\">&quot;content-type&quot;</span>).contains(<span class=\"hljs-string\">&quot;application/json&quot;</span>));\n        response.bodyHandler(body -&gt; {\n          <span class=\"hljs-keyword\">final</span> Whisky whisky = Json.decodeValue(body.toString(), Whisky.class);\n          context.assertEquals(whisky.getName(), &quot;Jameson&quot;);\n          context.assertEquals(whisky.getOrigin(), &quot;Ireland&quot;);\n          context.assertNotNull(whisky.getId());\n          async.complete();\n        });\n      })\n      .write(json)\n      .end();\n}\n</code></pre><p>First we cre­ate the con­tent we want to add. The server con­sumes JSON data, so we need a JSON string. You can ei­ther write your JSON doc­u­ment man­u­ally, or use the Vert.x method (<code>Json.encodePrettily</code>) as done here. Once we have the con­tent, we cre­ate a <code>post</code> re­quest. We need to con­fig­ure some head­ers to be cor­rectly read by the server. First, we say that we are send­ing JSON data and we also set the con­tent length. We also at­tach a re­sponse han­dler very close to the checks made in the pre­vi­ous test. No­tice that we can re­build our ob­ject from the JSON doc­u­ment send by the server using the <code>JSON.decodeValue</code> method. It’s very con­ve­nient as it avoids lots of boil­er­plate code.  At this point the re­quest is not emit­ted, we need to write the data and call the <code>end()</code> method. This is made using <code>.write(json).end();</code>.</p><p>The order of the meth­ods is im­por­tant. You can­not <em>write</em> data if you don’t have a re­sponse han­dler con­fig­ured. Fi­nally don’t for­get to call <code>end</code>.</p><p>So, let’s try this. You can run the test using:</p><pre><code class=\"hljs language-bash\">mvn clean <span class=\"hljs-built_in\">test</span>\n</code></pre><p>We could con­tinue writ­ing more unit test like that, but it could be­come quite com­plex. Let’s see how we could con­tinue our tests using in­te­gra­tion tests.</p><h2 id=\"it-hurts\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#it-hurts\"></a>IT hurts</h2><p>Well, I think we need to make that clear, in­te­gra­tion test­ing hurts. If you have ex­pe­ri­ence in this area, can you re­mem­ber how long did it take to setup every­thing cor­rectly? I get new white hairs by just think­ing about it. Why are in­te­gra­tion tests more com­pli­cated? It’s ba­si­cally be­cause of the setup:</p><ol><li>We must start the ap­pli­ca­tion in a <em>close to pro­duc­tion</em> way</li><li>We must then run the tests (and con­fig­ure them to hit the right ap­pli­ca­tion in­stance)</li><li>We must stop the ap­pli­ca­tion</li></ol><p>That does not sound un­con­quer­able like that, but if you need Linux, MacOS X and Win­dows sup­port, it quickly get messy. There are plenty of great frame­works eas­ing this such as <a href=\"http://arquillian.org\">Ar­quil­lian</a>, but let’s do it with­out any frame­work to un­der­stand how it works.</p><h2 id=\"we-need-a-battle-plan\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#we-need-a-battle-plan\"></a>We need a battle plan</h2><p>Be­fore rush­ing into the com­plex con­fig­u­ra­tion, let’s think a minute about the tasks:</p><p><strong>Step 1 - Re­serve a free port</strong>\nWe need to get a free port on which the ap­pli­ca­tion can <em>lis­ten</em>, and we need to in­ject this port in our in­te­gra­tion tests.</p><p><strong>Step 2 - Gen­er­ate the ap­pli­ca­tion con­fig­u­ra­tion</strong>\nOnce we have the free port, we need to write a JSON file con­fig­ur­ing the ap­pli­ca­tion HTTP Port to this port.</p><p><strong>Step 3 - Start the ap­pli­ca­tion</strong>\nSounds easy right? Well it’s not that sim­ple as we need to launch our ap­pli­ca­tion in a back­ground process.</p><p><strong>Step 4 - Ex­e­cute the in­te­gra­tion tests</strong>\nFi­nally, the cen­tral part, run the tests. But be­fore that we should im­ple­ment some in­te­gra­tion tests. Let’s come to that later.</p><p><strong>Step 5 - Stop the ap­pli­ca­tion</strong>\nOnce the tests have been ex­e­cuted, re­gard­less if there are fail­ures or er­rors in the tests, we need to stop the ap­pli­ca­tion.</p><p>There are mul­ti­ple way to im­ple­ment this plan. We are going to use a <em>generic</em> way. It’s not nec­es­sar­ily the bet­ter, but can be ap­plied al­most every­where. The ap­proach is tight to Apache Maven. If you want to pro­pose an al­ter­na­tive using Gra­dle or a dif­fer­ent tool, I will be happy to add your way to the post.</p><h2 id=\"implement-the-plan\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implement-the-plan\"></a>Implement the plan</h2><p>As said above, this sec­tion is Maven-​centric, and most of the code goes in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/blob/post-4/pom.xml\">pom.xml</a> file. If you never used the dif­fer­ent Maven life­cy­cle phases, I rec­om­mend you to look at the <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\">in­tro­duc­tion to the Maven life­cy­cle</a>.</p><p>We need to add and con­fig­ure a cou­ple of plu­g­ins. Open the <code>pom.xml</code> file and in the <code>&lt;plugins&gt;</code> sec­tion add:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.codehaus.mojo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>build-helper-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.9.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>reserve-network-port<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>reserve-network-port<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>process-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">portNames</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">portName</span>&gt;</span>http.port<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">portName</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">portNames</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>We use the <code>build-helper-maven-plugin</code> (a plug­in to know if you are often using Maven) to pick up a free port. Once found, the plug­in as­signs the <code>http.port</code> vari­able to the picked port. We ex­e­cute this plug­in early in the build (dur­ing the <code>process-sources</code> phase), so we can use the <code>http.port</code> vari­able in the other plug­in. This was for the first step.</p><p>Two ac­tions are re­quired for the sec­ond step. First, in the <code>pom.xml</code> file, just below the <code>&lt;build&gt;</code> open­ing tag, add:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">testResources</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">testResource</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/test/resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filtering</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filtering</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">testResource</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">testResources</span>&gt;</span>\n</code></pre><p>This in­structs Maven to <em>fil­ter</em> re­sources from the <code>src/test/resources</code> di­rec­tory. <em>Fil­ter</em> means re­plac­ing place­hold­ers by ac­tual val­ues. That’s ex­actly what we need as we now have the <code>http.port</code> vari­able. So cre­ate the <code>src/test/resources/my-it-config.json</code> file with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">&quot;http.port&quot;</span>: ${http.port}\n}\n</code></pre><p>This con­fig­u­ra­tion file is sim­i­lar to the one we did in pre­vi­ous posts. The only dif­fer­ence is the <code>${http.port}</code> which is the (de­fault) Maven syn­tax for fil­ter­ing. So, when Maven is going to process or file it will re­place <code>${http.port}</code> by the se­lected port. That’s all for the sec­ond step.</p><p>The step 3 and 5 are a bit more tricky. We should start and stop the ap­pli­ca­tion. We are going to use the <code>maven-antrun-plugin</code> to achieve this. In the <code>pom.xml</code> file, below the <code>build-helper-maven-plugin</code>, add:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-comment\">&lt;!-- We use the maven-antrun-plugin to start the application before the integration tests\nand stop them afterward --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>start-vertx-app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>pre-integration-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>run<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>\n          <span class=\"hljs-comment\">&lt;!--\n          Launch the application as in &#x27;production&#x27; using the fatjar.\n          We pass the generated configuration, configuring the http port to the picked one\n          --&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exec</span> <span class=\"hljs-attr\">executable</span>=<span class=\"hljs-string\">&quot;${java.home}/bin/java&quot;</span>\n                <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">&quot;${project.build.directory}&quot;</span>\n                <span class=\"hljs-attr\">spawn</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;-jar&quot;</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;${project.artifactId}-${project.version}-fat.jar&quot;</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;-conf&quot;</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;${project.build.directory}/test-classes/my-it-config.json&quot;</span>/&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exec</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>stop-vertx-app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>post-integration-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>run<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--\n          Kill the started process.\n          Finding the right process is a bit tricky. Windows command in in the windows profile (below)\n          --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exec</span> <span class=\"hljs-attr\">executable</span>=<span class=\"hljs-string\">&quot;bash&quot;</span>\n                <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">&quot;${project.build.directory}&quot;</span>\n                <span class=\"hljs-attr\">spawn</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;-c&quot;</span>/&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;ps ax | grep -Ei &#x27;[\\-]DtestPort=${http.port}\\s+\\-jar\\s+${project.artifactId}&#x27; | awk &#x27;NR==1{print $1}&#x27; | xargs kill -SIGTERM&quot;</span>/&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exec</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>That’s a huge piece of XML, isn’t it ? We con­fig­ure two ex­e­cu­tions of the plug­in. The first one, hap­pen­ing in the <code>pre-integration-test</code> phase, ex­e­cutes a set of bash com­mand to start the ap­pli­ca­tion. It ba­si­cally ex­e­cutes:</p><pre><code class=\"hljs language-bash\">java -jar my-first-app-1.0-SNAPSHOT-fat.jar -conf .../my-it-config.json\n</code></pre><div class=\"alert info\"><div class=\"alert-title\">Is the fatjar created?</div><p>The fat jar em­bed­ding our ap­pli­ca­tion is cre­ated in the <code>package</code> phase, pre­ced­ing the <code>pre-integration-test</code>, so yes, the fat jar is cre­ated.</p></div><p>As men­tioned above, we launch the ap­pli­ca­tion as we would in a pro­duc­tion en­vi­ron­ment.</p><p>Once, the in­te­gra­tion tests are ex­e­cuted (step 4 we didn’t look at it yet), we need to stop the ap­pli­ca­tion (so in the the <code>post-integration-test</code> phase).  To close the ap­pli­ca­tion, we are going to in­voke some shell magic com­mand to find our process in with the <code>ps</code> com­mand and send the <code>SIGTERM</code> sig­nal. It is equiv­a­lent to:</p><pre><code class=\"hljs language-bash\">ps\n.... -&gt; find your process id\n<span class=\"hljs-built_in\">kill</span> your_process_id -SIGTERM\n</code></pre><div class=\"alert info\"><div class=\"alert-title\">And Windows?</div><p>I men­tioned it above, we want Win­dows to be sup­ported and these com­mands are not going to work on Win­dows. Don’t worry, Win­dows con­fig­u­ra­tion is below …</p></div><p>We should now do the fourth step we (silently) skipped. To ex­e­cute our in­te­gra­tion tests, we use the <code>maven-failsafe-plugin</code>. Add the fol­low­ing plug­in con­fig­u­ra­tion to your <code>pom.xml</code> file:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-failsafe-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.18.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>integration-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>verify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">systemProperties</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">http.port</span>&gt;</span>${http.port}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">http.port</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">systemProperties</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>As you can see, we pass the <code>http.port</code> prop­erty as a sys­tem vari­able, so our tests are able to con­nect on the right port.</p><p>That’s all! Wow… Let’s try this (for win­dows users, you will need to be pa­tient or to jump to the last sec­tion).</p><pre><code class=\"hljs language-bash\">mvn clean verify\n</code></pre><p>We should not use <code>mvn integration-test</code> be­cause the ap­pli­ca­tion would still be run­ning. The <code>verify</code> phase is after the <code>post-integration-test</code> phase and will analyse the integration-​tests re­sults. Build fail­ures be­cause of in­te­gra­tion tests failed as­ser­tions are re­ported in this phase.</p><h2 id=\"hey-we-dont-have-integration-tests-\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#hey-we-dont-have-integration-tests-\"></a>Hey, we don’t have integration tests !</h2><p>And that’s right, we set up every­thing, but we don’t have a sin­gle in­te­gra­tion test. To ease the im­ple­men­ta­tion, let’s use two li­braries: <a href=\"http://joel-costigliola.github.io/assertj/\">As­sertJ</a> and <a href=\"https://github.com/jayway/rest-assured\">Rest-​Assured</a>.</p><p>As­sertJ pro­poses a set of as­ser­tions that you can chain and use flu­ently. Rest As­sured is a frame­work to test REST API.</p><p>In the <code>pom.xml</code> file, add the two fol­low­ing de­pen­den­cies just be­fore <code>&lt;/dependencies&gt;</code>:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.jayway.restassured<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>rest-assured<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.4.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.assertj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>assertj-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Then, cre­ate the <code>src/test/java/io/vertx/blog/first/MyRestIT.java</code> file. Un­like unit test, in­te­gra­tion test ends with <code>IT</code>. It’s a con­ven­tion from the Fail­safe plug­in to dis­tin­guish unit (start­ing or end­ing with <em>Test</em>) from in­te­gra­tion tests (start­ing or end­ing with <em>IT</em>). In the cre­ated file add:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> io.vertx.blog.first;\n\n<span class=\"hljs-keyword\">import</span> com.jayway.restassured.RestAssured;\n<span class=\"hljs-keyword\">import</span> org.junit.AfterClass;\n<span class=\"hljs-keyword\">import</span> org.junit.BeforeClass;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyRestIT</span> </span>{\n\n  <span class=\"hljs-meta\">@BeforeClass</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureRestAssured</span><span class=\"hljs-params\">()</span> </span>{\n    RestAssured.baseURI = <span class=\"hljs-string\">&quot;http://localhost&quot;</span>;\n    RestAssured.port = Integer.getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>);\n  }\n\n  <span class=\"hljs-meta\">@AfterClass</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unconfigureRestAssured</span><span class=\"hljs-params\">()</span> </span>{\n    RestAssured.reset();\n  }\n}\n</code></pre><p>The meth­ods an­no­tated with <code>@BeforeClass</code> and <code>@AfterClass</code> are in­voked once be­fore / after all tests of the class. Here, we just re­trieve the http port (passed as a sys­tem prop­erty) and we con­fig­ure REST As­sured.</p><div class=\"alert info\"><div class=\"alert-title\">Am I ready to serve?</div><p>You may need to wait in the <code>configureRestAssured</code> method that the HTTP server has been started. We rec­om­mend the <a href=\"https://github.com/jayway/awaitility\">await­il­ity</a> test frame­work to check that the re­quest can be served. It would fail the test if the server does not start.</p></div><p>It’s now time to im­ple­ment a real test. Let’s check we can re­trieve an in­di­vid­ual prod­uct:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkThatWeCanRetrieveIndividualProduct</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// Get the list of bottles, ensure it&#x27;s a success and extract the first id.</span>\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> id = get(<span class=\"hljs-string\">&quot;/api/whiskies&quot;</span>).then()\n      .assertThat()\n      .statusCode(<span class=\"hljs-number\">200</span>)\n      .extract()\n      .jsonPath().getInt(<span class=\"hljs-string\">&quot;find { it.name==&#x27;Bowmore 15 Years Laimrig&#x27; }.id&quot;</span>);\n  <span class=\"hljs-comment\">// Now get the individual resource and check the content</span>\n  get(<span class=\"hljs-string\">&quot;/api/whiskies/&quot;</span> + id).then()\n      .assertThat()\n      .statusCode(<span class=\"hljs-number\">200</span>)\n      .body(<span class=\"hljs-string\">&quot;name&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>))\n      .body(<span class=\"hljs-string\">&quot;origin&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>))\n      .body(<span class=\"hljs-string\">&quot;id&quot;</span>, equalTo(id));\n}\n</code></pre><p>Here you can ap­pre­ci­ate the power and ex­pres­sive­ness of Rest As­sured. We re­trieve the list of prod­uct, en­sure the re­sponse is cor­rect, and ex­tract the <em>id</em> of a spe­cific bot­tle using a JSON (Groovy) Path ex­pres­sion.</p><p>Then, we try to re­trieve the meta­data of this in­di­vid­ual prod­uct, and check the re­sult.</p><p>Let’s now im­ple­ment a more so­phis­ti­cated sce­nario. Let’s add and delete a prod­uct:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkWeCanAddAndDeleteAProduct</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// Create a new bottle and retrieve the result (as a Whisky instance).</span>\n  Whisky whisky = given()\n      .body(<span class=\"hljs-string\">&quot;{\\&quot;name\\&quot;:\\&quot;Jameson\\&quot;, \\&quot;origin\\&quot;:\\&quot;Ireland\\&quot;}&quot;</span>).request().post(<span class=\"hljs-string\">&quot;/api/whiskies&quot;</span>).thenReturn().as(Whisky.class);\n  assertThat(whisky.getName()).isEqualToIgnoringCase(&quot;Jameson&quot;);\n  assertThat(whisky.getOrigin()).isEqualToIgnoringCase(&quot;Ireland&quot;);\n  assertThat(whisky.getId()).isNotZero();\n  // Check that it has created an individual resource, and check the content.\n  get(&quot;/api/whiskies/&quot; + whisky.getId()).then()\n      .assertThat()\n      .statusCode(<span class=\"hljs-number\">200</span>)\n      .body(<span class=\"hljs-string\">&quot;name&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;Jameson&quot;</span>))\n      .body(<span class=\"hljs-string\">&quot;origin&quot;</span>, equalTo(<span class=\"hljs-string\">&quot;Ireland&quot;</span>))\n      .body(<span class=\"hljs-string\">&quot;id&quot;</span>, equalTo(whisky.getId()));\n  <span class=\"hljs-comment\">// Delete the bottle</span>\n  delete(<span class=\"hljs-string\">&quot;/api/whiskies/&quot;</span> + whisky.getId()).then().assertThat().statusCode(<span class=\"hljs-number\">204</span>);\n  <span class=\"hljs-comment\">// Check that the resource is not available anymore</span>\n  get(<span class=\"hljs-string\">&quot;/api/whiskies/&quot;</span> + whisky.getId()).then()\n      .assertThat()\n      .statusCode(<span class=\"hljs-number\">404</span>);\n}\n</code></pre><p>So, now we have in­te­gra­tion tests let’s try:</p><pre><code class=\"hljs language-bash\">mvn clean verify\n</code></pre><p>Sim­ple no? Well, sim­ple once the setup is done right… You can con­tinue im­ple­ment­ing other in­te­gra­tion tests to be sure that every­thing be­have as you ex­pect.</p><h2 id=\"dear-windows-users\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dear-windows-users\"></a>Dear Windows users…</h2><p>This sec­tion is the bonus part for Win­dows user, or peo­ple want­ing to run their in­te­gra­tion tests on Win­dows ma­chine too. The com­mand we ex­e­cute to stop the ap­pli­ca­tion is not going to work on Win­dows. Luck­ily, it’s pos­si­ble to ex­tend the <code>pom.xml</code> with a pro­file ex­e­cuted on Win­dows.</p><p>In your <code>pom.xml</code>, just after <code>&lt;/build&gt;</code>, add:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">profiles</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- A profile for windows as the stop command is different --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">profile</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>windows<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activation</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">os</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">family</span>&gt;</span>windows<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">family</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">os</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activation</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>stop-vertx-app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>post-integration-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>run<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exec</span> <span class=\"hljs-attr\">executable</span>=<span class=\"hljs-string\">&quot;wmic&quot;</span>\n                      <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">&quot;${project.build.directory}&quot;</span>\n                      <span class=\"hljs-attr\">spawn</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;process&quot;</span>/&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;where&quot;</span>/&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;CommandLine like &#x27;%${project.artifactId}%&#x27; and not name=&#x27;wmic.exe&#x27;&quot;</span>/&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>/&gt;</span>\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exec</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">profile</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">profiles</span>&gt;</span>\n</code></pre><p>This pro­file re­places the ac­tions de­scribed above to stop the ap­pli­ca­tion with a ver­sion work­ing on win­dows. The pro­file is au­to­mat­i­cally en­abled on Win­dows. As on oth­ers op­er­at­ing sys­tems, ex­e­cute with:</p><pre><code class=\"hljs language-bash\">mvn clean verify\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>Wow, what a trip ! We are done… In this post we have seen how we can gain con­fi­dence in Vert.x ap­pli­ca­tions by im­ple­ment­ing both unit and in­te­gra­tion tests. Unit tests, thanks to vert.x unit, are able to check the asyn­chro­nous as­pect of Vert.x ap­pli­ca­tion, but could be com­plex for large sce­nar­ios. Thanks to Rest As­sured and As­sertJ, in­te­gra­tion tests are dead sim­ple to write… but the setup is not straight­for­ward. This post have shown how it can be con­fig­ured eas­ily. Ob­vi­ously, you could also use As­sertJ and Rest As­sured in your unit tests.</p><p>In the <a href=\"/blog/using-the-asynchronous-sql-client/\">next post</a>, we re­place the <em>in mem­ory</em> back­end with a data­base, and use asyn­chro­nous in­te­gra­tion with this data­base.</p><p>Stay Tuned &amp; Happy Cod­ing !</p>","scope":{}},"tfIdfTerms":[{"term":"test","tf":66},{"term":"applic","tf":31},{"term":"integr","tf":25},{"term":"us","tf":23},{"term":"let","tf":17},{"term":"post","tf":17},{"term":"need","tf":17},{"term":"configur","tf":16},{"term":"unit","tf":15},{"term":"port","tf":14},{"term":"start","tf":14},{"term":"implement","tf":13},{"term":"execut","tf":12},{"term":"add","tf":12},{"term":"window","tf":12},{"term":"file","tf":12},{"term":"not","tf":11},{"term":"step","tf":11},{"term":"rest","tf":10},{"term":"check","tf":10},{"term":"first","tf":8},{"term":"code","tf":8},{"term":"creat","tf":8},{"term":"right","tf":8},{"term":"onc","tf":8}]},{"filename":"blog/2015-07-27-some-rest-with-vert-x.mdx","date":"2015-07-27","slug":"some-rest-with-vert-x","meta":{"title":"Some Rest with Vert.x","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This post is part of the Introduction to Vert.x series. Let’s go a bit further this time and develop a CRUD-ish application"},"readingTime":{"text":"12 min read","minutes":11.905,"time":714300,"words":2381},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post is part of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADtro\\xADduc\\xADtion to Vert.x\"), \" se\\xADries. So, let\\u2019s have a quick look about the con\\xADtent of the pre\\xADvi\\xADous posts. In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the first post\")), \", we de\\xADvel\\xADoped a very sim\\xADple Vert.x 3 ap\\xADpli\\xADca\\xADtion, and saw how this ap\\xADpli\\xADca\\xADtion can be tested, pack\\xADaged and ex\\xADe\\xADcuted. In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-application-configuration\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the last post\")), \", we saw how this ap\\xADpli\\xADca\\xADtion be\\xADcame con\\xADfig\\xADurable and how we can use a ran\\xADdom port in test.\"), mdx(\"p\", null, \"Well, noth\\xADing fancy\\u2026 Let\\u2019s go a bit fur\\xADther this time and de\\xADvelop a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CRUD-\\u200Bish\"), \" ap\\xADpli\\xADca\\xADtion. So an ap\\xADpli\\xADca\\xADtion ex\\xADpos\\xADing an HTML page in\\xADter\\xADact\\xADing with the back\\xADend using a REST API. The level of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"REST\\xADfull\\xADness\"), \" of the API is not the topic of this post, I let you de\\xADcide as it\\u2019s a very slip\\xADpery topic.\"), mdx(\"p\", null, \"So, in other words we are going to see:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x Web - a frame\\xADwork that let you cre\\xADate Web ap\\xADpli\\xADca\\xADtions eas\\xADily using Vert.x\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to ex\\xADpose sta\\xADtic re\\xADsources\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to de\\xADvelop a REST API\")), mdx(\"p\", null, \"The code de\\xADvel\\xADoped in this post is avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\"\n  }), \"post-3\"), \" branch of this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app\"\n  }), \"Github\"), \" project. We are going to start from the  \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\"\n  }), \"post-2\"), \" code\\xADbase.\"), mdx(\"p\", null, \"So, let\\u2019s start.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web\"\n  })), \"Vert.x Web\"), mdx(\"p\", null, \"As you may have no\\xADtices in the pre\\xADvi\\xADous posts, deal\\xADing with com\\xADplex HTTP ap\\xADpli\\xADca\\xADtion using only Vert.x Core would be kind of cum\\xADber\\xADsome. That\\u2019s the main rea\\xADson be\\xADhind \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/\"\n  }), \"Vert.x Web\"), \". It makes the de\\xADvel\\xADop\\xADment of Vert.x base web ap\\xADpli\\xADca\\xADtions re\\xADally easy, with\\xADout chang\\xADing the phi\\xADlos\\xADo\\xADphy.\"), mdx(\"p\", null, \"To use Vert.x Web, you need to up\\xADdate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file to add the fol\\xADlow\\xADing de\\xADpen\\xADdency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"That\\u2019s the only thing you need to use Vert.x Web. Sweet, no ?\"), mdx(\"p\", null, \"Let\\u2019s now use it. Re\\xADmem\\xADber, in the pre\\xADvi\\xADous post, when we re\\xADquested http://lo\\xADcal\\xADhost:8080, we reply a nice \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Hello World\"), \" mes\\xADsage. Let\\u2019s do the same with Vert.x Web.  Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.blog.first.MyFirstVerticle\"), \" class and change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method to be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create a router object.\"), \"\\n Router router = Router.router(vertx);\\n\\n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Bind \\\"/\\\" to our hello message - so we are still compatible.\"), \"\\n router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(routingContext -> {\\n   HttpServerResponse response = routingContext.response();\\n   response\\n       .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \")\\n       .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"), \");\\n });\\n\\n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create the HTTP server and pass the \\\"accept\\\" method to the request handler.\"), \"\\n vertx\\n     .createHttpServer()\\n     .requestHandler(router::accept)\\n     .listen(\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Retrieve the port from the configuration,\"), \"\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// default to 8080.\"), \"\\n         config().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"),\\n         result -> {\\n           \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n             fut.complete();\\n           } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n             fut.fail(result.cause());\\n           }\\n         }\\n     );\\n}\\n\")), mdx(\"p\", null, \"You may be sur\\xADprise by the length of this snip\\xADpet (in com\\xADpar\\xADi\\xADson to the pre\\xADvi\\xADous code). But as we are going to see, it will make our app on steroids, just be pa\\xADtient.\"), mdx(\"p\", null, \"As you can see, we start by cre\\xADat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\"), \" ob\\xADject. The router is the cor\\xADner\\xADstone of Vert.x Web. This ob\\xADject is re\\xADspon\\xADsi\\xADble for dis\\xADpatch\\xADing the HTTP re\\xADquests to the right \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdler\"), \". Two other con\\xADcepts are very im\\xADpor\\xADtant in Vert.x Web:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Routes - which let you de\\xADfine how re\\xADquest are dis\\xADpatched\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Han\\xADdlers - which are the ac\\xADtual ac\\xADtion pro\\xADcess\\xADing the re\\xADquests and writ\\xADing the re\\xADsult. Han\\xADdlers can be chained.\")), mdx(\"p\", null, \"If you un\\xADder\\xADstand these 3 con\\xADcepts, you have un\\xADder\\xADstood every\\xADthing in Vert.x Web.\"), mdx(\"p\", null, \"Let\\u2019s focus on this code first:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(routingContext -> {\\n  HttpServerResponse response = routingContext.response();\\n  response\\n      .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \")\\n      .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"), \");\\n});\\n\")), mdx(\"p\", null, \"It \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" re\\xADquests ar\\xADriv\\xADing on \\u201D/\\u201D to the given \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdler\"), \". Han\\xADdlers re\\xADceive a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RoutingContext\"), \" ob\\xADject. This han\\xADdler is quite sim\\xADi\\xADlar to the code we had be\\xADfore, and it\\u2019s quite nor\\xADmal as it ma\\xADnip\\xADu\\xADlates the same type of ob\\xADject: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpServerResponse\"), \".\"), mdx(\"p\", null, \"Let\\u2019s now have a look to the rest of the code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx\\n    .createHttpServer()\\n    .requestHandler(router::accept)\\n    .listen(\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Retrieve the port from the configuration,\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// default to 8080.\"), \"\\n        config().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"),\\n        result -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n            fut.complete();\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            fut.fail(result.cause());\\n          }\\n        }\\n    );\\n}\\n\")), mdx(\"p\", null, \"It\\u2019s ba\\xADsi\\xADcally the same code as be\\xADfore, ex\\xADcept that we change the re\\xADquest han\\xADdler. We pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router::accept\"), \" to the han\\xADdler. You may not be fa\\xADmil\\xADiar with this no\\xADta\\xADtion. It\\u2019s a ref\\xADer\\xADence to a method (here the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accept\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router\"), \" ob\\xADject). In other worlds, it in\\xADstructs vert.x to call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accept\"), \" method of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router\"), \" when it re\\xADceives a re\\xADquest.\"), mdx(\"p\", null, \"Let\\u2019s try to see if this work:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"By open\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080\"), \" in your browser you should see the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Hello\"), \" mes\\xADsage. As we didn\\u2019t change the be\\xADhav\\xADior of the ap\\xADpli\\xADca\\xADtion, our tests are still valid.\"), mdx(\"h2\", {\n    \"id\": \"exposing-static-resources\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#exposing-static-resources\"\n  })), \"Exposing static resources\"), mdx(\"p\", null, \"Ok, so we have a first ap\\xADpli\\xADca\\xADtion using vert.x web. Let\\u2019s see some of the ben\\xADe\\xADfits. Let\\u2019s start with serv\\xADing sta\\xADtic re\\xADsources, such as an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" page. Be\\xADfore we go fur\\xADther, I should start with a dis\\xADclaimer: \\u201Cthe HTML page we are going to see here is ugly like hell : I\\u2019m not a UI guy\\u201D. I should also add that there are prob\\xADa\\xADbly plenty of bet\\xADter ways to im\\xADple\\xADment this and a myr\\xADiad of frame\\xADworks I should try, but that\\u2019s not the point. I tried to keep things sim\\xADple and just re\\xADly\\xADing on JQuery and Twit\\xADter Boot\\xADstrap, so if you know a bit of JavaScript you can un\\xADder\\xADstand and edit the page.\"), mdx(\"p\", null, \"Let\\u2019s cre\\xADate the HTML page that will be the entry point of our ap\\xADpli\\xADca\\xADtion. Cre\\xADate an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" page in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resources/assets\"), \" with the con\\xADtent from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/resources/assets/index.html\"\n  }), \"here\"), \". As it\\u2019s just a HTML page with a bit of JavaScript, we won\\u2019t de\\xADtail the file here. If you have ques\\xADtions, just post com\\xADments.\"), mdx(\"p\", null, \"Ba\\xADsi\\xADcally, the page is a sim\\xADple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CRUD\"), \" UI to man\\xADage my col\\xADlec\\xADtion of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not-\\u200Byet-finished\"), \" bot\\xADtles of Whisky. It was made in a generic way, so you can trans\\xADpose it to your own col\\xADlec\\xADtion. The list of prod\\xADuct is dis\\xADplayed in the main table. You can cre\\xADate a new prod\\xADuct, edit one or delete one. These ac\\xADtions are re\\xADly\\xADing on a REST API (that we are going to im\\xADple\\xADment) through AJAX calls. That\\u2019s all.\"), mdx(\"p\", null, \"Once this page is cre\\xADated, edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.blog.first.MyFirstVerticle\"), \" class and change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method to be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n Router router = Router.router(vertx);\\n router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(routingContext -> {\\n   HttpServerResponse response = routingContext.response();\\n   response\\n       .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text/html\\\"\"), \")\\n       .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first Vert.x 3 application</h1>\\\"\"), \");\\n });\\n\\n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Serve static resources from the /assets directory\"), \"\\n router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/assets/*\\\"\"), \").handler(StaticHandler.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"assets\\\"\"), \"));\\n\\n vertx\\n     .createHttpServer()\\n     .requestHandler(router::accept)\\n     .listen(\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Retrieve the port from the configuration,\"), \"\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// default to 8080.\"), \"\\n         config().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"),\\n         result -> {\\n           \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n             fut.complete();\\n           } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n             fut.fail(result.cause());\\n           }\\n         }\\n     );\\n}\\n\")), mdx(\"p\", null, \"The only dif\\xADfer\\xADence with the pre\\xADvi\\xADous code is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router.route(\\\"/assets/*\\\").handler(StaticHandler.create(\\\"assets\\\"));\"), \" line. So, what does this line mean? It\\u2019s ac\\xADtu\\xADally quite sim\\xADple. It \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" re\\xADquests on \\u201C/as\\xADsets/*\\u201D to re\\xADsources stored in the \\u201Cas\\xADsets\\u201D di\\xADrec\\xADtory. So our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" page is going to be served using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/assets/index.html\"), \".\"), mdx(\"p\", null, \"Be\\xADfore test\\xADing this, let\\u2019s take a few sec\\xADonds on the han\\xADdler cre\\xADation. All pro\\xADcess\\xADing ac\\xADtions in Vert.x web are im\\xADple\\xADmented as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdler\"), \". To cre\\xADate a han\\xADdler you al\\xADways call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create\"), \" method.\"), mdx(\"p\", null, \"So, I\\u2019m sure you are im\\xADpa\\xADtient to see our beau\\xADti\\xADful HTML page. Let\\u2019s build and run the ap\\xADpli\\xADca\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"Now, open your browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/assets/index.html\"), \". Here it is\\u2026 Ugly right? I told you.\"), mdx(\"p\", null, \"As you may no\\xADtice too\\u2026 the table is empty, this is be\\xADcause we didn\\u2019t im\\xADple\\xADment the REST API yet. Let\\u2019s do that now.\"), mdx(\"h2\", {\n    \"id\": \"rest-api-with-vertx-web\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#rest-api-with-vertx-web\"\n  })), \"REST API with Vert.x Web\"), mdx(\"p\", null, \"Vert.x Web makes the im\\xADple\\xADmen\\xADta\\xADtion of REST API re\\xADally easy, as it ba\\xADsi\\xADcally \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" your URL to the right han\\xADdler. The API is very sim\\xADple, and will be struc\\xADtured as fol\\xADlows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /api/whiskies\"), \" => get all bot\\xADtles (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getAll\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /api/whiskies/:id\"), \" => get the bot\\xADtle with the cor\\xADre\\xADspond\\xADing id (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getOne\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"POST /api/whiskies\"), \" => add a new bot\\xADtle (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"addOne\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PUT /api/whiskies/:id\"), \" => up\\xADdate a bot\\xADtle (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"updateOne\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DELETE /api/whiskies/id\"), \" => delete a bot\\xADtle (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"deleteOne\"), \")\")), mdx(\"h3\", {\n    \"id\": \"we-need-some-data\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#we-need-some-data\"\n  })), \"We need some data\\u2026\"), mdx(\"p\", null, \"But be\\xADfore going fur\\xADther, let\\u2019s cre\\xADate our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"data\"), \" ob\\xADject. Cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/java/io/vertx/blog/first/Whisky.java\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.blog.first;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" java.util.concurrent.atomic.AtomicInteger;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Whisky\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" AtomicInteger COUNTER = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" AtomicInteger();\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" id;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" String name;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" String origin;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Whisky\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String name, String origin)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".id = COUNTER.getAndIncrement();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".name = name;\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".origin = origin;\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Whisky\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".id = COUNTER.getAndIncrement();\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" String \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getName\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" name;\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" String \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getOrigin\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" origin;\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getId\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" id;\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setName\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String name)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".name = name;\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setOrigin\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String origin)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".origin = origin;\\n  }\\n}\\n\")), mdx(\"p\", null, \"It\\u2019s a very sim\\xADple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bean\"), \" class (so with get\\xADters and set\\xADters). We choose this for\\xADmat be\\xADcause Vert.x is re\\xADly\\xADing on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://wiki.fasterxml.com/JacksonHome\"\n  }), \"Jack\\xADson\"), \" to han\\xADdle the JSON for\\xADmat. Jack\\xADson au\\xADto\\xADmates the se\\xADri\\xADal\\xADiza\\xADtion and de\\xADse\\xADri\\xADal\\xADiza\\xADtion of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bean\"), \" classes, mak\\xADing our code much sim\\xADpler.\"), mdx(\"p\", null, \"Now, let\\u2019s cre\\xADate a cou\\xADple of bot\\xADtles. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVerticle\"), \" class, add the fol\\xADlow\\xADing code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Store our product\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Map<Integer, Whisky> products = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" LinkedHashMap<>();\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create some product\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createSomeData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n  Whisky bowmore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \");\\n  products.put(bowmore.getId(), bowmore);\\n  Whisky talisker = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \");\\n  products.put(talisker.getId(), talisker);\\n}\\n\")), mdx(\"p\", null, \"Then, in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method, call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createSomeData\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n\\n  createSomeData();\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create a router object.\"), \"\\n  Router router = Router.router(vertx);\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Rest of the method\"), \"\\n}\\n\")), mdx(\"p\", null, \"As you have no\\xADticed, we don\\u2019t re\\xADally have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"back\\xADend\"), \" here, it\\u2019s just a (in-\\u200Bmemory) map. Adding a back\\xADend will be cov\\xADered by an\\xADother post.\"), mdx(\"h3\", {\n    \"id\": \"get-our-products\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#get-our-products\"\n  })), \"Get our products\"), mdx(\"p\", null, \"Enough dec\\xADo\\xADra\\xADtion, let\\u2019s im\\xADple\\xADment the REST API. We are going to start with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /api/whiskies\"), \". It re\\xADturns the list of bot\\xADtles in a JSON Array.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method, add this line just below the sta\\xADtic han\\xADdler line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::getAll);\\n\")), mdx(\"p\", null, \"This line in\\xADstructs the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router\"), \" to han\\xADdle the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" re\\xADquests on \\u201C/api/whiskies\\u201D by call\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \" method. We could have in\\xADlined the han\\xADdler code, but for clar\\xADity rea\\xADsons let\\u2019s cre\\xADate an\\xADother  method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getAll\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  routingContext.response()\\n      .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n      .end(Json.encodePrettily(products.values()));\\n}\\n\")), mdx(\"p\", null, \"As every \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"han\\xADdler\"), \" our method re\\xADceives a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RoutingContext\"), \". It pop\\xADu\\xADlates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"response\"), \" by set\\xADting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content-type\"), \" and the ac\\xADtual con\\xADtent. Be\\xADcause our con\\xADtent may con\\xADtain \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"weird\"), \" char\\xADac\\xADters, we force the charset to UTF-8. To cre\\xADate the ac\\xADtual con\\xADtent, no need to com\\xADpute the JSON string our\\xADself. Vert.x lets us use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Json\"), \" API. So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Json.encodePrettily(products.values())\"), \" com\\xADputes the JSON string rep\\xADre\\xADsent\\xADing the set of bot\\xADtles.\"), mdx(\"p\", null, \"We could have used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Json.encodePrettily(products)\"), \", but to make the JavaScript code sim\\xADpler, we just re\\xADturn the set of bot\\xADtles and not an ob\\xADject con\\xADtain\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ID => Bottle\"), \" en\\xADtries.\"), mdx(\"p\", null, \"With this in place, we should be able to re\\xADtrieve the set of bot\\xADtle from our HTML page. Let\\u2019s try it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"Then open the HTML page in your browser (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/assets/index.html\"), \"), and should should see:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/intro-series/post-3-My_Whisky_Collection.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"I\\u2019m sure you are cu\\xADri\\xADous, and want to ac\\xADtu\\xADally see what is re\\xADturned by our REST API. Let\\u2019s open a browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080/api/whiskies\"), \". You should get:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"[ {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"id\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"origin\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \"\\n}, {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"id\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"name\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"origin\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \"\\n} ]\\n\")), mdx(\"h2\", {\n    \"id\": \"create-a-product\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#create-a-product\"\n  })), \"Create a product\"), mdx(\"p\", null, \"Now we can re\\xADtrieve the set of bot\\xADtles, let\\u2019s cre\\xADate a new one. Un\\xADlike the pre\\xADvi\\xADous REST API end\\xADpoint, this one need to read the re\\xADquest\\u2019s body. For per\\xADfor\\xADmance rea\\xADson, it should be ex\\xADplic\\xADitly en\\xADabled. Don\\u2019t be scared\\u2026 it\\u2019s just a han\\xADdler.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method, add these lines just below the line end\\xADing by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies*\\\"\"), \").handler(BodyHandler.create());\\nrouter.post(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::addOne);\\n\")), mdx(\"p\", null, \"The first line en\\xADables the read\\xADing of the re\\xADquest body for all routes under \\u201C/api/whiskies\\u201D. We could have en\\xADabled it glob\\xADally with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router.route().handler(BodyHandler.create())\"), \".\"), mdx(\"p\", null, \"The sec\\xADond line maps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" re\\xADquests on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/api/whiskies\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addOne\"), \" method. Let\\u2019s cre\\xADate this method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"addOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Whisky whisky = Json.decodeValue(routingContext.getBodyAsString(),\\n      Whisky.class);\\n  products.put(whisky.getId(), whisky);\\n  routingContext.response()\\n      .setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"201\"), \")\\n      .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n      .end(Json.encodePrettily(whisky));\\n}\\n\")), mdx(\"p\", null, \"The method starts by re\\xADtriev\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Whisky\"), \" ob\\xADject from the re\\xADquest body. It just reads the body into a String and passes it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Json.decodeValue\"), \" method. Once cre\\xADated it adds it to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"back\\xADend\"), \" map and re\\xADturns the cre\\xADated bot\\xADtle as JSON.\"), mdx(\"p\", null, \"Let\\u2019s try this. Re\\xADbuild and restart the ap\\xADpli\\xADca\\xADtion with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-mipsasm\"\n  }), \"mvn clean package\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"java \"), \"-\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"jar \"), \"target/my-first-app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"-1\"), \".\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"-SNAPSHOT-fat.\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"jar\\n\"))), mdx(\"p\", null, \"Then, re\\xADfresh the HTML page and click on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Add a new bottle\"), \" but\\xADton. Enter the data such as: \\u201CJame\\xADson\\u201D as name and \\u201CIre\\xADland\\u201D as ori\\xADgin (purists would have no\\xADticed that this is ac\\xADtu\\xADally a Whiskey and not a Whisky). The bot\\xADtle should be added to the table.\"), mdx(Alert, {\n    info: true,\n    title: \"Status 201?\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"As you can see, we have set the re\\xADsponse sta\\xADtus to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"201\"), \". It means \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATED\"), \", and is the gen\\xADer\\xADally used in REST API that cre\\xADate an en\\xADtity. By de\\xADfault vert.x web is set\\xADting the sta\\xADtus to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"200\"), \" mean\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OK\"), \".\")), mdx(\"h3\", {\n    \"id\": \"finishing-a-bottle\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finishing-a-bottle\"\n  })), \"Finishing a bottle\"), mdx(\"p\", null, \"Well, bot\\xADtles do not last for\\xADever, so we should be able to delete a bot\\xADtle. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method, add this line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"router.delete(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/whiskies/:id\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::deleteOne);\\n\")), mdx(\"p\", null, \"In the URL, we de\\xADfine a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"path pa\\xADra\\xADme\\xADter\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":id\"), \". So, when han\\xADdling a match\\xADing re\\xADquest, Vert.x ex\\xADtracts the path seg\\xADment cor\\xADre\\xADspond\\xADing to the pa\\xADra\\xADme\\xADter and let us ac\\xADcess it in the han\\xADdler method. For in\\xADstance, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/api/whiskies/0\"), \" maps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \".\"), mdx(\"p\", null, \"Let\\u2019s see how the pa\\xADra\\xADme\\xADter can be used in the han\\xADdler method. Cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteOne\"), \" method as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"deleteOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  String id = routingContext.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (id == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    Integer idAsInteger = Integer.valueOf(id);\\n    products.remove(idAsInteger);\\n  }\\n  routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"204\"), \").end();\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"path pa\\xADra\\xADme\\xADter\"), \" is re\\xADtrieved using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routingContext.request().getParam(\\\"id\\\")\"), \".  It checks whether it\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" (not set), and in this case re\\xADturns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bad Request\"), \" re\\xADsponse (sta\\xADtus code 400). Oth\\xADer\\xADwise, it re\\xADmoves it from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"back\\xADend\"), \" map.\"), mdx(Alert, {\n    info: true,\n    title: \"Status 204?\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"As you can see, we have set the re\\xADsponse sta\\xADtus to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"204 - NO CONTENT\"), \". Re\\xADsponse to the HTTP Verb \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"), \" have gen\\xADer\\xADally no con\\xADtent.\")), mdx(\"h3\", {\n    \"id\": \"the-other-methods\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-other-methods\"\n  })), \"The other methods\"), mdx(\"p\", null, \"We won\\u2019t de\\xADtail \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getOne\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateOne\"), \" as the im\\xADple\\xADmen\\xADta\\xADtions are straight\\xADfor\\xADward and very sim\\xADi\\xADlar. Their im\\xADple\\xADmen\\xADta\\xADtions are avail\\xADable on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/java/io/vertx/blog/first/MyFirstVerticle.java\"\n  }), \"GitHub\"), \".\"), mdx(\"h3\", {\n    \"id\": \"cheers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#cheers\"\n  })), \"Cheers!\"), mdx(\"p\", null, \"It\\u2019s time to con\\xADclude this post. We have seen how Vert.x Web lets you im\\xADple\\xADment a REST API eas\\xADily and how it can serve sta\\xADtic re\\xADsources. A bit more fancy than be\\xADfore, but still pretty easy.\"), mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/unit-and-integration-tests/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"In the next post\")), \", we are going to improve our tests to cover the REST API.\", mdx(\"p\", null, \"Say Tuned \", \"&\", \" Happy Cod\\xADing !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This post is part of the <em>In­tro­duc­tion to Vert.x</em> se­ries. So, let’s have a quick look about the con­tent of the pre­vi­ous posts. In <a href=\"/blog/my-first-vert-x-3-application/\">the first post</a>, we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. In <a href=\"/blog/vert-x-application-configuration/\">the last post</a>, we saw how this ap­pli­ca­tion be­came con­fig­urable and how we can use a ran­dom port in test.</p><p>Well, noth­ing fancy… Let’s go a bit fur­ther this time and de­velop a <em>CRUD-​ish</em> ap­pli­ca­tion. So an ap­pli­ca­tion ex­pos­ing an HTML page in­ter­act­ing with the back­end using a REST API. The level of <em>REST­full­ness</em> of the API is not the topic of this post, I let you de­cide as it’s a very slip­pery topic.</p><p>So, in other words we are going to see:</p><ul><li>Vert.x Web - a frame­work that let you cre­ate Web ap­pli­ca­tions eas­ily using Vert.x</li><li>How to ex­pose sta­tic re­sources</li><li>How to de­velop a REST API</li></ul><p>The code de­vel­oped in this post is avail­able on the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-3\">post-3</a> branch of this <a href=\"https://github.com/cescoffier/my-vertx-first-app\">Github</a> project. We are going to start from the  <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\">post-2</a> code­base.</p><p>So, let’s start.</p><h2 id=\"vertx-web\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web\"></a>Vert.x Web</h2><p>As you may have no­tices in the pre­vi­ous posts, deal­ing with com­plex HTTP ap­pli­ca­tion using only Vert.x Core would be kind of cum­ber­some. That’s the main rea­son be­hind <a href=\"http://vertx.io/docs/vertx-web/java/\">Vert.x Web</a>. It makes the de­vel­op­ment of Vert.x base web ap­pli­ca­tions re­ally easy, with­out chang­ing the phi­los­o­phy.</p><p>To use Vert.x Web, you need to up­date the <code>pom.xml</code> file to add the fol­low­ing de­pen­dency:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>That’s the only thing you need to use Vert.x Web. Sweet, no ?</p><p>Let’s now use it. Re­mem­ber, in the pre­vi­ous post, when we re­quested http://lo­cal­host:8080, we reply a nice <em>Hello World</em> mes­sage. Let’s do the same with Vert.x Web.  Open the <code>io.vertx.blog.first.MyFirstVerticle</code> class and change the <code>start</code> method to be:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n <span class=\"hljs-comment\">// Create a router object.</span>\n Router router = Router.router(vertx);\n\n <span class=\"hljs-comment\">// Bind &quot;/&quot; to our hello message - so we are still compatible.</span>\n router.route(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(routingContext -&gt; {\n   HttpServerResponse response = routingContext.response();\n   response\n       .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>)\n       .end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n });\n\n <span class=\"hljs-comment\">// Create the HTTP server and pass the &quot;accept&quot; method to the request handler.</span>\n vertx\n     .createHttpServer()\n     .requestHandler(router::accept)\n     .listen(\n         <span class=\"hljs-comment\">// Retrieve the port from the configuration,</span>\n         <span class=\"hljs-comment\">// default to 8080.</span>\n         config().getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>),\n         result -&gt; {\n           <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n             fut.complete();\n           } <span class=\"hljs-keyword\">else</span> {\n             fut.fail(result.cause());\n           }\n         }\n     );\n}\n</code></pre><p>You may be sur­prise by the length of this snip­pet (in com­par­i­son to the pre­vi­ous code). But as we are going to see, it will make our app on steroids, just be pa­tient.</p><p>As you can see, we start by cre­at­ing a <code>Router</code> ob­ject. The router is the cor­ner­stone of Vert.x Web. This ob­ject is re­spon­si­ble for dis­patch­ing the HTTP re­quests to the right <em>han­dler</em>. Two other con­cepts are very im­por­tant in Vert.x Web:</p><ul><li>Routes - which let you de­fine how re­quest are dis­patched</li><li>Han­dlers - which are the ac­tual ac­tion pro­cess­ing the re­quests and writ­ing the re­sult. Han­dlers can be chained.</li></ul><p>If you un­der­stand these 3 con­cepts, you have un­der­stood every­thing in Vert.x Web.</p><p>Let’s focus on this code first:</p><pre><code class=\"hljs language-java\">router.route(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(routingContext -&gt; {\n  HttpServerResponse response = routingContext.response();\n  response\n      .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>)\n      .end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n});\n</code></pre><p>It <em>routes</em> re­quests ar­riv­ing on ”/” to the given <em>han­dler</em>. Han­dlers re­ceive a <code>RoutingContext</code> ob­ject. This han­dler is quite sim­i­lar to the code we had be­fore, and it’s quite nor­mal as it ma­nip­u­lates the same type of ob­ject: <code>HttpServerResponse</code>.</p><p>Let’s now have a look to the rest of the code:</p><pre><code class=\"hljs language-java\">vertx\n    .createHttpServer()\n    .requestHandler(router::accept)\n    .listen(\n        <span class=\"hljs-comment\">// Retrieve the port from the configuration,</span>\n        <span class=\"hljs-comment\">// default to 8080.</span>\n        config().getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>),\n        result -&gt; {\n          <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n            fut.complete();\n          } <span class=\"hljs-keyword\">else</span> {\n            fut.fail(result.cause());\n          }\n        }\n    );\n}\n</code></pre><p>It’s ba­si­cally the same code as be­fore, ex­cept that we change the re­quest han­dler. We pass <code>router::accept</code> to the han­dler. You may not be fa­mil­iar with this no­ta­tion. It’s a ref­er­ence to a method (here the method <code>accept</code> from the <code>router</code> ob­ject). In other worlds, it in­structs vert.x to call the <code>accept</code> method of the <code>router</code> when it re­ceives a re­quest.</p><p>Let’s try to see if this work:</p><pre><code class=\"hljs language-bash\">mvn clean package\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>By open­ing <code>http://localhost:8080</code> in your browser you should see the <em>Hello</em> mes­sage. As we didn’t change the be­hav­ior of the ap­pli­ca­tion, our tests are still valid.</p><h2 id=\"exposing-static-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#exposing-static-resources\"></a>Exposing static resources</h2><p>Ok, so we have a first ap­pli­ca­tion using vert.x web. Let’s see some of the ben­e­fits. Let’s start with serv­ing sta­tic re­sources, such as an <code>index.html</code> page. Be­fore we go fur­ther, I should start with a dis­claimer: “the HTML page we are going to see here is ugly like hell : I’m not a UI guy”. I should also add that there are prob­a­bly plenty of bet­ter ways to im­ple­ment this and a myr­iad of frame­works I should try, but that’s not the point. I tried to keep things sim­ple and just re­ly­ing on JQuery and Twit­ter Boot­strap, so if you know a bit of JavaScript you can un­der­stand and edit the page.</p><p>Let’s cre­ate the HTML page that will be the entry point of our ap­pli­ca­tion. Cre­ate an <code>index.html</code> page in <code>src/main/resources/assets</code> with the con­tent from <a href=\"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/resources/assets/index.html\">here</a>. As it’s just a HTML page with a bit of JavaScript, we won’t de­tail the file here. If you have ques­tions, just post com­ments.</p><p>Ba­si­cally, the page is a sim­ple <em>CRUD</em> UI to man­age my col­lec­tion of <em>not-​yet-finished</em> bot­tles of Whisky. It was made in a generic way, so you can trans­pose it to your own col­lec­tion. The list of prod­uct is dis­played in the main table. You can cre­ate a new prod­uct, edit one or delete one. These ac­tions are re­ly­ing on a REST API (that we are going to im­ple­ment) through AJAX calls. That’s all.</p><p>Once this page is cre­ated, edit the <code>io.vertx.blog.first.MyFirstVerticle</code> class and change the <code>start</code> method to be:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n Router router = Router.router(vertx);\n router.route(<span class=\"hljs-string\">&quot;/&quot;</span>).handler(routingContext -&gt; {\n   HttpServerResponse response = routingContext.response();\n   response\n       .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>)\n       .end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n });\n\n <span class=\"hljs-comment\">// Serve static resources from the /assets directory</span>\n router.route(<span class=\"hljs-string\">&quot;/assets/*&quot;</span>).handler(StaticHandler.create(<span class=\"hljs-string\">&quot;assets&quot;</span>));\n\n vertx\n     .createHttpServer()\n     .requestHandler(router::accept)\n     .listen(\n         <span class=\"hljs-comment\">// Retrieve the port from the configuration,</span>\n         <span class=\"hljs-comment\">// default to 8080.</span>\n         config().getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>),\n         result -&gt; {\n           <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n             fut.complete();\n           } <span class=\"hljs-keyword\">else</span> {\n             fut.fail(result.cause());\n           }\n         }\n     );\n}\n</code></pre><p>The only dif­fer­ence with the pre­vi­ous code is the <code>router.route(&quot;/assets/*&quot;).handler(StaticHandler.create(&quot;assets&quot;));</code> line. So, what does this line mean? It’s ac­tu­ally quite sim­ple. It <em>routes</em> re­quests on “/as­sets/*” to re­sources stored in the “as­sets” di­rec­tory. So our <code>index.html</code> page is going to be served using <code>http://localhost:8080/assets/index.html</code>.</p><p>Be­fore test­ing this, let’s take a few sec­onds on the han­dler cre­ation. All pro­cess­ing ac­tions in Vert.x web are im­ple­mented as <em>han­dler</em>. To cre­ate a han­dler you al­ways call the <code>create</code> method.</p><p>So, I’m sure you are im­pa­tient to see our beau­ti­ful HTML page. Let’s build and run the ap­pli­ca­tion:</p><pre><code class=\"hljs language-bash\">mvn clean package\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>Now, open your browser to <code>http://localhost:8080/assets/index.html</code>. Here it is… Ugly right? I told you.</p><p>As you may no­tice too… the table is empty, this is be­cause we didn’t im­ple­ment the REST API yet. Let’s do that now.</p><h2 id=\"rest-api-with-vertx-web\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#rest-api-with-vertx-web\"></a>REST API with Vert.x Web</h2><p>Vert.x Web makes the im­ple­men­ta­tion of REST API re­ally easy, as it ba­si­cally <em>routes</em> your URL to the right han­dler. The API is very sim­ple, and will be struc­tured as fol­lows:</p><ul><li><code>GET /api/whiskies</code> =&gt; get all bot­tles (<code>getAll</code>)</li><li><code>GET /api/whiskies/:id</code> =&gt; get the bot­tle with the cor­re­spond­ing id (<code>getOne</code>)</li><li><code>POST /api/whiskies</code> =&gt; add a new bot­tle (<code>addOne</code>)</li><li><code>PUT /api/whiskies/:id</code> =&gt; up­date a bot­tle (<code>updateOne</code>)</li><li><code>DELETE /api/whiskies/id</code> =&gt; delete a bot­tle (<code>deleteOne</code>)</li></ul><h3 id=\"we-need-some-data\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#we-need-some-data\"></a>We need some data…</h3><p>But be­fore going fur­ther, let’s cre­ate our <em>data</em> ob­ject. Cre­ate the <code>src/main/java/io/vertx/blog/first/Whisky.java</code> with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> io.vertx.blog.first;\n\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Whisky</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> AtomicInteger COUNTER = <span class=\"hljs-keyword\">new</span> AtomicInteger();\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> id;\n\n  <span class=\"hljs-keyword\">private</span> String name;\n\n  <span class=\"hljs-keyword\">private</span> String origin;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Whisky</span><span class=\"hljs-params\">(String name, String origin)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = COUNTER.getAndIncrement();\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.origin = origin;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Whisky</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.id = COUNTER.getAndIncrement();\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> name;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getOrigin</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> origin;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> id;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setOrigin</span><span class=\"hljs-params\">(String origin)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.origin = origin;\n  }\n}\n</code></pre><p>It’s a very sim­ple <em>bean</em> class (so with get­ters and set­ters). We choose this for­mat be­cause Vert.x is re­ly­ing on <a href=\"http://wiki.fasterxml.com/JacksonHome\">Jack­son</a> to han­dle the JSON for­mat. Jack­son au­to­mates the se­ri­al­iza­tion and de­se­ri­al­iza­tion of <em>bean</em> classes, mak­ing our code much sim­pler.</p><p>Now, let’s cre­ate a cou­ple of bot­tles. In the <code>MyFirstVerticle</code> class, add the fol­low­ing code:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Store our product</span>\n<span class=\"hljs-keyword\">private</span> Map&lt;Integer, Whisky&gt; products = <span class=\"hljs-keyword\">new</span> LinkedHashMap&lt;&gt;();\n<span class=\"hljs-comment\">// Create some product</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createSomeData</span><span class=\"hljs-params\">()</span> </span>{\n  Whisky bowmore = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>);\n  products.put(bowmore.getId(), bowmore);\n  Whisky talisker = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Talisker 57° North&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>);\n  products.put(talisker.getId(), talisker);\n}\n</code></pre><p>Then, in the <code>start</code> method, call the <code>createSomeData</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n\n  createSomeData();\n\n  <span class=\"hljs-comment\">// Create a router object.</span>\n  Router router = Router.router(vertx);\n\n  <span class=\"hljs-comment\">// Rest of the method</span>\n}\n</code></pre><p>As you have no­ticed, we don’t re­ally have a <em>back­end</em> here, it’s just a (in-​memory) map. Adding a back­end will be cov­ered by an­other post.</p><h3 id=\"get-our-products\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#get-our-products\"></a>Get our products</h3><p>Enough dec­o­ra­tion, let’s im­ple­ment the REST API. We are going to start with <code>GET /api/whiskies</code>. It re­turns the list of bot­tles in a JSON Array.</p><p>In the <code>start</code> method, add this line just below the sta­tic han­dler line:</p><pre><code class=\"hljs language-java\">router.get(<span class=\"hljs-string\">&quot;/api/whiskies&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::getAll);\n</code></pre><p>This line in­structs the <code>router</code> to han­dle the <code>GET</code> re­quests on “/api/whiskies” by call­ing the <code>getAll</code> method. We could have in­lined the han­dler code, but for clar­ity rea­sons let’s cre­ate an­other  method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  routingContext.response()\n      .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n      .end(Json.encodePrettily(products.values()));\n}\n</code></pre><p>As every <em>han­dler</em> our method re­ceives a <code>RoutingContext</code>. It pop­u­lates the <code>response</code> by set­ting the <code>content-type</code> and the ac­tual con­tent. Be­cause our con­tent may con­tain <em>weird</em> char­ac­ters, we force the charset to UTF-8. To cre­ate the ac­tual con­tent, no need to com­pute the JSON string our­self. Vert.x lets us use the <code>Json</code> API. So <code>Json.encodePrettily(products.values())</code> com­putes the JSON string rep­re­sent­ing the set of bot­tles.</p><p>We could have used <code>Json.encodePrettily(products)</code>, but to make the JavaScript code sim­pler, we just re­turn the set of bot­tles and not an ob­ject con­tain­ing <code>ID =&gt; Bottle</code> en­tries.</p><p>With this in place, we should be able to re­trieve the set of bot­tle from our HTML page. Let’s try it:</p><pre><code class=\"hljs language-bash\">mvn clean package\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>Then open the HTML page in your browser (<code>http://localhost:8080/assets/index.html</code>), and should should see:</p><p><img src=\"/images/blog/intro-series/post-3-My_Whisky_Collection.png\"/></p><p>I’m sure you are cu­ri­ous, and want to ac­tu­ally see what is re­turned by our REST API. Let’s open a browser to <code>http://localhost:8080/api/whiskies</code>. You should get:</p><pre><code class=\"hljs language-json\">[ {\n  <span class=\"hljs-attr\">&quot;id&quot;</span> : <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>,\n  <span class=\"hljs-attr\">&quot;origin&quot;</span> : <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>\n}, {\n  <span class=\"hljs-attr\">&quot;id&quot;</span> : <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">&quot;name&quot;</span> : <span class=\"hljs-string\">&quot;Talisker 57° North&quot;</span>,\n  <span class=\"hljs-attr\">&quot;origin&quot;</span> : <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>\n} ]\n</code></pre><h2 id=\"create-a-product\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#create-a-product\"></a>Create a product</h2><p>Now we can re­trieve the set of bot­tles, let’s cre­ate a new one. Un­like the pre­vi­ous REST API end­point, this one need to read the re­quest’s body. For per­for­mance rea­son, it should be ex­plic­itly en­abled. Don’t be scared… it’s just a han­dler.</p><p>In the <code>start</code> method, add these lines just below the line end­ing by <code>getAll</code>:</p><pre><code class=\"hljs language-java\">router.route(<span class=\"hljs-string\">&quot;/api/whiskies*&quot;</span>).handler(BodyHandler.create());\nrouter.post(<span class=\"hljs-string\">&quot;/api/whiskies&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::addOne);\n</code></pre><p>The first line en­ables the read­ing of the re­quest body for all routes under “/api/whiskies”. We could have en­abled it glob­ally with <code>router.route().handler(BodyHandler.create())</code>.</p><p>The sec­ond line maps <code>POST</code> re­quests on <code>/api/whiskies</code> to the <code>addOne</code> method. Let’s cre­ate this method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  <span class=\"hljs-keyword\">final</span> Whisky whisky = Json.decodeValue(routingContext.getBodyAsString(),\n      Whisky.class);\n  products.put(whisky.getId(), whisky);\n  routingContext.response()\n      .setStatusCode(<span class=\"hljs-number\">201</span>)\n      .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n      .end(Json.encodePrettily(whisky));\n}\n</code></pre><p>The method starts by re­triev­ing the <code>Whisky</code> ob­ject from the re­quest body. It just reads the body into a String and passes it to the <code>Json.decodeValue</code> method. Once cre­ated it adds it to the <em>back­end</em> map and re­turns the cre­ated bot­tle as JSON.</p><p>Let’s try this. Re­build and restart the ap­pli­ca­tion with:</p><pre><code class=\"hljs language-mipsasm\">mvn clean package\n<span class=\"hljs-keyword\">java </span>-<span class=\"hljs-keyword\">jar </span>target/my-first-app<span class=\"hljs-number\">-1</span>.<span class=\"hljs-number\">0</span>-SNAPSHOT-fat.<span class=\"hljs-keyword\">jar\n</span></code></pre><p>Then, re­fresh the HTML page and click on the <code>Add a new bottle</code> but­ton. Enter the data such as: “Jame­son” as name and “Ire­land” as ori­gin (purists would have no­ticed that this is ac­tu­ally a Whiskey and not a Whisky). The bot­tle should be added to the table.</p><div class=\"alert info\"><div class=\"alert-title\">Status 201?</div><p>As you can see, we have set the re­sponse sta­tus to <code>201</code>. It means <code>CREATED</code>, and is the gen­er­ally used in REST API that cre­ate an en­tity. By de­fault vert.x web is set­ting the sta­tus to <code>200</code> mean­ing <code>OK</code>.</p></div><h3 id=\"finishing-a-bottle\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finishing-a-bottle\"></a>Finishing a bottle</h3><p>Well, bot­tles do not last for­ever, so we should be able to delete a bot­tle. In the <code>start</code> method, add this line:</p><pre><code class=\"hljs language-java\">router.delete(<span class=\"hljs-string\">&quot;/api/whiskies/:id&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::deleteOne);\n</code></pre><p>In the URL, we de­fine a <em>path pa­ra­me­ter</em> <code>:id</code>. So, when han­dling a match­ing re­quest, Vert.x ex­tracts the path seg­ment cor­re­spond­ing to the pa­ra­me­ter and let us ac­cess it in the han­dler method. For in­stance, <code>/api/whiskies/0</code> maps <code>id</code> to <code>0</code>.</p><p>Let’s see how the pa­ra­me­ter can be used in the han­dler method. Cre­ate the <code>deleteOne</code> method as fol­lows:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  String id = routingContext.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span>) {\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).end();\n  } <span class=\"hljs-keyword\">else</span> {\n    Integer idAsInteger = Integer.valueOf(id);\n    products.remove(idAsInteger);\n  }\n  routingContext.response().setStatusCode(<span class=\"hljs-number\">204</span>).end();\n}\n</code></pre><p>The <em>path pa­ra­me­ter</em> is re­trieved using <code>routingContext.request().getParam(&quot;id&quot;)</code>.  It checks whether it’s <code>null</code> (not set), and in this case re­turns a <code>Bad Request</code> re­sponse (sta­tus code 400). Oth­er­wise, it re­moves it from the <em>back­end</em> map.</p><div class=\"alert info\"><div class=\"alert-title\">Status 204?</div><p>As you can see, we have set the re­sponse sta­tus to <code>204 - NO CONTENT</code>. Re­sponse to the HTTP Verb <code>delete</code> have gen­er­ally no con­tent.</p></div><h3 id=\"the-other-methods\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-other-methods\"></a>The other methods</h3><p>We won’t de­tail <code>getOne</code> and <code>updateOne</code> as the im­ple­men­ta­tions are straight­for­ward and very sim­i­lar. Their im­ple­men­ta­tions are avail­able on <a href=\"https://github.com/cescoffier/my-vertx-first-app/blob/post-3/src/main/java/io/vertx/blog/first/MyFirstVerticle.java\">GitHub</a>.</p><h3 id=\"cheers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#cheers\"></a>Cheers!</h3><p>It’s time to con­clude this post. We have seen how Vert.x Web lets you im­ple­ment a REST API eas­ily and how it can serve sta­tic re­sources. A bit more fancy than be­fore, but still pretty easy.</p><a href=\"/blog/unit-and-integration-tests/\">In the next post</a>, we are going to improve our tests to cover the REST API.<p>Say Tuned <!-- -->&amp;<!-- --> Happy Cod­ing !</p>","scope":{}},"tfIdfTerms":[{"term":"let","tf":30},{"term":"method","tf":22},{"term":"creat","tf":19},{"term":"handler","tf":18},{"term":"web","tf":17},{"term":"bottl","tf":17},{"term":"us","tf":16},{"term":"api","tf":16},{"term":"page","tf":14},{"term":"request","tf":14},{"term":"post","tf":13},{"term":"applic","tf":13},{"term":"code","tf":13},{"term":"rest","tf":12},{"term":"go","tf":10},{"term":"just","tf":10},{"term":"line","tf":10},{"term":"not","tf":9},{"term":"implement","tf":9},{"term":"set","tf":9},{"term":"html","tf":8},{"term":"add","tf":8},{"term":"object","tf":8},{"term":"content","tf":7},{"term":"start","tf":7}]},{"filename":"blog/2015-07-20-vert-x-application-configuration.mdx","date":"2015-07-20","slug":"vert-x-application-configuration","meta":{"title":"Vert.x Application Configuration","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"In our previous post, we developed a very simple Vert.x 3 application, and saw how this application can be tested, packaged and executed. That was nice, wasn’t it?"},"readingTime":{"text":"5 min read","minutes":4.195,"time":251700.00000000003,"words":839},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"our pre\\xADvi\\xADous post\")), \", we de\\xADvel\\xADoped a very sim\\xADple Vert.x 3 ap\\xADpli\\xADca\\xADtion, and saw how this ap\\xADpli\\xADca\\xADtion can be tested, pack\\xADaged and ex\\xADe\\xADcuted. That was nice, wasn\\u2019t it? Well, ok, that was only the be\\xADgin\\xADning. In this post, we are going to en\\xADhance our ap\\xADpli\\xADca\\xADtion to sup\\xADport \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ex\\xADter\\xADnal\"), \" con\\xADfig\\xADu\\xADra\\xADtion.\"), mdx(\"p\", null, \"So just to re\\xADmind you, we have an ap\\xADpli\\xADca\\xADtion start\\xADing a HTTP server on the port 8080 and re\\xADply\\xADing a po\\xADlite \\u201CHello\\u201D mes\\xADsage to all HTTP re\\xADquests. The pre\\xADvi\\xADous code is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\"\n  }), \"here\"), \". The code de\\xADvel\\xADoped in this post is in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\"\n  }), \"post-2 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"so-why-do-we-need-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#so-why-do-we-need-configuration\"\n  })), \"So, why do we need configuration?\"), mdx(\"p\", null, \"That\\u2019s a good ques\\xADtion. The ap\\xADpli\\xADca\\xADtion works right now, but well, let\\u2019s say you want to de\\xADploy it on a ma\\xADchine where the port 8080 is al\\xADready taken. We would need to change the port in the ap\\xADpli\\xADca\\xADtion code and in the test, just for this ma\\xADchine. That would be sad. For\\xADtu\\xADnately, Vert.x ap\\xADpli\\xADca\\xADtions are con\\xADfig\\xADurable.\"), mdx(\"p\", null, \"Vert.x con\\xADfig\\xADu\\xADra\\xADtions are using the JSON for\\xADmat, so don\\u2019t ex\\xADpect any\\xADthing com\\xADpli\\xADcated. They can be passed to ver\\xADti\\xADcle ei\\xADther from the com\\xADmand line, or using an API. Let\\u2019s have a look.\"), mdx(\"h2\", {\n    \"id\": \"no-8080-anymore\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#no-8080-anymore\"\n  })), \"No \\u20188080\\u2019 anymore\"), mdx(\"p\", null, \"The first step is to mod\\xADify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.blog.first.MyFirstVerticle\"), \" class to not bind to the port 8080, but to read it from the con\\xADfig\\xADu\\xADra\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n  vertx\\n      .createHttpServer()\\n      .requestHandler(r -> {\\n        r.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first \\\"\"), \" +\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Vert.x 3 application</h1>\\\"\"), \");\\n      })\\n      .listen(\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Retrieve the port from the configuration,\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// default to 8080.\"), \"\\n          config().getInteger(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \"),\\n          result -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n              fut.complete();\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n              fut.fail(result.cause());\\n            }\\n          }\\n      );\\n}\\n\")), mdx(\"p\", null, \"So, the only dif\\xADfer\\xADence with the pre\\xADvi\\xADous ver\\xADsion is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config().getInteger(\\\"http.port\\\", 8080)\"), \". Here, our code is now re\\xADquest\\xADing the con\\xADfig\\xADu\\xADra\\xADtion and check whether the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http.port\"), \" prop\\xADerty is set. If not, the port 8080 is used as fall-\\u200Bback. The re\\xADtrieved con\\xADfig\\xADu\\xADra\\xADtion is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \".\"), mdx(\"p\", null, \"As we are using the port 8080 by de\\xADfault, you can still pack\\xADage our ap\\xADpli\\xADca\\xADtion and run it as be\\xADfore:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"Sim\\xADple right ?\"), mdx(\"h2\", {\n    \"id\": \"api-based-configuration---random-port-for-the-tests\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#api-based-configuration---random-port-for-the-tests\"\n  })), \"API-based configuration - Random port for the tests\"), mdx(\"p\", null, \"Now that the ap\\xADpli\\xADca\\xADtion is con\\xADfig\\xADurable, let\\u2019s try to pro\\xADvide a con\\xADfig\\xADu\\xADra\\xADtion. In our test, we are going to con\\xADfig\\xADure our ap\\xADpli\\xADca\\xADtion to use the port 8081. So, pre\\xADvi\\xADously we were de\\xADploy\\xADing our ver\\xADti\\xADcle with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"Let\\u2019s now pass some \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"de\\xADploy\\xADment op\\xADtions\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"port = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8081\"), \";\\nDeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port));\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOptions\"), \" ob\\xADject lets us cus\\xADtomize var\\xADi\\xADous pa\\xADra\\xADme\\xADters. In par\\xADtic\\xADu\\xADlar, it lets us in\\xADject the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonObject\"), \" re\\xADtrieved by the ver\\xADti\\xADcle when using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config()\"), \" method.\"), mdx(\"p\", null, \"Ob\\xADvi\\xADously, the test con\\xADnect\\xADing to the server needs to be slightly mod\\xADi\\xADfied to use the right port (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"port\"), \" is a field):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.createHttpClient().getNow(port, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \", response -> {\\n  response.handler(body -> {\\n    context.assertTrue(body.toString().contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello\\\"\"), \"));\\n    async.complete();\\n  });\\n});\\n\")), mdx(\"p\", null, \"Ok, well, this does not re\\xADally fix our issue. What hap\\xADpens when the port 8081 is used too. Let\\u2019s now pick a ran\\xADdom port:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ServerSocket socket = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ServerSocket(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \");\\nport = socket.getLocalPort();\\nsocket.close();\\n\\nDeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port));\\n\\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\\n\")), mdx(\"p\", null, \"So, the idea is very sim\\xADple. We open a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"server socket\"), \" that would pick a ran\\xADdom port (that\\u2019s why we put 0 as pa\\xADra\\xADme\\xADter). We re\\xADtrieve the used port and close the socket. Be aware that this method is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" per\\xADfect and may fail if the picked port be\\xADcomes used be\\xADtween the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" method and the start of our HTTP server. How\\xADever, it would work fine in the very high ma\\xADjor\\xADity of the case.\"), mdx(\"p\", null, \"With this in place, our test is now using a ran\\xADdom port. Ex\\xADe\\xADcute them with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"external-configuration---lets-run-on-another-port\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#external-configuration---lets-run-on-another-port\"\n  })), \"External configuration - Let\\u2019s run on another port\"), mdx(\"p\", null, \"Ok, well ran\\xADdom port is not what we want in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pro\\xADduc\\xADtion\"), \". Could you imag\\xADine the face of your pro\\xADduc\\xADtion team if you tell them that your ap\\xADpli\\xADca\\xADtion is pick\\xADing a ran\\xADdom port. It can ac\\xADtu\\xADally be funny, but we should never mess with the pro\\xADduc\\xADtion team.\"), mdx(\"p\", null, \"So for the ac\\xADtual ex\\xADe\\xADcu\\xADtion of your ap\\xADpli\\xADca\\xADtion, let\\u2019s pass the con\\xADfig\\xADu\\xADra\\xADtion in an ex\\xADter\\xADnal file. The con\\xADfig\\xADu\\xADra\\xADtion is stored in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"json\"), \" file.\"), mdx(\"p\", null, \"Cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/conf/my-application-conf.json\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \"\\n}\\n\")), mdx(\"p\", null, \"And now, to use this con\\xADfig\\xADu\\xADra\\xADtion just launch your ap\\xADpli\\xADca\\xADtion with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\\n\")), mdx(\"p\", null, \"Open a browser on http://lo\\xADcal\\xADhost:8082, here it is !\"), mdx(\"p\", null, \"How does that work ? Re\\xADmem\\xADber, our \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \" is using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Starter\"), \" class (pro\\xADvided by Vert.x) to launch our ap\\xADpli\\xADca\\xADtion. This class is read\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-conf\"), \" pa\\xADra\\xADme\\xADter and cre\\xADate the cor\\xADre\\xADspond\\xADing de\\xADploy\\xADment op\\xADtions when de\\xADploy\\xADing our ver\\xADti\\xADcle.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"After hav\\xADing de\\xADvel\\xADoped your first Vert.x ap\\xADpli\\xADca\\xADtion, we have seen how this ap\\xADpli\\xADca\\xADtion is con\\xADfig\\xADurable, and this with\\xADout adding any com\\xADplex\\xADity to our ap\\xADpli\\xADca\\xADtion. \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"In the next post\")), \", we are going to see how we can use vertx-\\u200Bweb to de\\xADvelop a small ap\\xADpli\\xADca\\xADtion serv\\xADing sta\\xADtic pages and a REST API. A bit more fancy, but still very sim\\xADple.\"), mdx(\"p\", null, \"Happy Cod\\xADing and \", \"&\", \" Stay Tuned!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In <a href=\"/blog/my-first-vert-x-3-application/\">our pre­vi­ous post</a>, we de­vel­oped a very sim­ple Vert.x 3 ap­pli­ca­tion, and saw how this ap­pli­ca­tion can be tested, pack­aged and ex­e­cuted. That was nice, wasn’t it? Well, ok, that was only the be­gin­ning. In this post, we are going to en­hance our ap­pli­ca­tion to sup­port <em>ex­ter­nal</em> con­fig­u­ra­tion.</p><p>So just to re­mind you, we have an ap­pli­ca­tion start­ing a HTTP server on the port 8080 and re­ply­ing a po­lite “Hello” mes­sage to all HTTP re­quests. The pre­vi­ous code is avail­able <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\">here</a>. The code de­vel­oped in this post is in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-2\">post-2 branch</a>.</p><h2 id=\"so-why-do-we-need-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#so-why-do-we-need-configuration\"></a>So, why do we need configuration?</h2><p>That’s a good ques­tion. The ap­pli­ca­tion works right now, but well, let’s say you want to de­ploy it on a ma­chine where the port 8080 is al­ready taken. We would need to change the port in the ap­pli­ca­tion code and in the test, just for this ma­chine. That would be sad. For­tu­nately, Vert.x ap­pli­ca­tions are con­fig­urable.</p><p>Vert.x con­fig­u­ra­tions are using the JSON for­mat, so don’t ex­pect any­thing com­pli­cated. They can be passed to ver­ti­cle ei­ther from the com­mand line, or using an API. Let’s have a look.</p><h2 id=\"no-8080-anymore\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#no-8080-anymore\"></a>No ‘8080’ anymore</h2><p>The first step is to mod­ify the <code>io.vertx.blog.first.MyFirstVerticle</code> class to not bind to the port 8080, but to read it from the con­fig­u­ra­tion:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n  vertx\n      .createHttpServer()\n      .requestHandler(r -&gt; {\n        r.response().end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first &quot;</span> +\n            <span class=\"hljs-string\">&quot;Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n      })\n      .listen(\n          <span class=\"hljs-comment\">// Retrieve the port from the configuration,</span>\n          <span class=\"hljs-comment\">// default to 8080.</span>\n          config().getInteger(<span class=\"hljs-string\">&quot;http.port&quot;</span>, <span class=\"hljs-number\">8080</span>),\n          result -&gt; {\n            <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n              fut.complete();\n            } <span class=\"hljs-keyword\">else</span> {\n              fut.fail(result.cause());\n            }\n          }\n      );\n}\n</code></pre><p>So, the only dif­fer­ence with the pre­vi­ous ver­sion is <code>config().getInteger(&quot;http.port&quot;, 8080)</code>. Here, our code is now re­quest­ing the con­fig­u­ra­tion and check whether the <em>http.port</em> prop­erty is set. If not, the port 8080 is used as fall-​back. The re­trieved con­fig­u­ra­tion is a <code>JsonObject</code>.</p><p>As we are using the port 8080 by de­fault, you can still pack­age our ap­pli­ca­tion and run it as be­fore:</p><pre><code class=\"hljs language-bash\">mvn clean package\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>Sim­ple right ?</p><h2 id=\"api-based-configuration---random-port-for-the-tests\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#api-based-configuration---random-port-for-the-tests\"></a>API-based configuration - Random port for the tests</h2><p>Now that the ap­pli­ca­tion is con­fig­urable, let’s try to pro­vide a con­fig­u­ra­tion. In our test, we are going to con­fig­ure our ap­pli­ca­tion to use the port 8081. So, pre­vi­ously we were de­ploy­ing our ver­ti­cle with:</p><pre><code class=\"hljs language-java\">vertx.deployVerticle(MyFirstVerticle.class.getName(), context.asyncAssertSuccess());\n</code></pre><p>Let’s now pass some <em>de­ploy­ment op­tions</em>:</p><pre><code class=\"hljs language-java\">port = <span class=\"hljs-number\">8081</span>;\nDeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port));\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n</code></pre><p>The <code>DeploymentOptions</code> ob­ject lets us cus­tomize var­i­ous pa­ra­me­ters. In par­tic­u­lar, it lets us in­ject the <code>JsonObject</code> re­trieved by the ver­ti­cle when using the <code>config()</code> method.</p><p>Ob­vi­ously, the test con­nect­ing to the server needs to be slightly mod­i­fied to use the right port (<code>port</code> is a field):</p><pre><code class=\"hljs language-java\">vertx.createHttpClient().getNow(port, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>, response -&gt; {\n  response.handler(body -&gt; {\n    context.assertTrue(body.toString().contains(<span class=\"hljs-string\">&quot;Hello&quot;</span>));\n    async.complete();\n  });\n});\n</code></pre><p>Ok, well, this does not re­ally fix our issue. What hap­pens when the port 8081 is used too. Let’s now pick a ran­dom port:</p><pre><code class=\"hljs language-java\">ServerSocket socket = <span class=\"hljs-keyword\">new</span> ServerSocket(<span class=\"hljs-number\">0</span>);\nport = socket.getLocalPort();\nsocket.close();\n\nDeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port));\n\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n</code></pre><p>So, the idea is very sim­ple. We open a <em>server socket</em> that would pick a ran­dom port (that’s why we put 0 as pa­ra­me­ter). We re­trieve the used port and close the socket. Be aware that this method is <strong>not</strong> per­fect and may fail if the picked port be­comes used be­tween the <code>close</code> method and the start of our HTTP server. How­ever, it would work fine in the very high ma­jor­ity of the case.</p><p>With this in place, our test is now using a ran­dom port. Ex­e­cute them with:</p><pre><code class=\"hljs language-bash\">mvn clean <span class=\"hljs-built_in\">test</span>\n</code></pre><h2 id=\"external-configuration---lets-run-on-another-port\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#external-configuration---lets-run-on-another-port\"></a>External configuration - Let’s run on another port</h2><p>Ok, well ran­dom port is not what we want in <em>pro­duc­tion</em>. Could you imag­ine the face of your pro­duc­tion team if you tell them that your ap­pli­ca­tion is pick­ing a ran­dom port. It can ac­tu­ally be funny, but we should never mess with the pro­duc­tion team.</p><p>So for the ac­tual ex­e­cu­tion of your ap­pli­ca­tion, let’s pass the con­fig­u­ra­tion in an ex­ter­nal file. The con­fig­u­ra­tion is stored in a <em>json</em> file.</p><p>Cre­ate the <code>src/main/conf/my-application-conf.json</code> with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">&quot;http.port&quot;</span> : <span class=\"hljs-number\">8082</span>\n}\n</code></pre><p>And now, to use this con­fig­u­ra­tion just launch your ap­pli­ca­tion with:</p><pre><code class=\"hljs language-bash\">java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\n</code></pre><p>Open a browser on http://lo­cal­host:8082, here it is !</p><p>How does that work ? Re­mem­ber, our <em>fat jar</em> is using the <code>Starter</code> class (pro­vided by Vert.x) to launch our ap­pli­ca­tion. This class is read­ing the <code>-conf</code> pa­ra­me­ter and cre­ate the cor­re­spond­ing de­ploy­ment op­tions when de­ploy­ing our ver­ti­cle.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>After hav­ing de­vel­oped your first Vert.x ap­pli­ca­tion, we have seen how this ap­pli­ca­tion is con­fig­urable, and this with­out adding any com­plex­ity to our ap­pli­ca­tion. <a href=\"/blog/some-rest-with-vert-x/\">In the next post</a>, we are going to see how we can use vertx-​web to de­velop a small ap­pli­ca­tion serv­ing sta­tic pages and a REST API. A bit more fancy, but still very sim­ple.</p><p>Happy Cod­ing and <!-- -->&amp;<!-- --> Stay Tuned!</p>","scope":{}},"tfIdfTerms":[{"term":"port","tf":19},{"term":"applic","tf":18},{"term":"configur","tf":16},{"term":"us","tf":16},{"term":"let","tf":9},{"term":"8080","tf":6},{"term":"test","tf":6},{"term":"random","tf":6},{"term":"post","tf":5},{"term":"http","tf":5},{"term":"code","tf":5},{"term":"not","tf":5},{"term":"develop","tf":4},{"term":"simpl","tf":4},{"term":"server","tf":4},{"term":"verticl","tf":4},{"term":"pick","tf":4},{"term":"previou","tf":3},{"term":"execut","tf":3},{"term":"ok","tf":3},{"term":"go","tf":3},{"term":"extern","tf":3},{"term":"just","tf":3},{"term":"need","tf":3},{"term":"work","tf":3}]},{"filename":"blog/2015-07-14-my-first-vert-x-3-application.mdx","date":"2015-07-14","slug":"my-first-vert-x-3-application","meta":{"title":"My first Vert.x 3 Application","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say, you heard someone saying that Vert.x is awesome. Ok great, but you may want to try it by yourself. Well, the next natural question is “where do I start ?”"},"readingTime":{"text":"8 min read","minutes":7.09,"time":425400,"words":1418},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let\\u2019s say, you heard some\\xADone say\\xADing that Vert.x is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"awe\\xADsome\"), \". Ok great, but you may want to try it by your\\xADself. Well, the next nat\\xADural ques\\xADtion is \\u201Cwhere do I start?\\u201D. This post is a good start\\xADing point. It shows how is built a very sim\\xADple vert.x ap\\xADpli\\xADca\\xADtion (noth\\xADing fancy), how it is tested and how it is pack\\xADaged and ex\\xADe\\xADcuted. So, every\\xADthing you need to know be\\xADfore build\\xADing your own ground\\xADbreak\\xADing ap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"The code de\\xADvel\\xADoped in this post is avail\\xADable on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app\"\n  }), \"github\"), \". This post is part of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In\\xADtro\\xADduc\\xADtion to Vert.x se\\xADries\"), \". The code of this post in in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\"\n  }), \"post-1 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"lets-start\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-start\"\n  })), \"Let\\u2019s start!\"), mdx(\"p\", null, \"First, let\\u2019s cre\\xADate a project. In this post, we use Apache Maven, but you can use Gra\\xADdle or the build process tool you pre\\xADfer. You could use the Maven jar ar\\xADche\\xADtype to cre\\xADate the struc\\xADture, but ba\\xADsi\\xADcally, you just need a di\\xADrec\\xADtory with:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/main/java\"), \" di\\xADrec\\xADtory\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/test/java\"), \" di\\xADrec\\xADtory\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \" file\")), mdx(\"p\", null, \"So, you would get some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \".\\n\\u251C\\u2500\\u2500 pom.xml\\n\\u251C\\u2500\\u2500 src\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 main\\n\\u2502\\xA0\\xA0 \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 java\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 test\\n\\u2502\\xA0\\xA0     \\u2514\\u2500\\u2500 java\\n\")), mdx(\"p\", null, \"Let\\u2019s cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"project\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"xmlns\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://maven.apache.org/POM/4.0.0\\\"\"), \"\\n         \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"xmlns:xsi\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"), \"\\n         \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"xsi:schemaLocation\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://maven.apache.org/POM/4.0.0\\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"modelVersion\"), \">\"), \"4.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"modelVersion\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx.blog\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"my-first-app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0-SNAPSHOT\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-core\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"build\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugins\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"maven-compiler-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.3\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"source\"), \">\"), \"1.8\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"source\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"1.8\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"target\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugins\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"build\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"project\"), \">\"), \"\\n\")), mdx(\"p\", null, \"This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file is pretty straight\\xADfor\\xADward:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it de\\xADclares a de\\xADpen\\xADdency on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vertx-core\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it con\\xADfig\\xADures the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"maven-\\u200Bcompiler-plugin\"), \" to use Java 8.\")), mdx(\"p\", null, \"This sec\\xADond point is im\\xADpor\\xADtant, Vert.x ap\\xADpli\\xADca\\xADtions re\\xADquire Java 8.\"), mdx(\"h2\", {\n    \"id\": \"lets-code\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-code\"\n  })), \"Let\\u2019s code!\"), mdx(\"p\", null, \"Ok, now we have made the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file. Let\\u2019s do some real cod\\xADing\\u2026 Cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/java/io/vertx/blog/first/MyFirstVerticle.java\"), \" file with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.blog.first;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.AbstractVerticle;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Future;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyFirstVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Future<Void> fut)\"), \" \"), \"{\\n    vertx\\n        .createHttpServer()\\n        .requestHandler(r -> {\\n          r.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"<h1>Hello from my first \\\"\"), \" +\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Vert.x 3 application</h1>\\\"\"), \");\\n        })\\n        .listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", result -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n            fut.complete();\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            fut.fail(result.cause());\\n          }\\n        });\\n  }\\n}\\n\")), mdx(\"p\", null, \"This is ac\\xADtu\\xADally our not fancy ap\\xADpli\\xADca\\xADtion. The class ex\\xADtends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AbstractVerticle\"), \". In the Vert.x world, a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ver\\xADti\\xADcle\"), \" is a com\\xADpo\\xADnent. By ex\\xADtend\\xADing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AbstractVerticle\"), \", our class gets ac\\xADcess to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" field.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method is called when the ver\\xADti\\xADcle is de\\xADployed. We could also im\\xADple\\xADment a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stop\"), \" method, but in this case Vert.x takes care of the garbage for us. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method re\\xADceives a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" ob\\xADject that will let us in\\xADform Vert.x when our start se\\xADquence is com\\xADpleted or re\\xADport an error. One of the par\\xADtic\\xADu\\xADlar\\xADity of Vert.x is its asyn\\xADchro\\xADnous / non-\\u200Bblocking as\\xADpect. When our ver\\xADti\\xADcle is going to be de\\xADployed it won\\u2019t wait until the start method has been com\\xADpleted. So, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future\"), \" pa\\xADra\\xADme\\xADter is im\\xADpor\\xADtant to no\\xADtify of the com\\xADple\\xADtion.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method cre\\xADates a HTTP server and at\\xADtaches a re\\xADquest han\\xADdler to it. The re\\xADquest han\\xADdler is a lambda, passed in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestHandler\"), \" method, called every time the server re\\xADceives a re\\xADquest. Here, we just reply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello ...\"), \" (noth\\xADing fancy I told you). Fi\\xADnally, the server is bound to the 8080 port. As this may fails (be\\xADcause the port may al\\xADready be used), we pass an\\xADother lambda ex\\xADpres\\xADsion check\\xADing whether or not the con\\xADnec\\xADtion has suc\\xADceeded. As men\\xADtioned above it calls ei\\xADther \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fut.complete\"), \" in case of suc\\xADcess or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fut.fail\"), \" to re\\xADport an error.\"), mdx(\"p\", null, \"Let\\u2019s try to com\\xADpile the ap\\xADpli\\xADca\\xADtion using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean compile\\n\")), mdx(\"p\", null, \"For\\xADtu\\xADnately, it should suc\\xADceed.\"), mdx(\"p\", null, \"That\\u2019s all for the ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"lets-test\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-test\"\n  })), \"Let\\u2019s test\"), mdx(\"p\", null, \"Well, that\\u2019s good to have de\\xADvel\\xADoped an ap\\xADpli\\xADca\\xADtion, but we can never be too care\\xADful, so let\\u2019s test it. The test uses JUnit and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-unit/java/\"\n  }), \"vertx-\\u200Bunit\"), \" - a frame\\xADwork de\\xADliv\\xADered with vert.x to make the test\\xADing of vert.x ap\\xADpli\\xADca\\xADtion more nat\\xADural.\"), mdx(\"p\", null, \"Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file to add the two fol\\xADlow\\xADing de\\xADpen\\xADden\\xADcies:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"junit\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"junit\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"4.12\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-unit\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Now cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" io.vertx.blog.first;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Vertx;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.unit.Async;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.unit.TestContext;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.ext.unit.junit.VertxUnitRunner;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.After;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.Before;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.Test;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" org.junit.runner.RunWith;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@RunWith(VertxUnitRunner.class)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyFirstVerticleTest\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Vertx vertx;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Before\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setUp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n    vertx = Vertx.vertx();\\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\\n        context.asyncAssertSuccess());\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@After\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"tearDown\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n    vertx.close(context.asyncAssertSuccess());\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testMyApplication\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Async async = context.async();\\n\\n    vertx.createHttpClient().getNow(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \",\\n     response -> {\\n      response.handler(body -> {\\n        context.assertTrue(body.toString().contains(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello\\\"\"), \"));\\n        async.complete();\\n      });\\n    });\\n  }\\n}\\n\")), mdx(\"p\", null, \"This is a JUnit test for our ver\\xADti\\xADcle. The test uses vertx-\\u200Bunit, so we use a cus\\xADtom run\\xADner. vert.x-\\u200Bunit makes easy to test asyn\\xADchro\\xADnous in\\xADter\\xADac\\xADtions, which are the basis of vert.x ap\\xADpli\\xADca\\xADtions.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" method, we cre\\xADates an in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" and de\\xADploy our ver\\xADti\\xADcle. You may have no\\xADticed that un\\xADlike the tra\\xADdi\\xADtional JUnit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Before\"), \" method, it re\\xADceives a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \". This ob\\xADject lets us con\\xADtrol the asyn\\xADchro\\xADnous as\\xADpect of our test. For in\\xADstance, when we de\\xADploy our ver\\xADti\\xADcle, it starts asyn\\xADchro\\xADnously, as most Vert.x in\\xADter\\xADac\\xADtions. We can\\xADnot check any\\xADthing until it gets started cor\\xADrectly. So, as sec\\xADond ar\\xADgu\\xADment of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deployVerticle\"), \" method, we pass a re\\xADsult han\\xADdler: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context.asyncAssertSuccess()\"), \". It fails the test if the ver\\xADti\\xADcle does not start cor\\xADrectly. In ad\\xADdi\\xADtion it waits until the ver\\xADti\\xADcle has com\\xADpleted its start se\\xADquence. Re\\xADmem\\xADber, in our ver\\xADti\\xADcle, we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fut.complete()\"), \". So it waits until this method is called, and in the case of a fail\\xADures, fails the test.\"), mdx(\"p\", null, \"Well, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tearDown\"), \" method is straight\\xADfor\\xADward, and just ter\\xADmi\\xADnates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" in\\xADstance we cre\\xADated.\"), mdx(\"p\", null, \"Let\\u2019s now have a look to the test of our ap\\xADpli\\xADca\\xADtion: the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"testMyApplication\"), \" method. The test emits a re\\xADquest to our ap\\xADpli\\xADca\\xADtion and checks the re\\xADsult.  Emit\\xADting the re\\xADquest and re\\xADceiv\\xADing the re\\xADsponse is asyn\\xADchro\\xADnous. So we need a way to con\\xADtrol this. As the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tearDown\"), \" meth\\xADods, the test method re\\xADceives a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \". From this ob\\xADject we cre\\xADates an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"async han\\xADdle\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \") that lets us no\\xADtify the test frame\\xADwork when the test has com\\xADpleted (using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async.complete()\"), \").\"), mdx(\"p\", null, \"So, once the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"async han\\xADdle\"), \" is cre\\xADated, we cre\\xADate a HTTP client and emits a HTTP re\\xADquest han\\xADdled by our ap\\xADpli\\xADca\\xADtion with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getNow()\"), \" method (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getNow\"), \" is just a short\\xADcut for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get(...).end()\"), \"). The re\\xADsponse is han\\xADdled by a lambda. In this lambda we re\\xADtrieves the re\\xADsponse body by pass\\xADing an\\xADother lambda to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handler\"), \" method. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" ar\\xADgu\\xADment is the re\\xADsponse body (as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"buffer\"), \" ob\\xADject). We check that the body con\\xADtains the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"Hello\\\"\"), \" String and de\\xADclare the test com\\xADplete.\"), mdx(\"p\", null, \"Let\\u2019s take a minute to men\\xADtion the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as\\xADser\\xADtions\"), \". Un\\xADlike in tra\\xADdi\\xADtional JUnit tests, it uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context.assert...\"), \". In\\xADdeed, if the as\\xADser\\xADtion fails, it will in\\xADter\\xADrupt the test im\\xADme\\xADdi\\xADately. So it\\u2019s pretty im\\xADpor\\xADtant to al\\xADways uses these as\\xADser\\xADtion meth\\xADods be\\xADcause of the asyn\\xADchro\\xADnous as\\xADpect of the Vert.x ap\\xADpli\\xADca\\xADtion and so tests.\"), mdx(\"p\", null, \"Our test can be run from an IDE, or using Maven:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"test\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"packaging\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#packaging\"\n  })), \"Packaging\"), mdx(\"p\", null, \"So, let\\u2019s sum up. We have an ap\\xADpli\\xADca\\xADtion and a test. Well, let\\u2019s now pack\\xADage the ap\\xADpli\\xADca\\xADtion. In this post we pack\\xADage the ap\\xADpli\\xADca\\xADtion in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \". A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \" is a stand\\xADalone ex\\xADe\\xADcutable Jar file con\\xADtain\\xADing all the de\\xADpen\\xADden\\xADcies re\\xADquired to run the ap\\xADpli\\xADca\\xADtion. This is a very con\\xADve\\xADnient way to pack\\xADage Vert.x ap\\xADpli\\xADca\\xADtions as it\\u2019s only one file. It also make them easy to ex\\xADe\\xADcute.\"), mdx(\"p\", null, \"To cre\\xADate a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \", edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file and add the fol\\xADlow\\xADing code just be\\xADfore \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"</plugins>\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"org.apache.maven.plugins\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"maven-shade-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"2.3\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"package\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"phase\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"shade\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"transformers\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"transformer\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"implementation\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\\\"\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"manifestEntries\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"Main-Class\"), \">\"), \"io.vertx.core.Starter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"Main-Class\"), \">\"), \"\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"Main-Verticle\"), \">\"), \"io.vertx.blog.first.MyFirstVerticle\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"Main-Verticle\"), \">\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"manifestEntries\"), \">\"), \"\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"transformer\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"transformers\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactSet\"), \"/>\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"outputFile\"), \">\"), \"${project.build.directory}/${project.artifactId}-${project.version}-fat.jar\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"outputFile\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"It uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://maven.apache.org/plugins/maven-shade-plugin/\"\n  }), \"maven-\\u200Bshade-plugin\"), \" to cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \". In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"manifestEntries\"), \" it in\\xADdi\\xADcates the name of our ver\\xADti\\xADcle. You may won\\xADder from where comes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Starter\"), \" class. It\\u2019s ac\\xADtu\\xADally a class from vert.x, that is going to cre\\xADate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" in\\xADstance and de\\xADploy our ver\\xADti\\xADcle.\"), mdx(\"p\", null, \"So, with this plug\\xADin con\\xADfig\\xADured, let\\u2019s launch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\n\")), mdx(\"p\", null, \"This is going to cre\\xADate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/my-first-app-1.0-SNAPSHOT-fat.jar\"), \" em\\xADbed\\xADding our ap\\xADpli\\xADca\\xADtion along with all the de\\xADpen\\xADden\\xADcies (in\\xADclud\\xADing vert.x it\\xADself).\"), mdx(\"h2\", {\n    \"id\": \"executing-our-application\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#executing-our-application\"\n  })), \"Executing our application\"), mdx(\"p\", null, \"Well, it\\u2019s nice to have a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \", but we want to see our ap\\xADpli\\xADca\\xADtion run\\xADning! As said above, thanks to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \" pack\\xADag\\xADing, run\\xADning Vert.x ap\\xADpli\\xADca\\xADtion is easy as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\\n\")), mdx(\"p\", null, \"Then, open a browser to http://lo\\xADcal\\xADhost:8080.\"), mdx(\"p\", null, \"To stop the ap\\xADpli\\xADca\\xADtion, hit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CTRL+C\"), \".\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"This Vert.x 3 crash class has pre\\xADsented how you can de\\xADvelop a sim\\xADple ap\\xADpli\\xADca\\xADtion using Vert.x 3, how to test it, pack\\xADage it and run it. So, you now know every\\xADthing you need to build amaz\\xADing sys\\xADtem on top of Vert.x 3. Next time we will see how to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/vert-x-application-configuration/\"\n  }), \"con\\xADfig\\xADure our ap\\xADpli\\xADca\\xADtion\"), \".\"), mdx(\"p\", null, \"Happy cod\\xADing \", \"&\", \" Stay tuned !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Let’s say, you heard some­one say­ing that Vert.x is <em>awe­some</em>. Ok great, but you may want to try it by your­self. Well, the next nat­ural ques­tion is “where do I start?”. This post is a good start­ing point. It shows how is built a very sim­ple vert.x ap­pli­ca­tion (noth­ing fancy), how it is tested and how it is pack­aged and ex­e­cuted. So, every­thing you need to know be­fore build­ing your own ground­break­ing ap­pli­ca­tion.</p><p>The code de­vel­oped in this post is avail­able on <a href=\"https://github.com/cescoffier/my-vertx-first-app\">github</a>. This post is part of the <em>In­tro­duc­tion to Vert.x se­ries</em>. The code of this post in in the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-1\">post-1 branch</a>.</p><h2 id=\"lets-start\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-start\"></a>Let’s start!</h2><p>First, let’s cre­ate a project. In this post, we use Apache Maven, but you can use Gra­dle or the build process tool you pre­fer. You could use the Maven jar ar­che­type to cre­ate the struc­ture, but ba­si­cally, you just need a di­rec­tory with:</p><ol><li>a <code>src/main/java</code> di­rec­tory</li><li>a <code>src/test/java</code> di­rec­tory</li><li>a <code>pom.xml</code> file</li></ol><p>So, you would get some­thing like:</p><pre><code class=\"hljs language-text\">.\n├── pom.xml\n├── src\n│   ├── main\n│   │   └── java\n│   └── test\n│       └── java\n</code></pre><p>Let’s cre­ate the <code>pom.xml</code> file with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx.blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>my-first-app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></pre><p>This <code>pom.xml</code> file is pretty straight­for­ward:</p><ul><li>it de­clares a de­pen­dency on <code>vertx-core</code></li><li>it con­fig­ures the <em>maven-​compiler-plugin</em> to use Java 8.</li></ul><p>This sec­ond point is im­por­tant, Vert.x ap­pli­ca­tions re­quire Java 8.</p><h2 id=\"lets-code\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-code\"></a>Let’s code!</h2><p>Ok, now we have made the <code>pom.xml</code> file. Let’s do some real cod­ing… Cre­ate the <code>src/main/java/io/vertx/blog/first/MyFirstVerticle.java</code> file with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> io.vertx.blog.first;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.AbstractVerticle;\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Future;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFirstVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(Future&lt;Void&gt; fut)</span> </span>{\n    vertx\n        .createHttpServer()\n        .requestHandler(r -&gt; {\n          r.response().end(<span class=\"hljs-string\">&quot;&lt;h1&gt;Hello from my first &quot;</span> +\n              <span class=\"hljs-string\">&quot;Vert.x 3 application&lt;/h1&gt;&quot;</span>);\n        })\n        .listen(<span class=\"hljs-number\">8080</span>, result -&gt; {\n          <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n            fut.complete();\n          } <span class=\"hljs-keyword\">else</span> {\n            fut.fail(result.cause());\n          }\n        });\n  }\n}\n</code></pre><p>This is ac­tu­ally our not fancy ap­pli­ca­tion. The class ex­tends <code>AbstractVerticle</code>. In the Vert.x world, a <em>ver­ti­cle</em> is a com­po­nent. By ex­tend­ing <code>AbstractVerticle</code>, our class gets ac­cess to the <code>vertx</code> field.</p><p>The <code>start</code> method is called when the ver­ti­cle is de­ployed. We could also im­ple­ment a <code>stop</code> method, but in this case Vert.x takes care of the garbage for us. The <code>start</code> method re­ceives a <code>Future</code> ob­ject that will let us in­form Vert.x when our start se­quence is com­pleted or re­port an error. One of the par­tic­u­lar­ity of Vert.x is its asyn­chro­nous / non-​blocking as­pect. When our ver­ti­cle is going to be de­ployed it won’t wait until the start method has been com­pleted. So, the <code>Future</code> pa­ra­me­ter is im­por­tant to no­tify of the com­ple­tion.</p><p>The <code>start</code> method cre­ates a HTTP server and at­taches a re­quest han­dler to it. The re­quest han­dler is a lambda, passed in the <code>requestHandler</code> method, called every time the server re­ceives a re­quest. Here, we just reply <code>Hello ...</code> (noth­ing fancy I told you). Fi­nally, the server is bound to the 8080 port. As this may fails (be­cause the port may al­ready be used), we pass an­other lambda ex­pres­sion check­ing whether or not the con­nec­tion has suc­ceeded. As men­tioned above it calls ei­ther <code>fut.complete</code> in case of suc­cess or <code>fut.fail</code> to re­port an error.</p><p>Let’s try to com­pile the ap­pli­ca­tion using:</p><pre><code class=\"hljs language-bash\">mvn clean compile\n</code></pre><p>For­tu­nately, it should suc­ceed.</p><p>That’s all for the ap­pli­ca­tion.</p><h2 id=\"lets-test\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-test\"></a>Let’s test</h2><p>Well, that’s good to have de­vel­oped an ap­pli­ca­tion, but we can never be too care­ful, so let’s test it. The test uses JUnit and <a href=\"http://vertx.io/docs/vertx-unit/java/\">vertx-​unit</a> - a frame­work de­liv­ered with vert.x to make the test­ing of vert.x ap­pli­ca­tion more nat­ural.</p><p>Open the <code>pom.xml</code> file to add the two fol­low­ing de­pen­den­cies:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-unit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Now cre­ate the <code>src/test/java/io/vertx/blog/first/MyFirstVerticleTest.java</code> with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> io.vertx.blog.first;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Vertx;\n<span class=\"hljs-keyword\">import</span> io.vertx.ext.unit.Async;\n<span class=\"hljs-keyword\">import</span> io.vertx.ext.unit.TestContext;\n<span class=\"hljs-keyword\">import</span> io.vertx.ext.unit.junit.VertxUnitRunner;\n<span class=\"hljs-keyword\">import</span> org.junit.After;\n<span class=\"hljs-keyword\">import</span> org.junit.Before;\n<span class=\"hljs-keyword\">import</span> org.junit.Test;\n<span class=\"hljs-keyword\">import</span> org.junit.runner.RunWith;\n\n<span class=\"hljs-meta\">@RunWith(VertxUnitRunner.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFirstVerticleTest</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> Vertx vertx;\n\n  <span class=\"hljs-meta\">@Before</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUp</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n        context.asyncAssertSuccess());\n  }\n\n  <span class=\"hljs-meta\">@After</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tearDown</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n    vertx.close(context.asyncAssertSuccess());\n  }\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testMyApplication</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n    <span class=\"hljs-keyword\">final</span> Async async = context.async();\n\n    vertx.createHttpClient().getNow(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>,\n     response -&gt; {\n      response.handler(body -&gt; {\n        context.assertTrue(body.toString().contains(<span class=\"hljs-string\">&quot;Hello&quot;</span>));\n        async.complete();\n      });\n    });\n  }\n}\n</code></pre><p>This is a JUnit test for our ver­ti­cle. The test uses vertx-​unit, so we use a cus­tom run­ner. vert.x-​unit makes easy to test asyn­chro­nous in­ter­ac­tions, which are the basis of vert.x ap­pli­ca­tions.</p><p>In the <code>setUp</code> method, we cre­ates an in­stance of <code>Vertx</code> and de­ploy our ver­ti­cle. You may have no­ticed that un­like the tra­di­tional JUnit <code>@Before</code> method, it re­ceives a <code>TestContext</code>. This ob­ject lets us con­trol the asyn­chro­nous as­pect of our test. For in­stance, when we de­ploy our ver­ti­cle, it starts asyn­chro­nously, as most Vert.x in­ter­ac­tions. We can­not check any­thing until it gets started cor­rectly. So, as sec­ond ar­gu­ment of the <code>deployVerticle</code> method, we pass a re­sult han­dler: <code>context.asyncAssertSuccess()</code>. It fails the test if the ver­ti­cle does not start cor­rectly. In ad­di­tion it waits until the ver­ti­cle has com­pleted its start se­quence. Re­mem­ber, in our ver­ti­cle, we call <code>fut.complete()</code>. So it waits until this method is called, and in the case of a fail­ures, fails the test.</p><p>Well, the <code>tearDown</code> method is straight­for­ward, and just ter­mi­nates the <code>vertx</code> in­stance we cre­ated.</p><p>Let’s now have a look to the test of our ap­pli­ca­tion: the <code>testMyApplication</code> method. The test emits a re­quest to our ap­pli­ca­tion and checks the re­sult.  Emit­ting the re­quest and re­ceiv­ing the re­sponse is asyn­chro­nous. So we need a way to con­trol this. As the <code>setUp</code> and <code>tearDown</code> meth­ods, the test method re­ceives a <code>TestContext</code>. From this ob­ject we cre­ates an <em>async han­dle</em> (<code>async</code>) that lets us no­tify the test frame­work when the test has com­pleted (using <code>async.complete()</code>).</p><p>So, once the <em>async han­dle</em> is cre­ated, we cre­ate a HTTP client and emits a HTTP re­quest han­dled by our ap­pli­ca­tion with the <code>getNow()</code> method (<code>getNow</code> is just a short­cut for <code>get(...).end()</code>). The re­sponse is han­dled by a lambda. In this lambda we re­trieves the re­sponse body by pass­ing an­other lambda to the <code>handler</code> method. The <code>body</code> ar­gu­ment is the re­sponse body (as a <code>buffer</code> ob­ject). We check that the body con­tains the <code>&quot;Hello&quot;</code> String and de­clare the test com­plete.</p><p>Let’s take a minute to men­tion the <em>as­ser­tions</em>. Un­like in tra­di­tional JUnit tests, it uses <code>context.assert...</code>. In­deed, if the as­ser­tion fails, it will in­ter­rupt the test im­me­di­ately. So it’s pretty im­por­tant to al­ways uses these as­ser­tion meth­ods be­cause of the asyn­chro­nous as­pect of the Vert.x ap­pli­ca­tion and so tests.</p><p>Our test can be run from an IDE, or using Maven:</p><pre><code class=\"hljs language-bash\">mvn clean <span class=\"hljs-built_in\">test</span>\n</code></pre><h2 id=\"packaging\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#packaging\"></a>Packaging</h2><p>So, let’s sum up. We have an ap­pli­ca­tion and a test. Well, let’s now pack­age the ap­pli­ca­tion. In this post we pack­age the ap­pli­ca­tion in a <em>fat jar</em>. A <em>fat jar</em> is a stand­alone ex­e­cutable Jar file con­tain­ing all the de­pen­den­cies re­quired to run the ap­pli­ca­tion. This is a very con­ve­nient way to pack­age Vert.x ap­pli­ca­tions as it’s only one file. It also make them easy to ex­e­cute.</p><p>To cre­ate a <em>fat jar</em>, edit the <code>pom.xml</code> file and add the fol­low­ing code just be­fore <code>&lt;/plugins&gt;</code>:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-shade-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>shade<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transformers</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transformer</span>\n            <span class=\"hljs-attr\">implementation</span>=<span class=\"hljs-string\">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">manifestEntries</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main-Class</span>&gt;</span>io.vertx.core.Starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main-Class</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main-Verticle</span>&gt;</span>io.vertx.blog.first.MyFirstVerticle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main-Verticle</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">manifestEntries</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transformer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transformers</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactSet</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">outputFile</span>&gt;</span>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">outputFile</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>It uses the <a href=\"https://maven.apache.org/plugins/maven-shade-plugin/\">maven-​shade-plugin</a> to cre­ate the <code>fat jar</code>. In the <code>manifestEntries</code> it in­di­cates the name of our ver­ti­cle. You may won­der from where comes the <code>Starter</code> class. It’s ac­tu­ally a class from vert.x, that is going to cre­ate the <code>vertx</code> in­stance and de­ploy our ver­ti­cle.</p><p>So, with this plug­in con­fig­ured, let’s launch:</p><pre><code class=\"hljs language-bash\">mvn clean package\n</code></pre><p>This is going to cre­ate <code>target/my-first-app-1.0-SNAPSHOT-fat.jar</code> em­bed­ding our ap­pli­ca­tion along with all the de­pen­den­cies (in­clud­ing vert.x it­self).</p><h2 id=\"executing-our-application\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#executing-our-application\"></a>Executing our application</h2><p>Well, it’s nice to have a <em>fat jar</em>, but we want to see our ap­pli­ca­tion run­ning! As said above, thanks to the <em>fat jar</em> pack­ag­ing, run­ning Vert.x ap­pli­ca­tion is easy as:</p><pre><code class=\"hljs language-bash\">java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n</code></pre><p>Then, open a browser to http://lo­cal­host:8080.</p><p>To stop the ap­pli­ca­tion, hit <code>CTRL+C</code>.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>This Vert.x 3 crash class has pre­sented how you can de­velop a sim­ple ap­pli­ca­tion using Vert.x 3, how to test it, pack­age it and run it. So, you now know every­thing you need to build amaz­ing sys­tem on top of Vert.x 3. Next time we will see how to <a href=\"/blog/vert-x-application-configuration/\">con­fig­ure our ap­pli­ca­tion</a>.</p><p>Happy cod­ing <!-- -->&amp;<!-- --> Stay tuned !</p>","scope":{}},"tfIdfTerms":[{"term":"applic","tf":25},{"term":"test","tf":23},{"term":"us","tf":19},{"term":"let","tf":17},{"term":"method","tf":17},{"term":"creat","tf":15},{"term":"verticl","tf":11},{"term":"start","tf":9},{"term":"file","tf":9},{"term":"post","tf":7},{"term":"packag","tf":7},{"term":"jar","tf":7},{"term":"code","tf":6},{"term":"complet","tf":6},{"term":"asynchron","tf":6},{"term":"request","tf":6},{"term":"mai","tf":5},{"term":"maven","tf":5},{"term":"just","tf":5},{"term":"follow","tf":5},{"term":"class","tf":5},{"term":"call","tf":5},{"term":"deploi","tf":5},{"term":"receiv","tf":5},{"term":"lambda","tf":5}]}],"numPages":9},"__N_SSG":true}