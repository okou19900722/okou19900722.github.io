{"pageProps":{"categories":["releases","guides","news"],"page":10,"posts":[{"filename":"blog/2017-03-07-vert-x-3-4-0-is-released.mdx","date":"2017-03-07","slug":"vert-x-3-4-0-is-released","meta":{"title":"Vert.x 3.4.0 is released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x 3.4.0 has just been released with many new exciting features!"},"readingTime":{"text":"3 min read","minutes":2.505,"time":150299.99999999997,"words":501},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.4.0 has just been re\\xADleased with many new ex\\xADcit\\xADing fea\\xADtures!\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Vert.x 3.4.1 has been re\\xADleased - the links have been up\\xADdated\")), mdx(\"p\", null, \"Since the be\\xADgin\\xADning Vert.x has pro\\xADvided a poly\\xADglot run\\xADtime, this ver\\xADsion sim\\xADply adds the sup\\xADport of two major lan\\xADguages\\nof the JVM ecosys\\xADtem: Scala 2.12 and Kotlin 1.1.\"), mdx(\"p\", null, \"Some fea\\xADtures are so im\\xADpor\\xADtant that they de\\xADserve to be taken to an\\xADother level : the Vert.x Web Client fo\\xADcuses on us\\xADabil\\xADity\\nfea\\xADtures for build\\xADing web ap\\xADpli\\xADca\\xADtions. It ac\\xADtu\\xADally builds upon the multi pur\\xADpose and scal\\xADable Http Client and in\\xADher\\xADits\\nall its fea\\xADtures.\"), mdx(\"p\", null, \"Vert.x Rx\\xADJava is a very pop\\xADu\\xADlar ex\\xADten\\xADsion, 3.4 sup\\xADports the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rx.Single\"), \" re\\xADac\\xADtive type as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive pull back pres\\xADsure\"), \", com\\xADbined with Vert.x Web Client, it is a very pow\\xADer\\xADful combo.\"), mdx(\"p\", null, \"You can now get a stream for large re\\xADsult sets using JDBC client, with Rx\\xADJava your stream be\\xADcomes\\nnat\\xADu\\xADrally an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable\"), \".\"), mdx(\"p\", null, \"When it comes to IoT, Vert.x is a rel\\xADe\\xADvant choice thanks to its unique toolkit ap\\xADproach that com\\xADbines\\nmod\\xADu\\xADlar\\xADity and re\\xADduced foot\\xADprint, there are no doubts that the new Vert.x MQTT Server ex\\xADtends Vert.x ca\\xADpa\\xADbil\\xADi\\xADties\\nin this field!\"), mdx(\"p\", null, \"Every\\xADone knows Kafka, every\\xADone loves Kafka, the new Vert.x Kafka Client gives you every\\xADthing you need to use Kafka\\nthe Vert.x way!\"), mdx(\"p\", null, \"On the mi\\xADcroser\\xADvices side, Vert.x gRPC will give a boost to your net\\xADwork\\xADing and Vert.x Con\\xADfig fills the gap\\nin our tool\\xADbox. In ad\\xADdi\\xADtion we pro\\xADvide now a full fledged Vert.x Con\\xADsul client!\"), mdx(\"p\", null, \"Dur\\xADing this re\\xADlease cycle, we paid spe\\xADcial at\\xADten\\xADtion to se\\xADcu\\xADrity, en\\xADsur\\xADing that Vert.x-Web ses\\xADsions are safe and\\nfol\\xADlow the OWASP rec\\xADom\\xADmen\\xADda\\xADtions. Also, Vert.x web got many us\\xADabil\\xADity im\\xADprove\\xADments, with a re\\xADvised OAuth2 setup and a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"htdigest\"), \" au\\xADthen\\xADti\\xADca\\xADtion scheme.\"), mdx(\"p\", null, \"De\\xADvops hasn\\u2019t been for\\xADgot\\xADten with Vert.x Health Check, a key fea\\xADture in ap\\xADpli\\xADca\\xADtion mon\\xADi\\xADtor\\xADing.\"), mdx(\"p\", null, \"On top of many bug fixes, here is a list of the most im\\xADpor\\xADtant new fea\\xADtures you can find in 3.4.0:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x In\\xADfin\\xADis\\xADpan is a new clus\\xADter op\\xADtion and su\\xADper\\xADsedes the JGroups op\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTTP and Web client redi\\xADrect han\\xADdling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Zero-\\u200Bconfig ser\\xADvice prox\\xADies gen\\xADer\\xADa\\xADtion with a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"processor\"), \" clas\\xADsi\\xADfied jar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a new \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SelfSignedCertificate\"), \" to make easy to cre\\xADate tests and demos with TLS/SSL\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hys\\xADtrix met\\xADrics in the cir\\xADcuit breaker\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Han\\xADdle\\xADbars tem\\xADplates can now fully re\\xADsolve prop\\xADer\\xADties passed to them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JsonOb\\xADject POJO map\\xADping con\\xADve\\xADnience\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Http com\\xADpres\\xADsion level op\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Groovy sup\\xADport now uses ex\\xADten\\xADsion meth\\xADods and does not gen\\xADer\\xADate wrap\\xADpers any\\xADmore\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drop\\xADwiz\\xADard match met\\xADrics can now have an alias\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rx\\xADHelper method for adapt\\xADing an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Observable<T>\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ReadStream<T>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rx\\xADHelper method for ad\\xADpat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Handler<AsyncResult<T>>\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Subscriber<T>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pro\\xADvide Alpine and Busy\\xADbox docker im\\xADages\")), mdx(\"p\", null, \"Vert.x 3.4.0 re\\xADlease notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.4.1---Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.4.1-\\u200B\\u2014Release-Notes\"))), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Docker im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \". The Vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"Home\\xADBrew\"), \".\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.4.1%22\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.4.1/view\"\n  }), \"Bin\\xADtray\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.4.0 has just been re­leased with many new ex­cit­ing fea­tures!</p><div class=\"alert info\"><p>Vert.x 3.4.1 has been re­leased - the links have been up­dated</p></div><p>Since the be­gin­ning Vert.x has pro­vided a poly­glot run­time, this ver­sion sim­ply adds the sup­port of two major lan­guages\nof the JVM ecosys­tem: Scala 2.12 and Kotlin 1.1.</p><p>Some fea­tures are so im­por­tant that they de­serve to be taken to an­other level : the Vert.x Web Client fo­cuses on us­abil­ity\nfea­tures for build­ing web ap­pli­ca­tions. It ac­tu­ally builds upon the multi pur­pose and scal­able Http Client and in­her­its\nall its fea­tures.</p><p>Vert.x Rx­Java is a very pop­u­lar ex­ten­sion, 3.4 sup­ports the <code>rx.Single</code> re­ac­tive type as well as <code>Observable</code>\n<em>re­ac­tive pull back pres­sure</em>, com­bined with Vert.x Web Client, it is a very pow­er­ful combo.</p><p>You can now get a stream for large re­sult sets using JDBC client, with Rx­Java your stream be­comes\nnat­u­rally an <code>Observable</code>.</p><p>When it comes to IoT, Vert.x is a rel­e­vant choice thanks to its unique toolkit ap­proach that com­bines\nmod­u­lar­ity and re­duced foot­print, there are no doubts that the new Vert.x MQTT Server ex­tends Vert.x ca­pa­bil­i­ties\nin this field!</p><p>Every­one knows Kafka, every­one loves Kafka, the new Vert.x Kafka Client gives you every­thing you need to use Kafka\nthe Vert.x way!</p><p>On the mi­croser­vices side, Vert.x gRPC will give a boost to your net­work­ing and Vert.x Con­fig fills the gap\nin our tool­box. In ad­di­tion we pro­vide now a full fledged Vert.x Con­sul client!</p><p>Dur­ing this re­lease cycle, we paid spe­cial at­ten­tion to se­cu­rity, en­sur­ing that Vert.x-Web ses­sions are safe and\nfol­low the OWASP rec­om­men­da­tions. Also, Vert.x web got many us­abil­ity im­prove­ments, with a re­vised OAuth2 setup and a new <code>htdigest</code> au­then­ti­ca­tion scheme.</p><p>De­vops hasn’t been for­got­ten with Vert.x Health Check, a key fea­ture in ap­pli­ca­tion mon­i­tor­ing.</p><p>On top of many bug fixes, here is a list of the most im­por­tant new fea­tures you can find in 3.4.0:</p><ul><li>Vert.x In­fin­is­pan is a new clus­ter op­tion and su­per­sedes the JGroups op­tion</li><li>HTTP and Web client redi­rect han­dling</li><li>Zero-​config ser­vice prox­ies gen­er­a­tion with a <code>processor</code> clas­si­fied jar</li><li>a new <code>SelfSignedCertificate</code> to make easy to cre­ate tests and demos with TLS/SSL</li><li>Hys­trix met­rics in the cir­cuit breaker</li><li>Han­dle­bars tem­plates can now fully re­solve prop­er­ties passed to them</li><li>JsonOb­ject POJO map­ping con­ve­nience</li><li>Http com­pres­sion level op­tion</li><li>Groovy sup­port now uses ex­ten­sion meth­ods and does not gen­er­ate wrap­pers any­more</li><li>Drop­wiz­ard match met­rics can now have an alias</li><li>Rx­Helper method for adapt­ing an <code>Observable&lt;T&gt;</code> to a <code>ReadStream&lt;T&gt;</code></li><li>Rx­Helper method for ad­pat­ing a <code>Handler&lt;AsyncResult&lt;T&gt;&gt;</code> to a <code>Subscriber&lt;T&gt;</code></li><li>pro­vide Alpine and Busy­box docker im­ages</li></ul><p>Vert.x 3.4.0 re­lease notes:</p><ul><li><a href=\"https://github.com/vert-x3/wiki/wiki/3.4.1---Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.4.1-​—Release-Notes</a></li></ul><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Docker im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>. The Vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a> and <a href=\"http://brew.sh/\">Home­Brew</a>.</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.4.1%22\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.4.1/view\">Bin­tray</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"client","tf":9},{"term":"new","tf":7},{"term":"http","tf":7},{"term":"featur","tf":6},{"term":"web","tf":6},{"term":"releas","tf":5},{"term":"us","tf":4},{"term":"kafka","tf":4},{"term":"provid","tf":3},{"term":"support","tf":3},{"term":"option","tf":3},{"term":"method","tf":3},{"term":"docker","tf":3},{"term":"com","tf":3},{"term":"avail","tf":3},{"term":"import","tf":2},{"term":"level","tf":2},{"term":"usabl","tf":2},{"term":"build","tf":2},{"term":"applic","tf":2},{"term":"rxjava","tf":2},{"term":"extens","tf":2},{"term":"reactiv","tf":2},{"term":"combin","tf":2},{"term":"stream","tf":2}]},{"filename":"blog/2017-02-09-vert-x-3-4-0-beta1-release.mdx","date":"2017-02-09","slug":"vert-x-3-4-0-beta1-release","meta":{"title":"Vert.x 3.4.0.Beta1 release","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have released 3.4.0.Beta1, this release is the biggest since Vert.x 3.0.0 with plenty of great features."},"readingTime":{"text":"6 min read","minutes":5.605,"time":336300,"words":1121},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have re\\xADleased 3.4.0.Beta1, this re\\xADlease is the biggest since Vert.x 3.0.0 with plenty of great fea\\xADtures.\"), mdx(\"p\", null, \"You can use con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/3.4.0.Beta1/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Let me out\\xADline the im\\xADpor\\xADtant changes you can al\\xADready find in this Beta1.\"), mdx(\"h2\", {\n    \"id\": \"vertx-web-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-web-client\"\n  })), \"Vert.x Web Client\"), mdx(\"p\", null, \"In a sim\\xADple sen\\xADtence \\u201CVert.x Web Client is to Vert.x Http\\xADClient what Vert.x Web is to HttpServer\\u201D\"), mdx(\"p\", null, \"The Web Client makes it easy to do HTTP re\\xADquest/re\\xADsponse in\\xADter\\xADac\\xADtions with a web server, and pro\\xADvides ad\\xADvanced fea\\xADtures like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Json body en\\xADcod\\xADing / de\\xADcod\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest/re\\xADsponse pump\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"re\\xADquest pa\\xADra\\xADme\\xADters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uni\\xADfied error han\\xADdling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"form sub\\xADmis\\xADsions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and more!\")), mdx(\"p\", null, \"Built on top of Http\\xADClient, it nat\\xADu\\xADrally in\\xADher\\xADits its fea\\xADtures and pro\\xADvides a bet\\xADter API, let me give an overview in one ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"WebClient client = WebClient.\\nclient\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .as(BodyCodec.json(User.class))\\n  .send(ar -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n\\n      HttpResponse<User> response = ar.result();\\n      User user = response.body();\\n\\n      System.out.println(\\\"Received response with status code\\\" + response.statusCode() + \\\" with body \\\" +\\n        user.getFirstName() + \\\" \\\" + user.getLastName());\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage());\\n    }\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"rxjava-singles\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#rxjava-singles\"\n  })), \"RxJava singles\"), mdx(\"p\", null, \"Rx\\xADJava is a very pop\\xADu\\xADlar Java ex\\xADten\\xADsion and in this re\\xADlease we fo\\xADcused on the API us\\xADabil\\xADity with the sup\\xADport\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" Rx\\xADJava type.\"), mdx(\"p\", null, \"The new meth\\xADods are pre\\xADfixed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rx\"), \" and dep\\xADre\\xADcates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Observable\"), \" suf\\xADfixed meth\\xADods.\"), mdx(\"p\", null, \"So in\\xADstead of start\\xADing a server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listenObservable\"), \" now you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rxListen\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"HttpServer server = vertx.createHttpServer();\\nSingle<HttpServer> single = server.rxListen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \");\\nsingle.subscribe(\\n  ok -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started\\\"\"), \"),\\n  err -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + err.getMessage()));\\n\")), mdx(\"p\", null, \"One no\\xADtice\\xADable dif\\xADfer\\xADence with the pre\\xADvi\\xADous API, is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listen\"), \" method is called when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Single\"), \" is sub\\xADscribed.\"), mdx(\"p\", null, \"This is very handy when com\\xADbined with the new web client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"Single<HttpResponse<Buffer>> single = client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .rxSend();\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Send the request again\"), \"\\nsingle.subscribe(response -> System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"got response \\\"\"), \" + response.statusCode());\\n\")), mdx(\"h2\", {\n    \"id\": \"polyglot\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#polyglot\"\n  })), \"Polyglot\"), mdx(\"p\", null, \"In this beta you can try \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x for Kotlin\"), \" is based on the Java API and pro\\xADvides also the ex\\xADe\\xADcu\\xADtion of Kotlin Ver\\xADti\\xADcles.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-kotlin\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.*\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.kotlin.core.http.HttpServerOptions\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Server\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-type\"\n  }), \"AbstractVerticle\")), \"() {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"override\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"fun\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\")), \" {\\n    vertx.createHttpServer(\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options\"), \"\\n        HttpServerOptions(\\n            port = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \",\\n            host = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \"\\n        ))\\n        .requestHandler() { req ->\\n          req.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Hello from Kotlin\\\"\"), \")\\n        }\\n        .listen()\\n    println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server started on 8080\\\"\"), \")\\n  }\\n}\\n\")), mdx(\"p\", null, \"It can be di\\xADrectly ran from the com\\xADmand line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"julien:vertx-kotlin-example julien$ vertx run Server.kt\\nServer started on 8080\\nSucceeded \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" deploying verticle\\n\")), mdx(\"p\", null, \"As you can see, Kotlin is using the Java API di\\xADrectly, and we thought that it might be a cool thing to do the\\nsame with Groovy sup\\xADport. So we have re\\xADcon\\xADsid\\xADered our Groovy sup\\xADport and now it uses the plain Java API,\\nwith\\xADout los\\xADing the ex\\xADist\\xADing fea\\xADtures.\"), mdx(\"p\", null, \"Thanks to Groovy ex\\xADten\\xADsion meth\\xADods, id\\xADiomatic Groovy is still sup\\xADported while ben\\xADe\\xADfit\\xADing from the full Java API!\"), mdx(\"p\", null, \"Scala sup\\xADport is also planned for 3.4.0 and will be re\\xADleased soon, watch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/vertx_project\"\n  }), \"@vertx_project\"), \".\"), mdx(\"h2\", {\n    \"id\": \"the-microservices-story-goes-on\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-microservices-story-goes-on\"\n  })), \"The microservices story goes on\\u2026\"), mdx(\"p\", null, \"Our APIs have ma\\xADtured and now they have been moved out of tech pre\\xADview, of course this wasn\\u2019t enough and we now\\nhave \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vert.x Con\\xADfig\"), \", an ex\\xADten\\xADsi\\xADble way to con\\xADfig\\xADure Vert.x ap\\xADpli\\xADca\\xADtions sup\\xADport\\xADing File, json, ENV, sys\\xADtem prop\\xADer\\xADties,\\nHTTP, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ku\\xADber\\xADnetes Con\\xADfigmap\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Con\\xADsul\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Spring Con\\xADfig Server\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Redis\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Git\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Zookeeper\"), \", \\u2026 stores as well as\\nsev\\xADeral for\\xADmats: prop\\xADer\\xADties file, YAML and Hocon.\"), mdx(\"p\", null, \"Here is a small ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigStoreOptions httpStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n    .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"host\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"port\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \").put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/conf\\\"\"), \"));\\n\\nConfigStoreOptions fileStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions()\\n  .setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"file\\\"\"), \")\\n  .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"path\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my-config.json\\\"\"), \"));\\n\\nConfigStoreOptions sysPropsStore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigStoreOptions().setType(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"sys\\\"\"), \");\\n\\nConfigRetrieverOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ConfigRetrieverOptions()\\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\\n\\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\\n\")), mdx(\"p\", null, \"Vert.x Con\\xADfig also sup\\xADports push based no\\xADti\\xADfi\\xADca\\xADtion style:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\\nretriever.configStream()\\n  .endHandler(v -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// retriever closed\"), \"\\n  })\\n  .exceptionHandler(t -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// an error has been caught while retrieving the configuration\"), \"\\n  })\\n  .handler(conf -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the configuration\"), \"\\n  });\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-mqtt-server\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-mqtt-server\"\n  })), \"Vertx MQTT Server\"), mdx(\"p\", null, \"Vert.x MQTT Server is able to han\\xADdle con\\xADnec\\xADtions, com\\xADmu\\xADni\\xADca\\xADtion and mes\\xADsages ex\\xADchange with re\\xADmote MQTT clients.\\nIts API pro\\xADvides a bunch of events re\\xADlated to pro\\xADto\\xADcol mes\\xADsages re\\xADceived by clients and ex\\xADposes allow to send\\nmes\\xADsages to them.\"), mdx(\"p\", null, \"Here is a small ef\\xADfec\\xADtive ex\\xADam\\xADple of cre\\xADat\\xADing, the Vert.x way!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"MqttServerOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MqttServerOptions()\\n  .setPort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1883\"), \")\\n  .setHost(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"0.0.0.0\\\"\"), \");\\n\\nMqttServer server = MqttServer.create(vertx, options);\\n\\nserver.endpointHandler(endpoint -> {\\n\\n  System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connected client \\\"\"), \" + endpoint.clientIdentifier());\\n\\n  endpoint.publishHandler(message -> {\\n\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Just received message on [\\\"\"), \" + message.topicName() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] payload [\\\"\"), \" +\\n      message.payload() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"] with QoS [\\\"\"), \" +\\n      message.qosLevel() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"]\\\"\"), \");\\n  });\\n\\n  endpoint.accept(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \");\\n});\\n\\nserver.listen(ar -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.succeeded()) {\\n    System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server started and listening on port \\\"\"), \" + server.actualPort());\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    System.err.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"MQTT server error on start\\\"\"), \" + ar.cause().getMessage());\\n  }\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"vertx-sql-streaming\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-sql-streaming\"\n  })), \"Vert.x SQL streaming\"), mdx(\"p\", null, \"We now sup\\xADport stream\\xADing style for SQL queries:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"connection.queryStream(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"select * from test\\\"\"), \", stream -> {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (stream.succeeded()) {\\n    SQLRowStream sqlRowStream = stream.result();\\n\\n    sqlRowStream\\n      .handler(row -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// do something with the row...\"), \"\\n        System.out.println(row.encode());\\n      })\\n      .endHandler(v -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// no more data available, close the connection\"), \"\\n        connection.close(done -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (done.failed()) {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(done.cause());\\n          }\\n        });\\n      });\\n  }\\n});\\n\")), mdx(\"p\", null, \"And with the Rx\\xADJava API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"client\\n  .rx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"GetConnection()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Connect to the database\"), \"\\n  .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \" -> { \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" With \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"connection\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"...\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"CREATE TABLE test(col VARCHAR(20))\\\"\"), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...create test table\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val1')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...insert a row\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxUpdate\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO test (col) VALUES ('val2')\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...another one\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Map(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"rxQueryStream\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT * FROM test\\\"\"), \")\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...get values stream\"), \"\\n      .flat\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MapObservable(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \" -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"sqlRowStream\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"toObservable\"), \"()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Transform the stream into an Observable...\"), \"\\n          .\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"do\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"OnTerminate(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"conn\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"close\"), \")\"), \"; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ...and close the connection when the stream is fully read or an error occurs\"), \"\\n      });\\n  }).subscribe(row -> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"System\"), \".\")), \"out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Row : \\\"\"), \" + row.encode\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"()\"), \"));\\n\")), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"In ad\\xADdi\\xADtion to all these bril\\xADlant fea\\xADtures here is a list of more-\\u200Bthan-noticeable things you have in this Beta1:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x In\\xADfin\\xADis\\xADpan re\\xADplaces Vert.x Jgroups clus\\xADter man\\xADager\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x Con\\xADsul Client pro\\xADvides a full fledged client for Con\\xADsul\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oauth2 pre\\xADde\\xADfined con\\xADfig\\xADu\\xADra\\xADtion with 16 set\\xADtings from \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Azure Ac\\xADtive Di\\xADrec\\xADtory\"), \", to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Twit\\xADter\"), \" with the usual sus\\xADpects (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Face\\xADbook\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"LinkedIn\"), \", \\u2026)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Http client now fol\\xADlow redi\\xADrects\")), mdx(\"p\", null, \"You can use and con\\xADsume it in your projects from Maven or Gra\\xADdle as usual with the ver\\xADsion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.4.0.Beta1\"), \" or read\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/3.4.0.Beta1/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion pre\\xADview\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\"\n  }), \"re\\xADlease notes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"see the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\"\n  }), \"ac\\xADtual ex\\xADam\\xADples\"))), mdx(\"p\", null, \"Last but not least, I want to per\\xADson\\xADally thank all the peo\\xADple that con\\xADtributed to this re\\xADlease, be\\xADyond the Vert.x core team, the ac\\xADtual\\nVert.x com\\xADmit\\xADters and many other peo\\xADple who have given a lot of ef\\xADfort to this up\\xADcom\\xADing 3.4.0!!!!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We have re­leased 3.4.0.Beta1, this re­lease is the biggest since Vert.x 3.0.0 with plenty of great fea­tures.</p><p>You can use con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"http://vertx.io/docs/3.4.0.Beta1/\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Let me out­line the im­por­tant changes you can al­ready find in this Beta1.</p><h2 id=\"vertx-web-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-web-client\"></a>Vert.x Web Client</h2><p>In a sim­ple sen­tence “Vert.x Web Client is to Vert.x Http­Client what Vert.x Web is to HttpServer”</p><p>The Web Client makes it easy to do HTTP re­quest/re­sponse in­ter­ac­tions with a web server, and pro­vides ad­vanced fea­tures like:</p><ul><li>Json body en­cod­ing / de­cod­ing</li><li>re­quest/re­sponse pump­ing</li><li>re­quest pa­ra­me­ters</li><li>uni­fied error han­dling</li><li>form sub­mis­sions</li><li>and more!</li></ul><p>Built on top of Http­Client, it nat­u­rally in­her­its its fea­tures and pro­vides a bet­ter API, let me give an overview in one ex­am­ple:</p><pre><code class=\"hljs language-java\">WebClient client = WebClient.\nclient\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .as(BodyCodec.json(User.class))\n  .send(ar -&gt; {\n    <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n      HttpResponse&lt;User&gt; response = ar.result();\n      User user = response.body();\n\n      System.out.println(&quot;Received response with status code&quot; + response.statusCode() + &quot; with body &quot; +\n        user.getFirstName() + &quot; &quot; + user.getLastName());\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage());\n    }\n  });\n</code></pre><h2 id=\"rxjava-singles\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#rxjava-singles\"></a>RxJava singles</h2><p>Rx­Java is a very pop­u­lar Java ex­ten­sion and in this re­lease we fo­cused on the API us­abil­ity with the sup­port\nof the <code>Single</code> Rx­Java type.</p><p>The new meth­ods are pre­fixed by <code>rx</code> and dep­re­cates the <code>Observable</code> suf­fixed meth­ods.</p><p>So in­stead of start­ing a server with <code>listenObservable</code> now you use <code>rxListen</code>:</p><pre><code class=\"hljs language-java\">HttpServer server = vertx.createHttpServer();\nSingle&lt;HttpServer&gt; single = server.rxListen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>);\nsingle.subscribe(\n  ok -&gt; System.out.println(<span class=\"hljs-string\">&quot;Server started&quot;</span>),\n  err -&gt; System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + err.getMessage()));\n</code></pre><p>One no­tice­able dif­fer­ence with the pre­vi­ous API, is that the <code>listen</code> method is called when the <code>Single</code> is sub­scribed.</p><p>This is very handy when com­bined with the new web client:</p><pre><code class=\"hljs language-java\">Single&lt;HttpResponse&lt;Buffer&gt;&gt; single = client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .rxSend();\n\n<span class=\"hljs-comment\">// Send the request</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n\n<span class=\"hljs-comment\">// Send the request again</span>\nsingle.subscribe(response -&gt; System.out.println(<span class=\"hljs-string\">&quot;got response &quot;</span> + response.statusCode());\n</code></pre><h2 id=\"polyglot\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#polyglot\"></a>Polyglot</h2><p>In this beta you can try <em>Vert.x for Kotlin</em>.</p><p><em>Vert.x for Kotlin</em> is based on the Java API and pro­vides also the ex­e­cu­tion of Kotlin Ver­ti­cles.</p><pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">import</span> io.vertx.core.*\n<span class=\"hljs-keyword\">import</span> io.vertx.kotlin.core.http.HttpServerOptions\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Server</span> : <span class=\"hljs-type\">AbstractVerticle</span></span>() {\n\n  <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span> {\n    vertx.createHttpServer(\n\n        <span class=\"hljs-comment\">// We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options</span>\n        HttpServerOptions(\n            port = <span class=\"hljs-number\">8080</span>,\n            host = <span class=\"hljs-string\">&quot;localhost&quot;</span>\n        ))\n        .requestHandler() { req -&gt;\n          req.response().end(<span class=\"hljs-string\">&quot;Hello from Kotlin&quot;</span>)\n        }\n        .listen()\n    println(<span class=\"hljs-string\">&quot;Server started on 8080&quot;</span>)\n  }\n}\n</code></pre><p>It can be di­rectly ran from the com­mand line:</p><pre><code class=\"hljs language-bash\">julien:vertx-kotlin-example julien$ vertx run Server.kt\nServer started on 8080\nSucceeded <span class=\"hljs-keyword\">in</span> deploying verticle\n</code></pre><p>As you can see, Kotlin is using the Java API di­rectly, and we thought that it might be a cool thing to do the\nsame with Groovy sup­port. So we have re­con­sid­ered our Groovy sup­port and now it uses the plain Java API,\nwith­out los­ing the ex­ist­ing fea­tures.</p><p>Thanks to Groovy ex­ten­sion meth­ods, id­iomatic Groovy is still sup­ported while ben­e­fit­ing from the full Java API!</p><p>Scala sup­port is also planned for 3.4.0 and will be re­leased soon, watch <a href=\"https://twitter.com/vertx_project\">@vertx_project</a>.</p><h2 id=\"the-microservices-story-goes-on\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-microservices-story-goes-on\"></a>The microservices story goes on…</h2><p>Our APIs have ma­tured and now they have been moved out of tech pre­view, of course this wasn’t enough and we now\nhave <em>Vert.x Con­fig</em>, an ex­ten­si­ble way to con­fig­ure Vert.x ap­pli­ca­tions sup­port­ing File, json, ENV, sys­tem prop­er­ties,\nHTTP, <em>Ku­ber­netes Con­figmap</em>, <em>Con­sul</em>, <em>Spring Con­fig Server</em>, <em>Redis</em>, <em>Git</em>, <em>Zookeeper</em>, … stores as well as\nsev­eral for­mats: prop­er­ties file, YAML and Hocon.</p><p>Here is a small ex­am­ple:</p><pre><code class=\"hljs language-java\">ConfigStoreOptions httpStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;http&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n    .put(<span class=\"hljs-string\">&quot;host&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>).put(<span class=\"hljs-string\">&quot;port&quot;</span>, <span class=\"hljs-number\">8080</span>).put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;/conf&quot;</span>));\n\nConfigStoreOptions fileStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions()\n  .setType(<span class=\"hljs-string\">&quot;file&quot;</span>)\n  .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;path&quot;</span>, <span class=\"hljs-string\">&quot;my-config.json&quot;</span>));\n\nConfigStoreOptions sysPropsStore = <span class=\"hljs-keyword\">new</span> ConfigStoreOptions().setType(<span class=\"hljs-string\">&quot;sys&quot;</span>);\n\nConfigRetrieverOptions options = <span class=\"hljs-keyword\">new</span> ConfigRetrieverOptions()\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\n</code></pre><p>Vert.x Con­fig also sup­ports push based no­ti­fi­ca­tion style:</p><pre><code class=\"hljs language-java\">ConfigRetriever retriever = ConfigRetriever.create(Vertx.vertx(), options);\nretriever.configStream()\n  .endHandler(v -&gt; {\n    <span class=\"hljs-comment\">// retriever closed</span>\n  })\n  .exceptionHandler(t -&gt; {\n    <span class=\"hljs-comment\">// an error has been caught while retrieving the configuration</span>\n  })\n  .handler(conf -&gt; {\n    <span class=\"hljs-comment\">// the configuration</span>\n  });\n</code></pre><h2 id=\"vertx-mqtt-server\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-mqtt-server\"></a>Vertx MQTT Server</h2><p>Vert.x MQTT Server is able to han­dle con­nec­tions, com­mu­ni­ca­tion and mes­sages ex­change with re­mote MQTT clients.\nIts API pro­vides a bunch of events re­lated to pro­to­col mes­sages re­ceived by clients and ex­poses allow to send\nmes­sages to them.</p><p>Here is a small ef­fec­tive ex­am­ple of cre­at­ing, the Vert.x way!</p><pre><code class=\"hljs language-java\">MqttServerOptions options = <span class=\"hljs-keyword\">new</span> MqttServerOptions()\n  .setPort(<span class=\"hljs-number\">1883</span>)\n  .setHost(<span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>);\n\nMqttServer server = MqttServer.create(vertx, options);\n\nserver.endpointHandler(endpoint -&gt; {\n\n  System.out.println(<span class=\"hljs-string\">&quot;connected client &quot;</span> + endpoint.clientIdentifier());\n\n  endpoint.publishHandler(message -&gt; {\n\n    System.out.println(<span class=\"hljs-string\">&quot;Just received message on [&quot;</span> + message.topicName() + <span class=\"hljs-string\">&quot;] payload [&quot;</span> +\n      message.payload() + <span class=\"hljs-string\">&quot;] with QoS [&quot;</span> +\n      message.qosLevel() + <span class=\"hljs-string\">&quot;]&quot;</span>);\n  });\n\n  endpoint.accept(<span class=\"hljs-keyword\">false</span>);\n});\n\nserver.listen(ar -&gt; {\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    System.out.println(<span class=\"hljs-string\">&quot;MQTT server started and listening on port &quot;</span> + server.actualPort());\n  } <span class=\"hljs-keyword\">else</span> {\n    System.err.println(<span class=\"hljs-string\">&quot;MQTT server error on start&quot;</span> + ar.cause().getMessage());\n  }\n});\n</code></pre><h2 id=\"vertx-sql-streaming\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-sql-streaming\"></a>Vert.x SQL streaming</h2><p>We now sup­port stream­ing style for SQL queries:</p><pre><code class=\"hljs language-java\">connection.queryStream(<span class=\"hljs-string\">&quot;select * from test&quot;</span>, stream -&gt; {\n  <span class=\"hljs-keyword\">if</span> (stream.succeeded()) {\n    SQLRowStream sqlRowStream = stream.result();\n\n    sqlRowStream\n      .handler(row -&gt; {\n        <span class=\"hljs-comment\">// do something with the row...</span>\n        System.out.println(row.encode());\n      })\n      .endHandler(v -&gt; {\n        <span class=\"hljs-comment\">// no more data available, close the connection</span>\n        connection.close(done -&gt; {\n          <span class=\"hljs-keyword\">if</span> (done.failed()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(done.cause());\n          }\n        });\n      });\n  }\n});\n</code></pre><p>And with the Rx­Java API:</p><pre><code class=\"hljs language-reasonml\">client\n  .rx<span class=\"hljs-constructor\">GetConnection()</span> <span class=\"hljs-comment\">// Connect to the database</span>\n  .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">conn</span> -&gt; { <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> With <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">connection</span><span class=\"hljs-operator\">...</span>\n    <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;CREATE TABLE test(col VARCHAR(20))&quot;</span>)</span> <span class=\"hljs-comment\">// ...create test table</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val1&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...insert a row</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxUpdate</span>(<span class=\"hljs-string\">&quot;INSERT INTO test (col) VALUES (&#x27;val2&#x27;)&quot;</span>)</span>) <span class=\"hljs-comment\">// ...another one</span>\n      .flat<span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">result</span> -&gt; <span class=\"hljs-params\">conn</span>.<span class=\"hljs-params\">rxQueryStream</span>(<span class=\"hljs-string\">&quot;SELECT * FROM test&quot;</span>)</span>) <span class=\"hljs-comment\">// ...get values stream</span>\n      .flat<span class=\"hljs-constructor\">MapObservable(<span class=\"hljs-params\">sqlRowStream</span> -&gt; {\n        <span class=\"hljs-params\">return</span> <span class=\"hljs-params\">sqlRowStream</span>.<span class=\"hljs-params\">toObservable</span>()</span> <span class=\"hljs-comment\">// Transform the stream into an Observable...</span>\n          .<span class=\"hljs-keyword\">do</span><span class=\"hljs-constructor\">OnTerminate(<span class=\"hljs-params\">conn</span>::<span class=\"hljs-params\">close</span>)</span>; <span class=\"hljs-comment\">// ...and close the connection when the stream is fully read or an error occurs</span>\n      });\n  }).subscribe(row -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;Row : &quot;</span> + row.encode<span class=\"hljs-literal\">()</span>));\n</code></pre><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>In ad­di­tion to all these bril­lant fea­tures here is a list of more-​than-noticeable things you have in this Beta1:</p><ul><li>Vert.x In­fin­is­pan re­places Vert.x Jgroups clus­ter man­ager</li><li>Vert.x Con­sul Client pro­vides a full fledged client for Con­sul</li><li>Oauth2 pre­de­fined con­fig­u­ra­tion with 16 set­tings from <em>Azure Ac­tive Di­rec­tory</em>, to <em>Twit­ter</em> with the usual sus­pects (<em>Face­book</em>, <em>LinkedIn</em>, …)</li><li>Http client now fol­low redi­rects</li></ul><p>You can use and con­sume it in your projects from Maven or Gra­dle as usual with the ver­sion <code>3.4.0.Beta1</code> or read</p><ul><li>the <a href=\"http://vertx.io/docs/3.4.0.Beta1/\">doc­u­men­ta­tion pre­view</a></li><li>the <a href=\"https://gist.github.com/vietj/1ce63b368af127775512afbfc0ab14cc\">re­lease notes</a></li><li>see the <a href=\"https://github.com/vert-x3/vertx-examples/tree/3.4.0-SNAPSHOT\">ac­tual ex­am­ples</a></li></ul><p>Last but not least, I want to per­son­ally thank all the peo­ple that con­tributed to this re­lease, be­yond the Vert.x core team, the ac­tual\nVert.x com­mit­ters and many other peo­ple who have given a lot of ef­fort to this up­com­ing 3.4.0!!!!</p>","scope":{}},"tfIdfTerms":[{"term":"api","tf":10},{"term":"client","tf":9},{"term":"support","tf":8},{"term":"releas","tf":7},{"term":"web","tf":6},{"term":"featur","tf":5},{"term":"us","tf":5},{"term":"exampl","tf":5},{"term":"server","tf":5},{"term":"provid","tf":5},{"term":"java","tf":5},{"term":"rxjava","tf":4},{"term":"method","tf":4},{"term":"kotlin","tf":4},{"term":"groovi","tf":4},{"term":"beta1","tf":3},{"term":"usual","tf":3},{"term":"preview","tf":3},{"term":"actual","tf":3},{"term":"http","tf":3},{"term":"request","tf":3},{"term":"extens","tf":3},{"term":"config","tf":3},{"term":"consul","tf":3},{"term":"mqtt","tf":3}]},{"filename":"blog/2017-01-31-an-introduction-to-the-vert-x-context-object.mdx","date":"2017-01-31","slug":"an-introduction-to-the-vert-x-context-object","meta":{"title":"An Introduction to the Vert.x Context Object","category":"guides","authors":[{"name":"Jez Prime","github_id":"millross"}],"summary":"Under the hood, the vert.x Context class plays a critical part in maintaining the thread-safety guarantees of verticles. Most of the time, vert.x coders don't need to make use of Context objects directly."},"readingTime":{"text":"6 min read","minutes":5.915,"time":354900,"words":1183},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Under the hood, the vert.x Con\\xADtext class plays a crit\\xADi\\xADcal part in main\\xADtain\\xADing the thread-\\u200Bsafety guar\\xADan\\xADtees of ver\\xADti\\xADcles. Most of the time, vert.x coders don\\u2019t need to make use of Con\\xADtext ob\\xADjects di\\xADrectly. How\\xADever, some\\xADtimes you may need to. This ar\\xADti\\xADcle pro\\xADvides a brief in\\xADtro\\xADduc\\xADtion to the vert.x Con\\xADtext class, which cov\\xADers why it\\u2019s im\\xADpor\\xADtant, and why and when you might wish to make use of the Con\\xADtext di\\xADrectly, based on the au\\xADthor\\u2019s ex\\xADpe\\xADri\\xADence of build\\xADing a generic async li\\xADbrary which can be used with vert.x.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.millross-consultants.com/vertx_context_object.html\"\n  }), \"blog post\"))), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#introduction\"\n  })), \"Introduction\"), mdx(\"p\", null, \"Re\\xADcently I\\u2019ve been look\\xADing at the pos\\xADsi\\xADbil\\xADity of build\\xADing an asyn\\xADchro\\xADnous ver\\xADsion of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.pac4j.org\"\n  }), \"pac4j\"), \" li\\xADbrary, with a view to then mi\\xADgrat\\xADing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pac4j/vertx-pac4j\"\n  }), \"vertx-\\u200Bpac4j\"), \" im\\xADple\\xADmen\\xADta\\xADtion to use the asyn\\xADchro\\xADnous ver\\xADsion of pac4j by de\\xADfault.\"), mdx(\"p\", null, \"I\\u2019m keen (for ob\\xADvi\\xADous rea\\xADsons) that the async ver\\xADsion of pac4j is not tightly cou\\xADpled to  one par\\xADtic\\xADu\\xADlar asyn\\xADchro\\xADnous/non-\\u200Bblocking frame\\xADwork, I de\\xADcided to ex\\xADpose the API via the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\"\n  }), \"Com\\xADpletable\\xADFu\\xADture\"), \" class, using this to wrap val\\xADues which will be de\\xADter\\xADmined in the fu\\xADture. How\\xADever, I opted to use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"vert.x\"), \" frame\\xADwork for my asyn\\xADchro\\xADnous test\\xADing as a way of test\\xADing the API as it emerged. This in turn has led me to learn some as\\xADpects of the vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/Context.html\"\n  }), \"Con\\xADtext\"), \" class which I didn\\u2019t re\\xADally un\\xADder\\xADstand be\\xADfore.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The in\\xADfor\\xADma\\xADtion pre\\xADsented re\\xADlates to Vert.x ver\\xADsion 3.3.3. It is con\\xADceiv\\xADable that later ver\\xADsions of vert.x could ren\\xADder as\\xADpects of this ar\\xADti\\xADcle in\\xADcor\\xADrect.\")), mdx(\"h2\", {\n    \"id\": \"introduction-to-the-context-class\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#introduction-to-the-context-class\"\n  })), \"Introduction to the Context class\"), mdx(\"p\", null, \"When\\xADever a vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/Handler.html\"\n  }), \"Han\\xADdler\"), \" is ex\\xADe\\xADcuted, or the start or step method of a ver\\xADti\\xADcle is called, then that ex\\xADe\\xADcu\\xADtion is as\\xADso\\xADci\\xADated with a spe\\xADcific con\\xADtext. Gen\\xADer\\xADally a con\\xADtext is an event-\\u200Bloop con\\xADtext and is there\\xADfore as\\xADso\\xADci\\xADated with an event loop thread (ex\\xADcep\\xADtions are cov\\xADered in the Fur\\xADther Read\\xADing ref\\xADer\\xADenced below). Con\\xADtexts are prop\\xADa\\xADgated. When a han\\xADdler is set by code run\\xADning on a spe\\xADcific con\\xADtext, then that han\\xADdler will also be ex\\xADe\\xADcuted on the same con\\xADtext. This means for ex\\xADam\\xADple, that if the start method of a ver\\xADti\\xADcle in\\xADstance sets a num\\xADber of event bus han\\xADdlers (as many do), then they will all run on the same con\\xADtext as the start method for that ver\\xADti\\xADcle (so all han\\xADdlers for that ver\\xADti\\xADcle in\\xADstance will share a com\\xADmon con\\xADtext). \"), mdx(\"p\", null, \"A schematic of the re\\xADla\\xADtion\\xADships be\\xADtween non-\\u200Bworker ver\\xADti\\xADcles, con\\xADtexts and event\\xADloop threads is shown in Fig\\xADure 1. \"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-intro-to-context-object/VertxContextRelationships.png\",\n    \"alt\": \"Vertx Context/Thread/Verticle Relationships\"\n  }))), mdx(\"p\", null, \"Note that each ver\\xADti\\xADcle ef\\xADfec\\xADtively has only one con\\xADtext for han\\xADdlers cre\\xADated by its start method, and each con\\xADtext is bound to a sin\\xADgle event-\\u200Bloop thread. A given event-\\u200Bloop thread can, how\\xADever, have mul\\xADti\\xADple con\\xADtexts bound to it. \"), mdx(\"h2\", {\n    \"id\": \"when-are-contexts-not-propagated\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#when-are-contexts-not-propagated\"\n  })), \"When are contexts not propagated?\"), mdx(\"p\", null, \"When a ver\\xADti\\xADcle\\u2019s start method is called, a new con\\xADtext is cre\\xADated. If 4 iden\\xADti\\xADcal ver\\xADti\\xADcles are de\\xADployed via the in\\xADstances pa\\xADra\\xADme\\xADter on De\\xADploy\\xADmen\\xADtOp\\xADtions, the start method of each will be on a new con\\xADtext. This is log\\xADi\\xADcal as we may not want all non-\\u200Bworker ver\\xADti\\xADcles to be bound to a sin\\xADgle event\\xADloop thread when mul\\xADti\\xADple event\\xADloop threads are avail\\xADable. \"), mdx(\"h2\", {\n    \"id\": \"threading-guarantees\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#threading-guarantees\"\n  })), \"Threading Guarantees\"), mdx(\"p\", null, \"There are cer\\xADtain con\\xADse\\xADquences of the prop\\xADa\\xADga\\xADtion of con\\xADtexts to han\\xADdlers as men\\xADtioned above. The most im\\xADpor\\xADtant one is that since all han\\xADdlers in a given event\\xADloop ver\\xADti\\xADcle run on the same con\\xADtext (the one on which its start method ran), they all run on the same event\\xADloop thread. This gives rise to the thread\\xADing guar\\xADan\\xADtee within vert.x, that as long as a given ver\\xADti\\xADcle is the only one to ever ac\\xADcess a piece of state, then that state is being ac\\xADcessed by only one thread, so no syn\\xADchro\\xADniza\\xADtion will be nec\\xADes\\xADsary. \"), mdx(\"h2\", {\n    \"id\": \"exception-handling\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#exception-handling\"\n  })), \"Exception Handling\"), mdx(\"p\", null, \"Each con\\xADtext can have its own ex\\xADcep\\xADtion han\\xADdler at\\xADtached for han\\xADdling ex\\xADcep\\xADtions which occur dur\\xADing event loop pro\\xADcess\\xADing.\"), mdx(\"h3\", {\n    \"id\": \"why-might-you-not-want-the-default-exception-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#why-might-you-not-want-the-default-exception-handler\"\n  })), \"Why might you not want the default exception handler?\"), mdx(\"p\", null, \"As one ex\\xADam\\xADple, you might have some ver\\xADti\\xADcles run\\xADning whose job it is to mon\\xADi\\xADtor other ver\\xADti\\xADcles, and if some\\xADthing ap\\xADpears to go wrong with them, un\\xADde\\xADploy and restart them, a fre\\xADquent pat\\xADtern in an actor-\\u200B or microservices-\\u200B style archic\\xADtec\\xADture. So one op\\xADtion could be that when a su\\xADper\\xADvised ver\\xADti\\xADcle en\\xADcoun\\xADters an un\\xADre\\xADcov\\xADer\\xADable error, it could sim\\xADply no\\xADtify its su\\xADper\\xADvi\\xADsor that it has gone wrong via an event\\xADbus mes\\xADsage, and its su\\xADper\\xADvi\\xADsor could then un\\xADde\\xADploy and re\\xADde\\xADploy (and after a num\\xADber of fail\\xADures in rapid suc\\xADces\\xADsion pos\\xADsi\\xADbly give up hope or es\\xADca\\xADlate to its own su\\xADper\\xADvi\\xADsor.\"), mdx(\"h2\", {\n    \"id\": \"going-off-context-and-getting-back-onto-a-particular-context\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#going-off-context-and-getting-back-onto-a-particular-context\"\n  })), \"Going off-context and getting back onto a particular context\"), mdx(\"p\", null, \"There are sev\\xADeral rea\\xADsons why you might ex\\xADe\\xADcute code off-\\u200Bcontext and then want to op\\xADer\\xADate back on a vert.x con\\xADtext when com\\xADplete. I\\u2019ll out\\xADline a cou\\xADple of sce\\xADnar\\xADios below\"), mdx(\"h3\", {\n    \"id\": \"running-code-on-a-separate-thread\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#running-code-on-a-separate-thread\"\n  })), \"Running code on a separate thread\"), mdx(\"p\", null, \"Firstly you might be using an asyn\\xADchro\\xADnous dri\\xADver which is en\\xADtirely vertx-\\u200Bunaware. Its code will run on non-\\u200Beventloop threads but it\\u2019s pos\\xADsi\\xADble you may then want to use the re\\xADsults of that code to up\\xADdate in\\xADfor\\xADma\\xADtion within your ver\\xADti\\xADcle. If you don\\u2019t get back onto the cor\\xADrect con\\xADtext, you can\\u2019t make any guar\\xADan\\xADtees about thread-\\u200Bsafety, so your sub\\xADse\\xADquent pro\\xADcess\\xADing needs to be run back on the cor\\xADrect event\\xADloop thread.\"), mdx(\"h3\", {\n    \"id\": \"using-asynchronous-java-8-apis\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-asynchronous-java-8-apis\"\n  })), \"Using asynchronous Java 8 APIs\"), mdx(\"p\", null, \"APIs such as Com\\xADpletable\\xADFu\\xADture are context-\\u200Bunaware. In one ex\\xADam\\xADple, I cre\\xADated an al\\xADready com\\xADpleted fu\\xADture on the vert.x event loop in a test. I then at\\xADtached sub\\xADse\\xADquent pro\\xADcess\\xADing to it via then run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@RunWith(VertxUnitRunner.class)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"ImmediateCompletionTest\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Rule\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" RunTestOnContext rule = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RunTestOnContext();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testImmediateCompletion\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Async async = context.async();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Vertx vertx = rule.vertx();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" CompletableFuture<Integer> toComplete = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" CompletableFuture<>();\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// delay future completion by 500 ms\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String threadName = Thread.currentThread().getName();\\n        toComplete.complete(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \");\\n        toComplete.thenRun(() -> {\\n            assertThat(Thread.currentThread().getName(), is(threadName));\\n            async.complete();\\n        });\\n    }\\n}\\n\")), mdx(\"p\", null, \"Naively one might ex\\xADpect this to au\\xADto\\xADmat\\xADi\\xADcally run on the con\\xADtext, since it hasn\\u2019t left the event\\xADloop thread on which the fu\\xADture was com\\xADpleted, and in\\xADdeed it\\u2019s prov\\xADable that it is on the cor\\xADrect thread. How\\xADever, it will not be on the cor\\xADrect con\\xADtext. This would mean that it wouldn\\u2019t, for ex\\xADam\\xADple, in\\xADvoke any mod\\xADi\\xADfied ex\\xADcep\\xADtion han\\xADdler at\\xADtached to the con\\xADtext.\"), mdx(\"h3\", {\n    \"id\": \"getting-back-on-context\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#getting-back-on-context\"\n  })), \"Getting back on context\"), mdx(\"p\", null, \"For\\xADtu\\xADnately, once we\\u2019ve left the con\\xADtext, it\\u2019s quite straight\\xADfor\\xADward to re\\xADturn to it. Prior to de\\xADf\\xADi\\xADn\\xADi\\xADtion of the code block within then\\xADRun, we can use Vertx.cur\\xADrent\\xADCon\\xADtext() or vertx.getOr\\xADCre\\xADate\\xADCon\\xADtext() to get a han\\xADdle to the con\\xADtext on which our event\\xADloop code is run\\xADning, We can then ex\\xADe\\xADcute the code block in\\xADside a call to Con\\xADtext::runOn\\xADCon\\xADtext, sim\\xADi\\xADlar to\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Context currentContext = vertx.getOrCreateContext();\\ntoComplete.thenRun(() -> {\\n        currentContext.runOnContext(v -> {\\n        assertThat(Thread.currentThread().getName(), is(threadName));\\n        async.complete();\\n    }\\n});\\n\")), mdx(\"p\", null, \"While get\\xADting back onto the cor\\xADrect con\\xADtext may not be crit\\xADi\\xADcal if you have re\\xADmained on the event loop thread through\\xADout, it is crit\\xADi\\xADcal if you are going to in\\xADvoke sub\\xADse\\xADquent vert.x han\\xADdlers, up\\xADdate ver\\xADti\\xADcle state or any\\xADthing sim\\xADi\\xADlar, so it\\u2019s a sen\\xADsi\\xADble gen\\xADeral ap\\xADproach.\"), mdx(\"h2\", {\n    \"id\": \"further-reading\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#further-reading\"\n  })), \"Further Reading\"), mdx(\"p\", null, \"The vert.x team them\\xADselves offer an ex\\xADcel\\xADlent blog about the Vert.x event\\xADloop, with ex\\xADcel\\xADlent ma\\xADte\\xADr\\xADial on the con\\xADtext, on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc\"\n  }), \"Github\"), \".\"), mdx(\"h2\", {\n    \"id\": \"thanks\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#thanks\"\n  })), \"Thanks\"), mdx(\"p\", null, \"Thanks very much to the vert.x core team for their clear github pages on the event\\xADloop, and also to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/alexlehm?lang=en\"\n  }), \"Alexan\\xADder Lehmann\"), \" for his an\\xADswers to my stu\\xADpid and naive ques\\xADtions on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://groups.google.com/forum/#!forum/vertx\"\n  }), \"Vert.x google group\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Under the hood, the vert.x Con­text class plays a crit­i­cal part in main­tain­ing the thread-​safety guar­an­tees of ver­ti­cles. Most of the time, vert.x coders don’t need to make use of Con­text ob­jects di­rectly. How­ever, some­times you may need to. This ar­ti­cle pro­vides a brief in­tro­duc­tion to the vert.x Con­text class, which cov­ers why it’s im­por­tant, and why and when you might wish to make use of the Con­text di­rectly, based on the au­thor’s ex­pe­ri­ence of build­ing a generic async li­brary which can be used with vert.x.</p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"http://www.millross-consultants.com/vertx_context_object.html\">blog post</a></p></div><h2 id=\"introduction\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#introduction\"></a>Introduction</h2><p>Re­cently I’ve been look­ing at the pos­si­bil­ity of build­ing an asyn­chro­nous ver­sion of the <a href=\"http://www.pac4j.org\">pac4j</a> li­brary, with a view to then mi­grat­ing the <a href=\"https://github.com/pac4j/vertx-pac4j\">vertx-​pac4j</a> im­ple­men­ta­tion to use the asyn­chro­nous ver­sion of pac4j by de­fault.</p><p>I’m keen (for ob­vi­ous rea­sons) that the async ver­sion of pac4j is not tightly cou­pled to  one par­tic­u­lar asyn­chro­nous/non-​blocking frame­work, I de­cided to ex­pose the API via the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\">Com­pletable­Fu­ture</a> class, using this to wrap val­ues which will be de­ter­mined in the fu­ture. How­ever, I opted to use the <a href=\"http://vertx.io\">vert.x</a> frame­work for my asyn­chro­nous test­ing as a way of test­ing the API as it emerged. This in turn has led me to learn some as­pects of the vert.x <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/Context.html\">Con­text</a> class which I didn’t re­ally un­der­stand be­fore.</p><div class=\"alert info\"><p>The in­for­ma­tion pre­sented re­lates to Vert.x ver­sion 3.3.3. It is con­ceiv­able that later ver­sions of vert.x could ren­der as­pects of this ar­ti­cle in­cor­rect.</p></div><h2 id=\"introduction-to-the-context-class\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#introduction-to-the-context-class\"></a>Introduction to the Context class</h2><p>When­ever a vert.x <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/Handler.html\">Han­dler</a> is ex­e­cuted, or the start or step method of a ver­ti­cle is called, then that ex­e­cu­tion is as­so­ci­ated with a spe­cific con­text. Gen­er­ally a con­text is an event-​loop con­text and is there­fore as­so­ci­ated with an event loop thread (ex­cep­tions are cov­ered in the Fur­ther Read­ing ref­er­enced below). Con­texts are prop­a­gated. When a han­dler is set by code run­ning on a spe­cific con­text, then that han­dler will also be ex­e­cuted on the same con­text. This means for ex­am­ple, that if the start method of a ver­ti­cle in­stance sets a num­ber of event bus han­dlers (as many do), then they will all run on the same con­text as the start method for that ver­ti­cle (so all han­dlers for that ver­ti­cle in­stance will share a com­mon con­text). </p><p>A schematic of the re­la­tion­ships be­tween non-​worker ver­ti­cles, con­texts and event­loop threads is shown in Fig­ure 1. </p><p><img src=\"/images/blog/vertx3-intro-to-context-object/VertxContextRelationships.png\" alt=\"Vertx Context/Thread/Verticle Relationships\"/></p><p>Note that each ver­ti­cle ef­fec­tively has only one con­text for han­dlers cre­ated by its start method, and each con­text is bound to a sin­gle event-​loop thread. A given event-​loop thread can, how­ever, have mul­ti­ple con­texts bound to it. </p><h2 id=\"when-are-contexts-not-propagated\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#when-are-contexts-not-propagated\"></a>When are contexts not propagated?</h2><p>When a ver­ti­cle’s start method is called, a new con­text is cre­ated. If 4 iden­ti­cal ver­ti­cles are de­ployed via the in­stances pa­ra­me­ter on De­ploy­men­tOp­tions, the start method of each will be on a new con­text. This is log­i­cal as we may not want all non-​worker ver­ti­cles to be bound to a sin­gle event­loop thread when mul­ti­ple event­loop threads are avail­able. </p><h2 id=\"threading-guarantees\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#threading-guarantees\"></a>Threading Guarantees</h2><p>There are cer­tain con­se­quences of the prop­a­ga­tion of con­texts to han­dlers as men­tioned above. The most im­por­tant one is that since all han­dlers in a given event­loop ver­ti­cle run on the same con­text (the one on which its start method ran), they all run on the same event­loop thread. This gives rise to the thread­ing guar­an­tee within vert.x, that as long as a given ver­ti­cle is the only one to ever ac­cess a piece of state, then that state is being ac­cessed by only one thread, so no syn­chro­niza­tion will be nec­es­sary. </p><h2 id=\"exception-handling\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#exception-handling\"></a>Exception Handling</h2><p>Each con­text can have its own ex­cep­tion han­dler at­tached for han­dling ex­cep­tions which occur dur­ing event loop pro­cess­ing.</p><h3 id=\"why-might-you-not-want-the-default-exception-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#why-might-you-not-want-the-default-exception-handler\"></a>Why might you not want the default exception handler?</h3><p>As one ex­am­ple, you might have some ver­ti­cles run­ning whose job it is to mon­i­tor other ver­ti­cles, and if some­thing ap­pears to go wrong with them, un­de­ploy and restart them, a fre­quent pat­tern in an actor-​ or microservices-​ style archic­tec­ture. So one op­tion could be that when a su­per­vised ver­ti­cle en­coun­ters an un­re­cov­er­able error, it could sim­ply no­tify its su­per­vi­sor that it has gone wrong via an event­bus mes­sage, and its su­per­vi­sor could then un­de­ploy and re­de­ploy (and after a num­ber of fail­ures in rapid suc­ces­sion pos­si­bly give up hope or es­ca­late to its own su­per­vi­sor.</p><h2 id=\"going-off-context-and-getting-back-onto-a-particular-context\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#going-off-context-and-getting-back-onto-a-particular-context\"></a>Going off-context and getting back onto a particular context</h2><p>There are sev­eral rea­sons why you might ex­e­cute code off-​context and then want to op­er­ate back on a vert.x con­text when com­plete. I’ll out­line a cou­ple of sce­nar­ios below</p><h3 id=\"running-code-on-a-separate-thread\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#running-code-on-a-separate-thread\"></a>Running code on a separate thread</h3><p>Firstly you might be using an asyn­chro­nous dri­ver which is en­tirely vertx-​unaware. Its code will run on non-​eventloop threads but it’s pos­si­ble you may then want to use the re­sults of that code to up­date in­for­ma­tion within your ver­ti­cle. If you don’t get back onto the cor­rect con­text, you can’t make any guar­an­tees about thread-​safety, so your sub­se­quent pro­cess­ing needs to be run back on the cor­rect event­loop thread.</p><h3 id=\"using-asynchronous-java-8-apis\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-asynchronous-java-8-apis\"></a>Using asynchronous Java 8 APIs</h3><p>APIs such as Com­pletable­Fu­ture are context-​unaware. In one ex­am­ple, I cre­ated an al­ready com­pleted fu­ture on the vert.x event loop in a test. I then at­tached sub­se­quent pro­cess­ing to it via then run:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@RunWith(VertxUnitRunner.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImmediateCompletionTest</span> </span>{\n    <span class=\"hljs-meta\">@Rule</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> RunTestOnContext rule = <span class=\"hljs-keyword\">new</span> RunTestOnContext();\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testImmediateCompletion</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n\n        <span class=\"hljs-keyword\">final</span> Async async = context.async();\n        <span class=\"hljs-keyword\">final</span> Vertx vertx = rule.vertx();\n        <span class=\"hljs-keyword\">final</span> CompletableFuture&lt;Integer&gt; toComplete = <span class=\"hljs-keyword\">new</span> CompletableFuture&lt;&gt;();\n        <span class=\"hljs-comment\">// delay future completion by 500 ms</span>\n        <span class=\"hljs-keyword\">final</span> String threadName = Thread.currentThread().getName();\n        toComplete.complete(<span class=\"hljs-number\">100</span>);\n        toComplete.thenRun(() -&gt; {\n            assertThat(Thread.currentThread().getName(), is(threadName));\n            async.complete();\n        });\n    }\n}\n</code></pre><p>Naively one might ex­pect this to au­to­mat­i­cally run on the con­text, since it hasn’t left the event­loop thread on which the fu­ture was com­pleted, and in­deed it’s prov­able that it is on the cor­rect thread. How­ever, it will not be on the cor­rect con­text. This would mean that it wouldn’t, for ex­am­ple, in­voke any mod­i­fied ex­cep­tion han­dler at­tached to the con­text.</p><h3 id=\"getting-back-on-context\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#getting-back-on-context\"></a>Getting back on context</h3><p>For­tu­nately, once we’ve left the con­text, it’s quite straight­for­ward to re­turn to it. Prior to de­f­i­n­i­tion of the code block within then­Run, we can use Vertx.cur­rent­Con­text() or vertx.getOr­Cre­ate­Con­text() to get a han­dle to the con­text on which our event­loop code is run­ning, We can then ex­e­cute the code block in­side a call to Con­text::runOn­Con­text, sim­i­lar to</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">final</span> Context currentContext = vertx.getOrCreateContext();\ntoComplete.thenRun(() -&gt; {\n        currentContext.runOnContext(v -&gt; {\n        assertThat(Thread.currentThread().getName(), is(threadName));\n        async.complete();\n    }\n});\n</code></pre><p>While get­ting back onto the cor­rect con­text may not be crit­i­cal if you have re­mained on the event loop thread through­out, it is crit­i­cal if you are going to in­voke sub­se­quent vert.x han­dlers, up­date ver­ti­cle state or any­thing sim­i­lar, so it’s a sen­si­ble gen­eral ap­proach.</p><h2 id=\"further-reading\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#further-reading\"></a>Further Reading</h2><p>The vert.x team them­selves offer an ex­cel­lent blog about the Vert.x event­loop, with ex­cel­lent ma­te­r­ial on the con­text, on <a href=\"https://github.com/vietj/vertx-materials/blob/master/src/main/asciidoc/Demystifying_the_event_loop.adoc\">Github</a>.</p><h2 id=\"thanks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#thanks\"></a>Thanks</h2><p>Thanks very much to the vert.x core team for their clear github pages on the event­loop, and also to <a href=\"https://twitter.com/alexlehm?lang=en\">Alexan­der Lehmann</a> for his an­swers to my stu­pid and naive ques­tions on the <a href=\"https://groups.google.com/forum/#!forum/vertx\">Vert.x google group</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"context","tf":39},{"term":"thread","tf":18},{"term":"verticl","tf":17},{"term":"handler","tf":12},{"term":"run","tf":11},{"term":"eventloop","tf":11},{"term":"us","tf":10},{"term":"on","tf":10},{"term":"will","tf":8},{"term":"event","tf":8},{"term":"code","tf":8},{"term":"start","tf":7},{"term":"method","tf":7},{"term":"loop","tf":7},{"term":"asynchron","tf":6},{"term":"not","tf":6},{"term":"except","tf":6},{"term":"back","tf":6},{"term":"class","tf":5},{"term":"version","tf":5},{"term":"execut","tf":5},{"term":"correct","tf":5},{"term":"guarante","tf":4},{"term":"howev","tf":4},{"term":"mai","tf":4}]},{"filename":"blog/2017-01-25-building-services-and-apis-with-amqp-1-0.mdx","date":"2017-01-25","slug":"building-services-and-apis-with-amqp-1-0","meta":{"title":"Building services and APIs with AMQP 1.0","category":"guides","authors":[{"name":"Jakub Scholz","github_id":"scholzj"}],"summary":"Microservices and APIs are everywhere. Everyone talks about them, presentation slides are full of them ... some people are actually even building them."},"readingTime":{"text":"8 min read","minutes":7.475,"time":448500,"words":1495},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Mi\\xADcroser\\xADvices and APIs are every\\xADwhere. Every\\xADone talks about them, pre\\xADsen\\xADta\\xADtion slides are full of them \\u2026 some peo\\xADple are ac\\xADtu\\xADally even build\\xADing them. Mi\\xADcroser\\xADvices and APIs are of course not com\\xADpletely new con\\xADcepts and they are a bit over-\\u200Bhyped. But in gen\\xADeral the ideas be\\xADhind them are not bad. Un\\xADfor\\xADtu\\xADnately, many peo\\xADple seem to be\\xADlieve that the only way how to im\\xADple\\xADment an API in mi\\xADcroser\\xADvice is to use HTTP and REST. That is of course not true. Mi\\xADcroser\\xADvices and APIs can be based on many dif\\xADfer\\xADent pro\\xADto\\xADcols and tech\\xADnolo\\xADgies. My fa\\xADvorite one is of course \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.amqp.org\"\n  }), \"AMQP\"), \". Don\\u2019t take me wrong, HTTP and REST is not nec\\xADes\\xADsar\\xADily bad. But in some cases AMQP is sim\\xADply bet\\xADter and cre\\xADat\\xADing AMQP based APIs does not need to be com\\xADpli\\xADcated.\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://blog.effectivemessaging.com/2017/01/building-services-and-apis-with-amqp-10.html\"\n  }), \"blog post\"))), mdx(\"h2\", {\n    \"id\": \"livescore-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#livescore-service\"\n  })), \"LiveScore service\"), mdx(\"p\", null, \"For demon\\xADstra\\xADtion, I will use a very sim\\xADple ser\\xADvice for keep\\xADing scores of foot\\xADball games. It has very basic API. It has only three calls:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add a new game\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Up\\xADdate a score of ex\\xADist\\xADing game\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List the scores\\nThe AMQP vari\\xADants will be ad\\xADdi\\xADtion\\xADally able to push live up\\xADdates to the clients.\")), mdx(\"p\", null, \"The demo is using Java and Vert.x toolkit. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/\"\n  }), \"Vert.x\"), \" is cool and I def\\xADi\\xADnitely rec\\xADom\\xADmend it to every\\xADone. But most of the stuff from the demo should be pos\\xADsi\\xADble also in any other pro\\xADgram\\xADming lan\\xADguages and/or frame\\xADwork.\"), mdx(\"h2\", {\n    \"id\": \"http-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#http-api\"\n  })), \"HTTP API\"), mdx(\"p\", null, \"HTTP im\\xADple\\xADmen\\xADta\\xADtion of my ser\\xADvice is a typ\\xADi\\xADcal REST API. Since it is very sim\\xADple, it ac\\xADcepts re\\xADquests only on one end\\xADpoint \\u2013 /api/v1.0/scores. New games are added as POST op\\xADer\\xADa\\xADtions, scores are up\\xADdated with PUT op\\xADer\\xADa\\xADtions and list of all scores can be ob\\xADtained with GET.\"), mdx(\"p\", null, \"With Vert.x, cre\\xADat\\xADing HTTP/REST API is very easy. First the web router has to be cre\\xADated with all planned API calls:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"router = Router.router(vertx);  \\nrouter.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/v1.0/*\\\"\"), \").handler(BodyHandler.create());  \\nrouter.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/v1.0/scores\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::getScores);  \\nrouter.post(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/v1.0/scores\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::addGame);  \\nrouter.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api/v1.0/scores\\\"\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::setScore);  \\n\")), mdx(\"p\", null, \"Then the HTTP server has to be cre\\xADated and linked with the router:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"HttpServerOptions httpOptions = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" HttpServerOptions();  \\nserver = vertx.createHttpServer(httpOptions)  \\n   .requestHandler(router::accept)  \\n   .listen(httpPort);  \\n\")), mdx(\"p\", null, \"And fi\\xADnally the han\\xADdlers which will be trig\\xADgered for each API call have to be im\\xADple\\xADmented as well. The full code is on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/scholzj/livescore-demo-vertx-http\"\n  }), \"GitHub\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/services-and-apis-with-amqp/HTTP-API.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"The HTTP API doesn\\u2019t pro\\xADvide any way how to au\\xADto\\xADmat\\xADi\\xADcally push the score up\\xADdates to the clients. The clients sim\\xADply have to poll the ser\\xADvice pe\\xADri\\xADod\\xADi\\xADcally to get the up\\xADdates. HTTP has of course some ways how to push live up\\xADdates to clients. For ex\\xADam\\xADple, with Web\\xADSock\\xADets or with chun\\xADked trans\\xADfers. How\\xADever, these are not that easy to im\\xADple\\xADment. The ser\\xADvice would also need to keep sep\\xADa\\xADrate con\\xADnec\\xADtion with every client and push the up\\xADdates for each of them sep\\xADa\\xADrately.\"), mdx(\"h2\", {\n    \"id\": \"amqp-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#amqp-api\"\n  })), \"AMQP API\"), mdx(\"p\", null, \"Cre\\xADat\\xADing the HTTP API was re\\xADally easy. Cre\\xADat\\xADing an AMQP API has to be more com\\xADpli\\xADcated, right? We would need an AMQP server, which will lis\\xADten on some port, ac\\xADcept the con\\xADnec\\xADtions, ses\\xADsions, links and so on. There are usu\\xADally no nice and sim\\xADple to use li\\xADbraries for this.\"), mdx(\"p\", null, \"Sure, this is one way how to do it. There is ac\\xADtu\\xADally a nice li\\xADbrary called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://qpid.apache.org/proton/index.html\"\n  }), \"Apache Qpid Pro\\xADton\"), \". It has Java and C ver\\xADsions and bind\\xADings into many other lan\\xADguages (Go, C++, Python, \\u2026). It makes cre\\xADat\\xADing your own AMQP server lot eas\\xADier. It will take care of de\\xADcod\\xADing and en\\xADcod\\xADing the AMQP pro\\xADto\\xADcol, han\\xADdling the con\\xADnec\\xADtions, ses\\xADsions etc. But still, Qpid Pro\\xADton is not even nearly as easy to use as the HTTP router used for the HTTP API.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/services-and-apis-with-amqp/AMQP-Server-API.png\",\n    \"alt\": \"API with AMQP server\"\n  }))), mdx(\"p\", null, \"Are there any eas\\xADier op\\xADtions? What if all what is needed to cre\\xADate AMQP based API is a sim\\xADple AMQP client? Nor\\xADmally, that should not be a pos\\xADsi\\xADble be\\xADcause we need the API to lis\\xADten on some port for the clients to con\\xADnect to it and send re\\xADquests. And clients usu\\xADally don\\u2019t lis\\xADten on any ports. How\\xADever, Apache Qpid has some\\xADthing called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://qpid.apache.org/components/dispatch-router/index.html\"\n  }), \"Dis\\xADpatch\"), \". It works as a light\\xADweight AMQP router. Dis\\xADpatch will serve as the AMQP server which was miss\\xADing. It will take care of han\\xADdling client con\\xADnec\\xADtions, se\\xADcu\\xADrity and shield the ser\\xADvice from the ac\\xADtual clients. All the ser\\xADvice needs to do is to use AMQP client to con\\xADnect to Dis\\xADpatch on pre\\xADde\\xADfined ad\\xADdress and wait for the re\\xADquest.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/services-and-apis-with-amqp/AMQP-API.png\",\n    \"alt\": \"AMQP API with Dispatch router\"\n  }))), mdx(\"p\", null, \"Dis\\xADpatch needs to be con\\xADfig\\xADured with three API entry points as ad\\xADdresses:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"address {  \\n    prefix: /setScore  \\n    distribution: balanced  \\n}  \\naddress {  \\n    prefix: /getScore  \\n    distribution: balanced  \\n}  \\naddress {  \\n    prefix: /addGame  \\n    distribution: balanced  \\n}  \\n\")), mdx(\"p\", null, \"LiveScore ser\\xADvice will con\\xADnect to these ad\\xADdresses as a re\\xADceiver / con\\xADsumer. Clients will con\\xADnect to them as senders  /pro\\xADduc\\xADers. And Dis\\xADpatch will take care of rout\\xADing the mes\\xADsages be\\xADtween the clients and the ser\\xADvice. Clients can also cre\\xADate ad\\xADdi\\xADtional re\\xADceivers so that the ser\\xADvice is able to re\\xADspond to their re\\xADquests and spec\\xADify the ad\\xADdress of the re\\xADceiver as the reply-\\u200Bto header in the re\\xADquest mes\\xADsage. LiveScore ser\\xADvice will au\\xADto\\xADmat\\xADi\\xADcally send the re\\xADsponse to this ad\\xADdress. But spec\\xADi\\xADfy\\xADing a reply-\\u200Bto is not manda\\xADtory. If the client wants, it can sim\\xADply fire the re\\xADquest and for\\xADget about the re\\xADsponse.\"), mdx(\"p\", null, \"LiveScore ser\\xADvice is using Vert.x AMQP Bridge which al\\xADlows easy in\\xADte\\xADgra\\xADtion be\\xADtween the Vert.x Event Bus and the AMQP con\\xADnec\\xADtion to my router. The ser\\xADvice starts the AMQP Bridge and if it suc\\xADcess\\xADfully con\\xADnects to Dis\\xADpatch it cre\\xADates three re\\xADceivers for the API calls.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"AmqpBridgeOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" AmqpBridgeOptions().addEnabledSaslMechanism(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"ANONYMOUS\\\"\"), \");  \\nbridge = AmqpBridge.create(vertx, options);  \\nbridge.start(amqpHostname, amqpPort, res -> {  \\n   \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (res.succeeded())  \\n   {  \\n     bridge.createConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/setScore\\\"\"), \").setMaxBufferedMessages(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::setScore);  \\n     bridge.createConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/getScores\\\"\"), \").setMaxBufferedMessages(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::getScores);  \\n     bridge.createConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/addGame\\\"\"), \").setMaxBufferedMessages(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \").handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::addGame);  \\n     fut.complete();  \\n   }  \\n   \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \"  \\n   {  \\n     fut.fail(res.cause());  \\n   }  \\n});  \\n\")), mdx(\"p\", null, \"The only other thing which needs to be done is cre\\xADat\\xADing han\\xADdlers for han\\xADdling the re\\xADquests re\\xADceived from clients:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getScores\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Message<Object> msg)\"), \"  \\n\"), \"{  \\n   \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \"(msg.replyAddress() != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \")  \\n   {  \\n     JsonObject response = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();  \\n     response.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application_properties\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"status\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \"));  \\n     response.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"body\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray(Json.encode(scoreService.getScores())).encode());  \\n     msg.reply(response);  \\n   }  \\n   \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \"  \\n   {  \\n     LOG.warn(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Received LiveScore/getScores request without reply to address\\\"\"), \");  \\n   }  \\n}  \\n\")), mdx(\"p\", null, \"Live broad\\xADcast\\xADing of score up\\xADdates is also very easy. New ad\\xADdress has to be added into Dis\\xADpatch con\\xADfig\\xADu\\xADra\\xADtion. This ad\\xADdress will be used in op\\xADpo\\xADsite di\\xADrec\\xADtion. the ser\\xADvice con\\xADnects to it as sender / pro\\xADducer and clients which want to re\\xADceive the live up\\xADdates cre\\xADate a re\\xADceiver against this ad\\xADdress. What is im\\xADpor\\xADtant, this ad\\xADdress has to be marked as mul\\xADti\\xADcast. Thanks to that every sin\\xADgle mes\\xADsage will be de\\xADliv\\xADered to all con\\xADnected clients and not just to one of them:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"address {  \\n    prefix: /liveScores  \\n    distribution: multicast  \\n}  \\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/services-and-apis-with-amqp/AMQP-API-multicast.png\",\n    \"alt\": \"Multicasting messages\"\n  }))), mdx(\"p\", null, \"Thanks to the mul\\xADti\\xADcast dis\\xADtri\\xADb\\xADu\\xADtion, the ser\\xADvice doesn\\u2019t need to send a sep\\xADa\\xADrate up\\xADdate to every sin\\xADgle client. It sends the mes\\xADsage only once and dis\\xADpatch takes care of the rest.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"broadcastUpdates\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Game game)\"), \"  \\n\"), \"{  \\n   LOG.info(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Broadcasting game update \\\"\"), \" + game);  \\n   JsonObject message = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();  \\n   message.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"body\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(Json.encode(game)).encode());  \\n   producer.send(message);  \\n} \\n\")), mdx(\"p\", null, \"Again, the com\\xADplete source codes of the demo ser\\xADvice are avail\\xADable on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge\"\n  }), \"GitHub\"), \".\"), mdx(\"h2\", {\n    \"id\": \"how-to-structure-amqp-apis\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#how-to-structure-amqp-apis\"\n  })), \"How to structure AMQP APIs?\"), mdx(\"p\", null, \"Com\\xADpared to HTTP and REST, AMQP gives its users a lot more free\\xADdom when de\\xADsign\\xADing the API. It isn\\u2019t tied up by the avail\\xADable HTTP meth\\xADods.\"), mdx(\"p\", null, \"My LiveScore ser\\xADvice is using the API end\\xADpoints named ac\\xADcord\\xADing to their func\\xADtion:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/LiveScore/ad\\xADdGame\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/LiveScore/setScore\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/LiveScore/getScores\\nIt also uses HTTP sta\\xADtus codes in ap\\xADpli\\xADca\\xADtion prop\\xADer\\xADties of the dif\\xADfer\\xADent mes\\xADsages to de\\xADscribe the re\\xADsult of the re\\xADquest and JSON as the mes\\xADsage pay\\xADload with the ac\\xADtual re\\xADquest and re\\xADsponse.\")), mdx(\"p\", null, \"Is that the best way? To be hon\\xADest, I don\\u2019t know. Just for the re\\xADquest en\\xADcod\\xADing there are many dif\\xADfer\\xADent op\\xADtions. AMQP has its own en\\xADcod\\xADings which sup\\xADports all pos\\xADsi\\xADble basic as well as more ad\\xADvanced data types and struc\\xADtures. But AMQP can also trans\\xADfer any opaque data - be it JSON, XML, Google Pro\\xADto\\xADcol Buffers or any\\xADthing else. For sim\\xADple re\\xADquest, the pay\\xADload can be com\\xADpletely skipped and ap\\xADpli\\xADca\\xADtion prop\\xADer\\xADties can be used in\\xADstead. And for every\\xADone who re\\xADally loves HTTP/REST, one can also model the API in REST style as I did in an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge-rest-style\"\n  }), \"al\\xADter\\xADna\\xADtive im\\xADple\\xADmen\\xADta\\xADtion\"), \" of my demo ser\\xADvice.\"), mdx(\"h2\", {\n    \"id\": \"browser\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#browser\"\n  })), \"Browser\"), mdx(\"p\", null, \"One of the en\\xADvi\\xADron\\xADments where HTTP is so to say \\u201Cat home\\u201D is browser. AMQP will prob\\xADa\\xADbly never be as \\u201Cna\\xADtive\\u201D pro\\xADto\\xADcol for any browser as HTTP is. How\\xADever AMQP can be used even from browsers. It has Web\\xADSocket bind\\xADing and there are Javascript AMQP li\\xADbraries - for ex\\xADam\\xADple rhea. So AMQP can be also used re\\xADally every\\xADwhere.\"), mdx(\"h2\", {\n    \"id\": \"decoupling\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#decoupling\"\n  })), \"Decoupling\"), mdx(\"p\", null, \"It is im\\xADpor\\xADtant to men\\xADtion that the Dis\\xADpatch router doesn\\u2019t de\\xADcou\\xADple the client from the ser\\xADvice. If de\\xADcou\\xADpling is what is needed, it can be eas\\xADily achieved by re\\xADplac\\xADing the Dis\\xADpatch router with some AMQP bro\\xADker. The bro\\xADker would de\\xADcou\\xADple the client from the ser\\xADvice with\\xADout any changes in the ser\\xADvice or clients.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"While cre\\xADat\\xADing APIs using AMQP can be very easy, it doesn\\u2019t mean that AMQP is the best pro\\xADto\\xADcol for all APIs. There are def\\xADi\\xADnitely APIs where HTTP is more suit\\xADable. But in some use cases, AMQP has clear ad\\xADvan\\xADtages. In my LiveScore ex\\xADam\\xADple it is es\\xADpe\\xADcially one to many com\\xADmu\\xADni\\xADca\\xADtion. It is im\\xADpor\\xADtant to keep the mind open and se\\xADlect the best avail\\xADable for given ser\\xADvice.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Mi­croser­vices and APIs are every­where. Every­one talks about them, pre­sen­ta­tion slides are full of them … some peo­ple are ac­tu­ally even build­ing them. Mi­croser­vices and APIs are of course not com­pletely new con­cepts and they are a bit over-​hyped. But in gen­eral the ideas be­hind them are not bad. Un­for­tu­nately, many peo­ple seem to be­lieve that the only way how to im­ple­ment an API in mi­croser­vice is to use HTTP and REST. That is of course not true. Mi­croser­vices and APIs can be based on many dif­fer­ent pro­to­cols and tech­nolo­gies. My fa­vorite one is of course <a href=\"http://www.amqp.org\">AMQP</a>. Don’t take me wrong, HTTP and REST is not nec­es­sar­ily bad. But in some cases AMQP is sim­ply bet­ter and cre­at­ing AMQP based APIs does not need to be com­pli­cated.</p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"http://blog.effectivemessaging.com/2017/01/building-services-and-apis-with-amqp-10.html\">blog post</a></p></div><h2 id=\"livescore-service\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#livescore-service\"></a>LiveScore service</h2><p>For demon­stra­tion, I will use a very sim­ple ser­vice for keep­ing scores of foot­ball games. It has very basic API. It has only three calls:</p><ul><li>Add a new game</li><li>Up­date a score of ex­ist­ing game</li><li>List the scores\nThe AMQP vari­ants will be ad­di­tion­ally able to push live up­dates to the clients.</li></ul><p>The demo is using Java and Vert.x toolkit. <a href=\"http://vertx.io/\">Vert.x</a> is cool and I def­i­nitely rec­om­mend it to every­one. But most of the stuff from the demo should be pos­si­ble also in any other pro­gram­ming lan­guages and/or frame­work.</p><h2 id=\"http-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#http-api\"></a>HTTP API</h2><p>HTTP im­ple­men­ta­tion of my ser­vice is a typ­i­cal REST API. Since it is very sim­ple, it ac­cepts re­quests only on one end­point – /api/v1.0/scores. New games are added as POST op­er­a­tions, scores are up­dated with PUT op­er­a­tions and list of all scores can be ob­tained with GET.</p><p>With Vert.x, cre­at­ing HTTP/REST API is very easy. First the web router has to be cre­ated with all planned API calls:</p><pre><code class=\"hljs language-java\">router = Router.router(vertx);  \nrouter.route(<span class=\"hljs-string\">&quot;/api/v1.0/*&quot;</span>).handler(BodyHandler.create());  \nrouter.get(<span class=\"hljs-string\">&quot;/api/v1.0/scores&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::getScores);  \nrouter.post(<span class=\"hljs-string\">&quot;/api/v1.0/scores&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::addGame);  \nrouter.put(<span class=\"hljs-string\">&quot;/api/v1.0/scores&quot;</span>).handler(<span class=\"hljs-keyword\">this</span>::setScore);  \n</code></pre><p>Then the HTTP server has to be cre­ated and linked with the router:</p><pre><code class=\"hljs language-java\">HttpServerOptions httpOptions = <span class=\"hljs-keyword\">new</span> HttpServerOptions();  \nserver = vertx.createHttpServer(httpOptions)  \n   .requestHandler(router::accept)  \n   .listen(httpPort);  \n</code></pre><p>And fi­nally the han­dlers which will be trig­gered for each API call have to be im­ple­mented as well. The full code is on <a href=\"https://github.com/scholzj/livescore-demo-vertx-http\">GitHub</a>.</p><p><img src=\"/images/blog/services-and-apis-with-amqp/HTTP-API.png\"/></p><p>The HTTP API doesn’t pro­vide any way how to au­to­mat­i­cally push the score up­dates to the clients. The clients sim­ply have to poll the ser­vice pe­ri­od­i­cally to get the up­dates. HTTP has of course some ways how to push live up­dates to clients. For ex­am­ple, with Web­Sock­ets or with chun­ked trans­fers. How­ever, these are not that easy to im­ple­ment. The ser­vice would also need to keep sep­a­rate con­nec­tion with every client and push the up­dates for each of them sep­a­rately.</p><h2 id=\"amqp-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#amqp-api\"></a>AMQP API</h2><p>Cre­at­ing the HTTP API was re­ally easy. Cre­at­ing an AMQP API has to be more com­pli­cated, right? We would need an AMQP server, which will lis­ten on some port, ac­cept the con­nec­tions, ses­sions, links and so on. There are usu­ally no nice and sim­ple to use li­braries for this.</p><p>Sure, this is one way how to do it. There is ac­tu­ally a nice li­brary called <a href=\"http://qpid.apache.org/proton/index.html\">Apache Qpid Pro­ton</a>. It has Java and C ver­sions and bind­ings into many other lan­guages (Go, C++, Python, …). It makes cre­at­ing your own AMQP server lot eas­ier. It will take care of de­cod­ing and en­cod­ing the AMQP pro­to­col, han­dling the con­nec­tions, ses­sions etc. But still, Qpid Pro­ton is not even nearly as easy to use as the HTTP router used for the HTTP API.</p><p><img src=\"/images/blog/services-and-apis-with-amqp/AMQP-Server-API.png\" alt=\"API with AMQP server\"/></p><p>Are there any eas­ier op­tions? What if all what is needed to cre­ate AMQP based API is a sim­ple AMQP client? Nor­mally, that should not be a pos­si­ble be­cause we need the API to lis­ten on some port for the clients to con­nect to it and send re­quests. And clients usu­ally don’t lis­ten on any ports. How­ever, Apache Qpid has some­thing called <a href=\"http://qpid.apache.org/components/dispatch-router/index.html\">Dis­patch</a>. It works as a light­weight AMQP router. Dis­patch will serve as the AMQP server which was miss­ing. It will take care of han­dling client con­nec­tions, se­cu­rity and shield the ser­vice from the ac­tual clients. All the ser­vice needs to do is to use AMQP client to con­nect to Dis­patch on pre­de­fined ad­dress and wait for the re­quest.</p><p><img src=\"/images/blog/services-and-apis-with-amqp/AMQP-API.png\" alt=\"AMQP API with Dispatch router\"/></p><p>Dis­patch needs to be con­fig­ured with three API entry points as ad­dresses:</p><pre><code class=\"hljs language-text\">address {  \n    prefix: /setScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /getScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /addGame  \n    distribution: balanced  \n}  \n</code></pre><p>LiveScore ser­vice will con­nect to these ad­dresses as a re­ceiver / con­sumer. Clients will con­nect to them as senders  /pro­duc­ers. And Dis­patch will take care of rout­ing the mes­sages be­tween the clients and the ser­vice. Clients can also cre­ate ad­di­tional re­ceivers so that the ser­vice is able to re­spond to their re­quests and spec­ify the ad­dress of the re­ceiver as the reply-​to header in the re­quest mes­sage. LiveScore ser­vice will au­to­mat­i­cally send the re­sponse to this ad­dress. But spec­i­fy­ing a reply-​to is not manda­tory. If the client wants, it can sim­ply fire the re­quest and for­get about the re­sponse.</p><p>LiveScore ser­vice is using Vert.x AMQP Bridge which al­lows easy in­te­gra­tion be­tween the Vert.x Event Bus and the AMQP con­nec­tion to my router. The ser­vice starts the AMQP Bridge and if it suc­cess­fully con­nects to Dis­patch it cre­ates three re­ceivers for the API calls.</p><pre><code class=\"hljs language-java\">AmqpBridgeOptions options = <span class=\"hljs-keyword\">new</span> AmqpBridgeOptions().addEnabledSaslMechanism(<span class=\"hljs-string\">&quot;ANONYMOUS&quot;</span>);  \nbridge = AmqpBridge.create(vertx, options);  \nbridge.start(amqpHostname, amqpPort, res -&gt; {  \n   <span class=\"hljs-keyword\">if</span> (res.succeeded())  \n   {  \n     bridge.createConsumer(<span class=\"hljs-string\">&quot;/setScore&quot;</span>).setMaxBufferedMessages(<span class=\"hljs-number\">100</span>).handler(<span class=\"hljs-keyword\">this</span>::setScore);  \n     bridge.createConsumer(<span class=\"hljs-string\">&quot;/getScores&quot;</span>).setMaxBufferedMessages(<span class=\"hljs-number\">100</span>).handler(<span class=\"hljs-keyword\">this</span>::getScores);  \n     bridge.createConsumer(<span class=\"hljs-string\">&quot;/addGame&quot;</span>).setMaxBufferedMessages(<span class=\"hljs-number\">100</span>).handler(<span class=\"hljs-keyword\">this</span>::addGame);  \n     fut.complete();  \n   }  \n   <span class=\"hljs-keyword\">else</span>  \n   {  \n     fut.fail(res.cause());  \n   }  \n});  \n</code></pre><p>The only other thing which needs to be done is cre­at­ing han­dlers for han­dling the re­quests re­ceived from clients:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getScores</span><span class=\"hljs-params\">(Message&lt;Object&gt; msg)</span>  \n</span>{  \n   <span class=\"hljs-keyword\">if</span>(msg.replyAddress() != <span class=\"hljs-keyword\">null</span>)  \n   {  \n     JsonObject response = <span class=\"hljs-keyword\">new</span> JsonObject();  \n     response.put(<span class=\"hljs-string\">&quot;application_properties&quot;</span>, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;status&quot;</span>, <span class=\"hljs-number\">200</span>));  \n     response.put(<span class=\"hljs-string\">&quot;body&quot;</span>, <span class=\"hljs-keyword\">new</span> JsonArray(Json.encode(scoreService.getScores())).encode());  \n     msg.reply(response);  \n   }  \n   <span class=\"hljs-keyword\">else</span>  \n   {  \n     LOG.warn(<span class=\"hljs-string\">&quot;Received LiveScore/getScores request without reply to address&quot;</span>);  \n   }  \n}  \n</code></pre><p>Live broad­cast­ing of score up­dates is also very easy. New ad­dress has to be added into Dis­patch con­fig­u­ra­tion. This ad­dress will be used in op­po­site di­rec­tion. the ser­vice con­nects to it as sender / pro­ducer and clients which want to re­ceive the live up­dates cre­ate a re­ceiver against this ad­dress. What is im­por­tant, this ad­dress has to be marked as mul­ti­cast. Thanks to that every sin­gle mes­sage will be de­liv­ered to all con­nected clients and not just to one of them:</p><pre><code class=\"hljs language-text\">address {  \n    prefix: /liveScores  \n    distribution: multicast  \n}  \n</code></pre><p><img src=\"/images/blog/services-and-apis-with-amqp/AMQP-API-multicast.png\" alt=\"Multicasting messages\"/></p><p>Thanks to the mul­ti­cast dis­tri­b­u­tion, the ser­vice doesn’t need to send a sep­a­rate up­date to every sin­gle client. It sends the mes­sage only once and dis­patch takes care of the rest.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">broadcastUpdates</span><span class=\"hljs-params\">(Game game)</span>  \n</span>{  \n   LOG.info(<span class=\"hljs-string\">&quot;Broadcasting game update &quot;</span> + game);  \n   JsonObject message = <span class=\"hljs-keyword\">new</span> JsonObject();  \n   message.put(<span class=\"hljs-string\">&quot;body&quot;</span>, <span class=\"hljs-keyword\">new</span> JsonObject(Json.encode(game)).encode());  \n   producer.send(message);  \n} \n</code></pre><p>Again, the com­plete source codes of the demo ser­vice are avail­able on <a href=\"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge\">GitHub</a>.</p><h2 id=\"how-to-structure-amqp-apis\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#how-to-structure-amqp-apis\"></a>How to structure AMQP APIs?</h2><p>Com­pared to HTTP and REST, AMQP gives its users a lot more free­dom when de­sign­ing the API. It isn’t tied up by the avail­able HTTP meth­ods.</p><p>My LiveScore ser­vice is using the API end­points named ac­cord­ing to their func­tion:</p><ul><li>/LiveScore/ad­dGame</li><li>/LiveScore/setScore</li><li>/LiveScore/getScores\nIt also uses HTTP sta­tus codes in ap­pli­ca­tion prop­er­ties of the dif­fer­ent mes­sages to de­scribe the re­sult of the re­quest and JSON as the mes­sage pay­load with the ac­tual re­quest and re­sponse.</li></ul><p>Is that the best way? To be hon­est, I don’t know. Just for the re­quest en­cod­ing there are many dif­fer­ent op­tions. AMQP has its own en­cod­ings which sup­ports all pos­si­ble basic as well as more ad­vanced data types and struc­tures. But AMQP can also trans­fer any opaque data - be it JSON, XML, Google Pro­to­col Buffers or any­thing else. For sim­ple re­quest, the pay­load can be com­pletely skipped and ap­pli­ca­tion prop­er­ties can be used in­stead. And for every­one who re­ally loves HTTP/REST, one can also model the API in REST style as I did in an <a href=\"https://github.com/scholzj/livescore-demo-vertx-amqp-bridge-rest-style\">al­ter­na­tive im­ple­men­ta­tion</a> of my demo ser­vice.</p><h2 id=\"browser\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#browser\"></a>Browser</h2><p>One of the en­vi­ron­ments where HTTP is so to say “at home” is browser. AMQP will prob­a­bly never be as “na­tive” pro­to­col for any browser as HTTP is. How­ever AMQP can be used even from browsers. It has Web­Socket bind­ing and there are Javascript AMQP li­braries - for ex­am­ple rhea. So AMQP can be also used re­ally every­where.</p><h2 id=\"decoupling\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#decoupling\"></a>Decoupling</h2><p>It is im­por­tant to men­tion that the Dis­patch router doesn’t de­cou­ple the client from the ser­vice. If de­cou­pling is what is needed, it can be eas­ily achieved by re­plac­ing the Dis­patch router with some AMQP bro­ker. The bro­ker would de­cou­ple the client from the ser­vice with­out any changes in the ser­vice or clients.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>While cre­at­ing APIs using AMQP can be very easy, it doesn’t mean that AMQP is the best pro­to­col for all APIs. There are def­i­nitely APIs where HTTP is more suit­able. But in some use cases, AMQP has clear ad­van­tages. In my LiveScore ex­am­ple it is es­pe­cially one to many com­mu­ni­ca­tion. It is im­por­tant to keep the mind open and se­lect the best avail­able for given ser­vice.</p>","scope":{}},"tfIdfTerms":[{"term":"amqp","tf":29},{"term":"api","tf":28},{"term":"servic","tf":22},{"term":"client","tf":22},{"term":"http","tf":18},{"term":"us","tf":16},{"term":"will","tf":14},{"term":"creat","tf":13},{"term":"connect","tf":12},{"term":"request","tf":11},{"term":"not","tf":10},{"term":"need","tf":10},{"term":"updat","tf":10},{"term":"dispatch","tf":10},{"term":"livescor","tf":9},{"term":"address","tf":9},{"term":"rest","tf":8},{"term":"score","tf":8},{"term":"on","tf":7},{"term":"easi","tf":7},{"term":"router","tf":7},{"term":"receiv","tf":7},{"term":"call","tf":6},{"term":"messag","tf":6},{"term":"implement","tf":5}]},{"filename":"blog/2016-12-29-internet-of-things-reactive-and-asynchronous-with-vert-x.mdx","date":"2016-12-29","slug":"internet-of-things-reactive-and-asynchronous-with-vert-x","meta":{"title":"Internet of Things - Reactive and Asynchronous with Vert.x","category":"guides","authors":[{"name":"Paolo Patierno","github_id":"ppatierno"}],"summary":"I have to admit … before joining Red Hat I didn’t know about the Eclipse Vert.x project but it took me few days to fall in love with it!"},"readingTime":{"text":"4 min read","minutes":3.68,"time":220800,"words":736},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-iot/vertx-iot.png\",\n    \"alt\": \"Vert.x IoT\"\n  }))), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"This is a re-\\u200Bpublication of the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://paolopatierno.wordpress.com/2016/12/27/internet-of-things-reactive-and-asynchronous-with-vert-x/\"\n  }), \"blog post\"), \".\")), mdx(\"p\", null, \"I have to admit \\u2026 be\\xADfore join\\xADing Red Hat I didn\\u2019t know about the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Eclipse Vert.x\")), \" project but it took me few days to fall in love with it!\"), mdx(\"p\", null, \"For the other de\\xADvel\\xADop\\xADers who don\\u2019t know what Vert.x is, the best de\\xADf\\xADi\\xADn\\xADi\\xADtion is \\u2026\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u2026 a toolkit to build dis\\xADtrib\\xADuted and re\\xADac\\xADtive sys\\xADtems on top of the JVM using an asyn\\xADchro\\xADnous non block\\xADing de\\xADvel\\xADop\\xADment model\")), mdx(\"p\", null, \"The first big thing is re\\xADlated to de\\xADvelop a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADac\\xADtive\"), \" sys\\xADtem using Vert.x which means :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Re\\xADspon\\xADsive\"), \" : the sys\\xADtem re\\xADsponds in an ac\\xADcept\\xADable time;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Elas\\xADtic\"), \" : the sys\\xADtem can scale up and scale down;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Re\\xADsilient\"), \" : the sys\\xADtem is de\\xADsigned to han\\xADdle fail\\xADures grace\\xADfully;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Asyn\\xADchro\\xADnous\"), \" : the in\\xADter\\xADac\\xADtion with the sys\\xADtem is achieved using asyn\\xADchro\\xADnous mes\\xADsages;\")), mdx(\"p\", null, \"The other big thing is re\\xADlated to use an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asyn\\xADchro\\xADnous non block\\xADing\"), \" de\\xADvel\\xADop\\xADment model which doesn\\u2019t mean to be multi-\\u200Bthreading but thanks to the non block\\xADing I/O (i.e. for han\\xADdling net\\xADwork, file sys\\xADtem, \\u2026) and call\\xADbacks sys\\xADtem, it\\u2019s pos\\xADsi\\xADble to han\\xADdle a huge num\\xADbers of events per sec\\xADond using a sin\\xADgle thread (aka \\u201Cevent loop\\u201D).\"), mdx(\"p\", null, \"You can find a lot of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/materials/\"\n  }), \"ma\\xADte\\xADr\\xADial\"), \" on the of\\xADfi\\xADcial web site in order to bet\\xADter un\\xADder\\xADstand what Vert.x is and all its main fea\\xADtures; it\\u2019s not my ob\\xADjec\\xADtive to ex\\xADplain it in this very short ar\\xADti\\xADcle that is mostly \\u2026 you guess \\u2026 mes\\xADsag\\xADing and IoT ori\\xADented  :-)\"), mdx(\"p\", null, \"In my opin\\xADion, all the above fea\\xADtures make Vert.x a great toolkit for build\\xADing In\\xADter\\xADnet of Things ap\\xADpli\\xADca\\xADtions where being re\\xADac\\xADtive and asyn\\xADchro\\xADnous is a \\u201Cmust\\u201D in order to han\\xADdle mil\\xADlions of con\\xADnec\\xADtions from de\\xADvices and all the mes\\xADsages in\\xADgested from them.\"), mdx(\"h2\", {\n    \"id\": \"vertx-and-the-internet-of-things\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-and-the-internet-of-things\"\n  })), \"Vert.x and the Internet of Things\"), mdx(\"p\", null, \"As a toolkit, so made of dif\\xADfer\\xADent com\\xADpo\\xADnents, what are the ones pro\\xADvided by Vert.x and use\\xADful to IoT?\"), mdx(\"p\", null, \"Start\\xADing from the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/eclipse/vert.x\"\n  }), \"Core\"), \" com\\xADpo\\xADnent, there is sup\\xADport for both ver\\xADsions of HTTP pro\\xADto\\xADcol so 1.1 and 2.0 in order to de\\xADvelop an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients\"\n  }), \"HTTP server\"), \" which can ex\\xADpose a REST\\xADful API to the de\\xADvices. Today , a lot of web and mo\\xADbile de\\xADvel\\xADop\\xADers pre\\xADfer to use this pro\\xADto\\xADcol for build\\xADing their IoT so\\xADlu\\xADtion lever\\xADag\\xADing on the deep knowl\\xADedge they have about the HTTP pro\\xADto\\xADcol.\"), mdx(\"p\", null, \"Re\\xADgard\\xADing more IoT ori\\xADented pro\\xADto\\xADcols, there is the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-mqtt-server\"\n  }), \"MQTT server\"), \" com\\xADpo\\xADnent which doesn\\u2019t pro\\xADvide a full bro\\xADker but ex\\xADposes an API that a de\\xADvel\\xADoper can use in order to han\\xADdle in\\xADcom\\xADing con\\xADnec\\xADtions and mes\\xADsages from re\\xADmote MQTT clients and then build\\xADing the busi\\xADness logic on top of it, so for ex\\xADam\\xADple de\\xADvel\\xADop\\xADing a real bro\\xADker or ex\\xADe\\xADcut\\xADing pro\\xADto\\xADcol trans\\xADla\\xADtion (i.e. to/from plain TCP,to/from the Vert.x Event Bus,to/from HTTP,to/from AMQP and so on). The API raises all events re\\xADlated to the con\\xADnec\\xADtion re\\xADquest from a re\\xADmote MQTT client and all sub\\xADse\\xADquent in\\xADcom\\xADing mes\\xADsages; at same time, the API pro\\xADvides the way to reply to the re\\xADmote end\\xADpoint. The de\\xADvel\\xADoper doesn\\u2019t need to know how MQTT works on the wire in terms of en\\xADcod\\xADing/de\\xADcod\\xADing mes\\xADsages.\"), mdx(\"p\", null, \"Re\\xADlated to the AMQP 1.0 pro\\xADto\\xADcol there are the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-proton\"\n  }), \"Pro\\xADton\"), \" and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-amqp-bridge\"\n  }), \"AMQP bridge\"), \" com\\xADpo\\xADnents. The first one pro\\xADvides a thin wrap\\xADper around the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://qpid.apache.org/\"\n  }), \"Apache Qpid\"), \" Pro\\xADton en\\xADgine and can be used for in\\xADter\\xADact\\xADing with AMQP based mes\\xADsag\\xADing sys\\xADtems as clients (sender and re\\xADceiver) but even de\\xADvel\\xADop\\xADing a server. The last one pro\\xADvides a bridge be\\xADtween the pro\\xADto\\xADcol and the Vert.x Event Bus mostly used for com\\xADmu\\xADni\\xADca\\xADtion be\\xADtween de\\xADployed Vert.x ver\\xADti\\xADcles. Thanks to this bridge, ver\\xADti\\xADcles can in\\xADter\\xADact with AMQP com\\xADpo\\xADnents in a sim\\xADple way.\"), mdx(\"p\", null, \"Last but not least, the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-kafka-client\"\n  }), \"Kafka client\"), \" com\\xADpo\\xADnent which pro\\xADvides ac\\xADcess to Apache Kafka for send\\xADing and con\\xADsum\\xADing mes\\xADsages from top\\xADics and re\\xADlated par\\xADti\\xADtions. A lot of IoT sce\\xADnar\\xADios lever\\xADage on Apache Kafka in order to have an in\\xADges\\xADtion sys\\xADtem ca\\xADpa\\xADble of han\\xADdling mil\\xADlion mes\\xADsages per sec\\xADond.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"The cur\\xADrent Vert.x code base pro\\xADvides quite in\\xADter\\xADest\\xADing com\\xADpo\\xADnents for de\\xADvel\\xADop\\xADing IoT so\\xADlu\\xADtions which are al\\xADready avail\\xADable in the cur\\xADrent 3.3.3 ver\\xADsion (see Vert.x Pro\\xADton and AMQP bridge) and that will be avail\\xADable soon in the fu\\xADture 3.4.0 ver\\xADsion (see MQTT server and Kafka client). Of course, you don\\u2019t need to wait for their of\\xADfi\\xADcial re\\xADlease be\\xADcause, even if under de\\xADvel\\xADop\\xADment, you can al\\xADready adopt these com\\xADpo\\xADnents and pro\\xADvide your feed\\xADback to the com\\xADmu\\xADnity.\"), mdx(\"p\", null, \"This ecosys\\xADtem will grow in the fu\\xADture and Vert.x will be a lead\\xADing actor in the IoT ap\\xADpli\\xADca\\xADtions world based on a mi\\xADcroser\\xADvices ar\\xADchi\\xADtec\\xADture!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><img src=\"/images/blog/vertx-iot/vertx-iot.png\" alt=\"Vert.x IoT\"/></p><div class=\"alert info\"><p>This is a re-​publication of the fol­low­ing <a href=\"https://paolopatierno.wordpress.com/2016/12/27/internet-of-things-reactive-and-asynchronous-with-vert-x/\">blog post</a>.</p></div><p>I have to admit … be­fore join­ing Red Hat I didn’t know about the <a href=\"http://vertx.io/\"><em>Eclipse Vert.x</em></a> project but it took me few days to fall in love with it!</p><p>For the other de­vel­op­ers who don’t know what Vert.x is, the best de­f­i­n­i­tion is …</p><blockquote><p>… a toolkit to build dis­trib­uted and re­ac­tive sys­tems on top of the JVM using an asyn­chro­nous non block­ing de­vel­op­ment model</p></blockquote><p>The first big thing is re­lated to de­velop a <em>re­ac­tive</em> sys­tem using Vert.x which means :</p><ul><li><em>Re­spon­sive</em> : the sys­tem re­sponds in an ac­cept­able time;</li><li><em>Elas­tic</em> : the sys­tem can scale up and scale down;</li><li><em>Re­silient</em> : the sys­tem is de­signed to han­dle fail­ures grace­fully;</li><li><em>Asyn­chro­nous</em> : the in­ter­ac­tion with the sys­tem is achieved using asyn­chro­nous mes­sages;</li></ul><p>The other big thing is re­lated to use an <em>asyn­chro­nous non block­ing</em> de­vel­op­ment model which doesn’t mean to be multi-​threading but thanks to the non block­ing I/O (i.e. for han­dling net­work, file sys­tem, …) and call­backs sys­tem, it’s pos­si­ble to han­dle a huge num­bers of events per sec­ond using a sin­gle thread (aka “event loop”).</p><p>You can find a lot of <a href=\"http://vertx.io/materials/\">ma­te­r­ial</a> on the of­fi­cial web site in order to bet­ter un­der­stand what Vert.x is and all its main fea­tures; it’s not my ob­jec­tive to ex­plain it in this very short ar­ti­cle that is mostly … you guess … mes­sag­ing and IoT ori­ented  :-)</p><p>In my opin­ion, all the above fea­tures make Vert.x a great toolkit for build­ing In­ter­net of Things ap­pli­ca­tions where being re­ac­tive and asyn­chro­nous is a “must” in order to han­dle mil­lions of con­nec­tions from de­vices and all the mes­sages in­gested from them.</p><h2 id=\"vertx-and-the-internet-of-things\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-and-the-internet-of-things\"></a>Vert.x and the Internet of Things</h2><p>As a toolkit, so made of dif­fer­ent com­po­nents, what are the ones pro­vided by Vert.x and use­ful to IoT?</p><p>Start­ing from the Vert.x <a href=\"https://github.com/eclipse/vert.x\">Core</a> com­po­nent, there is sup­port for both ver­sions of HTTP pro­to­col so 1.1 and 2.0 in order to de­velop an <a href=\"http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients\">HTTP server</a> which can ex­pose a REST­ful API to the de­vices. Today , a lot of web and mo­bile de­vel­op­ers pre­fer to use this pro­to­col for build­ing their IoT so­lu­tion lever­ag­ing on the deep knowl­edge they have about the HTTP pro­to­col.</p><p>Re­gard­ing more IoT ori­ented pro­to­cols, there is the Vert.x <a href=\"https://github.com/vert-x3/vertx-mqtt-server\">MQTT server</a> com­po­nent which doesn’t pro­vide a full bro­ker but ex­poses an API that a de­vel­oper can use in order to han­dle in­com­ing con­nec­tions and mes­sages from re­mote MQTT clients and then build­ing the busi­ness logic on top of it, so for ex­am­ple de­vel­op­ing a real bro­ker or ex­e­cut­ing pro­to­col trans­la­tion (i.e. to/from plain TCP,to/from the Vert.x Event Bus,to/from HTTP,to/from AMQP and so on). The API raises all events re­lated to the con­nec­tion re­quest from a re­mote MQTT client and all sub­se­quent in­com­ing mes­sages; at same time, the API pro­vides the way to reply to the re­mote end­point. The de­vel­oper doesn’t need to know how MQTT works on the wire in terms of en­cod­ing/de­cod­ing mes­sages.</p><p>Re­lated to the AMQP 1.0 pro­to­col there are the Vert.x <a href=\"https://github.com/vert-x3/vertx-proton\">Pro­ton</a> and the <a href=\"https://github.com/vert-x3/vertx-amqp-bridge\">AMQP bridge</a> com­po­nents. The first one pro­vides a thin wrap­per around the <a href=\"http://qpid.apache.org/\">Apache Qpid</a> Pro­ton en­gine and can be used for in­ter­act­ing with AMQP based mes­sag­ing sys­tems as clients (sender and re­ceiver) but even de­vel­op­ing a server. The last one pro­vides a bridge be­tween the pro­to­col and the Vert.x Event Bus mostly used for com­mu­ni­ca­tion be­tween de­ployed Vert.x ver­ti­cles. Thanks to this bridge, ver­ti­cles can in­ter­act with AMQP com­po­nents in a sim­ple way.</p><p>Last but not least, the Vert.x <a href=\"https://github.com/vert-x3/vertx-kafka-client\">Kafka client</a> com­po­nent which pro­vides ac­cess to Apache Kafka for send­ing and con­sum­ing mes­sages from top­ics and re­lated par­ti­tions. A lot of IoT sce­nar­ios lever­age on Apache Kafka in order to have an in­ges­tion sys­tem ca­pa­ble of han­dling mil­lion mes­sages per sec­ond.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>The cur­rent Vert.x code base pro­vides quite in­ter­est­ing com­po­nents for de­vel­op­ing IoT so­lu­tions which are al­ready avail­able in the cur­rent 3.3.3 ver­sion (see Vert.x Pro­ton and AMQP bridge) and that will be avail­able soon in the fu­ture 3.4.0 ver­sion (see MQTT server and Kafka client). Of course, you don’t need to wait for their of­fi­cial re­lease be­cause, even if under de­vel­op­ment, you can al­ready adopt these com­po­nents and pro­vide your feed­back to the com­mu­nity.</p><p>This ecosys­tem will grow in the fu­ture and Vert.x will be a lead­ing actor in the IoT ap­pli­ca­tions world based on a mi­croser­vices ar­chi­tec­ture!</p>","scope":{}},"tfIdfTerms":[{"term":"develop","tf":12},{"term":"system","tf":10},{"term":"us","tf":10},{"term":"messag","tf":9},{"term":"compon","tf":8},{"term":"provid","tf":8},{"term":"iot","tf":7},{"term":"protocol","tf":7},{"term":"handl","tf":6},{"term":"amqp","tf":6},{"term":"asynchron","tf":5},{"term":"relat","tf":5},{"term":"event","tf":5},{"term":"order","tf":5},{"term":"mqtt","tf":5},{"term":"client","tf":5},{"term":"build","tf":4},{"term":"thing","tf":4},{"term":"http","tf":4},{"term":"server","tf":4},{"term":"api","tf":4},{"term":"bridg","tf":4},{"term":"kafka","tf":4},{"term":"know","tf":3},{"term":"toolkit","tf":3}]},{"filename":"blog/2016-12-07-getting-started-with-new-fabric8-vert-x-maven-plugin.mdx","date":"2016-12-07","slug":"getting-started-with-new-fabric8-vert-x-maven-plugin","meta":{"title":"Getting started with new fabric8 Vert.x Maven Plugin","category":"guides","authors":[{"name":"Kamesh Sampath","github_id":"kameshsampath"}],"summary":"The all new fabric8 Vert.x Maven Plugin allows you to setup, package, run, start, stop and redeploy easily with a very little configuration resulting in a less verbose pom.xml."},"readingTime":{"text":"5 min read","minutes":4.455,"time":267300,"words":891},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The all new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \" al\\xADlows you to setup, pack\\xADage, run, start, stop and re\\xADde\\xADploy eas\\xADily with a very lit\\xADtle con\\xADfig\\xADu\\xADra\\xADtion re\\xADsult\\xADing in a less ver\\xADbose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \".\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"The plug\\xADin is de\\xADvel\\xADoped under the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fabric8.io/\"\n  }), \"fab\\xADric8\"), \" um\\xADbrella.\")), mdx(\"p\", null, \"Tra\\xADdi\\xADtion\\xADally Vert.x ap\\xADpli\\xADca\\xADtions using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" need to have one or more of the fol\\xADlow\\xADing plu\\xADg\\xADins:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://maven.apache.org/plugins/maven-shade-plugin/\"\n  }), \"Maven Shade Plu\\xADgin\"), \" - aids in pack\\xADag\\xADing a uber jar of Vert.x ap\\xADpli\\xADca\\xADtion with ad\\xADdi\\xADtional con\\xADfig\\xADu\\xADra\\xADtions to per\\xADform SPI com\\xADbin\\xADing, MAN\\xADI\\xADFEST.MF en\\xADtries etc.,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.mojohaus.org/exec-maven-plugin/\"\n  }), \"Maven Exec Plu\\xADgin\"), \" - aids in start\\xADing the Vert.x ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://maven.apache.org/plugins/maven-ant-plugin/\"\n  }), \"Maven Ant Plu\\xADgin\"), \" - aids in stop\\xADping the run\\xADning Vert.x ap\\xADpli\\xADca\\xADtion\")), mdx(\"p\", null, \"Though these are great plu\\xADg\\xADins and do what is re\\xADquired, but at the end of the day the de\\xADvel\\xADoper is left with a ver\\xADbose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" which might be\\xADcome harder to main\\xADtain as the ap\\xADpli\\xADca\\xADtion or its con\\xADfig\\xADu\\xADra\\xADtion grows. Even if we de\\xADcide to go this way and use those plu\\xADg\\xADins, there are some things which can\\u2019t done or done eas\\xADily:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run\"), \" an ap\\xADpli\\xADca\\xADtion on fore\\xADground - which is a typ\\xADi\\xADcal way dur\\xADing de\\xADvel\\xADop\\xADment where the ap\\xADpli\\xADca\\xADtion starts in fore\\xADground of \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" build and killed au\\xADto\\xADmat\\xADi\\xADcally once we hit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + c\"), \"(or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CMD + c\"), \" on Mac)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"redeploy\"), \" is one of the coolest fea\\xADture of Vert.x al\\xADlow\\xADing us to per\\xADform hot de\\xADploy\\xADments. Still we can man\\xADage to do this with IDE sup\\xADport but not na\\xADtively using \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" - typ\\xADi\\xADcal cases where we dis\\xADable \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Au\\xADto\\xADmatic Builds\"), \" via IDE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setup\"), \" Vert.x ap\\xADpli\\xADca\\xADtions with sen\\xADsi\\xADble de\\xADfaults and re\\xADquired Vert.x de\\xADpen\\xADden\\xADcies e.g. vertx-\\u200Bcore\")), mdx(\"p\", null, \"In this first blog of fab\\xADric8 Vert.x Maven Plu\\xADgin se\\xADries we will help you to get started with this new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \", high\\xADlight\\xADing how this plug\\xADin helps al\\xADle\\xADvi\\xADat\\xADing the afore\\xADmen\\xADtioned pain points with a less ver\\xADbose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" plug\\xADin source code is avail\\xADable at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/fabric8io/vertx-maven-plugin\"\n  }), \"github\"), \" with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" plug\\xADin doc\\xADu\\xADmen\\xADta\\xADtion avail\\xADable at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\")), mdx(\"p\", null, \"The source code of the ex\\xADam\\xADples used in this blog are avail\\xADable at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kameshsampath/vmp-blog\"\n  }), \"github\")), mdx(\"h2\", {\n    \"id\": \"lets-set-it-up\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-set-it-up\"\n  })), \"Let\\u2019s set it up\"), mdx(\"p\", null, \"Its very easy to setup and get started. Let\\u2019s say you have a project called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vmp-\\u200Bblog\"), \" with the fol\\xADlow\\xADing con\\xADtent as part of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\")), mdx(Gist, {\n    url: \"https://gist.github.com/kameshsampath/0e0cfc90ea3cb9d69553ee9901dfd796\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"from the project di\\xADrec\\xADtory just run the fol\\xADlow\\xADing com\\xADmand:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn io.fabric8:vertx-maven-plugin:1.0.0:setup\\n\")), mdx(\"p\", null, \"On suc\\xADcess\\xADful ex\\xADe\\xADcu\\xADtion of the above com\\xADmand the project\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" will be up\\xADdated:\"), mdx(Gist, {\n    url: \"https://gist.github.com/kameshsampath/3c2e96d98f1e16d0f7a0501c05ce0d12\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"The com\\xADmand did the fol\\xADlow\\xADing for you on the project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"added cou\\xADple of prop\\xADer\\xADties\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fabric8.vertx.plugin.version\"), \" - the lat\\xADest fab\\xADric8 vert.x maven plug\\xADin ver\\xADsion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vertx.version\"), \" - the lat\\xADest Vert.x frame\\xADwork ver\\xADsion\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"added the Vert.x de\\xADpen\\xADdency BOM and vertx-\\u200Bcore de\\xADpen\\xADdency cor\\xADre\\xADspond\\xADing to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vertx.version\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"added \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"vertx-maven-plugin\"), \" with a sin\\xADgle ex\\xADe\\xADcu\\xADtion for goals \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://vmp.fabric8.io/#vertx:initalize\"\n  }), \"ini\\xADtial\\xADize\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://vmp.fabric8.io/#vertx:package\"\n  }), \"pack\\xADage\"))), mdx(\"p\", null, \"The source code cre\\xADated by this step is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kameshsampath/vmp-blog/tree/setup\"\n  }), \"here\")), mdx(\"p\", null, \"Et voil\\xE0, you are now all set to go with your Vert.x ap\\xADpli\\xADca\\xADtion build\\xADing with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \"!!\"), mdx(\"h2\", {\n    \"id\": \"lets-package-it\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-package-it\"\n  })), \"Let\\u2019s package it\"), mdx(\"p\", null, \"Now that we have set up our project to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-maven-plugin\"), \", lets add a sim\\xADple ver\\xADti\\xADcle and pack\\xADage the Vert.x ap\\xADpli\\xADca\\xADtion as typ\\xADi\\xADcal \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"uber\"), \" jar (in the Vert.x world we call them \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat\"), \" jars).  The source code of this sec\\xADtion is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kameshsampath/vmp-blog/tree/package\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"To make \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package\"), \" work cor\\xADrectly we need to add prop\\xADerty called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx.verticle\"), \", which will be used by the vertx-\\u200Bmaven-plugin to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main-Verticle:\"), \" at\\xADtribute of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MANIFEST.MF\"), \".  Please refer to the doc\\xADu\\xADmen\\xADta\\xADtion of  \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vmp.fabric8.io/#vertx:package\"\n  }), \"pack\\xADage\"), \" for other pos\\xADsi\\xADble con\\xADfig\\xADu\\xADra\\xADtions.  There is also a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vmp.fabric8.io/#vertx:examples\"\n  }), \"ex\\xADam\\xADples\"), \" sec\\xADtion of the vertx-\\u200Bmaven-plugin which pro\\xADvides var\\xADi\\xADous sam\\xADples snip\\xADpets.\"), mdx(\"p\", null, \"The up\\xADdated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" with the added prop\\xADerty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-maven-plugin\"), \" is shown below:\"), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Only up\\xADdated sec\\xADtion is shown below, rest of the pom.xml is same as above\")), mdx(Gist, {\n    url: \"https://gist.github.com/kameshsampath/24a1ed6a377b118f06af2c4b4ddf0ca0\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"To pack\\xADage the Vert.x ap\\xADpli\\xADca\\xADtion, run the fol\\xADlow\\xADing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" com\\xADmand from the project di\\xADrec\\xADtory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"mvn clean package\\n\")), mdx(\"p\", null, \"On suc\\xADcess\\xADful run of the above com\\xADmand you should see the file with name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${project.finalName}.jar\"), \" cre\\xADated in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${project.build.directory}\"), \", you could now do the fol\\xADlow\\xADing to start and run the Vert.x ap\\xADpli\\xADca\\xADtion.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"java -jar \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${project.build.directory}\"), \"/\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${project.finalName}\"), \".jar\\n\")), mdx(\"p\", null, \"The gen\\xADer\\xADated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MANIFEST.MF\"), \" file is as shown below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Main-Class                               io.vertx.core.Launcher\\nMain-Verticle                            io.fabric8.blog.MainVerticle\\nManifest-Version                         1.0\\n\")), mdx(\"p\", null, \"The source code up to now is avail\\xADable in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kameshsampath/vmp-blog/tree/package\"\n  }), \"here\")), mdx(\"h3\", {\n    \"id\": \"spi-combination\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#spi-combination\"\n  })), \"SPI Combination\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package\"), \" goal by de\\xADfault does a SPI com\\xADbi\\xADna\\xADtion, lets say you have a ser\\xADvice file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"com.fasterxml.jackson.core.JsonFactory\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${project.basedir}/src/main/resources/META-INF/services\"), \" with con\\xADtents:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"foo.bar.baz.MyImpl\\n${combine}\\n\")), mdx(\"p\", null, \"Dur\\xADing pack\\xADag\\xADing, if the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \" finds an\\xADother \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"com.fasterxml.jackson.core.JsonFactory\"), \" ser\\xADvice de\\xADf\\xADi\\xADn\\xADi\\xADtion file within the project de\\xADpen\\xADden\\xADcies with con\\xADtent \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"foo.bar.baz2.My\\xADImpl2\"), \", then it merges the con\\xADtent into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"com.fasterxml.jackson.core.JsonFactory\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${project.basedir}/src/main/resources/META-INF/services\"), \", re\\xADsult\\xADing in the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"foo.bar.baz.MyImpl\\nfoo.bar.baz2.MyImpl2\\n\")), mdx(\"p\", null, \"The po\\xADsi\\xADtion of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${combine}\"), \" con\\xADtrols the or\\xADder\\xADing of the merge, since we added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${combine}\"), \" below \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"foo.bar.baz.My\\xADImpl\"), \" all other SPI de\\xADf\\xADi\\xADn\\xADi\\xADtions will be ap\\xADpended below \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"foo.bar.baz.My\\xADImpl\")), mdx(\"h2\", {\n    \"id\": \"whats-next-\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#whats-next-\"\n  })), \"What\\u2019s next ?\"), mdx(\"p\", null, \"It\\u2019s good to have the jar pack\\xADaged and run using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar uber-jar\"), \", but when doing typ\\xADi\\xADcal de\\xADvel\\xADop\\xADment you don\\u2019t  want to do fre\\xADquent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" pack\\xADag\\xADing and wish to see your changes au\\xADto\\xADmat\\xADi\\xADcally re\\xADde\\xADployed.\"), mdx(\"p\", null, \"Don\\u2019t worry!!! As part of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \" we have added the in\\xADcre\\xADmen\\xADtal builder to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://maven.apache.org\"\n  }), \"Apache Maven\"), \" build, which will watch for your source and re\\xADsource changes to per\\xADform au\\xADto\\xADmatic re-\\u200Bbuild and del\\xADe\\xADgate the re\\xADde\\xADploy\\xADment to Vert.x.\"), mdx(\"p\", null, \"Run, re\\xADde\\xADploy and other fea\\xADtures of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \" will be ex\\xADplored in de\\xADtail in the next part of this se\\xADries, until then have fun with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vmp.fabric8.io\"\n  }), \"fab\\xADric8 Vert.x Maven Plu\\xADgin\"), \"!!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>The all new <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a> al­lows you to setup, pack­age, run, start, stop and re­de­ploy eas­ily with a very lit­tle con­fig­u­ra­tion re­sult­ing in a less ver­bose <code>pom.xml</code>.</p><div class=\"alert info\"><p>The plug­in is de­vel­oped under the <a href=\"https://fabric8.io/\">fab­ric8</a> um­brella.</p></div><p>Tra­di­tion­ally Vert.x ap­pli­ca­tions using <a href=\"http://maven.apache.org\">Apache Maven</a> need to have one or more of the fol­low­ing plu­g­ins:</p><ul><li><a href=\"https://maven.apache.org/plugins/maven-shade-plugin/\">Maven Shade Plu­gin</a> - aids in pack­ag­ing a uber jar of Vert.x ap­pli­ca­tion with ad­di­tional con­fig­u­ra­tions to per­form SPI com­bin­ing, MAN­I­FEST.MF en­tries etc.,</li><li><a href=\"http://www.mojohaus.org/exec-maven-plugin/\">Maven Exec Plu­gin</a> - aids in start­ing the Vert.x ap­pli­ca­tion</li><li><a href=\"https://maven.apache.org/plugins/maven-ant-plugin/\">Maven Ant Plu­gin</a> - aids in stop­ping the run­ning Vert.x ap­pli­ca­tion</li></ul><p>Though these are great plu­g­ins and do what is re­quired, but at the end of the day the de­vel­oper is left with a ver­bose <code>pom.xml</code> which might be­come harder to main­tain as the ap­pli­ca­tion or its con­fig­u­ra­tion grows. Even if we de­cide to go this way and use those plu­g­ins, there are some things which can’t done or done eas­ily:</p><ul><li><code>run</code> an ap­pli­ca­tion on fore­ground - which is a typ­i­cal way dur­ing de­vel­op­ment where the ap­pli­ca­tion starts in fore­ground of <a href=\"http://maven.apache.org\">Apache Maven</a> build and killed au­to­mat­i­cally once we hit <code>Ctrl + c</code>(or <code>CMD + c</code> on Mac)</li><li><code>redeploy</code> is one of the coolest fea­ture of Vert.x al­low­ing us to per­form hot de­ploy­ments. Still we can man­age to do this with IDE sup­port but not na­tively using <a href=\"http://maven.apache.org\">Apache Maven</a> - typ­i­cal cases where we dis­able <em>Au­to­matic Builds</em> via IDE</li><li><code>setup</code> Vert.x ap­pli­ca­tions with sen­si­ble de­faults and re­quired Vert.x de­pen­den­cies e.g. vertx-​core</li></ul><p>In this first blog of fab­ric8 Vert.x Maven Plu­gin se­ries we will help you to get started with this new <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a>, high­light­ing how this plug­in helps al­le­vi­at­ing the afore­men­tioned pain points with a less ver­bose <code>pom.xml</code>.</p><p>The <a href=\"http://maven.apache.org\">Apache Maven</a> plug­in source code is avail­able at <a href=\"https://github.com/fabric8io/vertx-maven-plugin\">github</a> with <a href=\"http://maven.apache.org\">Apache Maven</a> plug­in doc­u­men­ta­tion avail­able at <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a></p><p>The source code of the ex­am­ples used in this blog are avail­able at <a href=\"https://github.com/kameshsampath/vmp-blog\">github</a></p><h2 id=\"lets-set-it-up\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-set-it-up\"></a>Let’s set it up</h2><p>Its very easy to setup and get started. Let’s say you have a project called <em>vmp-​blog</em> with the fol­low­ing con­tent as part of your <code>pom.xml</code></p><div>...waiting for Gist...</div><p>from the project di­rec­tory just run the fol­low­ing com­mand:</p><pre><code class=\"hljs language-bash\">mvn io.fabric8:vertx-maven-plugin:1.0.0:setup\n</code></pre><p>On suc­cess­ful ex­e­cu­tion of the above com­mand the project’s <code>pom.xml</code> will be up­dated:</p><div>...waiting for Gist...</div><p>The com­mand did the fol­low­ing for you on the project:</p><ul><li>added cou­ple of prop­er­ties<ul><li><code>fabric8.vertx.plugin.version</code> - the lat­est fab­ric8 vert.x maven plug­in ver­sion</li><li><code>vertx.version</code> - the lat­est Vert.x frame­work ver­sion</li></ul></li><li>added the Vert.x de­pen­dency BOM and vertx-​core de­pen­dency cor­re­spond­ing to <code>vertx.version</code></li><li>added <code>vertx-maven-plugin</code> with a sin­gle ex­e­cu­tion for goals <a href=\"https://vmp.fabric8.io/#vertx:initalize\">ini­tial­ize</a> and <a href=\"https://vmp.fabric8.io/#vertx:package\">pack­age</a></li></ul><p>The source code cre­ated by this step is avail­able <a href=\"https://github.com/kameshsampath/vmp-blog/tree/setup\">here</a></p><p>Et voilà, you are now all set to go with your Vert.x ap­pli­ca­tion build­ing with <a href=\"http://maven.apache.org\">Apache Maven</a>!!</p><h2 id=\"lets-package-it\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-package-it\"></a>Let’s package it</h2><p>Now that we have set up our project to use <code>vertx-maven-plugin</code>, lets add a sim­ple ver­ti­cle and pack­age the Vert.x ap­pli­ca­tion as typ­i­cal <em>uber</em> jar (in the Vert.x world we call them <em>fat</em> jars).  The source code of this sec­tion is avail­able <a href=\"https://github.com/kameshsampath/vmp-blog/tree/package\">here</a>.</p><p>To make <code>package</code> work cor­rectly we need to add prop­erty called <code>vertx.verticle</code>, which will be used by the vertx-​maven-plugin to set the <code>Main-Verticle:</code> at­tribute of the <code>MANIFEST.MF</code>.  Please refer to the doc­u­men­ta­tion of  <a href=\"https://vmp.fabric8.io/#vertx:package\">pack­age</a> for other pos­si­ble con­fig­u­ra­tions.  There is also a <a href=\"https://vmp.fabric8.io/#vertx:examples\">ex­am­ples</a> sec­tion of the vertx-​maven-plugin which pro­vides var­i­ous sam­ples snip­pets.</p><p>The up­dated <code>pom.xml</code> with the added prop­erty <code>vertx-maven-plugin</code> is shown below:</p><div class=\"alert info\"><p>Only up­dated sec­tion is shown below, rest of the pom.xml is same as above</p></div><div>...waiting for Gist...</div><p>To pack­age the Vert.x ap­pli­ca­tion, run the fol­low­ing <a href=\"http://maven.apache.org\">Apache Maven</a> com­mand from the project di­rec­tory:</p><pre><code class=\"hljs language-bash\">mvn clean package\n</code></pre><p>On suc­cess­ful run of the above com­mand you should see the file with name <code>${project.finalName}.jar</code> cre­ated in the <code>${project.build.directory}</code>, you could now do the fol­low­ing to start and run the Vert.x ap­pli­ca­tion.</p><pre><code class=\"hljs language-bash\">java -jar <span class=\"hljs-variable\">${project.build.directory}</span>/<span class=\"hljs-variable\">${project.finalName}</span>.jar\n</code></pre><p>The gen­er­ated <code>MANIFEST.MF</code> file is as shown below:</p><pre><code class=\"hljs language-text\">Main-Class                               io.vertx.core.Launcher\nMain-Verticle                            io.fabric8.blog.MainVerticle\nManifest-Version                         1.0\n</code></pre><p>The source code up to now is avail­able in <a href=\"https://github.com/kameshsampath/vmp-blog/tree/package\">here</a></p><h3 id=\"spi-combination\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#spi-combination\"></a>SPI Combination</h3><p>The <code>package</code> goal by de­fault does a SPI com­bi­na­tion, lets say you have a ser­vice file called <code>com.fasterxml.jackson.core.JsonFactory</code> in <code>${project.basedir}/src/main/resources/META-INF/services</code> with con­tents:</p><pre><code class=\"hljs language-text\">foo.bar.baz.MyImpl\n${combine}\n</code></pre><p>Dur­ing pack­ag­ing, if the <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a> finds an­other <code>com.fasterxml.jackson.core.JsonFactory</code> ser­vice de­f­i­n­i­tion file within the project de­pen­den­cies with con­tent <em>foo.bar.baz2.My­Impl2</em>, then it merges the con­tent into <code>com.fasterxml.jackson.core.JsonFactory</code> of <code>${project.basedir}/src/main/resources/META-INF/services</code>, re­sult­ing in the fol­low­ing con­tent:</p><pre><code class=\"hljs language-text\">foo.bar.baz.MyImpl\nfoo.bar.baz2.MyImpl2\n</code></pre><p>The po­si­tion of <code>${combine}</code> con­trols the or­der­ing of the merge, since we added <code>${combine}</code> below <em>foo.bar.baz.My­Impl</em> all other SPI de­f­i­n­i­tions will be ap­pended below <em>foo.bar.baz.My­Impl</em></p><h2 id=\"whats-next-\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#whats-next-\"></a>What’s next ?</h2><p>It’s good to have the jar pack­aged and run using <code>java -jar uber-jar</code>, but when doing typ­i­cal de­vel­op­ment you don’t  want to do fre­quent <a href=\"http://maven.apache.org\">Apache Maven</a> pack­ag­ing and wish to see your changes au­to­mat­i­cally re­de­ployed.</p><p>Don’t worry!!! As part of <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a> we have added the in­cre­men­tal builder to <a href=\"http://maven.apache.org\">Apache Maven</a> build, which will watch for your source and re­source changes to per­form au­to­matic re-​build and del­e­gate the re­de­ploy­ment to Vert.x.</p><p>Run, re­de­ploy and other fea­tures of the <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a> will be ex­plored in de­tail in the next part of this se­ries, until then have fun with <a href=\"http://vmp.fabric8.io\">fab­ric8 Vert.x Maven Plu­gin</a>!!</p>","scope":{}},"tfIdfTerms":[{"term":"maven","tf":23},{"term":"plugin","tf":21},{"term":"applic","tf":12},{"term":"fabric8","tf":10},{"term":"packag","tf":10},{"term":"apach","tf":9},{"term":"run","tf":8},{"term":"us","tf":8},{"term":"follow","tf":7},{"term":"project","tf":7},{"term":"start","tf":6},{"term":"will","tf":6},{"term":"sourc","tf":6},{"term":"avail","tf":6},{"term":"ad","tf":6},{"term":"build","tf":5},{"term":"code","tf":5},{"term":"let","tf":5},{"term":"content","tf":5},{"term":"command","tf":5},{"term":"configur","tf":4},{"term":"develop","tf":4},{"term":"jar","tf":4},{"term":"spi","tf":4},{"term":"typic","tf":4}]}],"numPages":16},"__N_SSG":true}