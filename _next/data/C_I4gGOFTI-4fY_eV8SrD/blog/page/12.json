{"pageProps":{"categories":["releases","guides","news"],"page":12,"posts":[{"filename":"blog/2016-07-12-vert-x-3-3-2-is-released.mdx","date":"2016-07-12","slug":"vert-x-3-3-2-is-released","meta":{"title":"Vert.x 3.3.2 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We have just released Vert.x 3.3.2, the first bug fix release of Vert.x 3.3.x."},"readingTime":{"text":"1 min read","minutes":0.69,"time":41400,"words":138},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have just re\\xADleased Vert.x 3.3.2, the first bug fix re\\xADlease of Vert.x 3.3.x.\"), mdx(\"p\", null, \"We have first re\\xADleased 3.3.1 that fixed a few bugs, but a cou\\xADple of new bugs were dis\\xADcov\\xADered after 3.3.1 was tagged but not an\\xADnounced, we de\\xADcided to re\\xADlease a 3.3.2 to fix the dis\\xADcov\\xADered bugs, as these bugs were pre\\xADvent\\xADing usage of Vert.x.\"), mdx(\"p\", null, \"Vert.x 3.3.1 re\\xADlease notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.3.1---Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.3.1-\\u200B\\u2014Release-Notes\"))), mdx(\"p\", null, \"Vert.x 3.3.2 re\\xADlease notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.3.2-Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.3.2-\\u200BRelease-Notes\"))), mdx(\"p\", null, \"These re\\xADleases do not con\\xADtain break\\xADing changes.\"), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Docker im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \". The Vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"Home\\xADBrew\"), \".\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.2%22\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.3.2/view\"\n  }), \"Bin\\xADtray\"), \".\"), mdx(\"p\", null, \"Happy cod\\xADing !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We have just re­leased Vert.x 3.3.2, the first bug fix re­lease of Vert.x 3.3.x.</p><p>We have first re­leased 3.3.1 that fixed a few bugs, but a cou­ple of new bugs were dis­cov­ered after 3.3.1 was tagged but not an­nounced, we de­cided to re­lease a 3.3.2 to fix the dis­cov­ered bugs, as these bugs were pre­vent­ing usage of Vert.x.</p><p>Vert.x 3.3.1 re­lease notes:</p><ul><li><a href=\"https://github.com/vert-x3/wiki/wiki/3.3.1---Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.3.1-​—Release-Notes</a></li></ul><p>Vert.x 3.3.2 re­lease notes:</p><ul><li><a href=\"https://github.com/vert-x3/wiki/wiki/3.3.2-Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.3.2-​Release-Notes</a></li></ul><p>These re­leases do not con­tain break­ing changes.</p><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Docker im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>. The Vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a> and <a href=\"http://brew.sh/\">Home­Brew</a>.</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.2%22\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.3.2/view\">Bin­tray</a>.</p><p>Happy cod­ing !</p>","scope":{}},"tfIdfTerms":[{"term":"releas","tf":9},{"term":"bug","tf":5},{"term":"http","tf":5},{"term":"note","tf":4},{"term":"com","tf":4},{"term":"wiki","tf":4},{"term":"fix","tf":3},{"term":"github","tf":3},{"term":"x3","tf":3},{"term":"avail","tf":3},{"term":"first","tf":2},{"term":"discov","tf":2},{"term":"not","tf":2},{"term":"bu","tf":2},{"term":"client","tf":2},{"term":"bower","tf":2},{"term":"webjar","tf":2},{"term":"www","tf":2},{"term":"docker","tf":2},{"term":"distribut","tf":2},{"term":"just","tf":1},{"term":"coupl","tf":1},{"term":"new","tf":1},{"term":"tag","tf":1},{"term":"announc","tf":1}]},{"filename":"blog/2016-06-24-vert-x-3-3-0-is-released.mdx","date":"2016-06-24","slug":"vert-x-3-3-0-is-released","meta":{"title":"Vert.x 3.3.0 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"That was a long run … but here we are. We are very pleased to announce the release of Vert.x 3.3.0!"},"readingTime":{"text":"3 min read","minutes":2.29,"time":137400,"words":458},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"That was a long run \\u2026 but here we are. We are very pleased to an\\xADnounce the re\\xADlease of Vert.x 3.3.0!\"), mdx(\"p\", null, \"This re\\xADlease is huge with lots of new fea\\xADtures, im\\xADprove\\xADments, and ob\\xADvi\\xADously bug fixes. We won\\u2019t de\\xADtail all the new fea\\xADtures here (some are high\\xADlighted below), and full re\\xADlease notes are avail\\xADable: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.3.0---Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.3.0-\\u200B\\u2014Release-Notes\")), mdx(\"p\", null, \"Break\\xADing changes are there: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.3.0---Breaking-Changes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.3.0-\\u200B\\u2014Breaking-Changes\"), \". Be sure to read them be\\xADfore mi\\xADgrat\\xADing.\"), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Docker im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \". The Vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"Home\\xADBrew\"), \".\"), mdx(\"p\", null, \"Let\\u2019s high\\xADlight some of the major fea\\xADtures shipped with this re\\xADlease.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vertx 3.3.0 is the first ver\\xADsion to sup\\xADport \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"HTTP2\"), \" (client and server). You can now con\\xADfig\\xADure HTTP servers and clients to use HTTP2. Proxy sup\\xADport for TCP and HTTP client has also been added.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This ver\\xADsion shows also the in\\xADtro\\xADduc\\xADtion of a bridge with \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Apache Camel\"), \". So, in\\xADte\\xADgrat\\xADing Vert.x ap\\xADpli\\xADca\\xADtions with legacy sys\\xADtems (using EIP) has never been so easy.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sev\\xADeral new com\\xADpo\\xADnents have been de\\xADvel\\xADoped to im\\xADple\\xADment microservice-\\u200Bbased ap\\xADpli\\xADca\\xADtions. First, a plug\\xADgable \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ser\\xADvice dis\\xADcov\\xADery\"), \" is now avail\\xADable. An im\\xADple\\xADmen\\xADta\\xADtion of the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"cir\\xADcuit breaker\"), \" pat\\xADtern has also been pro\\xADvided.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AMQP 1.0\"), \" sup\\xADport has been also in\\xADte\\xADgrated thanks to a bridge to send and re\\xADceive mes\\xADsages from AMQP. A client has also been shipped to in\\xADter\\xADact di\\xADrectly with an AMQP bro\\xADker or router.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"New met\\xADrics has also been in\\xADtro\\xADduced to ease the mon\\xADi\\xADtor\\xADing of run\\xADning ap\\xADpli\\xADca\\xADtions. For in\\xADstance, it\\u2019s now pos\\xADsi\\xADble to mon\\xADi\\xADtor the thread usage in the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"worker thread pool\"), \" and in the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"JDBC con\\xADnec\\xADtion pools\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With this ver\\xADsion, you can con\\xADfig\\xADure the TCP as\\xADpects of the event bus for, for in\\xADstance, use SSL. Also no\\xADtice a bridge be\\xADtween the  event bus of Vert.x 2 and  the one from Vert.x 3.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Most of the de\\xADliv\\xADered com\\xADpo\\xADnents are now de\\xADploy\\xADable in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"OSGi\"), \" en\\xADvi\\xADron\\xADments. So you can eas\\xADily in\\xADte\\xADgrate Vert.x in Apache Karaf, Ser\\xADvice Mix, or Apache Sling.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vert.x Unit us\\xADabil\\xADity has been greatly im\\xADproved. It is now pos\\xADsi\\xADble to write test using Ham\\xADcrest, As\\xADsertJ, Rest As\\xADsured, or any as\\xADser\\xADtion li\\xADbraries you want.\")), mdx(\"p\", null, \"Many thanks to all the com\\xADmit\\xADters and com\\xADmu\\xADnity whose con\\xADtri\\xADbu\\xADtions made this pos\\xADsi\\xADble, es\\xADpe\\xADcially to Alex Lehman, Paul Bakker, Rob\\xADbie Gem\\xADmel, Claus Ibsen, Michael Kre\\xADmer, and many many other!\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.0%22\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.3.0/view\"\n  }), \"Bin\\xADtray\"), \".\"), mdx(\"p\", null, \"Just a word about the fu\\xADture. As we did last, year, a poll will be or\\xADga\\xADnized in the next few weeks to col\\xADlect ideas and pri\\xADor\\xADi\\xADtize the Vert.x 3.4 and be\\xADyond roadmap. Stay tuned, we love hear\\xADing about your ideas and is\\xADsues.\"), mdx(\"p\", null, \"Happy cod\\xADing !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>That was a long run … but here we are. We are very pleased to an­nounce the re­lease of Vert.x 3.3.0!</p><p>This re­lease is huge with lots of new fea­tures, im­prove­ments, and ob­vi­ously bug fixes. We won’t de­tail all the new fea­tures here (some are high­lighted below), and full re­lease notes are avail­able: <a href=\"https://github.com/vert-x3/wiki/wiki/3.3.0---Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.3.0-​—Release-Notes</a></p><p>Break­ing changes are there: <a href=\"https://github.com/vert-x3/wiki/wiki/3.3.0---Breaking-Changes\">https://github.com/vert-​x3/wiki/wiki/3.3.0-​—Breaking-Changes</a>. Be sure to read them be­fore mi­grat­ing.</p><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Docker im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>. The Vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a> and <a href=\"http://brew.sh/\">Home­Brew</a>.</p><p>Let’s high­light some of the major fea­tures shipped with this re­lease.</p><ul><li>Vertx 3.3.0 is the first ver­sion to sup­port <strong>HTTP2</strong> (client and server). You can now con­fig­ure HTTP servers and clients to use HTTP2. Proxy sup­port for TCP and HTTP client has also been added.</li><li>This ver­sion shows also the in­tro­duc­tion of a bridge with <strong>Apache Camel</strong>. So, in­te­grat­ing Vert.x ap­pli­ca­tions with legacy sys­tems (using EIP) has never been so easy.</li><li>Sev­eral new com­po­nents have been de­vel­oped to im­ple­ment microservice-​based ap­pli­ca­tions. First, a plug­gable <strong>ser­vice dis­cov­ery</strong> is now avail­able. An im­ple­men­ta­tion of the <strong>cir­cuit breaker</strong> pat­tern has also been pro­vided.</li><li><strong>AMQP 1.0</strong> sup­port has been also in­te­grated thanks to a bridge to send and re­ceive mes­sages from AMQP. A client has also been shipped to in­ter­act di­rectly with an AMQP bro­ker or router.</li><li>New met­rics has also been in­tro­duced to ease the mon­i­tor­ing of run­ning ap­pli­ca­tions. For in­stance, it’s now pos­si­ble to mon­i­tor the thread usage in the <strong>worker thread pool</strong> and in the <strong>JDBC con­nec­tion pools</strong>.</li><li>With this ver­sion, you can con­fig­ure the TCP as­pects of the event bus for, for in­stance, use SSL. Also no­tice a bridge be­tween the  event bus of Vert.x 2 and  the one from Vert.x 3.</li><li>Most of the de­liv­ered com­po­nents are now de­ploy­able in <strong>OSGi</strong> en­vi­ron­ments. So you can eas­ily in­te­grate Vert.x in Apache Karaf, Ser­vice Mix, or Apache Sling.</li><li>Vert.x Unit us­abil­ity has been greatly im­proved. It is now pos­si­ble to write test using Ham­crest, As­sertJ, Rest As­sured, or any as­ser­tion li­braries you want.</li></ul><p>Many thanks to all the com­mit­ters and com­mu­nity whose con­tri­bu­tions made this pos­si­ble, es­pe­cially to Alex Lehman, Paul Bakker, Rob­bie Gem­mel, Claus Ibsen, Michael Kre­mer, and many many other!</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.3.0%22\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.3.0/view\">Bin­tray</a>.</p><p>Just a word about the fu­ture. As we did last, year, a poll will be or­ga­nized in the next few weeks to col­lect ideas and pri­or­i­tize the Vert.x 3.4 and be­yond roadmap. Stay tuned, we love hear­ing about your ideas and is­sues.</p><p>Happy cod­ing !</p>","scope":{}},"tfIdfTerms":[{"term":"http","tf":7},{"term":"client","tf":6},{"term":"releas","tf":5},{"term":"avail","tf":5},{"term":"us","tf":5},{"term":"new","tf":4},{"term":"com","tf":4},{"term":"wiki","tf":4},{"term":"bu","tf":4},{"term":"bridg","tf":4},{"term":"featur","tf":3},{"term":"github","tf":3},{"term":"x3","tf":3},{"term":"event","tf":3},{"term":"version","tf":3},{"term":"support","tf":3},{"term":"apach","tf":3},{"term":"integr","tf":3},{"term":"applic","tf":3},{"term":"amqp","tf":3},{"term":"possibl","tf":3},{"term":"run","tf":2},{"term":"improv","tf":2},{"term":"highlight","tf":2},{"term":"note","tf":2}]},{"filename":"blog/2016-03-30-vertx-3-and-keycloak-tutorial.mdx","date":"2016-03-30","slug":"vertx-3-and-keycloak-tutorial","meta":{"title":"Vertx 3 and Keycloak tutorial","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"With the upcoming release of Vert.x 3.3 securing your application with Keycloak is even easier than before."},"readingTime":{"text":"1 min read","minutes":0.685,"time":41100,"words":137},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With the up\\xADcom\\xADing re\\xADlease of Vert.x 3.3 se\\xADcur\\xADing your ap\\xADpli\\xADca\\xADtion with Key\\xADcloak is even eas\\xADier than be\\xADfore.\"), mdx(\"h2\", {\n    \"id\": \"about-keycloak\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#about-keycloak\"\n  })), \"About Keycloak\"), mdx(\"p\", null, \"Key\\xADcloak de\\xADscribes it\\xADself as an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Open Source Iden\\xADtity and Ac\\xADcess Man\\xADage\\xADment For Mod\\xADern Ap\\xADpli\\xADca\\xADtions and Ser\\xADvices\"), \".\"), mdx(\"p\", null, \"With Key\\xADcloak you can quickly add \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Au\\xADthen\\xADti\\xADca\\xADtion\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Au\\xADtho\\xADriza\\xADtion\"), \" to your vert.x ap\\xADpli\\xADca\\xADtion. The easy way is to\\nsetup a realm on key\\xADcloak and once you\\u2019re done, ex\\xADport the con\\xADfig\\xADu\\xADra\\xADtion to your vert.x app.\"), mdx(\"p\", null, \"This how you would se\\xADcure your app:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OAuth2Auth\"), \" in\\xADstance with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OAuth2Auth.createKeycloak(...)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"copy your con\\xADfig from the key\\xADcloak admin GUI\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"setup your call\\xADback ac\\xADcord\\xADing to what you en\\xADtered on key\\xADcloak\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"se\\xADcure your re\\xADsource with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"router.route(\\\"/protected/*\\\").handler(oauth2)\"))), mdx(\"h2\", {\n    \"id\": \"screencast\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#screencast\"\n  })), \"Screencast\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing screen\\xADcast ex\\xADplains how you can do this from scratch:\"), mdx(\"div\", {\n    className: \"youtube-embed\"\n  }, mdx(\"iframe\", {\n    src: \"https://www.youtube.com/embed/c20igjL69Mo\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"p\", null, \"Don\\u2019t for\\xADget to fol\\xADlow our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA\"\n  }), \"youtube chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>With the up­com­ing re­lease of Vert.x 3.3 se­cur­ing your ap­pli­ca­tion with Key­cloak is even eas­ier than be­fore.</p><h2 id=\"about-keycloak\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#about-keycloak\"></a>About Keycloak</h2><p>Key­cloak de­scribes it­self as an <em>Open Source Iden­tity and Ac­cess Man­age­ment For Mod­ern Ap­pli­ca­tions and Ser­vices</em>.</p><p>With Key­cloak you can quickly add <em>Au­then­ti­ca­tion</em> and <em>Au­tho­riza­tion</em> to your vert.x ap­pli­ca­tion. The easy way is to\nsetup a realm on key­cloak and once you’re done, ex­port the con­fig­u­ra­tion to your vert.x app.</p><p>This how you would se­cure your app:</p><ol><li>cre­ate a <code>OAuth2Auth</code> in­stance with <code>OAuth2Auth.createKeycloak(...)</code></li><li>copy your con­fig from the key­cloak admin GUI</li><li>setup your call­back ac­cord­ing to what you en­tered on key­cloak</li><li>se­cure your re­source with <code>router.route(&quot;/protected/*&quot;).handler(oauth2)</code></li></ol><h2 id=\"screencast\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#screencast\"></a>Screencast</h2><p>The fol­low­ing screen­cast ex­plains how you can do this from scratch:</p><div class=\"youtube-embed\"><iframe src=\"https://www.youtube.com/embed/c20igjL69Mo\" frameBorder=\"0\" allowfullscreen=\"\"></iframe></div><p>Don’t for­get to fol­low our <a href=\"https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA\">youtube chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"keycloak","tf":7},{"term":"secur","tf":3},{"term":"applic","tf":3},{"term":"setup","tf":2},{"term":"app","tf":2},{"term":"screencast","tf":2},{"term":"follow","tf":2},{"term":"upcom","tf":1},{"term":"releas","tf":1},{"term":"even","tf":1},{"term":"easier","tf":1},{"term":"describ","tf":1},{"term":"open","tf":1},{"term":"sourc","tf":1},{"term":"ident","tf":1},{"term":"access","tf":1},{"term":"manag","tf":1},{"term":"modern","tf":1},{"term":"servic","tf":1},{"term":"quickli","tf":1},{"term":"add","tf":1},{"term":"authent","tf":1},{"term":"author","tf":1},{"term":"easi","tf":1},{"term":"realm","tf":1}]},{"filename":"blog/2016-03-17-vertx-3-and-azure-cloud-platform-tutorial.mdx","date":"2016-03-17","slug":"vertx-3-and-azure-cloud-platform-tutorial","meta":{"title":"Vert.x 3 and Azure cloud platform tutorial","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x 3.2.1 applications can quickly be deployed on Microsoft Azure. Deployment is independent of your build so it is all about configuration."},"readingTime":{"text":"1 min read","minutes":0.585,"time":35099.99999999999,"words":117},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.2.1 ap\\xADpli\\xADca\\xADtions can quickly be de\\xADployed on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://portal.azure.com/\"\n  }), \"Mi\\xADcrosoft Azure\"), \". De\\xADploy\\xADment is in\\xADde\\xADpen\\xADdent of your build so it is all about con\\xADfig\\xADu\\xADra\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"about-azure\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#about-azure\"\n  })), \"About Azure\"), mdx(\"p\", null, \"Azure by de\\xADsign does not sup\\xADport \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multicast\"), \" on the net\\xADwork vir\\xADtu\\xADal\\xADiza\\xADtion level, how\\xADever all vir\\xADtual ma\\xADchines de\\xADfined\\non the same group are de\\xADployed on the same net\\xADwork (by de\\xADfault), so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TCP-IP\"), \" dis\\xADcov\\xADery can be en\\xADabled and quickly setup\\nto form a clus\\xADter.\"), mdx(\"p\", null, \"This how you would de\\xADploy your app:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fat-jar\"), \" with your app\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cluster.xml\"), \" with tcp-\\u200Bip dis\\xADcov\\xADery\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"run your app with: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cp folder_of_your_cluster_xml_file -cluster -cluster-host VM_PRIVATE_IP\"))), mdx(\"h2\", {\n    \"id\": \"screencast\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#screencast\"\n  })), \"Screencast\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing screen\\xADcast \"), mdx(\"div\", {\n    className: \"youtube-embed\"\n  }, mdx(\"iframe\", {\n    src: \"https://www.youtube.com/embed/nGQs_swWwAM\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"p\", null, \"Don\\u2019t for\\xADget to fol\\xADlow our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA\"\n  }), \"youtube chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.2.1 ap­pli­ca­tions can quickly be de­ployed on <a href=\"http://portal.azure.com/\">Mi­crosoft Azure</a>. De­ploy­ment is in­de­pen­dent of your build so it is all about con­fig­u­ra­tion.</p><h2 id=\"about-azure\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#about-azure\"></a>About Azure</h2><p>Azure by de­sign does not sup­port <code>multicast</code> on the net­work vir­tu­al­iza­tion level, how­ever all vir­tual ma­chines de­fined\non the same group are de­ployed on the same net­work (by de­fault), so <code>TCP-IP</code> dis­cov­ery can be en­abled and quickly setup\nto form a clus­ter.</p><p>This how you would de­ploy your app:</p><ol><li>cre­ate a <code>fat-jar</code> with your app</li><li>cre­ate a <code>cluster.xml</code> with tcp-​ip dis­cov­ery</li><li>run your app with: <code>cp folder_of_your_cluster_xml_file -cluster -cluster-host VM_PRIVATE_IP</code></li></ol><h2 id=\"screencast\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#screencast\"></a>Screencast</h2><p>The fol­low­ing screen­cast </p><div class=\"youtube-embed\"><iframe src=\"https://www.youtube.com/embed/nGQs_swWwAM\" frameBorder=\"0\" allowfullscreen=\"\"></iframe></div><p>Don’t for­get to fol­low our <a href=\"https://www.youtube.com/channel/UCGN6L3tRhs92Uer3c6VxOSA\">youtube chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"deploi","tf":3},{"term":"azur","tf":3},{"term":"app","tf":3},{"term":"quickli","tf":2},{"term":"network","tf":2},{"term":"virtual","tf":2},{"term":"discoveri","tf":2},{"term":"creat","tf":2},{"term":"screencast","tf":2},{"term":"follow","tf":2},{"term":"applic","tf":1},{"term":"microsoft","tf":1},{"term":"deploy","tf":1},{"term":"independ","tf":1},{"term":"build","tf":1},{"term":"configur","tf":1},{"term":"design","tf":1},{"term":"not","tf":1},{"term":"support","tf":1},{"term":"level","tf":1},{"term":"howev","tf":1},{"term":"machin","tf":1},{"term":"defin","tf":1},{"term":"group","tf":1},{"term":"default","tf":1}]},{"filename":"blog/2016-02-05-vert-x-3-2-1-is-released.mdx","date":"2016-02-05","slug":"vert-x-3-2-1-is-released","meta":{"title":"Vert.x 3.2.1 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.1!"},"readingTime":{"text":"1 min read","minutes":0.67,"time":40200,"words":134},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are pleased to an\\xADnounce the re\\xADlease of Vert.x 3.2.1!\"), mdx(\"p\", null, \"The re\\xADlease con\\xADtains many bug fixes and a ton of small im\\xADprove\\xADments, such as fu\\xADture com\\xADpo\\xADsi\\xADtion, im\\xADproved Cey\\xADlon sup\\xADport, Stomp vir\\xADtual host sup\\xADport, per\\xADfor\\xADmance im\\xADprove\\xADments\\u2026 Full re\\xADlease notes can be found here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.2.1---Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.2.1-\\u200B\\u2014Release-Notes\")), mdx(\"p\", null, \"Break\\xADing changes are here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.2.1---Breaking-Changes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.2.1-\\u200B\\u2014Breaking-Changes\")), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Dock\\xADers im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \"\\nThe vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \".\"), mdx(\"p\", null, \"Many thanks to all the com\\xADmit\\xADters and com\\xADmu\\xADnity whose con\\xADtri\\xADbu\\xADtions made this pos\\xADsi\\xADble.\"), mdx(\"p\", null, \"Next stop is Vert.x 3.3.0 which we hope to have out in May 2016.\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.1%22\"\n  }), \"Maven Cen\\xADtral\"), \"\\nand you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.2.1/view\"\n  }), \"Bin\\xADtray\"), \".\"), mdx(\"p\", null, \"Happy cod\\xADing !\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We are pleased to an­nounce the re­lease of Vert.x 3.2.1!</p><p>The re­lease con­tains many bug fixes and a ton of small im­prove­ments, such as fu­ture com­po­si­tion, im­proved Cey­lon sup­port, Stomp vir­tual host sup­port, per­for­mance im­prove­ments… Full re­lease notes can be found here:</p><p><a href=\"https://github.com/vert-x3/wiki/wiki/3.2.1---Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.2.1-​—Release-Notes</a></p><p>Break­ing changes are here:</p><p><a href=\"https://github.com/vert-x3/wiki/wiki/3.2.1---Breaking-Changes\">https://github.com/vert-​x3/wiki/wiki/3.2.1-​—Breaking-Changes</a></p><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Dock­ers im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>\nThe vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a>.</p><p>Many thanks to all the com­mit­ters and com­mu­nity whose con­tri­bu­tions made this pos­si­ble.</p><p>Next stop is Vert.x 3.3.0 which we hope to have out in May 2016.</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.1%22\">Maven Cen­tral</a>\nand you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.2.1/view\">Bin­tray</a>.</p><p>Happy cod­ing !</p>","scope":{}},"tfIdfTerms":[{"term":"http","tf":5},{"term":"releas","tf":4},{"term":"com","tf":4},{"term":"wiki","tf":4},{"term":"improv","tf":3},{"term":"github","tf":3},{"term":"x3","tf":3},{"term":"avail","tf":3},{"term":"support","tf":2},{"term":"note","tf":2},{"term":"break","tf":2},{"term":"chang","tf":2},{"term":"bu","tf":2},{"term":"client","tf":2},{"term":"bower","tf":2},{"term":"webjar","tf":2},{"term":"www","tf":2},{"term":"docker","tf":2},{"term":"distribut","tf":2},{"term":"2016","tf":1},{"term":"pleas","tf":1},{"term":"announc","tf":1},{"term":"contain","tf":1},{"term":"bug","tf":1},{"term":"fix","tf":1}]},{"filename":"blog/2016-01-25-intro-to-vert-x-shell.mdx","date":"2016-01-25","slug":"intro-to-vert-x-shell","meta":{"title":"Intro to Vert.x Shell","category":"guides","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"Vert.x Shell provides an extensible command line for Vert.x, accessible via SSH, Telnet or a nice Web interface. Vert.x Shell comes out of the box with plenty of commands."},"readingTime":{"text":"4 min read","minutes":3.1,"time":186000,"words":620},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x Shell pro\\xADvides an ex\\xADten\\xADsi\\xADble com\\xADmand line for Vert.x, ac\\xADces\\xADsi\\xADble via SSH, Tel\\xADnet or a nice Web in\\xADter\\xADface. Vert.x Shell comes out of the box with plenty of com\\xADmands for Vert.x which makes it very handy for doing sim\\xADple man\\xADage\\xADment op\\xADer\\xADa\\xADtions like de\\xADploy\\xADing a Ver\\xADti\\xADcle or get\\xADting the list of de\\xADployed Ver\\xADti\\xADcles. One power fea\\xADture of Vert.x Shell is its ex\\xADten\\xADsi\\xADbil\\xADity: one can eas\\xADily aug\\xADment Vert.x Shell with its own com\\xADmands. Let\\u2019s build an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" in JavaScript!\"), mdx(\"h2\", {\n    \"id\": \"booting-the-shell\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#booting-the-shell\"\n  })), \"Booting the Shell\"), mdx(\"p\", null, \"Vert.x Shell can be started in a cou\\xADple of lines de\\xADpend\\xADing on the con\\xADnec\\xADtors you con\\xADfig\\xADure. The doc\\xADu\\xADmen\\xADta\\xADtion pro\\xADvides sev\\xADeral ex\\xADam\\xADples show\\xADing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-shell/js/#_programmatic_service\"\n  }), \"Shell Ser\\xADvice con\\xADfig\\xADu\\xADra\\xADtion\"), \". For test\\xADing our com\\xADmand, we will use the Tel\\xADnet pro\\xADto\\xADcol be\\xADcause it is easy to con\\xADfig\\xADure and use, so we just need to copy the cor\\xADre\\xADspond\\xADing sec\\xADtion in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx-\\u200Bhttp-client.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" ShellService = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/shell_service\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" service = ShellService.create(vertx, {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"telnetOptions\\\"\"), \" : {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"host\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"port\\\"\"), \" : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4000\"), \"\\n  }\\n});\\nservice.start();\\n\")), mdx(\"p\", null, \"We can run it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Juliens-MacBook-Pro:java julien$ vertx run vertx-http-client.js\\nSucceeded in deploying verticle\\n\")), mdx(\"p\", null, \"And con\\xADnect to the shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"Juliens-MacBook-Pro:~ julien$ telnet localhost 4000\\nTrying ::1...\\ntelnet: connect to address ::1: Connection refused\\nTrying 127.0.0.1...\\nConnected to localhost.\\nEscape character is '^]'.\\n__      __ ______  _____  _______  __   __\\n\\\\ \\\\    / /|  ____||  _  \\\\|__   __| \\\\ \\\\ / /\\n \\\\ \\\\  / / | |____ | :_) |   | |     \\\\   /\\n  \\\\ \\\\/ /  |  ____||   __/   | |      > /\\n   \\\\  /   | |____ | |\\\\ \\\\    | |     / //\\\\\\n    \\\\/    |______||_| \\\\_\\\\   |_| o  /_/ \\\\_\\\\\\n\\n\\n%\\n\")), mdx(\"p\", null, \"You can now al\\xADready use the shell, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"help\"), \" com\\xADmand lists the avail\\xADable com\\xADmands.\"), mdx(\"h2\", {\n    \"id\": \"creating-a-command\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#creating-a-command\"\n  })), \"Creating a command\"), mdx(\"p\", null, \"For the sake of sim\\xADplic\\xADity we will write a sin\\xADgle script that starts the Shell ser\\xADvice and de\\xADploys our com\\xADmand. In the real world you would prob\\xADa\\xADbly have the com\\xADmand in one file and the de\\xADploy\\xADment in an\\xADother.\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-shell/js/#_extending_vert_x_shell\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion\"), \" ex\\xADplains how to add a new com\\xADmand to Vert.x shell, we can just copy this sec\\xADtion and ap\\xADpend it to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"vertx-\\u200Bhttp-client.js\"), \" script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" CommandBuilder = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/command_builder\\\"\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" CommandRegistry = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"vertx-shell-js/command_registry\\\"\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" builder = CommandBuilder.command(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http-client\\\"\"), \");\\nbuilder.processHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"process\"), \") \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Write a message to the console\"), \"\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Implement the client\\\\n\\\"\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the process\"), \"\\n  process.end();\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Register the command\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" registry = CommandRegistry.getShared(vertx);\\nregistry.registerCommand(builder.build(vertx));\\n\")), mdx(\"p\", null, \"Now you can use the com\\xADmand just to see it in ac\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"% http-client\\nImplement the client\\n%\\n\")), mdx(\"h2\", {\n    \"id\": \"checking-arguments\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#checking-arguments\"\n  })), \"Checking arguments\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" re\\xADquires an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" ar\\xADgu\\xADment, an ar\\xADgu\\xADment check is per\\xADformed at the be\\xADgin\\xADning of the process han\\xADdler:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Check the url argument\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (process.args().length < \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \") {\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Missing URL\\\\n\\\"\"), \").end();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n}\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" url = process.args()[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"];\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-command\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-command\"\n  })), \"Implementing the command\"), mdx(\"p\", null, \"The final step of this tu\\xADto\\xADr\\xADial is the ac\\xADtual im\\xADple\\xADmen\\xADta\\xADtion of the client logic based on Vert.x Http\\xADClient:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create the client request\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" request = client.getAbs(url, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \") \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Print the response in the shell console\"), \"\\n  response.handler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"buffer\"), \") \"), \"{\\n    process.write(buffer.toString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"UTF-8\\\"\"), \"));\\n  });\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the command when the response ends\"), \"\\n  response.endHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    process.end();\\n  });\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Set a request handler to end the command with error\"), \"\\nrequest.exceptionHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"err\"), \") \"), \"{\\n  process.write(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Error: \\\"\"), \" + err.getMessage());\\n  process.end();\\n});\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// End the http request\"), \"\\nrequest.end();\\n\")), mdx(\"p\", null, \"And we can test the com\\xADmand in the shell:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"% http-client http://vertx.io\\nhttp-client http://vertx.io\\n<!DOCTYPE html><html lang=en><head><title>Vert.x</title>...\\n...\\n/javascripts/sticky_header.js></script></body></html>%\\n\")), mdx(\"h2\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"We have seen how easy it is to ex\\xADtend Vert.x with a shell and cre\\xADate an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"http-\\u200Bclient\"), \" cus\\xADtom com\\xADmand, you can get the full source code \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/vietj/51ff223bfb7cfcbc97ce\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Our com\\xADmand is very sim\\xADple, it only im\\xADple\\xADments the very min\\xADi\\xADmum, in fu\\xADture posts we will im\\xADprove the com\\xADmand with sup\\xADport with more HTTP meth\\xADods, SSL sup\\xADport or header sup\\xADport with the the Vert.x CLI API.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x Shell pro­vides an ex­ten­si­ble com­mand line for Vert.x, ac­ces­si­ble via SSH, Tel­net or a nice Web in­ter­face. Vert.x Shell comes out of the box with plenty of com­mands for Vert.x which makes it very handy for doing sim­ple man­age­ment op­er­a­tions like de­ploy­ing a Ver­ti­cle or get­ting the list of de­ployed Ver­ti­cles. One power fea­ture of Vert.x Shell is its ex­ten­si­bil­ity: one can eas­ily aug­ment Vert.x Shell with its own com­mands. Let’s build an <em>http-​client</em> in JavaScript!</p><h2 id=\"booting-the-shell\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#booting-the-shell\"></a>Booting the Shell</h2><p>Vert.x Shell can be started in a cou­ple of lines de­pend­ing on the con­nec­tors you con­fig­ure. The doc­u­men­ta­tion pro­vides sev­eral ex­am­ples show­ing the <a href=\"http://vertx.io/docs/vertx-shell/js/#_programmatic_service\">Shell Ser­vice con­fig­u­ra­tion</a>. For test­ing our com­mand, we will use the Tel­net pro­to­col be­cause it is easy to con­fig­ure and use, so we just need to copy the cor­re­spond­ing sec­tion in <em>vertx-​http-client.js</em>:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> ShellService = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/shell_service&quot;</span>);\n<span class=\"hljs-keyword\">var</span> service = ShellService.create(vertx, {\n  <span class=\"hljs-string\">&quot;telnetOptions&quot;</span> : {\n    <span class=\"hljs-string\">&quot;host&quot;</span> : <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n    <span class=\"hljs-string\">&quot;port&quot;</span> : <span class=\"hljs-number\">4000</span>\n  }\n});\nservice.start();\n</code></pre><p>We can run it:</p><pre><code class=\"hljs language-text\">Juliens-MacBook-Pro:java julien$ vertx run vertx-http-client.js\nSucceeded in deploying verticle\n</code></pre><p>And con­nect to the shell:</p><pre><code class=\"hljs language-text\">Juliens-MacBook-Pro:~ julien$ telnet localhost 4000\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is &#x27;^]&#x27;.\n__      __ ______  _____  _______  __   __\n\\ \\    / /|  ____||  _  \\|__   __| \\ \\ / /\n \\ \\  / / | |____ | :_) |   | |     \\   /\n  \\ \\/ /  |  ____||   __/   | |      &gt; /\n   \\  /   | |____ | |\\ \\    | |     / //\\\n    \\/    |______||_| \\_\\   |_| o  /_/ \\_\\\n\n\n%\n</code></pre><p>You can now al­ready use the shell, the <em>help</em> com­mand lists the avail­able com­mands.</p><h2 id=\"creating-a-command\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#creating-a-command\"></a>Creating a command</h2><p>For the sake of sim­plic­ity we will write a sin­gle script that starts the Shell ser­vice and de­ploys our com­mand. In the real world you would prob­a­bly have the com­mand in one file and the de­ploy­ment in an­other.</p><p>The <a href=\"http://vertx.io/docs/vertx-shell/js/#_extending_vert_x_shell\">doc­u­men­ta­tion</a> ex­plains how to add a new com­mand to Vert.x shell, we can just copy this sec­tion and ap­pend it to the <em>vertx-​http-client.js</em> script:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> CommandBuilder = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/command_builder&quot;</span>);\n<span class=\"hljs-keyword\">var</span> CommandRegistry = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vertx-shell-js/command_registry&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> builder = CommandBuilder.command(<span class=\"hljs-string\">&quot;http-client&quot;</span>);\nbuilder.processHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">process</span>) </span>{\n\n  <span class=\"hljs-comment\">// Write a message to the console</span>\n  process.write(<span class=\"hljs-string\">&quot;Implement the client\\n&quot;</span>);\n\n  <span class=\"hljs-comment\">// End the process</span>\n  process.end();\n});\n\n<span class=\"hljs-comment\">// Register the command</span>\n<span class=\"hljs-keyword\">var</span> registry = CommandRegistry.getShared(vertx);\nregistry.registerCommand(builder.build(vertx));\n</code></pre><p>Now you can use the com­mand just to see it in ac­tion:</p><pre><code class=\"hljs language-bash\">% http-client\nImplement the client\n%\n</code></pre><h2 id=\"checking-arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#checking-arguments\"></a>Checking arguments</h2><p>The <em>http-​client</em> re­quires an <code>url</code> ar­gu­ment, an ar­gu­ment check is per­formed at the be­gin­ning of the process han­dler:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Check the url argument</span>\n<span class=\"hljs-keyword\">if</span> (process.args().length &lt; <span class=\"hljs-number\">1</span>) {\n  process.write(<span class=\"hljs-string\">&quot;Missing URL\\n&quot;</span>).end();\n  <span class=\"hljs-keyword\">return</span>;\n}\n<span class=\"hljs-keyword\">var</span> url = process.args()[<span class=\"hljs-number\">0</span>];\n</code></pre><h2 id=\"implementing-the-command\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-command\"></a>Implementing the command</h2><p>The final step of this tu­to­r­ial is the ac­tual im­ple­men­ta­tion of the client logic based on Vert.x Http­Client:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create the client request</span>\n<span class=\"hljs-keyword\">var</span> request = client.getAbs(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n\n  <span class=\"hljs-comment\">// Print the response in the shell console</span>\n  response.handler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">buffer</span>) </span>{\n    process.write(buffer.toString(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>));\n  });\n\n  <span class=\"hljs-comment\">// End the command when the response ends</span>\n  response.endHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    process.end();\n  });\n});\n\n<span class=\"hljs-comment\">// Set a request handler to end the command with error</span>\nrequest.exceptionHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  process.write(<span class=\"hljs-string\">&quot;Error: &quot;</span> + err.getMessage());\n  process.end();\n});\n\n<span class=\"hljs-comment\">// End the http request</span>\nrequest.end();\n</code></pre><p>And we can test the com­mand in the shell:</p><pre><code class=\"hljs language-bash\">% http-client http://vertx.io\nhttp-client http://vertx.io\n&lt;!DOCTYPE html&gt;&lt;html lang=en&gt;&lt;head&gt;&lt;title&gt;Vert.x&lt;/title&gt;...\n...\n/javascripts/sticky_header.js&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;%\n</code></pre><h2 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h2><p>We have seen how easy it is to ex­tend Vert.x with a shell and cre­ate an <em>http-​client</em> cus­tom com­mand, you can get the full source code <a href=\"https://gist.github.com/vietj/51ff223bfb7cfcbc97ce\">here</a>.</p><p>Our com­mand is very sim­ple, it only im­ple­ments the very min­i­mum, in fu­ture posts we will im­prove the com­mand with sup­port with more HTTP meth­ods, SSL sup­port or header sup­port with the the Vert.x CLI API.</p>","scope":{}},"tfIdfTerms":[{"term":"command","tf":16},{"term":"shell","tf":13},{"term":"http","tf":6},{"term":"client","tf":6},{"term":"us","tf":4},{"term":"deploi","tf":3},{"term":"on","tf":3},{"term":"configur","tf":3},{"term":"will","tf":3},{"term":"just","tf":3},{"term":"argument","tf":3},{"term":"implement","tf":3},{"term":"support","tf":3},{"term":"provid","tf":2},{"term":"extens","tf":2},{"term":"line","tf":2},{"term":"telnet","tf":2},{"term":"simpl","tf":2},{"term":"verticl","tf":2},{"term":"list","tf":2},{"term":"start","tf":2},{"term":"document","tf":2},{"term":"servic","tf":2},{"term":"test","tf":2},{"term":"easi","tf":2}]}],"numPages":16},"__N_SSG":true}