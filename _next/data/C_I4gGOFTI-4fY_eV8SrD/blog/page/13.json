{"pageProps":{"categories":["releases","guides","news"],"page":13,"posts":[{"filename":"blog/2016-01-18-using-hamcrest-matchers-with-vert-x-unit.mdx","date":"2016-01-18","slug":"using-hamcrest-matchers-with-vert-x-unit","meta":{"title":"Using Hamcrest Matchers with Vert.x Unit","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x Unit is a very elegant library to test asynchronous applications developed with vert.x. However because of this asynchronous aspect, reporting test failures is not natural for JUnit users."},"readingTime":{"text":"5 min read","minutes":4.205,"time":252300,"words":841},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x Unit is a very el\\xADe\\xADgant li\\xADbrary to test asyn\\xADchro\\xADnous ap\\xADpli\\xADca\\xADtions de\\xADvel\\xADoped with vert.x. How\\xADever be\\xADcause of this asyn\\xADchro\\xADnous as\\xADpect, re\\xADport\\xADing test fail\\xADures is not nat\\xADural for JUnit users.  This is be\\xADcause, the failed as\\xADser\\xADtions need to be re\\xADported to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"test con\\xADtext\"), \", con\\xADtrol\\xADling the ex\\xADe\\xADcu\\xADtion (and so the out\\xADcome) of the test. In other words, in a Vert.x Unit test you can\\xADnot use the reg\\xADu\\xADlar Junit as\\xADser\\xADtions and as\\xADser\\xADtion li\\xADbraries. In this blog post, we pro\\xADpose a way to let you using Ham\\xADcrest match\\xADers in Vert.x Unit tests.\"), mdx(\"h2\", {\n    \"id\": \"using-vertx-unit\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-vertx-unit\"\n  })), \"Using Vert.x Unit\"), mdx(\"p\", null, \"Vert.x Unit is a test li\\xADbrary made to en\\xADsure the be\\xADhav\\xADior of vert.x ap\\xADpli\\xADca\\xADtions. It lets you im\\xADple\\xADment tests check\\xADing asyn\\xADchro\\xADnous be\\xADhav\\xADior.\"), mdx(\"p\", null, \"Vert.x Unit can be used with Junit. For this, you just need to add the fol\\xADlow\\xADing de\\xADpen\\xADdency to your project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-unit\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.2.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"If you are using Gra\\xADdle, the de\\xADpen\\xADdency is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-gradle\"\n  }), \"testCompile \\u2018io.vertx:vertx-unit:\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3.2\"), \".\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"\\u2019\\n\")), mdx(\"p\", null, \"If you are using an IDE, just add the vertx-\\u200Bunit jar to your project class\\xADpath.\"), mdx(\"p\", null, \"Ob\\xADvi\\xADously, you would need to add JUnit too.\"), mdx(\"p\", null, \"No\\xADtice that vertx-\\u200Bunit does not need JUnit, and can be used with\\xADout it. Check the Vert.x Unit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-unit/java/\"\n  }), \"doc\\xADu\\xADmen\\xADta\\xADtion\"), \" for more de\\xADtails.\"), mdx(\"h2\", {\n    \"id\": \"vertx-unit-example\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-unit-example\"\n  })), \"Vert.x Unit example\"), mdx(\"p\", null, \"Let\\u2019s con\\xADsider this very sim\\xADple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Verticle\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyFirstVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" Future future)\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throws\"), \" Exception \"), \"{\\n    vertx.createHttpServer()\\n        .requestHandler(req -> req.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"hello vert.x\\\"\"), \"))\\n        .listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", done -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (done.failed()) {\\n            future.fail(done.cause());\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            future.complete();\\n          }\\n        });\\n  }\\n}\\n\")), mdx(\"p\", null, \"It just cre\\xADates a new HTTP server and when launched it no\\xADti\\xADfies the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"future\"), \" of the com\\xADple\\xADtion.\"), mdx(\"p\", null, \"To test this ver\\xADti\\xADcle with Vert.x Unit you would write some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@RunWith(VertxUnitRunner.class)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"MyFirstVerticleTest\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Vertx vertx;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Before\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"setUp\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n    vertx = Vertx.vertx();\\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\\n      context.asyncAssertSuccess());\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"test\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n    Async async = context.async();\\n    vertx.createHttpClient().get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \")\\n      .handler(response -> {\\n        context.assertEquals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \", response.statusCode());\\n        response.bodyHandler(buffer -> {\\n          context.assertEquals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"hello vert.x\\\"\"), \", buffer.toString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"utf-8\\\"\"), \"));\\n          async.complete();\\n        });\\n      })\\n      .end();\\n  }\\n}\\n\")), mdx(\"p\", null, \"First, the test class is an\\xADno\\xADtated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@RunWith(VertxUnitRunner.class)\"), \", in\\xADstruct\\xADing JUnit to use this spe\\xADcial run\\xADner. This run\\xADner lets you in\\xADject a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \" pa\\xADra\\xADme\\xADter into every test meth\\xADods (as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Before\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@After\"), \") to han\\xADdle the asyn\\xADchro\\xADnous as\\xADpect of the test.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setUp\"), \" method, it cre\\xADates a new in\\xADstance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vertx\"), \" and de\\xADploy the ver\\xADti\\xADcle. Thanks to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context.asyncAssertSuccess()\"), \", it waits until the suc\\xADcess\\xADful com\\xADple\\xADtion of the ver\\xADti\\xADcle de\\xADploy\\xADment. In\\xADdeed, the de\\xADploy\\xADment is asyn\\xADchro\\xADnous, and we must be sure that the ver\\xADti\\xADcle has been de\\xADployed and has com\\xADpleted its ini\\xADtial\\xADiza\\xADtion be\\xADfore start\\xADing to test it.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test()\"), \" method cre\\xADates an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Async\"), \" ob\\xADject that will be used to re\\xADport when the test has been com\\xADpleted. Then it cre\\xADates an HTTP client to emit a re\\xADquest on the server from our ver\\xADti\\xADcle and check that:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the HTTP code is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"200 (OK)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the body is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hello vert.x\"))), mdx(\"p\", null, \"As you can see, to im\\xADple\\xADment the checks, the as\\xADser\\xADtions method are called on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \" ob\\xADject, which con\\xADtrol the test ex\\xADe\\xADcu\\xADtion. When every\\xADthing has been tested, we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async.complete()\"), \" to end the test. If an as\\xADser\\xADtion failed, the test is ob\\xADvi\\xADously stopped. This would not be the case if you would use reg\\xADu\\xADlar Junit as\\xADser\\xADtions.\"), mdx(\"h2\", {\n    \"id\": \"using-the-hamcrest-matchers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-the-hamcrest-matchers\"\n  })), \"Using the Hamcrest Matchers\"), mdx(\"p\", null, \"In the pre\\xADvi\\xADous ex\\xADam\\xADple, we used the the as\\xADser\\xADtions avail\\xADable from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \" in\\xADstance. How\\xADever it pro\\xADvides a lim\\xADited set of meth\\xADods. Ham\\xADcrest is a li\\xADbrary of match\\xADers, which can be com\\xADbined in to cre\\xADate flex\\xADi\\xADble ex\\xADpres\\xADsions of in\\xADtent in tests. It is very con\\xADve\\xADnient when test\\xADing com\\xADplex ap\\xADpli\\xADca\\xADtions.\"), mdx(\"p\", null, \"Ham\\xADcrest can\\xADnot be used di\\xADrectly as it would not re\\xADport the fail\\xADure on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \". For this pur\\xADpose we cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VertxMatcherAssert\"), \" class:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"VertxMatcherAssert\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" <T> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"assertThat\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context, T actual,\\n    Matcher<? \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"super\"), \" T> matcher)\"), \" \"), \"{\\n    assertThat(context, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \", actual, matcher);\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" <T> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"assertThat\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context, String reason,\\n    T actual, Matcher<? \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"super\"), \" T> matcher)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!matcher.matches(actual)) {\\n      Description description = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" StringDescription();\\n      description.appendText(reason)\\n          .appendText(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\\nExpected: \\\"\"), \")\\n          .appendDescriptionOf(matcher)\\n          .appendText(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\\n     but: \\\"\"), \");\\n      matcher.describeMismatch(actual, description);\\n      context.fail(description.toString());\\n    }\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"assertThat\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context, String reason,\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"boolean\"), \" assertion)\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (!assertion) {\\n      context.fail(reason);\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"This class pro\\xADvides \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assertThat\"), \" method that re\\xADports error on the given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \". The com\\xADplete code is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/cescoffier/5cbf4c69aa094ac9b1a6\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"With this class, we can re-\\u200Bimplement our test as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Test\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"testWithHamcrest\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(TestContext context)\"), \" \"), \"{\\n  Async async = context.async();\\n  vertx.createHttpClient().get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"localhost\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/\\\"\"), \").handler(response -> {\\n    assertThat(context, response.statusCode(), is(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \"));\\n    response.bodyHandler(buffer -> {\\n      assertThat(context, buffer.toString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"utf-8\\\"\"), \"), is(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"hello vert.x\\\"\"), \"));\\n      async.complete();\\n    });\\n  }).end();\\n}\\n\")), mdx(\"p\", null, \"To ease the usage, I\\u2019ve added two \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"im\\xADport sta\\xADtic\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" io.vertx.unit.example.VertxMatcherAssert.assertThat;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" org.hamcrest.core.Is.is;\\n\")), mdx(\"p\", null, \"You can use any Ham\\xADcrest matcher, or even im\\xADple\\xADment your own as soon as you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assertThat\"), \" method pro\\xADvided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VertxMatcherAssert\"), \".\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this post we have seen how you can com\\xADbine Ham\\xADcrest and Vert.x Unit. So, you are not lim\\xADited any\\xADmore by the set of as\\xADsert meth\\xADods pro\\xADvided by Vert.x Unit, and can use the whole ex\\xADpres\\xADsive\\xADness of Ham\\xADcrest Match\\xADers.\"), mdx(\"p\", null, \"Don\\u2019t for\\xADget that you still can\\u2019t use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assert\"), \" meth\\xADods from Junit, as they don\\u2019t re\\xADport on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x Unit is a very el­e­gant li­brary to test asyn­chro­nous ap­pli­ca­tions de­vel­oped with vert.x. How­ever be­cause of this asyn­chro­nous as­pect, re­port­ing test fail­ures is not nat­ural for JUnit users.  This is be­cause, the failed as­ser­tions need to be re­ported to the <em>test con­text</em>, con­trol­ling the ex­e­cu­tion (and so the out­come) of the test. In other words, in a Vert.x Unit test you can­not use the reg­u­lar Junit as­ser­tions and as­ser­tion li­braries. In this blog post, we pro­pose a way to let you using Ham­crest match­ers in Vert.x Unit tests.</p><h2 id=\"using-vertx-unit\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-vertx-unit\"></a>Using Vert.x Unit</h2><p>Vert.x Unit is a test li­brary made to en­sure the be­hav­ior of vert.x ap­pli­ca­tions. It lets you im­ple­ment tests check­ing asyn­chro­nous be­hav­ior.</p><p>Vert.x Unit can be used with Junit. For this, you just need to add the fol­low­ing de­pen­dency to your project:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-unit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>If you are using Gra­dle, the de­pen­dency is:</p><pre><code class=\"hljs language-gradle\">testCompile ‘io.vertx:vertx-unit:<span class=\"hljs-number\">3.2</span>.<span class=\"hljs-number\">0</span>’\n</code></pre><p>If you are using an IDE, just add the vertx-​unit jar to your project class­path.</p><p>Ob­vi­ously, you would need to add JUnit too.</p><p>No­tice that vertx-​unit does not need JUnit, and can be used with­out it. Check the Vert.x Unit <a href=\"https://vertx.io/docs/vertx-unit/java/\">doc­u­men­ta­tion</a> for more de­tails.</p><h2 id=\"vertx-unit-example\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-unit-example\"></a>Vert.x Unit example</h2><p>Let’s con­sider this very sim­ple <code>Verticle</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFirstVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Future future)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    vertx.createHttpServer()\n        .requestHandler(req -&gt; req.response().end(<span class=\"hljs-string\">&quot;hello vert.x&quot;</span>))\n        .listen(<span class=\"hljs-number\">8080</span>, done -&gt; {\n          <span class=\"hljs-keyword\">if</span> (done.failed()) {\n            future.fail(done.cause());\n          } <span class=\"hljs-keyword\">else</span> {\n            future.complete();\n          }\n        });\n  }\n}\n</code></pre><p>It just cre­ates a new HTTP server and when launched it no­ti­fies the <code>future</code> of the com­ple­tion.</p><p>To test this ver­ti­cle with Vert.x Unit you would write some­thing like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@RunWith(VertxUnitRunner.class)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFirstVerticleTest</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> Vertx vertx;\n\n  <span class=\"hljs-meta\">@Before</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setUp</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n      context.asyncAssertSuccess());\n  }\n\n  <span class=\"hljs-meta\">@Test</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n    Async async = context.async();\n    vertx.createHttpClient().get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>)\n      .handler(response -&gt; {\n        context.assertEquals(<span class=\"hljs-number\">200</span>, response.statusCode());\n        response.bodyHandler(buffer -&gt; {\n          context.assertEquals(<span class=\"hljs-string\">&quot;hello vert.x&quot;</span>, buffer.toString(<span class=\"hljs-string\">&quot;utf-8&quot;</span>));\n          async.complete();\n        });\n      })\n      .end();\n  }\n}\n</code></pre><p>First, the test class is an­no­tated with <code>@RunWith(VertxUnitRunner.class)</code>, in­struct­ing JUnit to use this spe­cial run­ner. This run­ner lets you in­ject a <code>TestContext</code> pa­ra­me­ter into every test meth­ods (as well as <code>@Before</code> and <code>@After</code>) to han­dle the asyn­chro­nous as­pect of the test.</p><p>In the <code>setUp</code> method, it cre­ates a new in­stance of <code>Vertx</code> and de­ploy the ver­ti­cle. Thanks to <code>context.asyncAssertSuccess()</code>, it waits until the suc­cess­ful com­ple­tion of the ver­ti­cle de­ploy­ment. In­deed, the de­ploy­ment is asyn­chro­nous, and we must be sure that the ver­ti­cle has been de­ployed and has com­pleted its ini­tial­iza­tion be­fore start­ing to test it.</p><p>The <code>test()</code> method cre­ates an <code>Async</code> ob­ject that will be used to re­port when the test has been com­pleted. Then it cre­ates an HTTP client to emit a re­quest on the server from our ver­ti­cle and check that:</p><ol><li>the HTTP code is <code>200 (OK)</code></li><li>the body is <code>hello vert.x</code></li></ol><p>As you can see, to im­ple­ment the checks, the as­ser­tions method are called on the <code>TestContext</code> ob­ject, which con­trol the test ex­e­cu­tion. When every­thing has been tested, we call <code>async.complete()</code> to end the test. If an as­ser­tion failed, the test is ob­vi­ously stopped. This would not be the case if you would use reg­u­lar Junit as­ser­tions.</p><h2 id=\"using-the-hamcrest-matchers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-the-hamcrest-matchers\"></a>Using the Hamcrest Matchers</h2><p>In the pre­vi­ous ex­am­ple, we used the the as­ser­tions avail­able from the <code>TestContext</code> in­stance. How­ever it pro­vides a lim­ited set of meth­ods. Ham­crest is a li­brary of match­ers, which can be com­bined in to cre­ate flex­i­ble ex­pres­sions of in­tent in tests. It is very con­ve­nient when test­ing com­plex ap­pli­ca­tions.</p><p>Ham­crest can­not be used di­rectly as it would not re­port the fail­ure on the <code>TestContext</code>. For this pur­pose we cre­ate a <code>VertxMatcherAssert</code> class:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VertxMatcherAssert</span> </span>{\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">assertThat</span><span class=\"hljs-params\">(TestContext context, T actual,\n    Matcher&lt;? <span class=\"hljs-keyword\">super</span> T&gt; matcher)</span> </span>{\n    assertThat(context, <span class=\"hljs-string\">&quot;&quot;</span>, actual, matcher);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">assertThat</span><span class=\"hljs-params\">(TestContext context, String reason,\n    T actual, Matcher&lt;? <span class=\"hljs-keyword\">super</span> T&gt; matcher)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!matcher.matches(actual)) {\n      Description description = <span class=\"hljs-keyword\">new</span> StringDescription();\n      description.appendText(reason)\n          .appendText(<span class=\"hljs-string\">&quot;\\nExpected: &quot;</span>)\n          .appendDescriptionOf(matcher)\n          .appendText(<span class=\"hljs-string\">&quot;\\n     but: &quot;</span>);\n      matcher.describeMismatch(actual, description);\n      context.fail(description.toString());\n    }\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">assertThat</span><span class=\"hljs-params\">(TestContext context, String reason,\n    <span class=\"hljs-keyword\">boolean</span> assertion)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!assertion) {\n      context.fail(reason);\n    }\n  }\n}\n</code></pre><p>This class pro­vides <code>assertThat</code> method that re­ports error on the given <code>TestContext</code>. The com­plete code is avail­able <a href=\"https://gist.github.com/cescoffier/5cbf4c69aa094ac9b1a6\">here</a>.</p><p>With this class, we can re-​implement our test as fol­lows:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testWithHamcrest</span><span class=\"hljs-params\">(TestContext context)</span> </span>{\n  Async async = context.async();\n  vertx.createHttpClient().get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>).handler(response -&gt; {\n    assertThat(context, response.statusCode(), is(<span class=\"hljs-number\">200</span>));\n    response.bodyHandler(buffer -&gt; {\n      assertThat(context, buffer.toString(<span class=\"hljs-string\">&quot;utf-8&quot;</span>), is(<span class=\"hljs-string\">&quot;hello vert.x&quot;</span>));\n      async.complete();\n    });\n  }).end();\n}\n</code></pre><p>To ease the usage, I’ve added two <em>im­port sta­tic</em>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> io.vertx.unit.example.VertxMatcherAssert.assertThat;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.hamcrest.core.Is.is;\n</code></pre><p>You can use any Ham­crest matcher, or even im­ple­ment your own as soon as you use the <code>assertThat</code> method pro­vided by <code>VertxMatcherAssert</code>.</p><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this post we have seen how you can com­bine Ham­crest and Vert.x Unit. So, you are not lim­ited any­more by the set of as­sert meth­ods pro­vided by Vert.x Unit, and can use the whole ex­pres­sive­ness of Ham­crest Match­ers.</p><p>Don’t for­get that you still can’t use the <code>assert</code> meth­ods from Junit, as they don’t re­port on the <code>TestContext</code>.</p>","scope":{}},"tfIdfTerms":[{"term":"test","tf":21},{"term":"us","tf":17},{"term":"unit","tf":13},{"term":"method","tf":9},{"term":"junit","tf":8},{"term":"assert","tf":8},{"term":"hamcrest","tf":7},{"term":"report","tf":6},{"term":"creat","tf":6},{"term":"asynchron","tf":5},{"term":"not","tf":5},{"term":"matcher","tf":5},{"term":"complet","tf":5},{"term":"verticl","tf":5},{"term":"librari","tf":4},{"term":"need","tf":4},{"term":"let","tf":4},{"term":"implement","tf":4},{"term":"check","tf":4},{"term":"class","tf":4},{"term":"provid","tf":4},{"term":"applic","tf":3},{"term":"just","tf":3},{"term":"add","tf":3},{"term":"http","tf":3}]},{"filename":"blog/2016-01-15-real-time-bidding-with-websockets-and-vert-x.mdx","date":"2016-01-15","slug":"real-time-bidding-with-websockets-and-vert-x","meta":{"title":"Real-time bidding with Websockets and Vert.x","category":"guides","authors":[{"name":"Marcin Warczyglowa","github_id":"mwarc"}],"summary":"The expectations of users for interactivity with web applications have changed over the past few years.\n    Users during bidding in auction no longer want to press the refresh button."},"readingTime":{"text":"10 min read","minutes":9.485,"time":569099.9999999999,"words":1897},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The ex\\xADpec\\xADta\\xADtions of users for in\\xADter\\xADac\\xADtiv\\xADity with web ap\\xADpli\\xADca\\xADtions have changed over the past few years.\\nUsers dur\\xADing bid\\xADding in auc\\xADtion no longer want to press the re\\xADfresh but\\xADton to check if the price\\nhas changed or the auc\\xADtion is over. This made bid\\xADding dif\\xADfi\\xADcult and less fun.\\nIn\\xADstead, they ex\\xADpect to see the up\\xADdates in ap\\xADpli\\xADca\\xADtion in real-\\u200Btime.\"), mdx(\"p\", null, \"In this ar\\xADti\\xADcle I want to show how to cre\\xADate a sim\\xADple ap\\xADpli\\xADca\\xADtion that pro\\xADvides real-\\u200Btime bid\\xADding.\\nWe will use Web\\xADSock\\xADets, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sockjs/sockjs-client\"\n  }), \"SockJS\"), \" and Vert.x.\"), mdx(\"p\", null, \"We will cre\\xADate a front-\\u200Bend for fast bid\\xADding that com\\xADmu\\xADni\\xADcates with a micro-\\u200Bservice writ\\xADten in Java and based on Vert.x.\"), mdx(\"h2\", {\n    \"id\": \"what-are-websockets\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#what-are-websockets\"\n  })), \"What are Websockets?\"), mdx(\"p\", null, \"Web\\xADSocket is asyn\\xADchro\\xADnous, bidi\\xADrec\\xADtional, full-\\u200Bduplex pro\\xADto\\xADcol that pro\\xADvides a com\\xADmu\\xADni\\xADca\\xADtion chan\\xADnel over a sin\\xADgle TCP con\\xADnec\\xADtion.\\nWith the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.w3.org/TR/websockets/\"\n  }), \"Web\\xADSocket API\"), \" it pro\\xADvides bidi\\xADrec\\xADtional com\\xADmu\\xADni\\xADca\\xADtion be\\xADtween the web\\xADsite and a re\\xADmote server.\"), mdx(\"p\", null, \"Web\\xADSock\\xADets solve many prob\\xADlems which pre\\xADvented the HTTP pro\\xADto\\xADcol from being suit\\xADable for use in mod\\xADern,\\nreal-\\u200Btime ap\\xADpli\\xADca\\xADtions. Workarounds like polling are no longer needed, which sim\\xADpli\\xADfies ap\\xADpli\\xADca\\xADtion ar\\xADchi\\xADtec\\xADture.\\nWeb\\xADSock\\xADets do not need to open mul\\xADti\\xADple HTTP con\\xADnec\\xADtions, they pro\\xADvide a re\\xADduc\\xADtion of un\\xADnec\\xADes\\xADsary net\\xADwork traf\\xADfic and re\\xADduce la\\xADtency.\"), mdx(\"h2\", {\n    \"id\": \"websocket-api-vs-sockjs\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#websocket-api-vs-sockjs\"\n  })), \"Websocket API vs SockJS\"), mdx(\"p\", null, \"Un\\xADfor\\xADtu\\xADnately, Web\\xADSock\\xADets are not sup\\xADported by all web browsers. How\\xADever, there are li\\xADbraries that pro\\xADvide a fall\\xADback\\nwhen Web\\xADSock\\xADets are not avail\\xADable. One such li\\xADbrary is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sockjs/sockjs-client\"\n  }), \"SockJS\"), \".\\nSockJS starts from try\\xADing to use the Web\\xADSocket pro\\xADto\\xADcol. How\\xADever, if this is not pos\\xADsi\\xADble,\\nit uses  a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https\"\n  }), \"va\\xADri\\xADety of browser-\\u200Bspecific trans\\xADport pro\\xADto\\xADcols\"), \".\\nSockJS is a li\\xADbrary de\\xADsigned to work in all mod\\xADern browsers and in en\\xADvi\\xADron\\xADments that do not sup\\xADport Web\\xADSocket pro\\xADto\\xADcol,\\nfor in\\xADstance be\\xADhind re\\xADstric\\xADtive cor\\xADpo\\xADrate proxy. SockJS pro\\xADvides an API sim\\xADi\\xADlar to the stan\\xADdard Web\\xADSocket API.\"), mdx(\"h2\", {\n    \"id\": \"frontend-to-fast-bidding\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#frontend-to-fast-bidding\"\n  })), \"Frontend to fast bidding\"), mdx(\"p\", null, \"Auc\\xADtion web page con\\xADtains the bid\\xADding form and some sim\\xADple JavaScript which loads cur\\xADrent price from the ser\\xADvice,\\nopens an event bus con\\xADnec\\xADtion to the SockJS server and of\\xADfers bid\\xADding.\\nHTML source code of sam\\xADple web page on which we bid might look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-html\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"h3\"), \">\"), \"Auction 1\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"h3\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"id\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"error_message\\\"\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"form\"), \">\"), \"\\n    Current price:\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"span\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"id\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"current_price\\\"\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"span\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"label\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"for\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my_bid_value\\\"\"), \">\"), \"Your offer:\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"label\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"input\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"id\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my_bid_value\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"type\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"text\\\"\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"input\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"type\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"button\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"onclick\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"bid();\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"value\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bid\\\"\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \">\"), \"\\n        Feed:\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"textarea\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"id\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"feed\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"rows\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"4\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"cols\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"50\\\"\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"readonly\"), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"textarea\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"div\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"form\"), \">\"), \"\\n\")), mdx(\"p\", null, \"We use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-eventbus.js\"), \" li\\xADbrary to cre\\xADate a con\\xADnec\\xADtion to the event bus.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-eventbus.js\"), \" li\\xADbrary is a part of the Vert.x dis\\xADtri\\xADb\\xADu\\xADtion. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-eventbus.js\"), \" in\\xADter\\xADnally uses SockJS li\\xADbrary\\nto send the data to the SockJS server. In the code snip\\xADpet below we cre\\xADate an in\\xADstance of the event bus.\\nThe pa\\xADra\\xADme\\xADter to the con\\xADstruc\\xADtor is the URI where to con\\xADnect to the event bus.\\nThen we reg\\xADis\\xADter the han\\xADdler lis\\xADten\\xADing on ad\\xADdress \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auction.<auction_id>\"), \". Each client has a pos\\xADsi\\xADbil\\xADity of reg\\xADis\\xADter\\xADing\\nat mul\\xADti\\xADple ad\\xADdresses e.g. when bid\\xADding in the auc\\xADtion 1234, they reg\\xADis\\xADter on the ad\\xADdress \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auction.1234\"), \" etc.\\nWhen data ar\\xADrives in the han\\xADdler, we change the cur\\xADrent price and the bid\\xADding feed on the auc\\xADtion\\u2019s web page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"registerHandlerForUpdateCurrentPriceAndFeed\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" eventBus = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" EventBus(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'http://localhost:8080/eventbus'\"), \");\\n    eventBus.onopen = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n        eventBus.registerHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'auction.'\"), \" + auction_id, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"error, message\"), \") \"), \"{\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \".getElementById(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'current_price'\"), \").innerHTML = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"JSON\"), \".parse(message.body).price;\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \".getElementById(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'feed'\"), \").value += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'New offer: '\"), \" + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"JSON\"), \".parse(message.body).price + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'\\\\n'\"), \";\\n        });\\n    }\\n};\\n\")), mdx(\"p\", null, \"Any user at\\xADtempt to bid gen\\xADer\\xADates a PATCH Ajax re\\xADquest\\nto the ser\\xADvice with in\\xADfor\\xADma\\xADtion about the new offer made at auc\\xADtion (see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bid()\"), \" func\\xADtion).\\nOn the server side we pub\\xADlish this in\\xADfor\\xADma\\xADtion on the event bus to all clients reg\\xADis\\xADtered to an ad\\xADdress.\\nIf you re\\xADceive an HTTP re\\xADsponse sta\\xADtus code other than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"200 (OK)\"), \", an error mes\\xADsage is dis\\xADplayed on the web page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"bid\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" newPrice = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \".getElementById(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'my_bid_value'\"), \").value;\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" xmlhttp = (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".XMLHttpRequest) ? \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" XMLHttpRequest() : \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" ActiveXObject(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Microsoft.XMLHTTP\\\"\"), \");\\n    xmlhttp.onreadystatechange = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (xmlhttp.readyState == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \") {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (xmlhttp.status != \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \") {\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"document\"), \".getElementById(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'error_message'\"), \").innerHTML = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'Sorry, something went wrong.'\"), \";\\n            }\\n        }\\n    };\\n    xmlhttp.open(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"PATCH\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http://localhost:8080/api/auctions/\\\"\"), \" + auction_id);\\n    xmlhttp.setRequestHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Content-Type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \");\\n    xmlhttp.send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"JSON\"), \".stringify({\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"price\"), \": newPrice}));\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"auction-service\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#auction-service\"\n  })), \"Auction Service\"), mdx(\"p\", null, \"SockJS client re\\xADquires the server-\\u200Bside part. Now we are going to cre\\xADate a light-\\u200Bweight REST\\xADful auc\\xADtion ser\\xADvice.\\nWe will send and re\\xADtrieve data in JSON for\\xADmat. Let\\u2019s start by cre\\xADat\\xADing a ver\\xADti\\xADcle.\\nFirst we need to in\\xADherit from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/AbstractVerticle.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"AbstractVerticle\")), \"\\nand over\\xADride the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method.\\nEach ver\\xADti\\xADcle in\\xADstance has a mem\\xADber vari\\xADable called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \". This pro\\xADvides ac\\xADcess to the Vert.x core API.\\nFor ex\\xADam\\xADple, to cre\\xADate an HTTP server you call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createHttpServer\"), \" method on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx\"), \" in\\xADstance.\\nTo tell the server to lis\\xADten on port 8080 for in\\xADcom\\xADing re\\xADquests you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listen\"), \" method.\"), mdx(\"p\", null, \"We need a router with routes. A router takes an HTTP re\\xADquest and finds the first match\\xADing route.\\nThe route can have a han\\xADdler as\\xADso\\xADci\\xADated with it, which re\\xADceives the re\\xADquest\\n(e.g. route that matches path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/eventbus/*\"), \" is  as\\xADso\\xADci\\xADated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eventBusHandler\"), \").\"), mdx(\"p\", null, \"We can do some\\xADthing with the re\\xADquest, and then, end it or pass it to the next match\\xADing han\\xADdler.\"), mdx(\"p\", null, \"If you have a lot of han\\xADdlers it makes sense to split them up into mul\\xADti\\xADple routers.\"), mdx(\"p\", null, \"You can do this by mount\\xADing a router at a mount point in an\\xADother router\\n(see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auctionApiRouter\"), \" that cor\\xADre\\xADsponds to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/api\"), \" mount point in code snip\\xADpet below).\"), mdx(\"p\", null, \"Here\\u2019s an ex\\xADam\\xADple ver\\xADti\\xADcle:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AuctionServiceVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n        Router router = Router.router(vertx);\\n\\n        router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/eventbus/*\\\"\"), \").handler(eventBusHandler());\\n        router.mountSubRouter(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/api\\\"\"), \", auctionApiRouter());\\n        router.route().failureHandler(errorHandler());\\n        router.route().handler(staticHandler());\\n\\n        vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n    }\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//\\u2026\"), \"\\n}\\n\")), mdx(\"p\", null, \"Now we\\u2019ll look at things in more de\\xADtail. We\\u2019ll dis\\xADcuss Vert.x fea\\xADtures used in ver\\xADti\\xADcle:\\nerror han\\xADdler, SockJS han\\xADdler, body han\\xADdler, shared data, sta\\xADtic han\\xADdler and rout\\xADing based on method, path etc.\"), mdx(\"h3\", {\n    \"id\": \"error-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#error-handler\"\n  })), \"Error handler\"), mdx(\"p\", null, \"As well as set\\xADting han\\xADdlers to han\\xADdle re\\xADquests you can also set a han\\xADdler for fail\\xADures in rout\\xADing.\\nFail\\xADure in rout\\xADing oc\\xADcurs if a han\\xADdler throws an ex\\xADcep\\xADtion, or if a han\\xADdler calls \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#fail-int-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"fail\")), \" method.\\nTo ren\\xADder error pages we use error han\\xADdler pro\\xADvides by Vert.x:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" ErrorHandler \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"errorHandler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" ErrorHandler.create();\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"sockjs-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#sockjs-handler\"\n  })), \"SockJS handler\"), mdx(\"p\", null, \"Vert.x pro\\xADvides SockJS han\\xADdler with the event bus bridge which ex\\xADtends\\nthe server-\\u200Bside Vert.x event bus into client side JavaScript.\"), mdx(\"p\", null, \"Con\\xADfig\\xADur\\xADing the bridge to tell it which mes\\xADsages should pass through is easy.\\nYou can spec\\xADify which matches you want to allow for in\\xADbound and out\\xADbound traf\\xADfic\\nusing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/sockjs/BridgeOptions.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"BridgeOptions\")), \".\\nIf a mes\\xADsage is out\\xADbound, be\\xADfore send\\xADing it from the server to the client side JavaScript,\\nVert.x will look through any out\\xADbound per\\xADmit\\xADted matches. In code snip\\xADpet below we allow any mes\\xADsages\\nfrom ad\\xADdresses start\\xADing with \\u201Cauc\\xADtion.\\u201D and end\\xADing with dig\\xADits (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auction.1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auction.100\"), \" etc).\"), mdx(\"p\", null, \"If you want to be no\\xADti\\xADfied when an event oc\\xADcurs on the bridge you can pro\\xADvide a han\\xADdler when call\\xADing the bridge.\\nFor ex\\xADam\\xADple, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SOCKET_CREATED\"), \" event will occur when a new SockJS socket is cre\\xADated.\\nThe event is an in\\xADstance of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/core/Future.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Future\")), \".\\nWhen you are fin\\xADished han\\xADdling the event you can com\\xADplete the fu\\xADture with \\u201Ctrue\\u201D to en\\xADable fur\\xADther pro\\xADcess\\xADing.\"), mdx(\"p\", null, \"To start the bridge sim\\xADply call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bridge\"), \" method on the SockJS han\\xADdler:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" SockJSHandler \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"eventBusHandler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    BridgeOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BridgeOptions()\\n            .addOutboundPermitted(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" PermittedOptions().setAddressRegex(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"auction\\\\\\\\.[0-9]+\\\"\"), \"));\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" SockJSHandler.create(vertx).bridge(options, event -> {\\n         \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (event.type() == BridgeEventType.SOCKET_CREATED) {\\n            logger.info(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"A socket was created\\\"\"), \");\\n        }\\n        event.complete(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"true\"), \");\\n    });\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"body-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#body-handler\"\n  })), \"Body handler\"), mdx(\"p\", null, \"The Body\\xADHan\\xADdler al\\xADlows you to re\\xADtrieve the re\\xADquest body, limit the body size and to han\\xADdle the file up\\xADload.\\nBody han\\xADdler should be on a match\\xADing route for any re\\xADquests that re\\xADquire this func\\xADtion\\xADal\\xADity.\\nWe need Body\\xADHan\\xADdler dur\\xADing the bid\\xADding process (PATCH method re\\xADquest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/auctions/<auction_id>\"), \" con\\xADtains re\\xADquest body\\nwith in\\xADfor\\xADma\\xADtion about a new offer made at auc\\xADtion). Cre\\xADat\\xADing a new body han\\xADdler is sim\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"BodyHandler.create();\\n\")), mdx(\"p\", null, \"If re\\xADquest body is in JSON for\\xADmat, you can get it with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#getBodyAsJson--\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"getBodyAsJson\")), \" method.\"), mdx(\"h3\", {\n    \"id\": \"shared-data\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#shared-data\"\n  })), \"Shared data\"), mdx(\"p\", null, \"Shared data con\\xADtains func\\xADtion\\xADal\\xADity that al\\xADlows you to safely share the data be\\xADtween dif\\xADfer\\xADent ap\\xADpli\\xADca\\xADtions\\nin the same Vert.x in\\xADstance or across a clus\\xADter of Vert.x in\\xADstances.\\nShared data in\\xADcludes local shared maps, dis\\xADtrib\\xADuted, cluster-\\u200Bwide maps, asyn\\xADchro\\xADnous cluster-\\u200Bwide locks\\nand asyn\\xADchro\\xADnous cluster-\\u200Bwide coun\\xADters.\"), mdx(\"p\", null, \"To sim\\xADplify the ap\\xADpli\\xADca\\xADtion we use the local shared map to save in\\xADfor\\xADma\\xADtion about auc\\xADtions.\\nThe local shared map al\\xADlows you to share data be\\xADtween dif\\xADfer\\xADent ver\\xADti\\xADcles in the same Vert.x in\\xADstance.\\nHere\\u2019s an ex\\xADam\\xADple of using a shared local map in an auc\\xADtion ser\\xADvice:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AuctionRepository\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//\\u2026\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" Optional<Auction> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getById\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String auctionId)\"), \" \"), \"{\\n        LocalMap<String, String> auctionSharedData = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".sharedData.getLocalMap(auctionId);\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Optional.of(auctionSharedData)\\n            .filter(m -> !m.isEmpty())\\n            .map(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \"::convertToAuction);\\n    }\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"save\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Auction auction)\"), \" \"), \"{\\n        LocalMap<String, String> auctionSharedData = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".sharedData.getLocalMap(auction.getId());\\n\\n        auctionSharedData.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \", auction.getId());\\n        auctionSharedData.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"price\\\"\"), \", auction.getPrice());\\n    }\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"//\\u2026\"), \"\\n}\\n\")), mdx(\"p\", null, \"If you want to store auc\\xADtion data in a data\\xADbase, Vert.x pro\\xADvides a few dif\\xADfer\\xADent asyn\\xADchro\\xADnous clients\\nfor ac\\xADcess\\xADing var\\xADi\\xADous data stor\\xADages (Mon\\xADgoDB, Redis or JDBC client).\"), mdx(\"h3\", {\n    \"id\": \"auction-api\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#auction-api\"\n  })), \"Auction API\"), mdx(\"p\", null, \"Vert.x lets you route HTTP re\\xADquests to dif\\xADfer\\xADent han\\xADdlers based on pat\\xADtern match\\xADing on the re\\xADquest path.\\nIt also en\\xADables you to ex\\xADtract val\\xADues from the path and use them as pa\\xADra\\xADme\\xADters in the re\\xADquest.\\nCor\\xADre\\xADspond\\xADing meth\\xADods exist for each HTTP method. The first match\\xADing one will re\\xADceive the re\\xADquest.\\nThis func\\xADtion\\xADal\\xADity is par\\xADtic\\xADu\\xADlarly use\\xADful when de\\xADvel\\xADop\\xADing REST-\\u200Bstyle web ap\\xADpli\\xADca\\xADtions.\"), mdx(\"p\", null, \"To ex\\xADtract pa\\xADra\\xADme\\xADters from the path, you can use the colon char\\xADac\\xADter to de\\xADnote the name of a pa\\xADra\\xADme\\xADter.\\nReg\\xADu\\xADlar ex\\xADpres\\xADsions can also be used to ex\\xADtract more com\\xADplex matches.\\nAny pa\\xADra\\xADme\\xADters ex\\xADtracted by pat\\xADtern match\\xADing are added to the map of re\\xADquest pa\\xADra\\xADme\\xADters.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#consumes-java.lang.String-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Consumes\")), \"\\nde\\xADscribes which MIME types the han\\xADdler can con\\xADsume.\\nBy using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#produces-java.lang.String-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"produces\")), \"\\nyou de\\xADfine which MIME types the route pro\\xADduces.\\nIn the code below the routes will match any re\\xADquest with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content-type\"), \" header\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accept\"), \" header that matches \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application/json\"), \".\"), mdx(\"p\", null, \"Let\\u2019s look at an ex\\xADam\\xADple of a sub\\xADrouter mounted on the main router which was cre\\xADated in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method in ver\\xADti\\xADcle:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Router \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"auctionApiRouter\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    AuctionRepository repository = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" AuctionRepository(vertx.sharedData());\\n    AuctionValidator validator = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" AuctionValidator(repository);\\n    AuctionHandler handler = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" AuctionHandler(repository, validator);\\n\\n    Router router = Router.router(vertx);\\n    router.route().handler(BodyHandler.create());\\n\\n    router.route().consumes(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \");\\n    router.route().produces(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \");\\n\\n    router.get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/auctions/:id\\\"\"), \").handler(handler::handleGetAuction);\\n    router.patch(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/auctions/:id\\\"\"), \").handler(handler::handleChangeAuctionPrice);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" router;\\n}\\n\")), mdx(\"p\", null, \"The GET re\\xADquest re\\xADturns auc\\xADtion data, while the PATCH method re\\xADquest al\\xADlows you to bid up in the auc\\xADtion.\\nLet\\u2019s focus on the more in\\xADter\\xADest\\xADing method, namely \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleChangeAuctionPrice\"), \".\\nIn the sim\\xADplest terms, the method might look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"handleChangeAuctionPrice\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext context)\"), \" \"), \"{\\n    String auctionId = context.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n    Auction auction = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Auction(\\n        auctionId,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BigDecimal(context.getBodyAsJson().getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"price\\\"\"), \"))\\n    );\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"this\"), \".repository.save(auction);\\n    context.vertx().eventBus().publish(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"auction.\\\"\"), \" + auctionId, context.getBodyAsString());\\n\\n    context.response()\\n        .setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \")\\n        .end();\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PATCH\"), \" re\\xADquest to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/auctions/1\"), \" would re\\xADsult in vari\\xADable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auctionId\"), \" get\\xADting the value 1.\\nWe save a new offer in the auc\\xADtion and then pub\\xADlish this in\\xADfor\\xADma\\xADtion on the event bus to all clients\\nreg\\xADis\\xADtered on the ad\\xADdress on the client side JavaScript.\\nAfter you have fin\\xADished with the HTTP re\\xADsponse you must call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \" func\\xADtion on it.\"), mdx(\"h3\", {\n    \"id\": \"static-handler\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#static-handler\"\n  })), \"Static handler\"), mdx(\"p\", null, \"Vert.x pro\\xADvides the han\\xADdler for serv\\xADing sta\\xADtic web re\\xADsources.\\nThe de\\xADfault di\\xADrec\\xADtory from which sta\\xADtic files are served is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webroot\"), \", but this can be con\\xADfig\\xADured.\\nBy de\\xADfault the sta\\xADtic han\\xADdler will set cache head\\xADers to en\\xADable browsers to cache files.\\nSet\\xADting cache head\\xADers can be dis\\xADabled with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/StaticHandler.html#setCachingEnabled-boolean-\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"setCachingEnabled\")), \" method.\\nTo serve the auc\\xADtion HTML page, JS files (and other sta\\xADtic files) from auc\\xADtion ser\\xADvice, you can cre\\xADate a sta\\xADtic han\\xADdler like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" StaticHandler \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"staticHandler\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" StaticHandler.create()\\n        .setCachingEnabled(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"false\"), \");\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"lets-run\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#lets-run\"\n  })), \"Let\\u2019s run!\"), mdx(\"p\", null, \"Full ap\\xADpli\\xADca\\xADtion code is avail\\xADable on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mwarc/simple-realtime-auctions-vertx3-example\"\n  }), \"github\"), \".\"), mdx(\"p\", null, \"Clone the repos\\xADi\\xADtory and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./gradlew run\"), \".\"), mdx(\"p\", null, \"Open one or more browsers and point them to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8080\"), \". Now you can bid in auc\\xADtion:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/real-time-bidding-with-websockets-and-vertx/bidding_in_application.png\",\n    \"alt\": \"Real time bidding in application\"\n  }))), mdx(\"h2\", {\n    \"id\": \"summary\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#summary\"\n  })), \"Summary\"), mdx(\"p\", null, \"This ar\\xADti\\xADcle presents the out\\xADline of a sim\\xADple ap\\xADpli\\xADca\\xADtion that al\\xADlows real-\\u200Btime bid\\xADding.\\nWe cre\\xADated a light\\xADweight, high-\\u200Bperformance and scal\\xADable micro-\\u200Bservice writ\\xADten in Java and based on Vert.x.\\nWe dis\\xADcussed what Vert.x of\\xADfers, among oth\\xADers, a dis\\xADtrib\\xADuted event bus and an el\\xADe\\xADgant API that al\\xADlows you to cre\\xADate ap\\xADpli\\xADca\\xADtions in no time.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>The ex­pec­ta­tions of users for in­ter­ac­tiv­ity with web ap­pli­ca­tions have changed over the past few years.\nUsers dur­ing bid­ding in auc­tion no longer want to press the re­fresh but­ton to check if the price\nhas changed or the auc­tion is over. This made bid­ding dif­fi­cult and less fun.\nIn­stead, they ex­pect to see the up­dates in ap­pli­ca­tion in real-​time.</p><p>In this ar­ti­cle I want to show how to cre­ate a sim­ple ap­pli­ca­tion that pro­vides real-​time bid­ding.\nWe will use Web­Sock­ets, <a href=\"https://github.com/sockjs/sockjs-client\">SockJS</a> and Vert.x.</p><p>We will cre­ate a front-​end for fast bid­ding that com­mu­ni­cates with a micro-​service writ­ten in Java and based on Vert.x.</p><h2 id=\"what-are-websockets\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#what-are-websockets\"></a>What are Websockets?</h2><p>Web­Socket is asyn­chro­nous, bidi­rec­tional, full-​duplex pro­to­col that pro­vides a com­mu­ni­ca­tion chan­nel over a sin­gle TCP con­nec­tion.\nWith the <a href=\"http://www.w3.org/TR/websockets/\">Web­Socket API</a> it pro­vides bidi­rec­tional com­mu­ni­ca­tion be­tween the web­site and a re­mote server.</p><p>Web­Sock­ets solve many prob­lems which pre­vented the HTTP pro­to­col from being suit­able for use in mod­ern,\nreal-​time ap­pli­ca­tions. Workarounds like polling are no longer needed, which sim­pli­fies ap­pli­ca­tion ar­chi­tec­ture.\nWeb­Sock­ets do not need to open mul­ti­ple HTTP con­nec­tions, they pro­vide a re­duc­tion of un­nec­es­sary net­work traf­fic and re­duce la­tency.</p><h2 id=\"websocket-api-vs-sockjs\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#websocket-api-vs-sockjs\"></a>Websocket API vs SockJS</h2><p>Un­for­tu­nately, Web­Sock­ets are not sup­ported by all web browsers. How­ever, there are li­braries that pro­vide a fall­back\nwhen Web­Sock­ets are not avail­able. One such li­brary is <a href=\"https://github.com/sockjs/sockjs-client\">SockJS</a>.\nSockJS starts from try­ing to use the Web­Socket pro­to­col. How­ever, if this is not pos­si­ble,\nit uses  a <a href=\"https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https\">va­ri­ety of browser-​specific trans­port pro­to­cols</a>.\nSockJS is a li­brary de­signed to work in all mod­ern browsers and in en­vi­ron­ments that do not sup­port Web­Socket pro­to­col,\nfor in­stance be­hind re­stric­tive cor­po­rate proxy. SockJS pro­vides an API sim­i­lar to the stan­dard Web­Socket API.</p><h2 id=\"frontend-to-fast-bidding\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#frontend-to-fast-bidding\"></a>Frontend to fast bidding</h2><p>Auc­tion web page con­tains the bid­ding form and some sim­ple JavaScript which loads cur­rent price from the ser­vice,\nopens an event bus con­nec­tion to the SockJS server and of­fers bid­ding.\nHTML source code of sam­ple web page on which we bid might look like this:</p><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Auction 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;error_message&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n    Current price:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;current_price&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;my_bid_value&quot;</span>&gt;</span>Your offer:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;my_bid_value&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;bid();&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Bid&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        Feed:\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;feed&quot;</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;4&quot;</span> <span class=\"hljs-attr\">cols</span>=<span class=\"hljs-string\">&quot;50&quot;</span> <span class=\"hljs-attr\">readonly</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre><p>We use the <code>vertx-eventbus.js</code> li­brary to cre­ate a con­nec­tion to the event bus.\n<code>vertx-eventbus.js</code> li­brary is a part of the Vert.x dis­tri­b­u­tion. <code>vertx-eventbus.js</code> in­ter­nally uses SockJS li­brary\nto send the data to the SockJS server. In the code snip­pet below we cre­ate an in­stance of the event bus.\nThe pa­ra­me­ter to the con­struc­tor is the URI where to con­nect to the event bus.\nThen we reg­is­ter the han­dler lis­ten­ing on ad­dress <code>auction.&lt;auction_id&gt;</code>. Each client has a pos­si­bil­ity of reg­is­ter­ing\nat mul­ti­ple ad­dresses e.g. when bid­ding in the auc­tion 1234, they reg­is­ter on the ad­dress <code>auction.1234</code> etc.\nWhen data ar­rives in the han­dler, we change the cur­rent price and the bid­ding feed on the auc­tion’s web page.</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">registerHandlerForUpdateCurrentPriceAndFeed</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> eventBus = <span class=\"hljs-keyword\">new</span> EventBus(<span class=\"hljs-string\">&#x27;http://localhost:8080/eventbus&#x27;</span>);\n    eventBus.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        eventBus.registerHandler(<span class=\"hljs-string\">&#x27;auction.&#x27;</span> + auction_id, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, message</span>) </span>{\n            <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;current_price&#x27;</span>).innerHTML = <span class=\"hljs-built_in\">JSON</span>.parse(message.body).price;\n            <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;feed&#x27;</span>).value += <span class=\"hljs-string\">&#x27;New offer: &#x27;</span> + <span class=\"hljs-built_in\">JSON</span>.parse(message.body).price + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n        });\n    }\n};\n</code></pre><p>Any user at­tempt to bid gen­er­ates a PATCH Ajax re­quest\nto the ser­vice with in­for­ma­tion about the new offer made at auc­tion (see <code>bid()</code> func­tion).\nOn the server side we pub­lish this in­for­ma­tion on the event bus to all clients reg­is­tered to an ad­dress.\nIf you re­ceive an HTTP re­sponse sta­tus code other than <code>200 (OK)</code>, an error mes­sage is dis­played on the web page.</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bid</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> newPrice = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;my_bid_value&#x27;</span>).value;\n\n    <span class=\"hljs-keyword\">var</span> xmlhttp = (<span class=\"hljs-built_in\">window</span>.XMLHttpRequest) ? <span class=\"hljs-keyword\">new</span> XMLHttpRequest() : <span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">&quot;Microsoft.XMLHTTP&quot;</span>);\n    xmlhttp.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (xmlhttp.readyState == <span class=\"hljs-number\">4</span>) {\n            <span class=\"hljs-keyword\">if</span> (xmlhttp.status != <span class=\"hljs-number\">200</span>) {\n                <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;error_message&#x27;</span>).innerHTML = <span class=\"hljs-string\">&#x27;Sorry, something went wrong.&#x27;</span>;\n            }\n        }\n    };\n    xmlhttp.open(<span class=\"hljs-string\">&quot;PATCH&quot;</span>, <span class=\"hljs-string\">&quot;http://localhost:8080/api/auctions/&quot;</span> + auction_id);\n    xmlhttp.setRequestHeader(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>);\n    xmlhttp.send(<span class=\"hljs-built_in\">JSON</span>.stringify({<span class=\"hljs-attr\">price</span>: newPrice}));\n};\n</code></pre><h2 id=\"auction-service\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#auction-service\"></a>Auction Service</h2><p>SockJS client re­quires the server-​side part. Now we are going to cre­ate a light-​weight REST­ful auc­tion ser­vice.\nWe will send and re­trieve data in JSON for­mat. Let’s start by cre­at­ing a ver­ti­cle.\nFirst we need to in­herit from <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/AbstractVerticle.html\"><code>AbstractVerticle</code></a>\nand over­ride the <code>start</code> method.\nEach ver­ti­cle in­stance has a mem­ber vari­able called <code>vertx</code>. This pro­vides ac­cess to the Vert.x core API.\nFor ex­am­ple, to cre­ate an HTTP server you call the <code>createHttpServer</code> method on <code>vertx</code> in­stance.\nTo tell the server to lis­ten on port 8080 for in­com­ing re­quests you use the <code>listen</code> method.</p><p>We need a router with routes. A router takes an HTTP re­quest and finds the first match­ing route.\nThe route can have a han­dler as­so­ci­ated with it, which re­ceives the re­quest\n(e.g. route that matches path <code>/eventbus/*</code> is  as­so­ci­ated with <code>eventBusHandler</code>).</p><p>We can do some­thing with the re­quest, and then, end it or pass it to the next match­ing han­dler.</p><p>If you have a lot of han­dlers it makes sense to split them up into mul­ti­ple routers.</p><p>You can do this by mount­ing a router at a mount point in an­other router\n(see <code>auctionApiRouter</code> that cor­re­sponds to <code>/api</code> mount point in code snip­pet below).</p><p>Here’s an ex­am­ple ver­ti­cle:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuctionServiceVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n        Router router = Router.router(vertx);\n\n        router.route(<span class=\"hljs-string\">&quot;/eventbus/*&quot;</span>).handler(eventBusHandler());\n        router.mountSubRouter(<span class=\"hljs-string\">&quot;/api&quot;</span>, auctionApiRouter());\n        router.route().failureHandler(errorHandler());\n        router.route().handler(staticHandler());\n\n        vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n    }\n\n    <span class=\"hljs-comment\">//…</span>\n}\n</code></pre><p>Now we’ll look at things in more de­tail. We’ll dis­cuss Vert.x fea­tures used in ver­ti­cle:\nerror han­dler, SockJS han­dler, body han­dler, shared data, sta­tic han­dler and rout­ing based on method, path etc.</p><h3 id=\"error-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#error-handler\"></a>Error handler</h3><p>As well as set­ting han­dlers to han­dle re­quests you can also set a han­dler for fail­ures in rout­ing.\nFail­ure in rout­ing oc­curs if a han­dler throws an ex­cep­tion, or if a han­dler calls <a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#fail-int-\"><code>fail</code></a> method.\nTo ren­der error pages we use error han­dler pro­vides by Vert.x:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ErrorHandler <span class=\"hljs-title\">errorHandler</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> ErrorHandler.create();\n}\n</code></pre><h3 id=\"sockjs-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#sockjs-handler\"></a>SockJS handler</h3><p>Vert.x pro­vides SockJS han­dler with the event bus bridge which ex­tends\nthe server-​side Vert.x event bus into client side JavaScript.</p><p>Con­fig­ur­ing the bridge to tell it which mes­sages should pass through is easy.\nYou can spec­ify which matches you want to allow for in­bound and out­bound traf­fic\nusing the <a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/sockjs/BridgeOptions.html\"><code>BridgeOptions</code></a>.\nIf a mes­sage is out­bound, be­fore send­ing it from the server to the client side JavaScript,\nVert.x will look through any out­bound per­mit­ted matches. In code snip­pet below we allow any mes­sages\nfrom ad­dresses start­ing with “auc­tion.” and end­ing with dig­its (e.g. <code>auction.1</code>, <code>auction.100</code> etc).</p><p>If you want to be no­ti­fied when an event oc­curs on the bridge you can pro­vide a han­dler when call­ing the bridge.\nFor ex­am­ple, <code>SOCKET_CREATED</code> event will occur when a new SockJS socket is cre­ated.\nThe event is an in­stance of <a href=\"http://vertx.io/docs/apidocs/io/vertx/core/Future.html\"><code>Future</code></a>.\nWhen you are fin­ished han­dling the event you can com­plete the fu­ture with “true” to en­able fur­ther pro­cess­ing.</p><p>To start the bridge sim­ply call <code>bridge</code> method on the SockJS han­dler:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> SockJSHandler <span class=\"hljs-title\">eventBusHandler</span><span class=\"hljs-params\">()</span> </span>{\n    BridgeOptions options = <span class=\"hljs-keyword\">new</span> BridgeOptions()\n            .addOutboundPermitted(<span class=\"hljs-keyword\">new</span> PermittedOptions().setAddressRegex(<span class=\"hljs-string\">&quot;auction\\\\.[0-9]+&quot;</span>));\n    <span class=\"hljs-keyword\">return</span> SockJSHandler.create(vertx).bridge(options, event -&gt; {\n         <span class=\"hljs-keyword\">if</span> (event.type() == BridgeEventType.SOCKET_CREATED) {\n            logger.info(<span class=\"hljs-string\">&quot;A socket was created&quot;</span>);\n        }\n        event.complete(<span class=\"hljs-keyword\">true</span>);\n    });\n}\n</code></pre><h3 id=\"body-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#body-handler\"></a>Body handler</h3><p>The Body­Han­dler al­lows you to re­trieve the re­quest body, limit the body size and to han­dle the file up­load.\nBody han­dler should be on a match­ing route for any re­quests that re­quire this func­tion­al­ity.\nWe need Body­Han­dler dur­ing the bid­ding process (PATCH method re­quest <code>/auctions/&lt;auction_id&gt;</code> con­tains re­quest body\nwith in­for­ma­tion about a new offer made at auc­tion). Cre­at­ing a new body han­dler is sim­ple:</p><pre><code class=\"hljs language-java\">BodyHandler.create();\n</code></pre><p>If re­quest body is in JSON for­mat, you can get it with\n<a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html#getBodyAsJson--\"><code>getBodyAsJson</code></a> method.</p><h3 id=\"shared-data\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#shared-data\"></a>Shared data</h3><p>Shared data con­tains func­tion­al­ity that al­lows you to safely share the data be­tween dif­fer­ent ap­pli­ca­tions\nin the same Vert.x in­stance or across a clus­ter of Vert.x in­stances.\nShared data in­cludes local shared maps, dis­trib­uted, cluster-​wide maps, asyn­chro­nous cluster-​wide locks\nand asyn­chro­nous cluster-​wide coun­ters.</p><p>To sim­plify the ap­pli­ca­tion we use the local shared map to save in­for­ma­tion about auc­tions.\nThe local shared map al­lows you to share data be­tween dif­fer­ent ver­ti­cles in the same Vert.x in­stance.\nHere’s an ex­am­ple of using a shared local map in an auc­tion ser­vice:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuctionRepository</span> </span>{\n\n    <span class=\"hljs-comment\">//…</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Optional&lt;Auction&gt; <span class=\"hljs-title\">getById</span><span class=\"hljs-params\">(String auctionId)</span> </span>{\n        LocalMap&lt;String, String&gt; auctionSharedData = <span class=\"hljs-keyword\">this</span>.sharedData.getLocalMap(auctionId);\n\n        <span class=\"hljs-keyword\">return</span> Optional.of(auctionSharedData)\n            .filter(m -&gt; !m.isEmpty())\n            .map(<span class=\"hljs-keyword\">this</span>::convertToAuction);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(Auction auction)</span> </span>{\n        LocalMap&lt;String, String&gt; auctionSharedData = <span class=\"hljs-keyword\">this</span>.sharedData.getLocalMap(auction.getId());\n\n        auctionSharedData.put(<span class=\"hljs-string\">&quot;id&quot;</span>, auction.getId());\n        auctionSharedData.put(<span class=\"hljs-string\">&quot;price&quot;</span>, auction.getPrice());\n    }\n\n    <span class=\"hljs-comment\">//…</span>\n}\n</code></pre><p>If you want to store auc­tion data in a data­base, Vert.x pro­vides a few dif­fer­ent asyn­chro­nous clients\nfor ac­cess­ing var­i­ous data stor­ages (Mon­goDB, Redis or JDBC client).</p><h3 id=\"auction-api\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#auction-api\"></a>Auction API</h3><p>Vert.x lets you route HTTP re­quests to dif­fer­ent han­dlers based on pat­tern match­ing on the re­quest path.\nIt also en­ables you to ex­tract val­ues from the path and use them as pa­ra­me­ters in the re­quest.\nCor­re­spond­ing meth­ods exist for each HTTP method. The first match­ing one will re­ceive the re­quest.\nThis func­tion­al­ity is par­tic­u­larly use­ful when de­vel­op­ing REST-​style web ap­pli­ca­tions.</p><p>To ex­tract pa­ra­me­ters from the path, you can use the colon char­ac­ter to de­note the name of a pa­ra­me­ter.\nReg­u­lar ex­pres­sions can also be used to ex­tract more com­plex matches.\nAny pa­ra­me­ters ex­tracted by pat­tern match­ing are added to the map of re­quest pa­ra­me­ters.</p><p><a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#consumes-java.lang.String-\"><code>Consumes</code></a>\nde­scribes which MIME types the han­dler can con­sume.\nBy using <a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/Route.html#produces-java.lang.String-\"><code>produces</code></a>\nyou de­fine which MIME types the route pro­duces.\nIn the code below the routes will match any re­quest with <code>content-type</code> header\nand <code>accept</code> header that matches <code>application/json</code>.</p><p>Let’s look at an ex­am­ple of a sub­router mounted on the main router which was cre­ated in <code>start</code> method in ver­ti­cle:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Router <span class=\"hljs-title\">auctionApiRouter</span><span class=\"hljs-params\">()</span> </span>{\n    AuctionRepository repository = <span class=\"hljs-keyword\">new</span> AuctionRepository(vertx.sharedData());\n    AuctionValidator validator = <span class=\"hljs-keyword\">new</span> AuctionValidator(repository);\n    AuctionHandler handler = <span class=\"hljs-keyword\">new</span> AuctionHandler(repository, validator);\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create());\n\n    router.route().consumes(<span class=\"hljs-string\">&quot;application/json&quot;</span>);\n    router.route().produces(<span class=\"hljs-string\">&quot;application/json&quot;</span>);\n\n    router.get(<span class=\"hljs-string\">&quot;/auctions/:id&quot;</span>).handler(handler::handleGetAuction);\n    router.patch(<span class=\"hljs-string\">&quot;/auctions/:id&quot;</span>).handler(handler::handleChangeAuctionPrice);\n\n    <span class=\"hljs-keyword\">return</span> router;\n}\n</code></pre><p>The GET re­quest re­turns auc­tion data, while the PATCH method re­quest al­lows you to bid up in the auc­tion.\nLet’s focus on the more in­ter­est­ing method, namely <code>handleChangeAuctionPrice</code>.\nIn the sim­plest terms, the method might look like this:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleChangeAuctionPrice</span><span class=\"hljs-params\">(RoutingContext context)</span> </span>{\n    String auctionId = context.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n    Auction auction = <span class=\"hljs-keyword\">new</span> Auction(\n        auctionId,\n        <span class=\"hljs-keyword\">new</span> BigDecimal(context.getBodyAsJson().getString(<span class=\"hljs-string\">&quot;price&quot;</span>))\n    );\n\n    <span class=\"hljs-keyword\">this</span>.repository.save(auction);\n    context.vertx().eventBus().publish(<span class=\"hljs-string\">&quot;auction.&quot;</span> + auctionId, context.getBodyAsString());\n\n    context.response()\n        .setStatusCode(<span class=\"hljs-number\">200</span>)\n        .end();\n}\n</code></pre><p><code>PATCH</code> re­quest to <code>/auctions/1</code> would re­sult in vari­able <code>auctionId</code> get­ting the value 1.\nWe save a new offer in the auc­tion and then pub­lish this in­for­ma­tion on the event bus to all clients\nreg­is­tered on the ad­dress on the client side JavaScript.\nAfter you have fin­ished with the HTTP re­sponse you must call the <code>end</code> func­tion on it.</p><h3 id=\"static-handler\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#static-handler\"></a>Static handler</h3><p>Vert.x pro­vides the han­dler for serv­ing sta­tic web re­sources.\nThe de­fault di­rec­tory from which sta­tic files are served is <code>webroot</code>, but this can be con­fig­ured.\nBy de­fault the sta­tic han­dler will set cache head­ers to en­able browsers to cache files.\nSet­ting cache head­ers can be dis­abled with\n<a href=\"http://vertx.io/docs/apidocs/io/vertx/ext/web/handler/StaticHandler.html#setCachingEnabled-boolean-\"><code>setCachingEnabled</code></a> method.\nTo serve the auc­tion HTML page, JS files (and other sta­tic files) from auc­tion ser­vice, you can cre­ate a sta­tic han­dler like this:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> StaticHandler <span class=\"hljs-title\">staticHandler</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> StaticHandler.create()\n        .setCachingEnabled(<span class=\"hljs-keyword\">false</span>);\n}\n</code></pre><h2 id=\"lets-run\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#lets-run\"></a>Let’s run!</h2><p>Full ap­pli­ca­tion code is avail­able on <a href=\"https://github.com/mwarc/simple-realtime-auctions-vertx3-example\">github</a>.</p><p>Clone the repos­i­tory and run <code>./gradlew run</code>.</p><p>Open one or more browsers and point them to <code>http://localhost:8080</code>. Now you can bid in auc­tion:</p><p><img src=\"/images/blog/real-time-bidding-with-websockets-and-vertx/bidding_in_application.png\" alt=\"Real time bidding in application\"/></p><h2 id=\"summary\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#summary\"></a>Summary</h2><p>This ar­ti­cle presents the out­line of a sim­ple ap­pli­ca­tion that al­lows real-​time bid­ding.\nWe cre­ated a light­weight, high-​performance and scal­able micro-​service writ­ten in Java and based on Vert.x.\nWe dis­cussed what Vert.x of­fers, among oth­ers, a dis­trib­uted event bus and an el­e­gant API that al­lows you to cre­ate ap­pli­ca­tions in no time.</p>","scope":{}},"tfIdfTerms":[{"term":"handler","tf":28},{"term":"auction","tf":20},{"term":"request","tf":20},{"term":"us","tf":17},{"term":"bid","tf":15},{"term":"sockj","tf":15},{"term":"method","tf":15},{"term":"creat","tf":13},{"term":"event","tf":13},{"term":"provid","tf":12},{"term":"websocket","tf":12},{"term":"data","tf":12},{"term":"match","tf":12},{"term":"applic","tf":11},{"term":"rout","tf":11},{"term":"share","tf":10},{"term":"server","tf":9},{"term":"bu","tf":9},{"term":"client","tf":9},{"term":"web","tf":8},{"term":"will","tf":8},{"term":"servic","tf":8},{"term":"http","tf":8},{"term":"instanc","tf":8},{"term":"bodi","tf":8}]},{"filename":"blog/2016-01-03-ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x.mdx","date":"2016-01-03","slug":"ecmascript-6-7-on-the-jvm-with-typescript-and-vert-x","meta":{"title":"ECMAScript 6/7 on the JVM with TypeScript and Vert.x","category":"guides","authors":[{"name":"Michel Krämer","github_id":"michel-kraemer"}],"summary":"I figured it would be a good idea to give you a couple of examples how teaming\n  Vert.x and TypeScript helps you use ECMAScript 6 and 7 features on the JVM today."},"readingTime":{"text":"4 min read","minutes":3.775,"time":226500,"words":755},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Fol\\xADlow\\xADing the lat\\xADest re\\xADleases of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x 3.2\"), \" and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript\"\n  }), \"vertx-\\u200Blang-typescript 1.1.0\"), \"\\nI fig\\xADured it would be a good idea to give you a cou\\xADple of ex\\xADam\\xADples how team\\xADing\\nVert.x and Type\\xADScript helps you use EC\\xADMAScript 6 and 7 fea\\xADtures on the JVM today.\"), mdx(\"p\", null, \"The vertx-\\u200Blang-typescript li\\xADbrary adds \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.typescriptlang.org/\"\n  }), \"Type\\xADScript\"), \" sup\\xADport to Vert.x 3.\\nType\\xADScript is a typed su\\xADper\\xADset of JavaScript that com\\xADpiles to plain JavaScript. It sup\\xADports the\\nEC\\xADMAScript 6 (EC\\xADMAScript 2015, ES6) stan\\xADdard and also a few parts of EC\\xADMAScript 7 (ES7) al\\xADready.\"), mdx(\"p\", null, \"The li\\xADbrary au\\xADto\\xADmat\\xADi\\xADcally com\\xADpiles Vert.x ver\\xADti\\xADcles writ\\xADten in\\nType\\xADScript to JavaScript and ex\\xADe\\xADcutes them on the JVM. vertx-\\u200Blang-typescript also pro\\xADvides\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions for the Vert.x JavaScript API. Use them in your favourite\\nType\\xADScript ed\\xADi\\xADtor/IDE to get auto-\\u200Bcompletion, API doc\\xADu\\xADmen\\xADta\\xADtion and mean\\xADing\\xADful error\\nmes\\xADsages. See the fol\\xADlow\\xADing screen\\xADcast:\"), mdx(\"img\", {\n    src: \"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\"\n  }), mdx(\"h2\", {\n    \"id\": \"ecmascript-67-and-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#ecmascript-67-and-vertx\"\n  })), \"ECMAScript 6/7 and Vert.x\"), mdx(\"p\", null, \"Below you find an ex\\xADam\\xADple ver\\xADti\\xADcle writ\\xADten in Type\\xADScript. Well, I left all\\nthe TypeScript-\\u200Bspecific parts out. In fact the ver\\xADti\\xADcle is valid EC\\xADMAScript 6\\n(ex\\xADcept for the last snip\\xADpet \", \"[9]\", \" which is EC\\xADMAScript 7).\"), mdx(\"p\", null, \"First, fol\\xADlow the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\"\n  }), \"vertx-\\u200Blang-typescript README\"), \"\\nto in\\xADstall the li\\xADbrary and to en\\xADable Type\\xADScript in Vert.x. Then ex\\xADtract the\\ntype de\\xADf\\xADi\\xADn\\xADi\\xADtions (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-lang-typescript-1.1.0-typings.zip\"), \") into a new di\\xADrec\\xADtory.\\nCre\\xADate a new file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"es7verticle.ts\"), \" in this di\\xADrec\\xADtory and copy the code\\nbelow into it. Fi\\xADnally, open your com\\xADmand prompt and ex\\xADe\\xADcute\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"vertx run es7verticle.ts\\n\")), mdx(\"p\", null, \"This will run a small HTTP server that lis\\xADtens to re\\xADquests on port 8080. If you\\nopen your browser and go to http://lo\\xADcal\\xADhost:8080 you will see the fol\\xADlow\\xADing:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\",\n    \"alt\": \"Output of the verticle written in TypeScript\"\n  }))), mdx(\"p\", null, \"So far so good. Now let\\u2019s have a look at the code. I num\\xADbered the in\\xADdi\\xADvid\\xADual\\nEC\\xADMAScript fea\\xADtures used. Here\\u2019s a com\\xADplete list:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"arrow func\\xADtion\"), \" to cre\\xADate a re\\xADquest han\\xADdler (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Block-\\u200Bscoped vari\\xADables\"), \" do not pol\\xADlute your global name\\xADspace (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Spec\\xADify a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"de\\xADfault value\"), \" for a func\\xADtion pa\\xADra\\xADme\\xADter (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"rest pa\\xADra\\xADme\\xADters\"), \" to col\\xADlect mul\\xADti\\xADple pa\\xADra\\xADme\\xADters in an array (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Spread\"), \" the con\\xADtents of an array to func\\xADtion pa\\xADra\\xADme\\xADters (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It\\xADer\\xADate over array con\\xADtents using the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"for\\u2026of loop\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tem\\xADplate strings\"), \" en\\xADable \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"string in\\xADter\\xADpo\\xADla\\xADtion\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"multi-\\u200Bline strings\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"classes\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"in\\xADher\\xADi\\xADtance\"), \" (ES6)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the new \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \" as a short\\xADcut for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Math.pow()\"), \" (ES7)\")), mdx(Gist, {\n    url: \"https://gist.github.com/michel-kraemer/892866038dabcb8376e6\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"The ex\\xADam\\xADple demon\\xADstrates very well how you can use EC\\xADMAScript 6 (and parts of\\n7) on the JVM today. In fact, there are a lot more\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://es6-features.org/\"\n  }), \"cool ES6 fea\\xADtures\"), \" not in\\xADcluded in the ex\\xADam\\xADple such\\nas con\\xADstants (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \"), the prop\\xADerty short\\xADhand or method prop\\xADer\\xADties.\"), mdx(\"p\", null, \"Type\\xADScript is so much more than just ES6. It ac\\xADtu\\xADally has a\\nvery good sta\\xADtic type sys\\xADtem that al\\xADlows you to make compile-\\u200Btime type checks.\\nThis is makes it much eas\\xADier to write large Vert.x ap\\xADpli\\xADca\\xADtions with many\\nver\\xADti\\xADcles. Per\\xADson\\xADally I re\\xADally like the sup\\xADport that I get from my IDE when\\npro\\xADgram\\xADming Type\\xADScript. Since vertx-\\u200Blang-typescript comes with type de\\xADf\\xADi\\xADn\\xADi\\xADtions\\nfor the Vert.x JavaScript API I get auto-\\u200Bcompletion and ac\\xADcess to the doc\\xADu\\xADmen\\xADta\\xADtion\\nright in the ed\\xADi\\xADtor. I mostly use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.sublimetext.com/\"\n  }), \"Sub\\xADlime\"), \" by the\\nway, but I have tested it suc\\xADcess\\xADfully with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/\"\n  }), \"Vi\\xADsual Stu\\xADdio Code\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.eclipse.org/\"\n  }), \"Eclipse\"), \"\\nand \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://atom.io/\"\n  }), \"Atom\"), \".\"), mdx(\"p\", null, \"Un\\xADfor\\xADtu\\xADnately, the only ES7 fea\\xADture that you can use at the mo\\xADment with\\nvertx-\\u200Blang-typescript is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ex\\xADpo\\xADnen\\xADti\\xADa\\xADtion op\\xADer\\xADa\\xADtor\"), \". Type\\xADScript 1.7 also\\nsup\\xADports \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dec\\xADo\\xADra\\xADtors\"), \" but this fea\\xADture is dis\\xADabled at the mo\\xADment in\\nvertx-\\u200Blang-typescript be\\xADcause it is ex\\xADper\\xADi\\xADmen\\xADtal and sub\\xADject to change. I\\u2019ll\\nkeep you up to date when new fea\\xADtures are in\\xADtro\\xADduced.\"), mdx(\"h2\", {\n    \"id\": \"alternatives\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#alternatives\"\n  })), \"Alternatives\"), mdx(\"p\", null, \"We\\u2019ve re\\xADcently \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-es6-back-to-the-future/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"pub\\xADlished a post\")), \"\\non how to use EC\\xADMAScript 6 with Vert.x here on this blog. We used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://babeljs.io/\"\n  }), \"Babel\"), \", a\\ncom\\xADpiler that trans\\xADlates ES6 to ES5.\"), mdx(\"p\", null, \"Al\\xADthough this ap\\xADproach works well it is a bit harder to set up and use than the\\none pre\\xADsented here. First, you need to wrap your Vert.x ap\\xADpli\\xADca\\xADtion in a NPM pack\\xADage.\\nSec\\xADond, in order to run your ap\\xADpli\\xADca\\xADtion, you need to ex\\xADe\\xADcute two com\\xADmands.\\nYou have to com\\xADpile it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run build\"), \" and then then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \".\\nWith vertx-\\u200Blang-typescript you only need one com\\xADmand. vertx-\\u200Blang-typescript\\nalso al\\xADlows you to embed the Type\\xADScript ver\\xADti\\xADcle in a larger Vert.x ap\\xADpli\\xADca\\xADtion\\nand also mix mul\\xADti\\xADple lan\\xADguages in one project. This is not pos\\xADsi\\xADble if you wrap\\nevery\\xADthing in a NPM pack\\xADage.\"), mdx(\"p\", null, \"Fi\\xADnally, the ap\\xADproach based on Babel only sup\\xADports EC\\xADMAScript 6 (2015), al\\xADthough\\nmore fea\\xADtures from ES7 will surely be in\\xADtro\\xADduced in Babel in the fu\\xADture.\\nType\\xADScript on the other hand gives you much more fea\\xADtures such as sta\\xADtic\\ntyp\\xADing that you will cer\\xADtainly find use\\xADful for any larger project.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Fol­low­ing the lat­est re­leases of <a href=\"http://vertx.io\">Vert.x 3.2</a> and\n<a href=\"https://github.com/michel-kraemer/vertx-lang-typescript\">vertx-​lang-typescript 1.1.0</a>\nI fig­ured it would be a good idea to give you a cou­ple of ex­am­ples how team­ing\nVert.x and Type­Script helps you use EC­MAScript 6 and 7 fea­tures on the JVM today.</p><p>The vertx-​lang-typescript li­brary adds <a href=\"http://www.typescriptlang.org/\">Type­Script</a> sup­port to Vert.x 3.\nType­Script is a typed su­per­set of JavaScript that com­piles to plain JavaScript. It sup­ports the\nEC­MAScript 6 (EC­MAScript 2015, ES6) stan­dard and also a few parts of EC­MAScript 7 (ES7) al­ready.</p><p>The li­brary au­to­mat­i­cally com­piles Vert.x ver­ti­cles writ­ten in\nType­Script to JavaScript and ex­e­cutes them on the JVM. vertx-​lang-typescript also pro­vides\ntype de­f­i­n­i­tions for the Vert.x JavaScript API. Use them in your favourite\nType­Script ed­i­tor/IDE to get auto-​completion, API doc­u­men­ta­tion and mean­ing­ful error\nmes­sages. See the fol­low­ing screen­cast:</p><img src=\"https://raw.githubusercontent.com/michel-kraemer/vertx-lang-typescript/aaa67228c998bf9dc64b5f45fb407ef56169efec/screencast.gif\"/><h2 id=\"ecmascript-67-and-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#ecmascript-67-and-vertx\"></a>ECMAScript 6/7 and Vert.x</h2><p>Below you find an ex­am­ple ver­ti­cle writ­ten in Type­Script. Well, I left all\nthe TypeScript-​specific parts out. In fact the ver­ti­cle is valid EC­MAScript 6\n(ex­cept for the last snip­pet <!-- -->[9]<!-- --> which is EC­MAScript 7).</p><p>First, fol­low the <a href=\"https://github.com/michel-kraemer/vertx-lang-typescript/blob/master/README.md\">vertx-​lang-typescript README</a>\nto in­stall the li­brary and to en­able Type­Script in Vert.x. Then ex­tract the\ntype de­f­i­n­i­tions (<code>vertx-lang-typescript-1.1.0-typings.zip</code>) into a new di­rec­tory.\nCre­ate a new file named <code>es7verticle.ts</code> in this di­rec­tory and copy the code\nbelow into it. Fi­nally, open your com­mand prompt and ex­e­cute</p><pre><code class=\"hljs language-bash\">vertx run es7verticle.ts\n</code></pre><p>This will run a small HTTP server that lis­tens to re­quests on port 8080. If you\nopen your browser and go to http://lo­cal­host:8080 you will see the fol­low­ing:</p><p><img src=\"/images/blog/ecmascript-6-7-on-the-jvm-with-typscript-and-vertx/output.png\" alt=\"Output of the verticle written in TypeScript\"/></p><p>So far so good. Now let’s have a look at the code. I num­bered the in­di­vid­ual\nEC­MAScript fea­tures used. Here’s a com­plete list:</p><ol><li>Use an <em>arrow func­tion</em> to cre­ate a re­quest han­dler (ES6)</li><li><em>Block-​scoped vari­ables</em> do not pol­lute your global name­space (ES6)</li><li>Spec­ify a <em>de­fault value</em> for a func­tion pa­ra­me­ter (ES6)</li><li>Use <em>rest pa­ra­me­ters</em> to col­lect mul­ti­ple pa­ra­me­ters in an array (ES6)</li><li><em>Spread</em> the con­tents of an array to func­tion pa­ra­me­ters (ES6)</li><li>It­er­ate over array con­tents using the <em>for…of loop</em> (ES6)</li><li><em>tem­plate strings</em> en­able <em>string in­ter­po­la­tion</em> and <em>multi-​line strings</em> (ES6)</li><li>Use <em>classes</em> and <em>in­her­i­tance</em> (ES6)</li><li>Use the new <em>ex­po­nen­ti­a­tion op­er­a­tor</em> as a short­cut for <code>Math.pow()</code> (ES7)</li></ol><div>...waiting for Gist...</div><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>The ex­am­ple demon­strates very well how you can use EC­MAScript 6 (and parts of\n7) on the JVM today. In fact, there are a lot more\n<a href=\"http://es6-features.org/\">cool ES6 fea­tures</a> not in­cluded in the ex­am­ple such\nas con­stants (<code>const</code>), the prop­erty short­hand or method prop­er­ties.</p><p>Type­Script is so much more than just ES6. It ac­tu­ally has a\nvery good sta­tic type sys­tem that al­lows you to make compile-​time type checks.\nThis is makes it much eas­ier to write large Vert.x ap­pli­ca­tions with many\nver­ti­cles. Per­son­ally I re­ally like the sup­port that I get from my IDE when\npro­gram­ming Type­Script. Since vertx-​lang-typescript comes with type de­f­i­n­i­tions\nfor the Vert.x JavaScript API I get auto-​completion and ac­cess to the doc­u­men­ta­tion\nright in the ed­i­tor. I mostly use <a href=\"http://www.sublimetext.com/\">Sub­lime</a> by the\nway, but I have tested it suc­cess­fully with\n<a href=\"https://code.visualstudio.com/\">Vi­sual Stu­dio Code</a>, <a href=\"http://www.eclipse.org/\">Eclipse</a>\nand <a href=\"https://atom.io/\">Atom</a>.</p><p>Un­for­tu­nately, the only ES7 fea­ture that you can use at the mo­ment with\nvertx-​lang-typescript is the <em>ex­po­nen­ti­a­tion op­er­a­tor</em>. Type­Script 1.7 also\nsup­ports <em>dec­o­ra­tors</em> but this fea­ture is dis­abled at the mo­ment in\nvertx-​lang-typescript be­cause it is ex­per­i­men­tal and sub­ject to change. I’ll\nkeep you up to date when new fea­tures are in­tro­duced.</p><h2 id=\"alternatives\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#alternatives\"></a>Alternatives</h2><p>We’ve re­cently <a href=\"/blog/vert-x-es6-back-to-the-future/\">pub­lished a post</a>\non how to use EC­MAScript 6 with Vert.x here on this blog. We used <a href=\"https://babeljs.io/\">Babel</a>, a\ncom­piler that trans­lates ES6 to ES5.</p><p>Al­though this ap­proach works well it is a bit harder to set up and use than the\none pre­sented here. First, you need to wrap your Vert.x ap­pli­ca­tion in a NPM pack­age.\nSec­ond, in order to run your ap­pli­ca­tion, you need to ex­e­cute two com­mands.\nYou have to com­pile it with <code>npm run build</code> and then then call <code>npm start</code>.\nWith vertx-​lang-typescript you only need one com­mand. vertx-​lang-typescript\nalso al­lows you to embed the Type­Script ver­ti­cle in a larger Vert.x ap­pli­ca­tion\nand also mix mul­ti­ple lan­guages in one project. This is not pos­si­ble if you wrap\nevery­thing in a NPM pack­age.</p><p>Fi­nally, the ap­proach based on Babel only sup­ports EC­MAScript 6 (2015), al­though\nmore fea­tures from ES7 will surely be in­tro­duced in Babel in the fu­ture.\nType­Script on the other hand gives you much more fea­tures such as sta­tic\ntyp­ing that you will cer­tainly find use­ful for any larger project.</p>","scope":{}},"tfIdfTerms":[{"term":"typescript","tf":22},{"term":"us","tf":15},{"term":"es6","tf":12},{"term":"ecmascript","tf":11},{"term":"lang","tf":9},{"term":"featur","tf":8},{"term":"type","tf":7},{"term":"support","tf":5},{"term":"javascript","tf":5},{"term":"compil","tf":5},{"term":"verticl","tf":5},{"term":"follow","tf":4},{"term":"exampl","tf":4},{"term":"es7","tf":4},{"term":"new","tf":4},{"term":"will","tf":4},{"term":"paramet","tf":4},{"term":"applic","tf":4},{"term":"good","tf":3},{"term":"jvm","tf":3},{"term":"librari","tf":3},{"term":"part","tf":3},{"term":"execut","tf":3},{"term":"definit","tf":3},{"term":"api","tf":3}]},{"filename":"blog/2015-12-20-automatic-redeployment-in-eclipse-ide.mdx","date":"2015-12-20","slug":"automatic-redeployment-in-eclipse-ide","meta":{"title":"Automatic redeployment in Eclipse IDE","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Vert.x 3.1 has (re-)introduced the redeploy feature. This blog post explains how to use this feature in the Eclipse IDE. However, you can easily adapt the content to your IDE."},"readingTime":{"text":"3 min read","minutes":2.035,"time":122100.00000000001,"words":407},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Vert.x 3.1 has (re-)in\\xADtro\\xADduced the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy\"), \" fea\\xADture. This blog post ex\\xADplains how to use this fea\\xADture in the Eclipse IDE. How\\xADever, you can eas\\xADily adapt the con\\xADtent to your IDE.\"), mdx(\"h2\", {\n    \"id\": \"how-does-redeploy-work\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#how-does-redeploy-work\"\n  })), \"How does redeploy work\"), mdx(\"p\", null, \"How is im\\xADple\\xADmented the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redeploy\"), \" is not as you may ex\\xADpect. First, the re\\xADde\\xADploy does not rely on a build tool, but is in\\xADte\\xADgrated in vert.x. How\\xADever you can plug your build tools with the re\\xADde\\xADploy fea\\xADture. This fea\\xADture is of\\xADfered by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"io.vertx.core.Launcher\"), \" class. The re\\xADde\\xADploy\\xADment process is ac\\xADtu\\xADally very sim\\xADple:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"re\\xADde\\xADploy mode\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it lis\\xADtens for file changes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"when a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"match\\xADing\"), \" file is changed, it stops the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it ex\\xADe\\xADcutes the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"on-redeploy\"), \" ac\\xADtions if any\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"it restarts the ap\\xADpli\\xADca\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"back to (2)\")), mdx(\"p\", null, \"Ini\\xADtially the ap\\xADpli\\xADca\\xADtion is launched in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADde\\xADploy mode\"), \". The ap\\xADpli\\xADca\\xADtion is ac\\xADtu\\xADally launched in back\\xADground, in a sep\\xADa\\xADrated process. Vert.x lis\\xADtens for file changes. You give it a set of (Ant-\\u200Bstyle) pat\\xADterns and every time a match\\xADing file changes, Vert.x stops the whole ap\\xADpli\\xADca\\xADtion and restarts it. Op\\xADtion\\xADally you can con\\xADfig\\xADure a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"on-redeploy\"), \" ac\\xADtion to plug in your build tools.\"), mdx(\"p\", null, \"To in\\xADte\\xADgrate this process in Eclipse (or in your IDE), you just need to con\\xADfig\\xADure the set of lis\\xADtened files, and let the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Launcher\"), \" class starts and stops your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"redeploy-in-eclipse\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-in-eclipse\"\n  })), \"Redeploy in Eclipse\"), mdx(\"p\", null, \"The fol\\xADlow\\xADing screen\\xADcast ex\\xADplains how you con\\xADfig\\xADure a vert.x ap\\xADpli\\xADca\\xADtion to be run in Eclipse and how to con\\xADfig\\xADure the re\\xADde\\xADploy:\"), mdx(\"div\", {\n    className: \"youtube-embed\"\n  }, mdx(\"iframe\", {\n    src: \"https://www.youtube.com/embed/iyZwAzEVX-o\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"p\", null, \"To sum\\xADma\\xADrize the last con\\xADfig\\xADu\\xADra\\xADtion:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it\\u2019s a Java ap\\xADpli\\xADca\\xADtion con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it uses \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" as main class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Pro\\xADgram ar\\xADgu\\xADments\"), \" (\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ar\\xADgu\\xADments\"), \" tab), write: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run org.acme.verticle.MyMainVerticle --redeploy=\\\"src/**/*.java\\\" --launcher-class=io.vertx.core.Launcher\"))), mdx(\"h2\", {\n    \"id\": \"redeploy-with-your-own-main-class\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#redeploy-with-your-own-main-class\"\n  })), \"Redeploy with your own Main class\"), mdx(\"p\", null, \"Let\\u2019s now imag\\xADine that you have your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, start\\xADing your ap\\xADpli\\xADca\\xADtion. For in\\xADstance, it can be some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"package\"), \" org.acme.vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" io.vertx.core.Vertx;\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"Main\"), \" \"), \"{\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"main\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String[] args)\"), \" \"), \"{\\n        Vertx vertx = Vertx.vertx();\\n        vertx.deployVerticle(MyMainVerticle.class.getName());\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"The re\\xADde\\xADploy fea\\xADture from vert.x lets you use your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Cre\\xADate an\\xADother \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run\"), \" con\\xADfig\\xADu\\xADra\\xADtion\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Set the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Main-Class\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"io.vertx.core.Launcher\"), \" (yes, the one from vert.x not yours)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the ap\\xADpli\\xADca\\xADtion pa\\xADra\\xADme\\xADter add: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run --redeploy=\\\"src/**/*.java\\\" --launcher-class=org.acme.vertx.Main\"))), mdx(\"p\", null, \"With this con\\xADfig\\xADu\\xADra\\xADtion, the ap\\xADpli\\xADca\\xADtion is launched in back\\xADground using your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class, and will restart the ap\\xADpli\\xADca\\xADtion every time you change your source code (you can even change the source code of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class).\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Vert.x 3.1 has (re-)in­tro­duced the <em>re­de­ploy</em> fea­ture. This blog post ex­plains how to use this fea­ture in the Eclipse IDE. How­ever, you can eas­ily adapt the con­tent to your IDE.</p><h2 id=\"how-does-redeploy-work\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#how-does-redeploy-work\"></a>How does redeploy work</h2><p>How is im­ple­mented the <code>redeploy</code> is not as you may ex­pect. First, the re­de­ploy does not rely on a build tool, but is in­te­grated in vert.x. How­ever you can plug your build tools with the re­de­ploy fea­ture. This fea­ture is of­fered by the <code>io.vertx.core.Launcher</code> class. The re­de­ploy­ment process is ac­tu­ally very sim­ple:</p><ol><li>the ap­pli­ca­tion is launched in <em>re­de­ploy mode</em>.</li><li>it lis­tens for file changes</li><li>when a <em>match­ing</em> file is changed, it stops the ap­pli­ca­tion</li><li>it ex­e­cutes the <code>on-redeploy</code> ac­tions if any</li><li>it restarts the ap­pli­ca­tion</li><li>back to (2)</li></ol><p>Ini­tially the ap­pli­ca­tion is launched in <em>re­de­ploy mode</em>. The ap­pli­ca­tion is ac­tu­ally launched in back­ground, in a sep­a­rated process. Vert.x lis­tens for file changes. You give it a set of (Ant-​style) pat­terns and every time a match­ing file changes, Vert.x stops the whole ap­pli­ca­tion and restarts it. Op­tion­ally you can con­fig­ure a <code>on-redeploy</code> ac­tion to plug in your build tools.</p><p>To in­te­grate this process in Eclipse (or in your IDE), you just need to con­fig­ure the set of lis­tened files, and let the <code>Launcher</code> class starts and stops your ap­pli­ca­tion.</p><h2 id=\"redeploy-in-eclipse\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-in-eclipse\"></a>Redeploy in Eclipse</h2><p>The fol­low­ing screen­cast ex­plains how you con­fig­ure a vert.x ap­pli­ca­tion to be run in Eclipse and how to con­fig­ure the re­de­ploy:</p><div class=\"youtube-embed\"><iframe src=\"https://www.youtube.com/embed/iyZwAzEVX-o\" frameBorder=\"0\" allowfullscreen=\"\"></iframe></div><p>To sum­ma­rize the last con­fig­u­ra­tion:</p><ul><li>it’s a Java ap­pli­ca­tion con­fig­u­ra­tion</li><li>it uses <code>io.vertx.core.Launcher</code> as main class</li><li>In the <em>Pro­gram ar­gu­ments</em> (<em>Ar­gu­ments</em> tab), write: <code>run org.acme.verticle.MyMainVerticle --redeploy=&quot;src/**/*.java&quot; --launcher-class=io.vertx.core.Launcher</code></li></ul><h2 id=\"redeploy-with-your-own-main-class\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#redeploy-with-your-own-main-class\"></a>Redeploy with your own Main class</h2><p>Let’s now imag­ine that you have your own <code>Main</code> class, start­ing your ap­pli­ca­tion. For in­stance, it can be some­thing like:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> org.acme.vertx;\n\n<span class=\"hljs-keyword\">import</span> io.vertx.core.Vertx;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Vertx vertx = Vertx.vertx();\n        vertx.deployVerticle(MyMainVerticle.class.getName());\n    }\n\n}\n</code></pre><p>The re­de­ploy fea­ture from vert.x lets you use your own <code>Main</code> class:</p><ol><li>Cre­ate an­other <code>Run</code> con­fig­u­ra­tion</li><li>Set the <code>Main-Class</code> to <code>io.vertx.core.Launcher</code> (yes, the one from vert.x not yours)</li><li>In the ap­pli­ca­tion pa­ra­me­ter add: <code>run --redeploy=&quot;src/**/*.java&quot; --launcher-class=org.acme.vertx.Main</code></li></ol><p>With this con­fig­u­ra­tion, the ap­pli­ca­tion is launched in back­ground using your own <code>Main</code> class, and will restart the ap­pli­ca­tion every time you change your source code (you can even change the source code of your <code>Main</code> class).</p>","scope":{}},"tfIdfTerms":[{"term":"applic","tf":13},{"term":"redeploi","tf":10},{"term":"class","tf":8},{"term":"configur","tf":8},{"term":"chang","tf":6},{"term":"featur","tf":5},{"term":"file","tf":5},{"term":"us","tf":4},{"term":"launch","tf":4},{"term":"id","tf":3},{"term":"not","tf":3},{"term":"build","tf":3},{"term":"tool","tf":3},{"term":"process","tf":3},{"term":"listen","tf":3},{"term":"stop","tf":3},{"term":"restart","tf":3},{"term":"set","tf":3},{"term":"let","tf":3},{"term":"explain","tf":2},{"term":"howev","tf":2},{"term":"integr","tf":2},{"term":"plug","tf":2},{"term":"actual","tf":2},{"term":"mode","tf":2}]},{"filename":"blog/2015-12-15-vert-x-3-2-0-is-released.mdx","date":"2015-12-15","slug":"vert-x-3-2-0-is-released","meta":{"title":"Vert.x 3.2.0 is released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"We are pleased to announce the release of Vert.x 3.2.0!"},"readingTime":{"text":"2 min read","minutes":1.075,"time":64500,"words":215},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are pleased to an\\xADnounce the re\\xADlease of Vert.x 3.2.0!\"), mdx(\"p\", null, \"Some of the high\\xADlights of this re\\xADlease in\\xADclude:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/ceylon\"\n  }), \"vertx-\\u200Blang-ceylon\"), \": the sup\\xADport of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://ceylon-lang.org/\"\n  }), \"Cey\\xADlon lan\\xADguage\"), \"!\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-tcp-eventbus-bridge/java/\"\n  }), \"vertx-\\u200Btcp-bridge\"), \": an event bus bridge that lets any TCP-\\u200Bcapable ap\\xADpli\\xADca\\xADtion to in\\xADter\\xADact with vert.x ap\\xADpli\\xADca\\xADtions using the event bus.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-hawkular-metrics/java/\"\n  }), \"vertx-\\u200Bhawkular-metric\"), \": an im\\xADple\\xADmen\\xADta\\xADtion of the vert.x met\\xADrics for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.hawkular.org/\"\n  }), \"Hawku\\xADlar\"), \". In ad\\xADdi\\xADtion, it lets you re\\xADport your own met\\xADrics to hawku\\xADlar.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-stack-manager/stack-manager/\"\n  }), \"stack man\\xADager\"), \" to con\\xADfig\\xADure the vert.x dis\\xADtri\\xADb\\xADu\\xADtion with the con\\xADtent you want.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-shell/java/\"\n  }), \"vertx-\\u200Bshell\"), \" is now an of\\xADfi\\xADcial com\\xADpo\\xADnent.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-jgroups/java/\"\n  }), \"vertx-\\u200Bjgroups\"), \": an al\\xADter\\xADna\\xADtive im\\xADple\\xADmen\\xADta\\xADtion of the vert.x clus\\xADter man\\xADager using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jgroups.org/\"\n  }), \"JGroups\"), \". This com\\xADpo\\xADnent is a tech\\xADni\\xADcal pre\\xADview.\"))), mdx(\"p\", null, \"The re\\xADlease also con\\xADtains many bug fixes and a ton of im\\xADprove\\xADments. Full re\\xADlease notes can be found here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.2.0---Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.2.0-\\u200B\\u2014Release-Notes\")), mdx(\"p\", null, \"Break\\xADing changes are here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.2.0-Breaking-changes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.2.0-\\u200BBreaking-changes\")), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Dock\\xADers im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \"\\nThe vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \".\"), mdx(\"p\", null, \"Many thanks to all the com\\xADmit\\xADters and com\\xADmu\\xADnity whose con\\xADtri\\xADbu\\xADtions made this pos\\xADsi\\xADble.\"), mdx(\"p\", null, \"Next stop is Vert.x 3.3.0 which we hope to have out in March 2016.\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.0%22\"\n  }), \"Maven Cen\\xADtral\"), \"\\nand you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.2.0/view\"\n  }), \"Bin\\xADtray\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We are pleased to an­nounce the re­lease of Vert.x 3.2.0!</p><p>Some of the high­lights of this re­lease in­clude:</p><ul><li><p><a href=\"http://vertx.io/docs/vertx-core/ceylon\">vertx-​lang-ceylon</a>: the sup­port of the <a href=\"http://ceylon-lang.org/\">Cey­lon lan­guage</a>!</p></li><li><p><a href=\"http://vertx.io/docs/vertx-tcp-eventbus-bridge/java/\">vertx-​tcp-bridge</a>: an event bus bridge that lets any TCP-​capable ap­pli­ca­tion to in­ter­act with vert.x ap­pli­ca­tions using the event bus.</p></li><li><p><a href=\"http://vertx.io/docs/vertx-hawkular-metrics/java/\">vertx-​hawkular-metric</a>: an im­ple­men­ta­tion of the vert.x met­rics for <a href=\"http://www.hawkular.org/\">Hawku­lar</a>. In ad­di­tion, it lets you re­port your own met­rics to hawku­lar.</p></li><li><p>A new <a href=\"http://vertx.io/docs/vertx-stack-manager/stack-manager/\">stack man­ager</a> to con­fig­ure the vert.x dis­tri­b­u­tion with the con­tent you want.</p></li><li><p><a href=\"http://vertx.io/docs/vertx-shell/java/\">vertx-​shell</a> is now an of­fi­cial com­po­nent.</p></li><li><p><a href=\"http://vertx.io/docs/vertx-jgroups/java/\">vertx-​jgroups</a>: an al­ter­na­tive im­ple­men­ta­tion of the vert.x clus­ter man­ager using <a href=\"http://jgroups.org/\">JGroups</a>. This com­po­nent is a tech­ni­cal pre­view.</p></li></ul><p>The re­lease also con­tains many bug fixes and a ton of im­prove­ments. Full re­lease notes can be found here:</p><p><a href=\"https://github.com/vert-x3/wiki/wiki/3.2.0---Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.2.0-​—Release-Notes</a></p><p>Break­ing changes are here:</p><p><a href=\"https://github.com/vert-x3/wiki/wiki/3.2.0-Breaking-changes\">https://github.com/vert-​x3/wiki/wiki/3.2.0-​Breaking-changes</a></p><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Dock­ers im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>\nThe vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a>.</p><p>Many thanks to all the com­mit­ters and com­mu­nity whose con­tri­bu­tions made this pos­si­ble.</p><p>Next stop is Vert.x 3.3.0 which we hope to have out in March 2016.</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.2.0%22\">Maven Cen­tral</a>\nand you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.2.0/view\">Bin­tray</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"releas","tf":5},{"term":"http","tf":5},{"term":"bu","tf":4},{"term":"com","tf":4},{"term":"wiki","tf":4},{"term":"bridg","tf":3},{"term":"event","tf":3},{"term":"us","tf":3},{"term":"hawkular","tf":3},{"term":"metric","tf":3},{"term":"distribut","tf":3},{"term":"github","tf":3},{"term":"x3","tf":3},{"term":"avail","tf":3},{"term":"ceylon","tf":2},{"term":"tcp","tf":2},{"term":"let","tf":2},{"term":"applic","tf":2},{"term":"implement","tf":2},{"term":"manag","tf":2},{"term":"compon","tf":2},{"term":"jgroup","tf":2},{"term":"note","tf":2},{"term":"break","tf":2},{"term":"chang","tf":2}]},{"filename":"blog/2015-11-30-combine-vert-x-and-mongo-to-build-a-giant.mdx","date":"2015-11-30","slug":"combine-vert-x-and-mongo-to-build-a-giant","meta":{"title":"Combine vert.x and mongo to build a giant","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"This blog post is part of the introduction to Vert.x series. We are now going to replace this JDBC client by the vertx-mongo-client, and thus connect to a Mongo database."},"readingTime":{"text":"10 min read","minutes":9.07,"time":544200,"words":1814},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This blog post is part of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in\\xADtro\\xADduc\\xADtion to vert.x\"), \" se\\xADries. Last time, we have seen how we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-jdbc-client\"), \" to con\\xADnect to a data\\xADbase using a JDBC dri\\xADver. In this post, we are going to re\\xADplace this JDBC client by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-mongo-client\"), \", and thus con\\xADnect to a Mongo data\\xADbase.\"), mdx(\"p\", null, \"You don\\u2019t un\\xADder\\xADstand the title, check the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mongodb.org\"\n  }), \"mon\\xADgoDB\"), \" web\\xADsite.\"), mdx(\"p\", null, \"But be\\xADfore going fur\\xADther, let\\u2019s recap.\"), mdx(\"h2\", {\n    \"id\": \"previously-in--introduction-to-vertx\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#previously-in--introduction-to-vertx\"\n  })), \"Previously in  \\u2018introduction to vert.x\\u2019\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/my-first-vert-x-3-application/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"first post\")), \" has de\\xADscribed how to build a vert.x ap\\xADpli\\xADca\\xADtion with Maven and ex\\xADe\\xADcute unit tests.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/vert-x-application-configuration/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"sec\\xADond post\")), \" has de\\xADscribed how this ap\\xADpli\\xADca\\xADtion can be\\xADcome con\\xADfig\\xADurable.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/some-rest-with-vert-x/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"third post\")), \" has in\\xADtro\\xADduced \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/\"\n  }), \"vertx-\\u200Bweb\"), \", and a small col\\xADlec\\xADtion man\\xADage\\xADment ap\\xADpli\\xADca\\xADtion has been de\\xADvel\\xADoped. This ap\\xADpli\\xADca\\xADtion of\\xADfers a REST API used by a HTML/JavaScript fron\\xADtend.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/unit-and-integration-tests/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"fourth post\")), \" has pre\\xADsented how you can run in\\xADte\\xADgra\\xADtion tests to en\\xADsure the be\\xADhav\\xADior of your ap\\xADpli\\xADca\\xADtion.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/using-the-asynchronous-sql-client/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"last post\")), \" has pre\\xADsented how you can in\\xADter\\xADact with a JDBC data\\xADbase using the vertx-\\u200Bjdbc-client.\")), mdx(\"p\", null, \"This post shows an\\xADother client that lets you use Mon\\xADgoDB in a vert.x ap\\xADpli\\xADca\\xADtion. This client pro\\xADvides an vert.x API to ac\\xADcess asyn\\xADchro\\xADnously to the Mongo data\\xADbase. We won\\u2019t com\\xADpare whether or not JDBC is su\\xADpe\\xADrior to Mongo, they have both pros and cons, and you should use the one that meet your re\\xADquire\\xADments. Vert.x lets you choose, that\\u2019s the point.\"), mdx(\"p\", null, \"The vertx-\\u200Bmongo-client doc\\xADu\\xADmen\\xADta\\xADtion is avail\\xADable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-mongo-client/java/\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"The code de\\xADvel\\xADoped in this blog post is avail\\xADable in the branch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-6\"\n  }), \"post-6\"), \". Our start\\xADing point is the code from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\"\n  }), \"post-5 branch\"), \".\"), mdx(\"h2\", {\n    \"id\": \"asynchronous-data-access\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#asynchronous-data-access\"\n  })), \"Asynchronous data access\"), mdx(\"p\", null, \"One of the vert.x char\\xADac\\xADter\\xADis\\xADtics is being asyn\\xADchro\\xADnous. With an asyn\\xADchro\\xADnous API, you don\\u2019t wait for a re\\xADsult, but you are no\\xADti\\xADfied when this re\\xADsult is ready. Thanks to vert.x, this no\\xADti\\xADfi\\xADca\\xADtion hap\\xADpens in the same thread (un\\xADder\\xADstand event loop) as the ini\\xADtial re\\xADquest:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/intro-series/async-data.png\",\n    \"alt\": \"Asynchronous data access\"\n  }))), mdx(\"p\", null, \"Your code (on the left) is going to in\\xADvoke the mongo client and pass a call\\xADback that will be in\\xADvoked when the re\\xADsult is avail\\xADable. The in\\xADvo\\xADca\\xADtion to the mongo client is non block\\xADing and re\\xADturns im\\xADme\\xADdi\\xADately. The client is deal\\xADing with the mongo data\\xADbase and when the re\\xADsult has been com\\xADputed / re\\xADtrieved, it in\\xADvokes the call\\xADback in the same event loop as the re\\xADquest.\"), mdx(\"p\", null, \"This model is par\\xADtic\\xADu\\xADlarly pow\\xADer\\xADful as it avoids the syn\\xADchro\\xADniza\\xADtion pit\\xADfalls. In\\xADdeed, your code is only called by a sin\\xADgle thread, no need to syn\\xADchro\\xADnize any\\xADthing.\"), mdx(\"h2\", {\n    \"id\": \"as-with-every-maven-project\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#as-with-every-maven-project\"\n  })), \"As with every Maven project\\u2026\"), mdx(\"p\", null, \"\\u2026 we need to up\\xADdate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file first.\"), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, re\\xADplace the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-jdbc-client\"), \" by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertx-mongo-client\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-mongo-client\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"Un\\xADlike JDBC where we were in\\xADstan\\xADti\\xADat\\xADing a data\\xADbase on the fly, here we need to ex\\xADplic\\xADitly starts a Mon\\xADgoDB server. In order to launch a Mongo server in our test, we are going to add an\\xADother de\\xADpen\\xADdency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"de.flapdoodle.embed\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"de.flapdoodle.embed.mongo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.50.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"test\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"scope\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\")), mdx(\"p\", null, \"This de\\xADpen\\xADdency will be used in our unit tests, as it lets us start a mongo server pro\\xADgram\\xADmat\\xADi\\xADcally. For our in\\xADte\\xADgra\\xADtion tests, we are going to use a Maven plug\\xADin start\\xADing and stop\\xADping the mongo server be\\xADfore and after our in\\xADte\\xADgra\\xADtion tests. Add this plug\\xADin to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<plugins/>\"), \" sec\\xADtion of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"com.github.joelittlejohn.embedmongo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"embedmongo-maven-plugin\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"0.2.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"start\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"start\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"port\"), \">\"), \"37017\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"port\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"configuration\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"stop\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"id\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"stop\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goal\"), \">\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"goals\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"execution\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"executions\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"plugin\"), \">\"), \"\\n\")), mdx(\"p\", null, \"No\\xADtice the port we use here (37017), we will use this port later.\"), mdx(\"h2\", {\n    \"id\": \"enough-xml-for-today\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#enough-xml-for-today\"\n  })), \"Enough XML for today\"), mdx(\"p\", null, \"Now that we have up\\xADdated our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file, it\\u2019s time to change our ver\\xADti\\xADcle. The first thing to do is to re\\xADplace the jdbc client by the mongo client:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"mongo = MongoClient.createShared(vertx, config());\\n\")), mdx(\"p\", null, \"This client is con\\xADfig\\xADured with the con\\xADfig\\xADu\\xADra\\xADtion given to the ver\\xADti\\xADcle (more on this below).\"), mdx(\"p\", null, \"Once done, we need to change how we start the ap\\xADpli\\xADca\\xADtion. With the mongo client, no need to ac\\xADquire a con\\xADnec\\xADtion, it han\\xADdles this in\\xADter\\xADnally. So our startup se\\xADquence is a bit more sim\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"createSomeData(\\n    (nothing) -> startWebApp(\\n        (http) -> completeStartup(http, fut)\\n    ), fut);\\n\")), mdx(\"p\", null, \"As in the pre\\xADvi\\xADous post, we need to in\\xADsert some pre\\xADde\\xADfined data if the data\\xADbase is empty:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"createSomeData\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(Handler<AsyncResult<Void>> next, Future<Void> fut)\"), \" \"), \"{\\n  Whisky bowmore = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Bowmore 15 Years Laimrig\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Islay\\\"\"), \");\\n  Whisky talisker = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Talisker 57\\xB0 North\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Scotland, Island\\\"\"), \");\\n  System.out.println(bowmore.toJson());\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Do we have data in the collection ?\"), \"\\n  mongo.count(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(), count -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (count.succeeded()) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (count.result() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \") {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// no whiskies, insert data\"), \"\\n        mongo.insert(COLLECTION, bowmore.toJson(), ar -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar.failed()) {\\n            fut.fail(ar.cause());\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            mongo.insert(COLLECTION, talisker.toJson(), ar2 -> {\\n              \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (ar2.failed()) {\\n                fut.failed();\\n              } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                next.handle(Future.<Void>succeededFuture());\\n              }\\n            });\\n          }\\n        });\\n      } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        next.handle(Future.<Void>succeededFuture());\\n      }\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// report the error\"), \"\\n      fut.fail(count.cause());\\n    }\\n  });\\n}\\n\")), mdx(\"p\", null, \"To de\\xADtect whether or not the data\\xADbase al\\xADready con\\xADtains some data, we re\\xADtrieve the num\\xADber of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"doc\\xADu\\xADments\"), \" from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"whiskies\"), \" col\\xADlec\\xADtion. This is done with : \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.count(COLLECTION, new JsonObject(), count -> {})\"), \". The sec\\xADond pa\\xADra\\xADme\\xADter is the query. In our case, we want to count all doc\\xADu\\xADments. This is done using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new JsonObject()\"), \" that would cre\\xADate a query ac\\xADcept\\xADing all doc\\xADu\\xADments from the col\\xADlec\\xADtion (it\\u2019s equiv\\xADa\\xADlent to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT * FROM ...\"), \").\"), mdx(\"p\", null, \"Also no\\xADtice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert\"), \" calls. Doc\\xADu\\xADments are passed as JSON ob\\xADject, so to in\\xADsert an ob\\xADject, just se\\xADri\\xADal\\xADize it to JSON and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.insert(COLLECTION, json, completion handler)\"), \".\"), mdx(\"h2\", {\n    \"id\": \"mongo-ize-the-rest-handlers\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#mongo-ize-the-rest-handlers\"\n  })), \"Mongo-ize the REST handlers\"), mdx(\"p\", null, \"Now that the ap\\xADpli\\xADca\\xADtion boot se\\xADquence has been mi\\xADgrated to mongo, it\\u2019s time to up\\xADdate the code han\\xADdling the REST re\\xADquests.\"), mdx(\"p\", null, \"Let\\u2019s start by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAll\"), \" method that re\\xADturns all stored prod\\xADucts. To im\\xADple\\xADment this, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"find\"), \" method. As we saw for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" method, we pass an empty json ob\\xADject to de\\xADscribe a query ac\\xADcept\\xADing all doc\\xADu\\xADments:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getAll\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  mongo.find(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(), results -> {\\n    List<JsonObject> objects = results.result();\\n    List<Whisky> whiskies = objects.stream().map(Whisky::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \").collect(Collectors.toList());\\n    routingContext.response()\\n        .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n        .end(Json.encodePrettily(whiskies));\\n  });\\n}\\n\")), mdx(\"p\", null, \"The query re\\xADsults are passed as a list of JSON ob\\xADjects. From this list we can cre\\xADate our prod\\xADuct in\\xADstances, and fill the HTTP re\\xADsponse with this set.\"), mdx(\"p\", null, \"To delete a spe\\xADcific doc\\xADu\\xADment we need to se\\xADlect the doc\\xADu\\xADment using its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"deleteOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  String id = routingContext.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (id == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    mongo.removeOne(COLLECTION, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"_id\\\"\"), \", id),\\n        ar -> routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"204\"), \").end());\\n  }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new JsonObject().put(\\\"_id\\\", id)\"), \" de\\xADscribes a query se\\xADlect\\xADing a sin\\xADgle doc\\xADu\\xADment (se\\xADlected by its unique \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \", so it\\u2019s the equiv\\xADa\\xADlent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELECT * WHERE id=...\"), \"). No\\xADtice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" which is a mongo trick to se\\xADlect a doc\\xADu\\xADment by id.\"), mdx(\"p\", null, \"Up\\xADdat\\xADing a doc\\xADu\\xADment is a less triv\\xADial:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"updateOne\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext routingContext)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" String id = routingContext.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \");\\n  JsonObject json = routingContext.getBodyAsJson();\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (id == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" || json == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n    routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end();\\n  } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    mongo.update(COLLECTION,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"_id\\\"\"), \", id), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Select a unique document\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The update syntax: {$set, the json object containing the fields to update}\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"$set\\\"\"), \", json),\\n        v -> {\\n          \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (v.failed()) {\\n            routingContext.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"404\"), \").end();\\n          } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            routingContext.response()\\n                .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n                .end(Json.encodePrettily(\\n                  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Whisky(id, json.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"name\\\"\"), \"),\\n                    json.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"origin\\\"\"), \"))));\\n          }\\n        });\\n  }\\n}\\n\")), mdx(\"p\", null, \"As we can see, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update\"), \" method takes two JSON ob\\xADjects as pa\\xADra\\xADme\\xADter:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The first one de\\xADnotes the query (here we se\\xADlect a sin\\xADgle doc\\xADu\\xADment using its id).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The sec\\xADond ob\\xADject ex\\xADpresses the change to apply to the se\\xADlected doc\\xADu\\xADment. It uses a mongo syn\\xADtax. In our case, we up\\xADdate the doc\\xADu\\xADment using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$set\"), \" op\\xADer\\xADa\\xADtor.\")), mdx(Alert, {\n    info: true,\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"In this code we up\\xADdate the doc\\xADu\\xADment and re\\xADplace only a set of fields. You can also re\\xADplace the whole doc\\xADu\\xADment using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo.replace(...)\"), \".\")), mdx(\"p\", null, \"I def\\xADi\\xADnitely rec\\xADom\\xADmend to have a look to the Mon\\xADgoDB doc\\xADu\\xADmen\\xADta\\xADtion, es\\xADpe\\xADcially:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.mongodb.org/manual/tutorial/query-documents/\",\n    \"title\": \"MongoDB Query Documentation\"\n  }), \"Query syn\\xADtax doc\\xADu\\xADmen\\xADta\\xADtion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.mongodb.org/manual/tutorial/modify-documents/\",\n    \"title\": \"MongoDB Update Documentation\"\n  }), \"Up\\xADdate syn\\xADtax doc\\xADu\\xADmen\\xADta\\xADtion\"))), mdx(\"h2\", {\n    \"id\": \"time-for-configuration\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#time-for-configuration\"\n  })), \"Time for configuration\"), mdx(\"p\", null, \"Well, the code is mi\\xADgrated, but we still need to up\\xADdate the con\\xADfig\\xADu\\xADra\\xADtion. With JDBC we passed the JDBC url and the dri\\xADver class in the con\\xADfig\\xADu\\xADra\\xADtion. With mongo, we need to con\\xADfig\\xADure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connection_string\"), \" - the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mongo://\"), \" url on which the ap\\xADpli\\xADca\\xADtion is con\\xADnected, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db_name\"), \" - a name for the data source.\"), mdx(\"p\", null, \"Let\\u2019s start by the unit test. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFirstVerticleTest\"), \" file and add the fol\\xADlow\\xADing code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" MongodProcess MONGO;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" MONGO_PORT = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"12345\"), \";\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@BeforeClass\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"initialize\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throws\"), \" IOException \"), \"{\\n  MongodStarter starter = MongodStarter.getDefaultInstance();\\n  IMongodConfig mongodConfig = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" MongodConfigBuilder()\\n      .version(Version.Main.PRODUCTION)\\n      .net(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Net(MONGO_PORT, Network.localhostIsIPv6()))\\n      .build();\\n  MongodExecutable mongodExecutable =\\n      starter.prepare(mongodConfig);\\n  MONGO = mongodExecutable.start();\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@AfterClass\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"shutdown\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{  MONGO.stop(); }\\n\")), mdx(\"p\", null, \"Be\\xADfore our tests, we start (pro\\xADgram\\xADmat\\xADi\\xADcally) a mongo data\\xADbase on the port 12345. When all our tests have been ex\\xADe\\xADcuted, we shut\\xADdown the data\\xADbase.\"), mdx(\"p\", null, \"So now that the mongo server is man\\xADaged, we need to to give the right con\\xADfig\\xADu\\xADra\\xADtion to our ver\\xADti\\xADcle. Up\\xADdate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DeploymentOption\"), \" in\\xADstance with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"DeploymentOptions options = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" DeploymentOptions()\\n    .setConfig(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"http.port\\\"\"), \", port)\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"db_name\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies-test\\\"\"), \")\\n        .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"connection_string\\\"\"), \",\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:\\\"\"), \" + MONGO_PORT)\\n);\\n\")), mdx(\"p\", null, \"That\\u2019s all for the unit tests.\"), mdx(\"p\", null, \"For the integration-\\u200Btest, we are using an ex\\xADter\\xADnal\\xADized json file. Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/my-it-config.json\"), \" with the fol\\xADlow\\xADing con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": ${http.port},\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"db_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies-it\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"connection_string\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:37017\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"No\\xADtice the port we are using for the mongo server. This port was con\\xADfig\\xADured in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \" file.\"), mdx(\"p\", null, \"Last but not least, we still have a con\\xADfig\\xADu\\xADra\\xADtion file to edit: the con\\xADfig\\xADu\\xADra\\xADtion you use to launch the ap\\xADpli\\xADca\\xADtion in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"production\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"http.port\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8082\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"db_name\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"whiskies\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"connection_string\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"mongodb://localhost:27017\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"Here you would need to edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:27017\"), \" with the right url for your mongo server.\"), mdx(Alert, {\n    info: true,\n    title: \"Some changes in the integration tests\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Be\\xADcause mongo doc\\xADu\\xADment id are String and not in\\xADte\\xADger, we have to slightly change doc\\xADu\\xADment se\\xADlec\\xADtion in the in\\xADte\\xADgra\\xADtion test.\")), mdx(\"h2\", {\n    \"id\": \"time-for-a-run\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#time-for-a-run\"\n  })), \"Time for a run\"), mdx(\"p\", null, \"It\\u2019s time to pack\\xADage and run the ap\\xADpli\\xADca\\xADtion and check that every\\xADthing works as ex\\xADpected. Let\\u2019s pack\\xADage the ap\\xADpli\\xADca\\xADtion using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"mvn clean verify\\n\")), mdx(\"p\", null, \"And then to launch it, start your mongo server and launch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf.json\\n\")), mdx(\"p\", null, \"If you are, like me, using docker / docker-\\u200Bmachine for al\\xADmost every\\xADthing, edit the con\\xADfig\\xADu\\xADra\\xADtion file to refer to the right host (lo\\xADcal\\xADhost for docker, the docker-\\u200Bmachine ip if you use docker-\\u200Bmachine) and then launch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"docker run -d -p 27017:27017 mongo\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf.json\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# or\"), \"\\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\\\\n  -conf src/main/conf/my-application-conf-docker-machine.json\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/intro-series/whisky-mongo.png\",\n    \"alt\": \"The application live and running\"\n  }))), mdx(\"h2\", {\n    \"id\": \"thats-all-folks\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#thats-all-folks\"\n  })), \"That\\u2019s all folks!\"), mdx(\"p\", null, \"We are reach\\xADing the end of this post. We saw how you can use the vert-\\u200Bmongo-client to ac\\xADcess asyn\\xADchro\\xADnously data stored in\\xADside a mongo data\\xADbase as well as in\\xADsert\\xADing/up\\xADdat\\xADing this data. Now you have the choice be\\xADtween JDBC or Mongo. In ad\\xADdi\\xADtion, vert.x pro\\xADvides a client for Redis.\"), mdx(\"p\", null, \"Next time, we will see how the ver\\xADti\\xADcle class can be split in two ver\\xADti\\xADcles in order to bet\\xADter or\\xADga\\xADnize your code. The in\\xADter\\xADac\\xADtion be\\xADtween the two ver\\xADti\\xADcles will uses \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ser\\xADvices\"), \".\"), mdx(\"p\", null, \"Stay tuned & Happy cod\\xADing!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This blog post is part of the <em>in­tro­duc­tion to vert.x</em> se­ries. Last time, we have seen how we can use the <code>vertx-jdbc-client</code> to con­nect to a data­base using a JDBC dri­ver. In this post, we are going to re­place this JDBC client by the <code>vertx-mongo-client</code>, and thus con­nect to a Mongo data­base.</p><p>You don’t un­der­stand the title, check the <a href=\"https://www.mongodb.org\">mon­goDB</a> web­site.</p><p>But be­fore going fur­ther, let’s recap.</p><h2 id=\"previously-in--introduction-to-vertx\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#previously-in--introduction-to-vertx\"></a>Previously in  ‘introduction to vert.x’</h2><ol><li>The <a href=\"/blog/my-first-vert-x-3-application/\">first post</a> has de­scribed how to build a vert.x ap­pli­ca­tion with Maven and ex­e­cute unit tests.</li><li>The <a href=\"/blog/vert-x-application-configuration/\">sec­ond post</a> has de­scribed how this ap­pli­ca­tion can be­come con­fig­urable.</li><li>The <a href=\"/blog/some-rest-with-vert-x/\">third post</a> has in­tro­duced <a href=\"http://vertx.io/docs/vertx-web/java/\">vertx-​web</a>, and a small col­lec­tion man­age­ment ap­pli­ca­tion has been de­vel­oped. This ap­pli­ca­tion of­fers a REST API used by a HTML/JavaScript fron­tend.</li><li>The <a href=\"/blog/unit-and-integration-tests/\">fourth post</a> has pre­sented how you can run in­te­gra­tion tests to en­sure the be­hav­ior of your ap­pli­ca­tion.</li><li>The <a href=\"/blog/using-the-asynchronous-sql-client/\">last post</a> has pre­sented how you can in­ter­act with a JDBC data­base using the vertx-​jdbc-client.</li></ol><p>This post shows an­other client that lets you use Mon­goDB in a vert.x ap­pli­ca­tion. This client pro­vides an vert.x API to ac­cess asyn­chro­nously to the Mongo data­base. We won’t com­pare whether or not JDBC is su­pe­rior to Mongo, they have both pros and cons, and you should use the one that meet your re­quire­ments. Vert.x lets you choose, that’s the point.</p><p>The vertx-​mongo-client doc­u­men­ta­tion is avail­able <a href=\"http://vertx.io/docs/vertx-mongo-client/java/\">here</a>.</p><p>The code de­vel­oped in this blog post is avail­able in the branch <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-6\">post-6</a>. Our start­ing point is the code from the <a href=\"https://github.com/cescoffier/my-vertx-first-app/tree/post-5\">post-5 branch</a>.</p><h2 id=\"asynchronous-data-access\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#asynchronous-data-access\"></a>Asynchronous data access</h2><p>One of the vert.x char­ac­ter­is­tics is being asyn­chro­nous. With an asyn­chro­nous API, you don’t wait for a re­sult, but you are no­ti­fied when this re­sult is ready. Thanks to vert.x, this no­ti­fi­ca­tion hap­pens in the same thread (un­der­stand event loop) as the ini­tial re­quest:</p><p><img src=\"/images/blog/intro-series/async-data.png\" alt=\"Asynchronous data access\"/></p><p>Your code (on the left) is going to in­voke the mongo client and pass a call­back that will be in­voked when the re­sult is avail­able. The in­vo­ca­tion to the mongo client is non block­ing and re­turns im­me­di­ately. The client is deal­ing with the mongo data­base and when the re­sult has been com­puted / re­trieved, it in­vokes the call­back in the same event loop as the re­quest.</p><p>This model is par­tic­u­larly pow­er­ful as it avoids the syn­chro­niza­tion pit­falls. In­deed, your code is only called by a sin­gle thread, no need to syn­chro­nize any­thing.</p><h2 id=\"as-with-every-maven-project\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#as-with-every-maven-project\"></a>As with every Maven project…</h2><p>… we need to up­date the <code>pom.xml</code> file first.</p><p>In the <code>pom.xml</code> file, re­place the <code>vertx-jdbc-client</code> by the <code>vertx-mongo-client</code>:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-mongo-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>Un­like JDBC where we were in­stan­ti­at­ing a data­base on the fly, here we need to ex­plic­itly starts a Mon­goDB server. In order to launch a Mongo server in our test, we are going to add an­other de­pen­dency:</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>de.flapdoodle.embed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>de.flapdoodle.embed.mongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.50.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre><p>This de­pen­dency will be used in our unit tests, as it lets us start a mongo server pro­gram­mat­i­cally. For our in­te­gra­tion tests, we are going to use a Maven plug­in start­ing and stop­ping the mongo server be­fore and after our in­te­gra­tion tests. Add this plug­in to the <code>&lt;plugins/&gt;</code> sec­tion of your <code>pom.xml</code> file.</p><pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.github.joelittlejohn.embedmongo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>embedmongo-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>start<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span>37017<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">port</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>stop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>stop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n</code></pre><p>No­tice the port we use here (37017), we will use this port later.</p><h2 id=\"enough-xml-for-today\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#enough-xml-for-today\"></a>Enough XML for today</h2><p>Now that we have up­dated our <code>pom.xml</code> file, it’s time to change our ver­ti­cle. The first thing to do is to re­place the jdbc client by the mongo client:</p><pre><code class=\"hljs language-java\">mongo = MongoClient.createShared(vertx, config());\n</code></pre><p>This client is con­fig­ured with the con­fig­u­ra­tion given to the ver­ti­cle (more on this below).</p><p>Once done, we need to change how we start the ap­pli­ca­tion. With the mongo client, no need to ac­quire a con­nec­tion, it han­dles this in­ter­nally. So our startup se­quence is a bit more sim­ple:</p><pre><code class=\"hljs language-java\">createSomeData(\n    (nothing) -&gt; startWebApp(\n        (http) -&gt; completeStartup(http, fut)\n    ), fut);\n</code></pre><p>As in the pre­vi­ous post, we need to in­sert some pre­de­fined data if the data­base is empty:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createSomeData</span><span class=\"hljs-params\">(Handler&lt;AsyncResult&lt;Void&gt;&gt; next, Future&lt;Void&gt; fut)</span> </span>{\n  Whisky bowmore = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Bowmore 15 Years Laimrig&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Islay&quot;</span>);\n  Whisky talisker = <span class=\"hljs-keyword\">new</span> Whisky(<span class=\"hljs-string\">&quot;Talisker 57° North&quot;</span>, <span class=\"hljs-string\">&quot;Scotland, Island&quot;</span>);\n  System.out.println(bowmore.toJson());\n  <span class=\"hljs-comment\">// Do we have data in the collection ?</span>\n  mongo.count(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject(), count -&gt; {\n    <span class=\"hljs-keyword\">if</span> (count.succeeded()) {\n      <span class=\"hljs-keyword\">if</span> (count.result() == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// no whiskies, insert data</span>\n        mongo.insert(COLLECTION, bowmore.toJson(), ar -&gt; {\n          <span class=\"hljs-keyword\">if</span> (ar.failed()) {\n            fut.fail(ar.cause());\n          } <span class=\"hljs-keyword\">else</span> {\n            mongo.insert(COLLECTION, talisker.toJson(), ar2 -&gt; {\n              <span class=\"hljs-keyword\">if</span> (ar2.failed()) {\n                fut.failed();\n              } <span class=\"hljs-keyword\">else</span> {\n                next.handle(Future.&lt;Void&gt;succeededFuture());\n              }\n            });\n          }\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        next.handle(Future.&lt;Void&gt;succeededFuture());\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// report the error</span>\n      fut.fail(count.cause());\n    }\n  });\n}\n</code></pre><p>To de­tect whether or not the data­base al­ready con­tains some data, we re­trieve the num­ber of <em>doc­u­ments</em> from the <code>whiskies</code> col­lec­tion. This is done with : <code>mongo.count(COLLECTION, new JsonObject(), count -&gt; {})</code>. The sec­ond pa­ra­me­ter is the query. In our case, we want to count all doc­u­ments. This is done using <code>new JsonObject()</code> that would cre­ate a query ac­cept­ing all doc­u­ments from the col­lec­tion (it’s equiv­a­lent to a <code>SELECT * FROM ...</code>).</p><p>Also no­tice the <code>insert</code> calls. Doc­u­ments are passed as JSON ob­ject, so to in­sert an ob­ject, just se­ri­al­ize it to JSON and use <code>mongo.insert(COLLECTION, json, completion handler)</code>.</p><h2 id=\"mongo-ize-the-rest-handlers\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#mongo-ize-the-rest-handlers\"></a>Mongo-ize the REST handlers</h2><p>Now that the ap­pli­ca­tion boot se­quence has been mi­grated to mongo, it’s time to up­date the code han­dling the REST re­quests.</p><p>Let’s start by the <code>getAll</code> method that re­turns all stored prod­ucts. To im­ple­ment this, we use the <code>find</code> method. As we saw for the <code>count</code> method, we pass an empty json ob­ject to de­scribe a query ac­cept­ing all doc­u­ments:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  mongo.find(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject(), results -&gt; {\n    List&lt;JsonObject&gt; objects = results.result();\n    List&lt;Whisky&gt; whiskies = objects.stream().map(Whisky::<span class=\"hljs-keyword\">new</span>).collect(Collectors.toList());\n    routingContext.response()\n        .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n        .end(Json.encodePrettily(whiskies));\n  });\n}\n</code></pre><p>The query re­sults are passed as a list of JSON ob­jects. From this list we can cre­ate our prod­uct in­stances, and fill the HTTP re­sponse with this set.</p><p>To delete a spe­cific doc­u­ment we need to se­lect the doc­u­ment using its <code>id</code>:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  String id = routingContext.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span>) {\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).end();\n  } <span class=\"hljs-keyword\">else</span> {\n    mongo.removeOne(COLLECTION, <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;_id&quot;</span>, id),\n        ar -&gt; routingContext.response().setStatusCode(<span class=\"hljs-number\">204</span>).end());\n  }\n}\n</code></pre><p>The <code>new JsonObject().put(&quot;_id&quot;, id)</code> de­scribes a query se­lect­ing a sin­gle doc­u­ment (se­lected by its unique <code>id</code>, so it’s the equiv­a­lent to <code>SELECT * WHERE id=...</code>). No­tice the <code>_id</code> which is a mongo trick to se­lect a doc­u­ment by id.</p><p>Up­dat­ing a doc­u­ment is a less triv­ial:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateOne</span><span class=\"hljs-params\">(RoutingContext routingContext)</span> </span>{\n  <span class=\"hljs-keyword\">final</span> String id = routingContext.request().getParam(<span class=\"hljs-string\">&quot;id&quot;</span>);\n  JsonObject json = routingContext.getBodyAsJson();\n  <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-keyword\">null</span> || json == <span class=\"hljs-keyword\">null</span>) {\n    routingContext.response().setStatusCode(<span class=\"hljs-number\">400</span>).end();\n  } <span class=\"hljs-keyword\">else</span> {\n    mongo.update(COLLECTION,\n        <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;_id&quot;</span>, id), <span class=\"hljs-comment\">// Select a unique document</span>\n        <span class=\"hljs-comment\">// The update syntax: {$set, the json object containing the fields to update}</span>\n        <span class=\"hljs-keyword\">new</span> JsonObject()\n            .put(<span class=\"hljs-string\">&quot;$set&quot;</span>, json),\n        v -&gt; {\n          <span class=\"hljs-keyword\">if</span> (v.failed()) {\n            routingContext.response().setStatusCode(<span class=\"hljs-number\">404</span>).end();\n          } <span class=\"hljs-keyword\">else</span> {\n            routingContext.response()\n                .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n                .end(Json.encodePrettily(\n                  <span class=\"hljs-keyword\">new</span> Whisky(id, json.getString(<span class=\"hljs-string\">&quot;name&quot;</span>),\n                    json.getString(<span class=\"hljs-string\">&quot;origin&quot;</span>))));\n          }\n        });\n  }\n}\n</code></pre><p>As we can see, the <code>update</code> method takes two JSON ob­jects as pa­ra­me­ter:</p><ol><li>The first one de­notes the query (here we se­lect a sin­gle doc­u­ment using its id).</li><li>The sec­ond ob­ject ex­presses the change to apply to the se­lected doc­u­ment. It uses a mongo syn­tax. In our case, we up­date the doc­u­ment using the <code>$set</code> op­er­a­tor.</li></ol><div class=\"alert info\"><p>In this code we up­date the doc­u­ment and re­place only a set of fields. You can also re­place the whole doc­u­ment using <code>mongo.replace(...)</code>.</p></div><p>I def­i­nitely rec­om­mend to have a look to the Mon­goDB doc­u­men­ta­tion, es­pe­cially:</p><ul><li><a href=\"https://docs.mongodb.org/manual/tutorial/query-documents/\" title=\"MongoDB Query Documentation\">Query syn­tax doc­u­men­ta­tion</a></li><li><a href=\"https://docs.mongodb.org/manual/tutorial/modify-documents/\" title=\"MongoDB Update Documentation\">Up­date syn­tax doc­u­men­ta­tion</a></li></ul><h2 id=\"time-for-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#time-for-configuration\"></a>Time for configuration</h2><p>Well, the code is mi­grated, but we still need to up­date the con­fig­u­ra­tion. With JDBC we passed the JDBC url and the dri­ver class in the con­fig­u­ra­tion. With mongo, we need to con­fig­ure the <code>connection_string</code> - the <code>mongo://</code> url on which the ap­pli­ca­tion is con­nected, and <code>db_name</code> - a name for the data source.</p><p>Let’s start by the unit test. Edit the <code>MyFirstVerticleTest</code> file and add the fol­low­ing code:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> MongodProcess MONGO;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> MONGO_PORT = <span class=\"hljs-number\">12345</span>;\n<span class=\"hljs-meta\">@BeforeClass</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  MongodStarter starter = MongodStarter.getDefaultInstance();\n  IMongodConfig mongodConfig = <span class=\"hljs-keyword\">new</span> MongodConfigBuilder()\n      .version(Version.Main.PRODUCTION)\n      .net(<span class=\"hljs-keyword\">new</span> Net(MONGO_PORT, Network.localhostIsIPv6()))\n      .build();\n  MongodExecutable mongodExecutable =\n      starter.prepare(mongodConfig);\n  MONGO = mongodExecutable.start();\n}\n\n<span class=\"hljs-meta\">@AfterClass</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">shutdown</span><span class=\"hljs-params\">()</span> </span>{  MONGO.stop(); }\n</code></pre><p>Be­fore our tests, we start (pro­gram­mat­i­cally) a mongo data­base on the port 12345. When all our tests have been ex­e­cuted, we shut­down the data­base.</p><p>So now that the mongo server is man­aged, we need to to give the right con­fig­u­ra­tion to our ver­ti­cle. Up­date the <code>DeploymentOption</code> in­stance with:</p><pre><code class=\"hljs language-java\">DeploymentOptions options = <span class=\"hljs-keyword\">new</span> DeploymentOptions()\n    .setConfig(<span class=\"hljs-keyword\">new</span> JsonObject()\n        .put(<span class=\"hljs-string\">&quot;http.port&quot;</span>, port)\n        .put(<span class=\"hljs-string\">&quot;db_name&quot;</span>, <span class=\"hljs-string\">&quot;whiskies-test&quot;</span>)\n        .put(<span class=\"hljs-string\">&quot;connection_string&quot;</span>,\n            <span class=\"hljs-string\">&quot;mongodb://localhost:&quot;</span> + MONGO_PORT)\n);\n</code></pre><p>That’s all for the unit tests.</p><p>For the integration-​test, we are using an ex­ter­nal­ized json file. Edit the <code>src/test/resources/my-it-config.json</code> with the fol­low­ing con­tent:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: ${http.port},\n  <span class=\"hljs-attr\">&quot;db_name&quot;</span>: <span class=\"hljs-string\">&quot;whiskies-it&quot;</span>,\n  <span class=\"hljs-attr\">&quot;connection_string&quot;</span>: <span class=\"hljs-string\">&quot;mongodb://localhost:37017&quot;</span>\n}\n</code></pre><p>No­tice the port we are using for the mongo server. This port was con­fig­ured in the <code>pom.xml</code> file.</p><p>Last but not least, we still have a con­fig­u­ra­tion file to edit: the con­fig­u­ra­tion you use to launch the ap­pli­ca­tion in <code>production</code>:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;http.port&quot;</span>: <span class=\"hljs-number\">8082</span>,\n  <span class=\"hljs-attr\">&quot;db_name&quot;</span>: <span class=\"hljs-string\">&quot;whiskies&quot;</span>,\n  <span class=\"hljs-attr\">&quot;connection_string&quot;</span>: <span class=\"hljs-string\">&quot;mongodb://localhost:27017&quot;</span>\n}\n</code></pre><p>Here you would need to edit the <code>localhost:27017</code> with the right url for your mongo server.</p><div class=\"alert info\"><div class=\"alert-title\">Some changes in the integration tests</div><p>Be­cause mongo doc­u­ment id are String and not in­te­ger, we have to slightly change doc­u­ment se­lec­tion in the in­te­gra­tion test.</p></div><h2 id=\"time-for-a-run\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#time-for-a-run\"></a>Time for a run</h2><p>It’s time to pack­age and run the ap­pli­ca­tion and check that every­thing works as ex­pected. Let’s pack­age the ap­pli­ca­tion using:</p><pre><code class=\"hljs language-text\">mvn clean verify\n</code></pre><p>And then to launch it, start your mongo server and launch:</p><pre><code class=\"hljs language-text\">java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n</code></pre><p>If you are, like me, using docker / docker-​machine for al­most every­thing, edit the con­fig­u­ra­tion file to refer to the right host (lo­cal­host for docker, the docker-​machine ip if you use docker-​machine) and then launch:</p><pre><code class=\"hljs language-bash\">docker run -d -p 27017:27017 mongo\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n<span class=\"hljs-comment\"># or</span>\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf-docker-machine.json\n</code></pre><p><img src=\"/images/blog/intro-series/whisky-mongo.png\" alt=\"The application live and running\"/></p><h2 id=\"thats-all-folks\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#thats-all-folks\"></a>That’s all folks!</h2><p>We are reach­ing the end of this post. We saw how you can use the vert-​mongo-client to ac­cess asyn­chro­nously data stored in­side a mongo data­base as well as in­sert­ing/up­dat­ing this data. Now you have the choice be­tween JDBC or Mongo. In ad­di­tion, vert.x pro­vides a client for Redis.</p><p>Next time, we will see how the ver­ti­cle class can be split in two ver­ti­cles in order to bet­ter or­ga­nize your code. The in­ter­ac­tion be­tween the two ver­ti­cles will uses <em>ser­vices</em>.</p><p>Stay tuned &amp; Happy cod­ing!</p>","scope":{}},"tfIdfTerms":[{"term":"us","tf":27},{"term":"mongo","tf":26},{"term":"document","tf":21},{"term":"client","tf":14},{"term":"post","tf":13},{"term":"applic","tf":12},{"term":"test","tf":12},{"term":"configur","tf":12},{"term":"databas","tf":11},{"term":"need","tf":11},{"term":"jdbc","tf":10},{"term":"code","tf":10},{"term":"updat","tf":10},{"term":"start","tf":9},{"term":"file","tf":9},{"term":"server","tf":8},{"term":"time","tf":7},{"term":"let","tf":7},{"term":"queri","tf":7},{"term":"select","tf":7},{"term":"data","tf":6},{"term":"verticl","tf":6},{"term":"json","tf":6},{"term":"object","tf":6},{"term":"go","tf":5}]}],"numPages":16},"__N_SSG":true}