{"pageProps":{"categories":["releases","guides","news"],"page":16,"posts":[{"filename":"blog/2015-07-03-vert-x3-and-postgresql-json-type.mdx","date":"2015-07-03","slug":"vert-x3-and-postgresql-json-type","meta":{"title":"Vert.x 3 and PostgreSQL JSON type","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"One of the interesting features of NoSQL databases is their schema-less mode of operation. This feature is very useful during project prototyping and early development since at early the stages of development of projects all data structures are not clear or have been defined yet."},"readingTime":{"text":"1 min read","minutes":1,"time":60000,"words":200},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One of the in\\xADter\\xADest\\xADing fea\\xADtures of NoSQL data\\xADbases is their schema-\\u200Bless mode of op\\xADer\\xADa\\xADtion. This fea\\xADture is very use\\xADful\\ndur\\xADing project pro\\xADto\\xADtyp\\xADing and early de\\xADvel\\xADop\\xADment since at early the stages of de\\xADvel\\xADop\\xADment of projects all data\\nstruc\\xADtures are not clear or have been de\\xADfined yet. The rea\\xADson of this post is not to dis\\xADcuss about that sub\\xADject, but to\\nshow that some\\xADtimes you can also use NoSQL with a more tra\\xADdi\\xADtional data\\xADbase en\\xADgine like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/\"\n  }), \"Post\\xADgreSQL\"), \".\"), mdx(\"p\", null, \"Since ver\\xADsion \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/docs/9.3/static/datatype-json.html\"\n  }), \"9.3\"), \" there is sup\\xADport for JSON how\\xADever with\\nver\\xADsion \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.postgresql.org/docs/9.4/static/datatype-json.html\"\n  }), \"9.4\"), \" there is even bet\\xADter sup\\xADport with the new type\\nJSONB. I will now show how to use the basic JSON type in a sim\\xADple REST ap\\xADpli\\xADca\\xADtion writ\\xADten with Vert.x3:\"), mdx(Gist, {\n    url: \"https://gist.github.com/pmlopes/47f7f02b0b102b5e68d8\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"Now all you need to do is play with this REST ser\\xADvice, for this you can use curl to cre\\xADate a sale:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"$ curl \\\\\\n    -i \\\\\\n    -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Content-Type: application/json\\\"\"), \" \\\\\\n    -X POST \\\\\\n    -d \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'{\\\"id\\\": 1, \\\"customer_name\\\": \\\"John\\\", \\\"items\\\": {\\\"description\\\": \\\"milk\\\", \\\"quantity\\\": 4}}'\"), \" \\\\\\n    http://localhost:8080/sales\\n\\nHTTP/1.1 201 Created\\nContent-Length: 0\\n\")), mdx(\"p\", null, \"And if you want to read that new doc\\xADu\\xADment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"$ curl -i -H \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Accept: application/json\\\"\"), \" -X GET http://localhost:8080/sales/1\\nHTTP/1.1 200 OK\\ncontent-type: application/json\\nContent-Length: 75\\n\\n{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"id\\\"\"), \":1,\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"customer_name\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"John\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"items\\\"\"), \":{\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \":\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"milk\\\"\"), \",\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"quantity\\\"\"), \":4}}\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>One of the in­ter­est­ing fea­tures of NoSQL data­bases is their schema-​less mode of op­er­a­tion. This fea­ture is very use­ful\ndur­ing project pro­to­typ­ing and early de­vel­op­ment since at early the stages of de­vel­op­ment of projects all data\nstruc­tures are not clear or have been de­fined yet. The rea­son of this post is not to dis­cuss about that sub­ject, but to\nshow that some­times you can also use NoSQL with a more tra­di­tional data­base en­gine like <a href=\"http://www.postgresql.org/\">Post­greSQL</a>.</p><p>Since ver­sion <a href=\"http://www.postgresql.org/docs/9.3/static/datatype-json.html\">9.3</a> there is sup­port for JSON how­ever with\nver­sion <a href=\"http://www.postgresql.org/docs/9.4/static/datatype-json.html\">9.4</a> there is even bet­ter sup­port with the new type\nJSONB. I will now show how to use the basic JSON type in a sim­ple REST ap­pli­ca­tion writ­ten with Vert.x3:</p><div>...waiting for Gist...</div><p>Now all you need to do is play with this REST ser­vice, for this you can use curl to cre­ate a sale:</p><pre><code class=\"hljs language-bash\">$ curl \\\n    -i \\\n    -H <span class=\"hljs-string\">&quot;Content-Type: application/json&quot;</span> \\\n    -X POST \\\n    -d <span class=\"hljs-string\">&#x27;{&quot;id&quot;: 1, &quot;customer_name&quot;: &quot;John&quot;, &quot;items&quot;: {&quot;description&quot;: &quot;milk&quot;, &quot;quantity&quot;: 4}}&#x27;</span> \\\n    http://localhost:8080/sales\n\nHTTP/1.1 201 Created\nContent-Length: 0\n</code></pre><p>And if you want to read that new doc­u­ment:</p><pre><code class=\"hljs language-bash\">$ curl -i -H <span class=\"hljs-string\">&quot;Accept: application/json&quot;</span> -X GET http://localhost:8080/sales/1\nHTTP/1.1 200 OK\ncontent-type: application/json\nContent-Length: 75\n\n{<span class=\"hljs-string\">&quot;id&quot;</span>:1,<span class=\"hljs-string\">&quot;customer_name&quot;</span>:<span class=\"hljs-string\">&quot;John&quot;</span>,<span class=\"hljs-string\">&quot;items&quot;</span>:{<span class=\"hljs-string\">&quot;description&quot;</span>:<span class=\"hljs-string\">&quot;milk&quot;</span>,<span class=\"hljs-string\">&quot;quantity&quot;</span>:4}}\n</code></pre>","scope":{}},"tfIdfTerms":[{"term":"us","tf":4},{"term":"featur","tf":2},{"term":"nosql","tf":2},{"term":"databas","tf":2},{"term":"project","tf":2},{"term":"earli","tf":2},{"term":"develop","tf":2},{"term":"not","tf":2},{"term":"show","tf":2},{"term":"version","tf":2},{"term":"support","tf":2},{"term":"json","tf":2},{"term":"new","tf":2},{"term":"type","tf":2},{"term":"rest","tf":2},{"term":"on","tf":1},{"term":"interest","tf":1},{"term":"schema","tf":1},{"term":"less","tf":1},{"term":"mode","tf":1},{"term":"oper","tf":1},{"term":"prototyp","tf":1},{"term":"stage","tf":1},{"term":"data","tf":1},{"term":"structur","tf":1}]},{"filename":"blog/2015-07-02-vert-x-3-init-d-script.mdx","date":"2015-07-02","slug":"vert-x-3-init-d-script","meta":{"title":"Vert.x 3 init.d Script","category":"guides","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"Let's say you have a Vert.x 3 application you want to install on a Linux server. But you want the old school way (I mean not the Docker way)."},"readingTime":{"text":"2 min read","minutes":1.845,"time":110700,"words":369},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let\\u2019s say you have a Vert.x 3 ap\\xADpli\\xADca\\xADtion you want to in\\xADstall on a Linux server. But you want the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"old school\"), \" way (I mean not the Docker way \", \"\\u263A\", \"). So, in other words, you need an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" script. This post pro\\xADposes an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" script that you can use to start/stop/restart a Vert.x 3 ap\\xADpli\\xADca\\xADtion.\"), mdx(\"h2\", {\n    \"id\": \"prerequisites\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#prerequisites\"\n  })), \"Prerequisites\"), mdx(\"p\", null, \"The pro\\xADposed script as\\xADsumes your ap\\xADpli\\xADca\\xADtion is pack\\xADaged as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fat jar\"), \". So, your ap\\xADpli\\xADca\\xADtion is going to be launched using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar your-fat-jar ...\"), \".\"), mdx(\"h2\", {\n    \"id\": \"the-script\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#the-script\"\n  })), \"The script\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"init.d\"), \" scripts have to reply to a set of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmands\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"start\"), \" : starts the ap\\xADpli\\xADca\\xADtion (if not yet started)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stop\"), \" : stops the ap\\xADpli\\xADca\\xADtion (if started)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"status\"), \" : let you know if the ap\\xADpli\\xADca\\xADtion is started or not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"restart\"), \" : restart the ap\\xADpli\\xADca\\xADtion\")), mdx(\"p\", null, \"These \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com\\xADmands\"), \" are in\\xADvoked using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"service my-service-script start\\nservice my-service-script stop\\nservice my-service-script status\\nservice my-service-script restart\\n\")), mdx(\"p\", null, \"In gen\\xADeral, ser\\xADvice scripts are hooked in the boot and shut\\xADdown se\\xADquences to start and stop au\\xADto\\xADmat\\xADi\\xADcally dur\\xADing the sys\\xADtem starts and stops.\"), mdx(\"p\", null, \"So, enough talks, let\\u2019s look at the script:\"), mdx(Gist, {\n    url: \"https://gist.github.com/cescoffier/ccc8b391787e93f4e6e0\",\n    mdxType: \"Gist\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-the-script\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#using-the-script\"\n  })), \"Using the script\"), mdx(\"p\", null, \"First down\\xADload the script from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"You need to set a cou\\xADple of vari\\xADables lo\\xADcated at the be\\xADgin\\xADning of the file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-ini\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The directory in which your application is installed\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_DIR\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/opt/my-vertx-app\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The fat jar containing your application\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_JAR\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"maven-verticle-3.0.0-fat.jar\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The application argument such as -cluster -cluster-host ...\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"APPLICATION_ARGS\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# vert.x options and system properties (-Dfoo=bar).\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"VERTX_OPTS\"), \"=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# The path to the Java command to use to launch the application (must be java 8+)\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"JAVA\"), \"=/opt/java/java/bin/java\\n\")), mdx(\"p\", null, \"The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these vari\\xADables based on your en\\xADvi\\xADron\\xADment, move the file to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/init.d\"), \" and set it as ex\\xADe\\xADcutable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"sudo mv my-vertx-application /etc/init.d\\nsudo chmod +x my-vertx-application\\n\")), mdx(\"p\", null, \"Then, you should be able to start your ap\\xADpli\\xADca\\xADtion using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"sudo service my-vertx-application start\\n\")), mdx(\"p\", null, \"De\\xADpend\\xADing to your op\\xADer\\xADat\\xADing sys\\xADtem, adding the hooks to the boot and shut\\xADdown se\\xADquence dif\\xADfers. For in\\xADstance on Ubuntu you need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update-rc.d\"), \" com\\xADmand while on Cen\\xADtOS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chkconfig\"), \" is used\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"That\\u2019s all, enjoy !\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Let’s say you have a Vert.x 3 ap­pli­ca­tion you want to in­stall on a Linux server. But you want the <em>old school</em> way (I mean not the Docker way <!-- -->☺<!-- -->). So, in other words, you need an <em>init.d</em> script. This post pro­poses an <em>init.d</em> script that you can use to start/stop/restart a Vert.x 3 ap­pli­ca­tion.</p><h2 id=\"prerequisites\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#prerequisites\"></a>Prerequisites</h2><p>The pro­posed script as­sumes your ap­pli­ca­tion is pack­aged as a <em>fat jar</em>. So, your ap­pli­ca­tion is going to be launched using <code>java -jar your-fat-jar ...</code>.</p><h2 id=\"the-script\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#the-script\"></a>The script</h2><p>The <em>init.d</em> scripts have to reply to a set of <em>com­mands</em>:</p><ul><li><code>start</code> : starts the ap­pli­ca­tion (if not yet started)</li><li><code>stop</code> : stops the ap­pli­ca­tion (if started)</li><li><code>status</code> : let you know if the ap­pli­ca­tion is started or not</li><li><code>restart</code> : restart the ap­pli­ca­tion</li></ul><p>These <em>com­mands</em> are in­voked using:</p><pre><code class=\"hljs language-bash\">service my-service-script start\nservice my-service-script stop\nservice my-service-script status\nservice my-service-script restart\n</code></pre><p>In gen­eral, ser­vice scripts are hooked in the boot and shut­down se­quences to start and stop au­to­mat­i­cally dur­ing the sys­tem starts and stops.</p><p>So, enough talks, let’s look at the script:</p><div>...waiting for Gist...</div><h2 id=\"using-the-script\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#using-the-script\"></a>Using the script</h2><p>First down­load the script from the <a href=\"https://gist.githubusercontent.com/cescoffier/ccc8b391787e93f4e6e0/raw/my-vertx-application\">here</a>.</p><p>You need to set a cou­ple of vari­ables lo­cated at the be­gin­ning of the file:</p><pre><code class=\"hljs language-ini\"><span class=\"hljs-comment\"># The directory in which your application is installed</span>\n<span class=\"hljs-attr\">APPLICATION_DIR</span>=<span class=\"hljs-string\">&quot;/opt/my-vertx-app&quot;</span>\n<span class=\"hljs-comment\"># The fat jar containing your application</span>\n<span class=\"hljs-attr\">APPLICATION_JAR</span>=<span class=\"hljs-string\">&quot;maven-verticle-3.0.0-fat.jar&quot;</span>\n<span class=\"hljs-comment\"># The application argument such as -cluster -cluster-host ...</span>\n<span class=\"hljs-attr\">APPLICATION_ARGS</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-comment\"># vert.x options and system properties (-Dfoo=bar).</span>\n<span class=\"hljs-attr\">VERTX_OPTS</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-comment\"># The path to the Java command to use to launch the application (must be java 8+)</span>\n<span class=\"hljs-attr\">JAVA</span>=/opt/java/java/bin/java\n</code></pre><p>The rest of the script can stay as it is, but feel free to adapt it to your needs. Once you have set these vari­ables based on your en­vi­ron­ment, move the file to <code>/etc/init.d</code> and set it as ex­e­cutable:</p><pre><code class=\"hljs language-bash\">sudo mv my-vertx-application /etc/init.d\nsudo chmod +x my-vertx-application\n</code></pre><p>Then, you should be able to start your ap­pli­ca­tion using:</p><pre><code class=\"hljs language-bash\">sudo service my-vertx-application start\n</code></pre><p>De­pend­ing to your op­er­at­ing sys­tem, adding the hooks to the boot and shut­down se­quence dif­fers. For in­stance on Ubuntu you need to use the <code>update-rc.d</code> com­mand while on Cen­tOS <code>chkconfig</code> is used</p><p><strong>That’s all, enjoy !</strong></p>","scope":{}},"tfIdfTerms":[{"term":"script","tf":10},{"term":"applic","tf":9},{"term":"start","tf":8},{"term":"us","tf":7},{"term":"need","tf":4},{"term":"stop","tf":4},{"term":"set","tf":4},{"term":"let","tf":3},{"term":"not","tf":3},{"term":"init","tf":3},{"term":"command","tf":3},{"term":"want","tf":2},{"term":"propos","tf":2},{"term":"restart","tf":2},{"term":"hook","tf":2},{"term":"boot","tf":2},{"term":"shutdown","tf":2},{"term":"sequenc","tf":2},{"term":"system","tf":2},{"term":"variabl","tf":2},{"term":"file","tf":2},{"term":"sai","tf":1},{"term":"instal","tf":1},{"term":"linux","tf":1},{"term":"server","tf":1}]},{"filename":"blog/2015-07-01-vert-x3-web-easy-as-pi.mdx","date":"2015-07-01","slug":"vert-x3-web-easy-as-pi","meta":{"title":"Vert.x 3 Web easy as Pi","category":"guides","authors":[{"name":"Paulo Lopes","github_id":"pmlopes"}],"summary":"Vert.x Web distinguishes itself from traditional application servers like JavaEE by just being a simple extension toolkit to Vert.x, which makes it quite lightweight and small but nevertheless very powerful."},"readingTime":{"text":"4 min read","minutes":3.12,"time":187200.00000000003,"words":624},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/#web\"\n  }), \"Vert.x Web\"), \" dis\\xADtin\\xADguishes it\\xADself from tra\\xADdi\\xADtional ap\\xADpli\\xADca\\xADtion servers like JavaEE by just\\nbeing a sim\\xADple ex\\xADten\\xADsion toolkit to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io/docs/#core\"\n  }), \"Vert.x\"), \", which makes it quite light\\xADweight and small but\\nnev\\xADer\\xADthe\\xADless very pow\\xADer\\xADful.\"), mdx(\"p\", null, \"One can cre\\xADate sim\\xADple ap\\xADpli\\xADca\\xADtions tar\\xADget\\xADing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"small\"), \" de\\xADvices such as Rasp\\xADberry Pi with\\xADout hav\\xADing to write much code but\\nstill very fast as it is ex\\xADpected from any Vert.x ap\\xADpli\\xADca\\xADtion.\"), mdx(\"p\", null, \"Let\\u2019s for ex\\xADam\\xADple think of mak\\xADing a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip\"\n  }), \"re\\xADal\\xADtime cpu load vi\\xADsu\\xADal\\xADiza\\xADtion web app\"), \".\\nFor this ex\\xADam\\xADple we need a few things:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html\"\n  }), \"MXBean\"), \" to col\\xADlect CPU load\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients\"\n  }), \"HTTP server\"), \" (to serve the sta\\xADtic re\\xADsources and host our app)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/#_sockjs\"\n  }), \"SockJS server\"), \" to pro\\xADvide re\\xADal\\xADtime up\\xADdates\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a SockJS to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge\"\n  }), \"Event\\xADBus bridge\"), \" to pass mes\\xADsages around\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"some \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://d3js.org/\"\n  }), \"vi\\xADsu\\xADal\\xADiza\\xADtion\"), \" JS li\\xADbrary\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a bit of cod\\xADing\")), mdx(\"p\", null, \"To boot\\xADstrap this project we start by cre\\xADat\\xADing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml\"\n  }), \"pom.xml\"), \"\\nfile. A good start is al\\xADways to con\\xADsult the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-examples\"\n  }), \"ex\\xADam\\xADples\"), \",\\nand you should end up with some\\xADthing like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-xml\"\n  }), \"...\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx.blog\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"rpi\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"1.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-core\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"io.vertx\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"groupId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"vertx-web\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"artifactId\"), \">\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"3.0.0\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"version\"), \">\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependency\"), \">\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-tag\"\n  }), \"</\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"dependencies\"), \">\"), \"\\n...\\n\")), mdx(\"p\", null, \"At this mo\\xADment you can start cod\\xADing the ap\\xADpli\\xADca\\xADtion using the stan\\xADdard maven source \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/java\"), \" and re\\xADsource\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resouces\"), \" lo\\xADca\\xADtions. And add a the class \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java\"\n  }), \"io.vertx.blog.RpiVer\\xADti\\xADcle\"), \"\\nto the project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"RPiVerticle\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"extends\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"AbstractVerticle\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"final\"), \" OperatingSystemMXBean osMBean;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"static\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"try\"), \" {\\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"catch\"), \" (IOException e) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"throw\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RuntimeException(e);\\n    }\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@Override\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"start\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n\\n    Router router = Router.router(vertx);\\n\\n    router.route(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/eventbus/*\\\"\"), \").handler(SockJSHandler.create(vertx)\\n        .bridge(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BridgeOptions().addOutboundPermitted(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" PermittedOptions().setAddress(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \"))));\\n\\n    router.route().handler(StaticHandler.create());\\n\\n    vertx.createHttpServer().requestHandler(router::accept).listen(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \");\\n\\n    vertx.setPeriodic(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \", t -> vertx.eventBus().publish(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \",\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"creatTime\\\"\"), \", System.currentTimeMillis())\\n            .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"cpuTime\\\"\"), \", osMBean.getSystemLoadAverage())));\\n  }\\n}\\n\")), mdx(\"p\", null, \"So let\\u2019s go through the code, first in the sta\\xADtic con\\xADstruc\\xADtor we ini\\xADtial\\xADize the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MXBean\"), \" that will allow us to col\\xADlect\\nthe cur\\xADrent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System Load Average\"), \", then on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" method we cre\\xADate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vert.x Web Router\"), \" and de\\xADfine that for all\\nre\\xADquests start\\xADing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/eventbus\"), \" should be han\\xADdled by the SockJS server, which we then bridge to the Vert.x\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" and allow out\\xADbound mes\\xADsages ad\\xADdressed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" ad\\xADdress.\"), mdx(\"p\", null, \"Since our ap\\xADpli\\xADca\\xADtion is a web ap\\xADpli\\xADca\\xADtion we will also server some sta\\xADtic con\\xADtent with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StaticHandler\"), \" and we\\nfi\\xADnally start a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP server\"), \" lis\\xADten\\xADing on port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8080\"), \".\"), mdx(\"p\", null, \"So now all we are miss\\xADing is a way to push real time data to the client so we end up cre\\xADat\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Periodic\"), \" task that\\nre\\xADpeats every 1000 mil\\xADlisec\\xADonds and sends some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" pay\\xADload to the ad\\xADdress \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"load\\\"\"), \".\"), mdx(\"p\", null, \"If you run this ap\\xADpli\\xADca\\xADtion right now you won\\u2019t see much since there is no fron\\xADtend yet, so let\\u2019s build a very basic\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html\"\n  }), \"index.html\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"...\\nvar eb = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" vertx.EventBus(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"window\"), \".location + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"eventbus\\\"\"), \");\\n\\neb.onopen = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  })), \") \"), \"{\\n  eb.registerHandler(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"load\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"function\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"msg\"), \") \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (data.length === \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"25\"), \") {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// when length of data equal 25 then pop data[0]\"), \"\\n      data.shift();\\n    }\\n    data.push({\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"creatTime\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"Date\"), \"(msg.creatTime),\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"cpuTime\\\"\"), \": msg.cpuTime\\n    });\\n    render();\\n  });\\n};\\n...\\n\")), mdx(\"p\", null, \"Let\\u2019s walk again the code, we start by open\\xADing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" bridge over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SockJS\"), \" and reg\\xADis\\xADter a han\\xADdler \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" to con\\xADsume\\nmes\\xADsages sent to that ad\\xADdress. Once such a mes\\xADsage ar\\xADrives we do some house keep\\xADing to avoid fill\\xADing our browser mem\\xADory\\nand then add the in\\xADcom\\xADing mes\\xADsage to the data queue and triger a ren\\xADder\\xADing of the data. There is how\\xADever one in\\xADter\\xADest\\xADing\\nissue here, since the mes\\xADsage pay\\xADload is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON\"), \" there is no na\\xADtive sup\\xADport for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \" ob\\xADjects so we need to do some\\npars\\xADing from what ar\\xADrives from the server. In this case the server sends a sim\\xADple time since epoch num\\xADber, but one can\\nchoose any for\\xADmat he likes.\"), mdx(\"p\", null, \"At this mo\\xADment you can build and pack\\xADage your app like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mvn clean package\"), \", then de\\xADploy it to your rasp\\xADber\\xADrypi like:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scp target/rpi-1.0-fat.jar pi@raspberrypi:~/\"), \" and fi\\xADnally run it: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java -jar rpi-1.0-fat.jar\"), \".\"), mdx(\"p\", null, \"Open a browser to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://raspberrypi:8080\"\n  }), \"see\"), \" the re\\xADal\\xADtime graph!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx3-web-easy-as-pi/rpi.png\",\n    \"alt\": \"Screenshot\"\n  }))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><a href=\"http://vertx.io/docs/#web\">Vert.x Web</a> dis­tin­guishes it­self from tra­di­tional ap­pli­ca­tion servers like JavaEE by just\nbeing a sim­ple ex­ten­sion toolkit to <a href=\"http://vertx.io/docs/#core\">Vert.x</a>, which makes it quite light­weight and small but\nnev­er­the­less very pow­er­ful.</p><p>One can cre­ate sim­ple ap­pli­ca­tions tar­get­ing <em>small</em> de­vices such as Rasp­berry Pi with­out hav­ing to write much code but\nstill very fast as it is ex­pected from any Vert.x ap­pli­ca­tion.</p><p>Let’s for ex­am­ple think of mak­ing a <a href=\"https://github.com/pmlopes/vert-x3-experiments/archive/experiments/rpi-cpuload.zip\">re­al­time cpu load vi­su­al­iza­tion web app</a>.\nFor this ex­am­ple we need a few things:</p><ul><li>a <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/management/OperatingSystemMXBean.html\">MXBean</a> to col­lect CPU load</li><li>a <a href=\"http://vertx.io/docs/vertx-core/java/#_writing_http_servers_and_clients\">HTTP server</a> (to serve the sta­tic re­sources and host our app)</li><li>a <a href=\"http://vertx.io/docs/vertx-web/java/#_sockjs\">SockJS server</a> to pro­vide re­al­time up­dates</li><li>a SockJS to <a href=\"http://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge\">Event­Bus bridge</a> to pass mes­sages around</li><li>some <a href=\"http://d3js.org/\">vi­su­al­iza­tion</a> JS li­brary</li><li>a bit of cod­ing</li></ul><p>To boot­strap this project we start by cre­at­ing the <a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/pom.xml\">pom.xml</a>\nfile. A good start is al­ways to con­sult the <a href=\"https://github.com/vert-x3/vertx-examples\">ex­am­ples</a>,\nand you should end up with some­thing like:</p><pre><code class=\"hljs language-xml\">...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx.blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>rpi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n...\n</code></pre><p>At this mo­ment you can start cod­ing the ap­pli­ca­tion using the stan­dard maven source <code>src/main/java</code> and re­source\n<code>src/main/resouces</code> lo­ca­tions. And add a the class <a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/java/io/vertx/blog/RPiVerticle.java\">io.vertx.blog.RpiVer­ti­cle</a>\nto the project:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RPiVerticle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractVerticle</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> OperatingSystemMXBean osMBean;\n\n  <span class=\"hljs-keyword\">static</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(e);\n    }\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span> </span>{\n\n    Router router = Router.router(vertx);\n\n    router.route(<span class=\"hljs-string\">&quot;/eventbus/*&quot;</span>).handler(SockJSHandler.create(vertx)\n        .bridge(<span class=\"hljs-keyword\">new</span> BridgeOptions().addOutboundPermitted(<span class=\"hljs-keyword\">new</span> PermittedOptions().setAddress(<span class=\"hljs-string\">&quot;load&quot;</span>))));\n\n    router.route().handler(StaticHandler.create());\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(<span class=\"hljs-number\">8080</span>);\n\n    vertx.setPeriodic(<span class=\"hljs-number\">1000</span>, t -&gt; vertx.eventBus().publish(<span class=\"hljs-string\">&quot;load&quot;</span>,\n        <span class=\"hljs-keyword\">new</span> JsonObject()\n            .put(<span class=\"hljs-string\">&quot;creatTime&quot;</span>, System.currentTimeMillis())\n            .put(<span class=\"hljs-string\">&quot;cpuTime&quot;</span>, osMBean.getSystemLoadAverage())));\n  }\n}\n</code></pre><p>So let’s go through the code, first in the sta­tic con­struc­tor we ini­tial­ize the <code>MXBean</code> that will allow us to col­lect\nthe cur­rent <code>System Load Average</code>, then on the <code>start</code> method we cre­ate a <code>Vert.x Web Router</code> and de­fine that for all\nre­quests start­ing with <code>/eventbus</code> should be han­dled by the SockJS server, which we then bridge to the Vert.x\n<code>EventBus</code> and allow out­bound mes­sages ad­dressed to the <code>load</code> ad­dress.</p><p>Since our ap­pli­ca­tion is a web ap­pli­ca­tion we will also server some sta­tic con­tent with the <code>StaticHandler</code> and we\nfi­nally start a <code>HTTP server</code> lis­ten­ing on port <code>8080</code>.</p><p>So now all we are miss­ing is a way to push real time data to the client so we end up cre­at­ing a <code>Periodic</code> task that\nre­peats every 1000 mil­lisec­onds and sends some <code>JSON</code> pay­load to the ad­dress <code>&quot;load&quot;</code>.</p><p>If you run this ap­pli­ca­tion right now you won’t see much since there is no fron­tend yet, so let’s build a very basic\n<a href=\"https://github.com/pmlopes/vert-x3-experiments/blob/experiments/rpi-cpuload/src/main/resources/webroot/index.html\">index.html</a>:</p><pre><code class=\"hljs language-javascript\">...\nvar eb = <span class=\"hljs-keyword\">new</span> vertx.EventBus(<span class=\"hljs-built_in\">window</span>.location + <span class=\"hljs-string\">&quot;eventbus&quot;</span>);\n\neb.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  eb.registerHandler(<span class=\"hljs-string\">&quot;load&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">msg</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (data.length === <span class=\"hljs-number\">25</span>) {\n      <span class=\"hljs-comment\">// when length of data equal 25 then pop data[0]</span>\n      data.shift();\n    }\n    data.push({\n      <span class=\"hljs-string\">&quot;creatTime&quot;</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(msg.creatTime),\n      <span class=\"hljs-string\">&quot;cpuTime&quot;</span>: msg.cpuTime\n    });\n    render();\n  });\n};\n...\n</code></pre><p>Let’s walk again the code, we start by open­ing a <code>EventBus</code> bridge over <code>SockJS</code> and reg­is­ter a han­dler <code>data</code> to con­sume\nmes­sages sent to that ad­dress. Once such a mes­sage ar­rives we do some house keep­ing to avoid fill­ing our browser mem­ory\nand then add the in­com­ing mes­sage to the data queue and triger a ren­der­ing of the data. There is how­ever one in­ter­est­ing\nissue here, since the mes­sage pay­load is <code>JSON</code> there is no na­tive sup­port for <code>Date</code> ob­jects so we need to do some\npars­ing from what ar­rives from the server. In this case the server sends a sim­ple time since epoch num­ber, but one can\nchoose any for­mat he likes.</p><p>At this mo­ment you can build and pack­age your app like <code>mvn clean package</code>, then de­ploy it to your rasp­ber­rypi like:\n<code>scp target/rpi-1.0-fat.jar pi@raspberrypi:~/</code> and fi­nally run it: <code>java -jar rpi-1.0-fat.jar</code>.</p><p>Open a browser to <a href=\"http://raspberrypi:8080\">see</a> the re­al­time graph!</p><p><img src=\"/images/blog/vertx3-web-easy-as-pi/rpi.png\" alt=\"Screenshot\"/></p>","scope":{}},"tfIdfTerms":[{"term":"applic","tf":7},{"term":"server","tf":7},{"term":"messag","tf":6},{"term":"start","tf":6},{"term":"code","tf":5},{"term":"creat","tf":4},{"term":"let","tf":4},{"term":"address","tf":4},{"term":"web","tf":3},{"term":"simpl","tf":3},{"term":"on","tf":3},{"term":"exampl","tf":3},{"term":"realtim","tf":3},{"term":"app","tf":3},{"term":"static","tf":3},{"term":"sockj","tf":3},{"term":"bridg","tf":3},{"term":"data","tf":3},{"term":"make","tf":2},{"term":"small","tf":2},{"term":"cpu","tf":2},{"term":"load","tf":2},{"term":"visual","tf":2},{"term":"need","tf":2},{"term":"collect","tf":2}]},{"filename":"blog/2015-06-30-vert-x-2-1-6-released.mdx","date":"2015-06-30","slug":"vert-x-2-1-6-released","meta":{"title":"Vert.x 2.1.6 released!","category":"releases","authors":[{"name":"Clement Escoffier","github_id":"cescoffier"}],"summary":"The Vert.x team is pleased to announce the release of Vert.x 2.1.6"},"readingTime":{"text":"1 min read","minutes":0.79,"time":47400.00000000001,"words":158},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Vert.x team is pleased to an\\xADnounce the re\\xADlease of Vert.x \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"2.1.6\"), \".\"), mdx(\"p\", null, \"This is a main\\xADte\\xADnance re\\xADlease on the 2.x branch that fixes a few bugs and is de\\xADsigned for Vert.x 2 pro\\xADduc\\xADtion users who can\\xADnot up\\xADgrade to 3.0 im\\xADme\\xADdi\\xADately.\"), mdx(\"p\", null, \"For the lat\\xADest pro\\xADduc\\xADtion ver\\xADsion for new projects please see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://vertx.io\"\n  }), \"Vert.x 3.0\"), \".\"), mdx(\"p\", null, \"Fixes in this re\\xADlease in\\xADclude:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"run\\xADZip\"), \" - fix bugs in un\\xADpack\\xADing zips\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Http\\xADClient\"), \" - make sure write\\xADHead is set to true be\\xADfore con\\xADnect\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Up\\xADgrade to Hazel\\xADcast 3.5 to fix bug in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Multimap\"), \" state.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Workaround for Hazel\\xADcast bug which could re\\xADsult in in\\xADcon\\xADsis\\xADtent clus\\xADter state if mul\\xADti\\xADple nodes shut\\xADdown con\\xADcur\\xADrently\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clus\\xADter\\xADing fixes re\\xADlated to clear\\xADing up state in case of event bus con\\xADnec\\xADtions clos\\xADing and on close of event bus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fix mes\\xADsage replies to nodes other than the node the SockJS bridge is de\\xADployed on.\")), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%222.1.6%22\"\n  }), \"Maven Cen\\xADtral\"), \", and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/2.1.6/view\"\n  }), \"Bin\\xADtray\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>The Vert.x team is pleased to an­nounce the re­lease of Vert.x <strong>2.1.6</strong>.</p><p>This is a main­te­nance re­lease on the 2.x branch that fixes a few bugs and is de­signed for Vert.x 2 pro­duc­tion users who can­not up­grade to 3.0 im­me­di­ately.</p><p>For the lat­est pro­duc­tion ver­sion for new projects please see <a href=\"http://vertx.io\">Vert.x 3.0</a>.</p><p>Fixes in this re­lease in­clude:</p><ul><li><em>run­Zip</em> - fix bugs in un­pack­ing zips</li><li><em>Http­Client</em> - make sure write­Head is set to true be­fore con­nect</li><li>Up­grade to Hazel­cast 3.5 to fix bug in <code>Multimap</code> state.</li><li>Workaround for Hazel­cast bug which could re­sult in in­con­sis­tent clus­ter state if mul­ti­ple nodes shut­down con­cur­rently</li><li>Clus­ter­ing fixes re­lated to clear­ing up state in case of event bus con­nec­tions clos­ing and on close of event bus.</li><li>Fix mes­sage replies to nodes other than the node the SockJS bridge is de­ployed on.</li></ul><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%222.1.6%22\">Maven Cen­tral</a>, and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/2.1.6/view\">Bin­tray</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"fix","tf":6},{"term":"bug","tf":4},{"term":"releas","tf":3},{"term":"state","tf":3},{"term":"node","tf":3},{"term":"pleas","tf":2},{"term":"product","tf":2},{"term":"upgrad","tf":2},{"term":"connect","tf":2},{"term":"hazelcast","tf":2},{"term":"cluster","tf":2},{"term":"event","tf":2},{"term":"bu","tf":2},{"term":"close","tf":2},{"term":"deploi","tf":2},{"term":"team","tf":1},{"term":"announc","tf":1},{"term":"mainten","tf":1},{"term":"branch","tf":1},{"term":"design","tf":1},{"term":"user","tf":1},{"term":"immedi","tf":1},{"term":"latest","tf":1},{"term":"version","tf":1},{"term":"new","tf":1}]}],"numPages":16},"__N_SSG":true}