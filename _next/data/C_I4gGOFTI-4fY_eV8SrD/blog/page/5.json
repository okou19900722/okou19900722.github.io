{"pageProps":{"categories":["releases","guides","news"],"page":5,"posts":[{"filename":"blog/2018-12-10-http-response-validation-with-the-vert-x-web-client.mdx","date":"2018-12-10","slug":"http-response-validation-with-the-vert-x-web-client","meta":{"title":"HTTP response validation with the Vert.x Web Client","category":"guides","authors":[{"name":"Thomas Segismont","github_id":"tsegismont"}],"summary":"Learn how to use response predicates from the Vert.x Web module to validate HTTP responses and to automatically generate error messages."},"readingTime":{"text":"4 min read","minutes":3.09,"time":185399.99999999997,"words":618},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By de\\xADfault, a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/vertx-web-client/java/\"\n  }), \"Vert.x Web Client\"), \" re\\xADquest ends with an error only if some\\xADthing wrong hap\\xADpens at the net\\xADwork level.\\nIn other words, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"404 Not Found\"), \" re\\xADsponse, or a re\\xADsponse with the wrong con\\xADtent type, are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" con\\xADsid\\xADered as fail\\xADures.\"), mdx(\"p\", null, \"Hence, you would usu\\xADally per\\xADform san\\xADity checks man\\xADu\\xADally after the re\\xADsponse is re\\xADceived:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"response.statusCode\"), \"() == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"200\"), \" && response.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \").equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n        // Decode the body as a json object\\n        JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      } else {\\n        System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + response.statusCode())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      }\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Start\\xADing with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/blog/eclipse-vert-x-3-6-0-released/\"\n  }), \"Vert.x 3.6\"), \", you can can trade flex\\xADi\\xADbil\\xADity for clar\\xADity and con\\xADcise\\xADness using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsponse pred\\xADi\\xADcates\"), \".\"), mdx(\"h2\", {\n    \"id\": \"response-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#response-predicates\"\n  })), \"Response predicates\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"\n  }), \"Re\\xADsponse pred\\xADi\\xADcates\"), \" can fail a re\\xADquest when the re\\xADsponse does not match cri\\xADte\\xADrion.\"), mdx(\"p\", null, \"The Web Client mod\\xADule comes with a set of ready-\\u200Bto-use pred\\xADi\\xADcates:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.JSON\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      HttpResponse<Buffer> response = ar.result()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n      // Safely decode the body as a json object\\n      JsonObject body = response.bodyAsJsonObject()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n\")), mdx(\"p\", null, \"The web is full of HTTP/JSON end\\xADpoints, so there is no doubt the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.SC_SUCCESS\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ResponsePredicate.JSON\"), \" can be handy.\"), mdx(\"p\", null, \"Nev\\xADer\\xADthe\\xADless, you might also need to check that the sta\\xADtus code is whithin a spe\\xADcific range:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-scheme\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.status\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"200\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"202\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Or that the con\\xADtent is of a spe\\xADcific type: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.contentType\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"some/content-type\\\"\"), \"))\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    // ....\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Please refer to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ResponsePredicate\"), \" doc\\xADu\\xADmen\\xADta\\xADtion\"), \" for a full list of pre\\xADde\\xADfined pred\\xADi\\xADcates.\"), mdx(\"h3\", {\n    \"id\": \"custom-predicates\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#custom-predicates\"\n  })), \"Custom predicates\"), mdx(\"p\", null, \"Even\\xADtu\\xADally, pred\\xADi\\xADcates were not de\\xADsigned for sta\\xADtus code and con\\xADtent type check\\xADing only, so feel free to cre\\xADate your own val\\xADi\\xADda\\xADtion code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"// Check CORS header allowing to do POST\\nFunction<HttpResponse<Void>, ResponsePredicateResult> methodsPredicate = resp -> {\\n  String methods = resp.getHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Allow-Methods\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n  if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods\"), \" != null) {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methods.contains\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")) {\\n      return ResponsePredicateResult.success()\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  }\\n  return ResponsePredicateResult.failure(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Does not work\\\"\"), \")\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n}\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\\n// Send pre-flight CORS request\\nclient\\n  .request(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"HttpMethod.OPTIONS\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Origin\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Server-b.com\\\"\"), \")\\n  .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Access-Control-Request-Method\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"POST\\\"\"), \")\\n  .expect(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"methodsPredicate\"), \")\\n  .send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar\"), \" -> {\\n    if (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ar.succeeded\"), \"()) {\\n      // Process the POST request now\\n    } else {\\n      System.out.println(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Something went wrong \\\"\"), \" + ar.cause().getMessage())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n    }\\n  })\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Note that re\\xADsponse pred\\xADi\\xADcates are eval\\xADu\\xADated \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"be\\xADfore\"), \" the re\\xADsponse body is re\\xADceived.\\nThere\\xADfore \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you can\\u2019t in\\xADspect the re\\xADsponse body\"), \" in a pred\\xADi\\xADcate test func\\xADtion, only sta\\xADtus code, sta\\xADtus mes\\xADsage and re\\xADsponse head\\xADers.\"), mdx(\"h2\", {\n    \"id\": \"dealing-with-failures\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#dealing-with-failures\"\n  })), \"Dealing with failures\"), mdx(\"p\", null, \"By de\\xADfault, re\\xADsponse pred\\xADi\\xADcates (in\\xADclud\\xADing the pre\\xADde\\xADfined ones) use a generic error con\\xADverter which dis\\xADcards the re\\xADsponse body and con\\xADveys a sim\\xADple mes\\xADsage.\\nYou can cus\\xADtomize the ex\\xADcep\\xADtion class by chang\\xADing the error con\\xADverter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-clojure\"\n  }), \"ResponsePredicate predicate = ResponsePredicate.create(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"ResponsePredicate.SC_SUCCESS\"), \", result -> {\\n  return new MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-name\"\n  }), \"result.message\"), \"())\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n})\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Be\\xADware that cre\\xADat\\xADing ex\\xADcep\\xADtions in Java comes with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"per\\xADfor\\xADmance cost\"), \" of cap\\xADtur\\xADing the call stack.\\nThe generic error con\\xADverter gen\\xADer\\xADates ex\\xADcep\\xADtions that do not cap\\xADture it.\"), mdx(\"h3\", {\n    \"id\": \"reading-details-in-error-responses\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#reading-details-in-error-responses\"\n  })), \"Reading details in error responses\"), mdx(\"p\", null, \"Many web APIs pro\\xADvide de\\xADtails in error re\\xADsponses.\\nFor ex\\xADam\\xADple, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.marvel.com/docs\"\n  }), \"Mar\\xADvel API\"), \" uses this JSON ob\\xADject for\\xADmat:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-json\"\n  }), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"code\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"InvalidCredentials\\\"\"), \",\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"\\\"message\\\"\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The passed API key is invalid.\\\"\"), \"\\n}\\n\")), mdx(\"p\", null, \"To avoid los\\xADing this in\\xADfor\\xADma\\xADtion, it is pos\\xADsi\\xADble to wait for the re\\xADsponse body to be fully re\\xADceived be\\xADfore the error con\\xADverter is called:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-reasonml\"\n  }), \"ErrorConverter converter = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ErrorConverter\"), \".\")), \"create\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"FullBody(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \" -> {\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-operator\"\n  }), \"/\"), \" Invoked \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"after\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"the\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"is\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"fully\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"received\"), \"\\n  HttpResponse<Buffer> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \" = \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"response\"), \"()\"), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"Header(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \")\"), \".equals(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json\\\"\"), \")) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Error body is JSON data\"), \"\\n    JsonObject body = response.body\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"AsJsonObject()\"), \";\\n    return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"body\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"getString\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"code\\\"\"), \")\"), \", body.get\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"String(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \")\"), \");\\n  }\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Fallback to defaut message\"), \"\\n  return \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-constructor\"\n  }), \"MyCustomException(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"result\"), \".\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"message\"), \"()\"), \");\\n});\\n\\nResponsePredicate predicate = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-module-access\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-module\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-identifier\"\n  }), \"ResponsePredicate\"), \".\")), \"create(ResponsePredicate.SC_SUCCESS, converter);\\n\")), mdx(\"p\", null, \"That\\u2019s it! Feel free to com\\xADment here or ask ques\\xADtions on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/community\"\n  }), \"com\\xADmu\\xADnity chan\\xADnels\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>By de­fault, a <a href=\"/docs/vertx-web-client/java/\">Vert.x Web Client</a> re­quest ends with an error only if some­thing wrong hap­pens at the net­work level.\nIn other words, a <code>404 Not Found</code> re­sponse, or a re­sponse with the wrong con­tent type, are <strong>not</strong> con­sid­ered as fail­ures.</p><p>Hence, you would usu­ally per­form san­ity checks man­u­ally after the re­sponse is re­ceived:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      if (<span class=\"hljs-name\">response.statusCode</span>() == <span class=\"hljs-number\">200</span> &amp;&amp; response.getHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>).equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n        // Decode the body as a json object\n        JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n      } else {\n        System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + response.statusCode())<span class=\"hljs-comment\">;</span>\n      }\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Start­ing with <a href=\"/blog/eclipse-vert-x-3-6-0-released/\">Vert.x 3.6</a>, you can can trade flex­i­bil­ity for clar­ity and con­cise­ness using <em>re­sponse pred­i­cates</em>.</p><h2 id=\"response-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#response-predicates\"></a>Response predicates</h2><p><a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\">Re­sponse pred­i­cates</a> can fail a re­quest when the re­sponse does not match cri­te­rion.</p><p>The Web Client mod­ule comes with a set of ready-​to-use pred­i­cates:</p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.JSON</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      HttpResponse&lt;Buffer&gt; response = ar.result()<span class=\"hljs-comment\">;</span>\n      // Safely decode the body as a json object\n      JsonObject body = response.bodyAsJsonObject()<span class=\"hljs-comment\">;</span>\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n\n</code></pre><p>The web is full of HTTP/JSON end­points, so there is no doubt the <code>ResponsePredicate.SC_SUCCESS</code> and <code>ResponsePredicate.JSON</code> can be handy.</p><p>Nev­er­the­less, you might also need to check that the sta­tus code is whithin a spe­cific range:</p><pre><code class=\"hljs language-scheme\">client\n  .get(<span class=\"hljs-name\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.status</span>(<span class=\"hljs-name\">200</span>, <span class=\"hljs-number\">202</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Or that the con­tent is of a spe­cific type: </p><pre><code class=\"hljs language-clojure\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(<span class=\"hljs-name\">ResponsePredicate.contentType</span>(<span class=\"hljs-string\">&quot;some/content-type&quot;</span>))\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    // ....\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Please refer to the <a href=\"/docs/apidocs/io/vertx/ext/web/client/predicate/ResponsePredicate.html\"><code>ResponsePredicate</code> doc­u­men­ta­tion</a> for a full list of pre­de­fined pred­i­cates.</p><h3 id=\"custom-predicates\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#custom-predicates\"></a>Custom predicates</h3><p>Even­tu­ally, pred­i­cates were not de­signed for sta­tus code and con­tent type check­ing only, so feel free to cre­ate your own val­i­da­tion code:</p><pre><code class=\"hljs language-clojure\">// Check CORS header allowing to do POST\nFunction&lt;HttpResponse&lt;Void&gt;, ResponsePredicateResult&gt; methodsPredicate = resp -&gt; {\n  String methods = resp.getHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>)<span class=\"hljs-comment\">;</span>\n  if (<span class=\"hljs-name\">methods</span> != null) {\n    if (<span class=\"hljs-name\">methods.contains</span>(<span class=\"hljs-string\">&quot;POST&quot;</span>)) {\n      return ResponsePredicateResult.success()<span class=\"hljs-comment\">;</span>\n    }\n  }\n  return ResponsePredicateResult.failure(<span class=\"hljs-string\">&quot;Does not work&quot;</span>)<span class=\"hljs-comment\">;</span>\n}<span class=\"hljs-comment\">;</span>\n\n// Send pre-flight CORS request\nclient\n  .request(<span class=\"hljs-name\">HttpMethod.OPTIONS</span>, <span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Origin&quot;</span>, <span class=\"hljs-string\">&quot;Server-b.com&quot;</span>)\n  .putHeader(<span class=\"hljs-string\">&quot;Access-Control-Request-Method&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>)\n  .expect(<span class=\"hljs-name\">methodsPredicate</span>)\n  .send(<span class=\"hljs-name\">ar</span> -&gt; {\n    if (<span class=\"hljs-name\">ar.succeeded</span>()) {\n      // Process the POST request now\n    } else {\n      System.out.println(<span class=\"hljs-string\">&quot;Something went wrong &quot;</span> + ar.cause().getMessage())<span class=\"hljs-comment\">;</span>\n    }\n  })<span class=\"hljs-comment\">;</span>\n</code></pre><p>Note that re­sponse pred­i­cates are eval­u­ated <em>be­fore</em> the re­sponse body is re­ceived.\nThere­fore <strong>you can’t in­spect the re­sponse body</strong> in a pred­i­cate test func­tion, only sta­tus code, sta­tus mes­sage and re­sponse head­ers.</p><h2 id=\"dealing-with-failures\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#dealing-with-failures\"></a>Dealing with failures</h2><p>By de­fault, re­sponse pred­i­cates (in­clud­ing the pre­de­fined ones) use a generic error con­verter which dis­cards the re­sponse body and con­veys a sim­ple mes­sage.\nYou can cus­tomize the ex­cep­tion class by chang­ing the error con­verter:</p><pre><code class=\"hljs language-clojure\">ResponsePredicate predicate = ResponsePredicate.create(<span class=\"hljs-name\">ResponsePredicate.SC_SUCCESS</span>, result -&gt; {\n  return new MyCustomException(<span class=\"hljs-name\">result.message</span>())<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span>\n</code></pre><p>Be­ware that cre­at­ing ex­cep­tions in Java comes with the <strong>per­for­mance cost</strong> of cap­tur­ing the call stack.\nThe generic error con­verter gen­er­ates ex­cep­tions that do not cap­ture it.</p><h3 id=\"reading-details-in-error-responses\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#reading-details-in-error-responses\"></a>Reading details in error responses</h3><p>Many web APIs pro­vide de­tails in error re­sponses.\nFor ex­am­ple, the <a href=\"https://developer.marvel.com/docs\">Mar­vel API</a> uses this JSON ob­ject for­mat:</p><pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;code&quot;</span>: <span class=\"hljs-string\">&quot;InvalidCredentials&quot;</span>,\n  <span class=\"hljs-attr\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;The passed API key is invalid.&quot;</span>\n}\n</code></pre><p>To avoid los­ing this in­for­ma­tion, it is pos­si­ble to wait for the re­sponse body to be fully re­ceived be­fore the error con­verter is called:</p><pre><code class=\"hljs language-reasonml\">ErrorConverter converter = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorConverter</span>.</span></span>create<span class=\"hljs-constructor\">FullBody(<span class=\"hljs-params\">result</span> -&gt; {\n\n  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> Invoked <span class=\"hljs-params\">after</span> <span class=\"hljs-params\">the</span> <span class=\"hljs-params\">response</span> <span class=\"hljs-params\">body</span> <span class=\"hljs-params\">is</span> <span class=\"hljs-params\">fully</span> <span class=\"hljs-params\">received</span>\n  HttpResponse&lt;Buffer&gt; <span class=\"hljs-params\">response</span> = <span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">response</span>()</span>;\n\n  <span class=\"hljs-keyword\">if</span> (response.get<span class=\"hljs-constructor\">Header(<span class=\"hljs-string\">&quot;content-type&quot;</span>)</span>.equals(<span class=\"hljs-string\">&quot;application/json&quot;</span>)) {\n    <span class=\"hljs-comment\">// Error body is JSON data</span>\n    JsonObject body = response.body<span class=\"hljs-constructor\">AsJsonObject()</span>;\n    return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">body</span>.<span class=\"hljs-params\">getString</span>(<span class=\"hljs-string\">&quot;code&quot;</span>)</span>, body.get<span class=\"hljs-constructor\">String(<span class=\"hljs-string\">&quot;message&quot;</span>)</span>);\n  }\n\n  <span class=\"hljs-comment\">// Fallback to defaut message</span>\n  return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">MyCustomException(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">message</span>()</span>);\n});\n\nResponsePredicate predicate = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ResponsePredicate</span>.</span></span>create(ResponsePredicate.SC_SUCCESS, converter);\n</code></pre><p>That’s it! Feel free to com­ment here or ask ques­tions on our <a href=\"/community\">com­mu­nity chan­nels</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"respons","tf":16},{"term":"predic","tf":10},{"term":"error","tf":7},{"term":"web","tf":4},{"term":"not","tf":4},{"term":"us","tf":4},{"term":"statu","tf":4},{"term":"code","tf":4},{"term":"bodi","tf":4},{"term":"convert","tf":4},{"term":"content","tf":3},{"term":"type","tf":3},{"term":"check","tf":3},{"term":"receiv","tf":3},{"term":"gener","tf":3},{"term":"except","tf":3},{"term":"default","tf":2},{"term":"client","tf":2},{"term":"request","tf":2},{"term":"wrong","tf":2},{"term":"failur","tf":2},{"term":"perform","tf":2},{"term":"come","tf":2},{"term":"full","tf":2},{"term":"json","tf":2}]},{"filename":"blog/2018-12-06-the-rss-reader-tutorial-step-3.mdx","date":"2018-12-06","slug":"the-rss-reader-tutorial-step-3","meta":{"title":"The RSS reader tutorial (Step 3)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"This is the third installment of our Vert.x Cassandra Client tutorial. We will implement the last RSS endpoint serving a list of articles related to a specific channel."},"readingTime":{"text":"2 min read","minutes":1.585,"time":95100,"words":317},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Now that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/blog/eclipse-vert-x-3-6-0-released/\"\n  }), \"Vert.x 3.6.0 has been re\\xADleased\"), \", it\\u2019s the per\\xADfect time to con\\xADclude our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-cassandra-client/java/\"\n  }), \"Vert.x Cas\\xADsan\\xADdra Client\"), \" tu\\xADto\\xADr\\xADial!\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/blog/the-rss-reader-tutorial-step-2/\"\n  }), \"the pre\\xADvi\\xADous step\"), \", we have suc\\xADcess\\xADfully im\\xADple\\xADmented the sec\\xADond end\\xADpoint\\nof the RSS reader app.\"), mdx(\"p\", null, \"The RSS reader ex\\xADam\\xADple as\\xADsumes im\\xADple\\xADment\\xADing three end\\xADpoints. This ar\\xADti\\xADcle is ded\\xADi\\xADcated to im\\xADple\\xADment\\xADing the last \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /articles/by_rss_link?link={rss_link}\"), \" end\\xADpoint.\"), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step, make sure your are in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_3\"), \" git branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_3\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-3rd-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-3rd-endpoint\"\n  })), \"Implementing the 3rd endpoint\"), mdx(\"p\", null, \"The 3rd end\\xADpoint serves a list of ar\\xADti\\xADcles re\\xADlated to a spe\\xADcific RSS chan\\xADnel. In a re\\xADquest, we spec\\xADify RSS chan\\xADnel by pro\\xADvid\\xADing a link. On the ap\\xADpli\\xADca\\xADtion side, after re\\xADceiv\\xADing a re\\xADquest we ex\\xADe\\xADcute the fol\\xADlow\\xADing query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" title, article_link, description, pubDate \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" articles_by_rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" rss_link = RSS_LINK_FROM_REQUEST ;\\n\")), mdx(\"h2\", {\n    \"id\": \"implementation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementation\"\n  })), \"Implementation\"), mdx(\"p\", null, \"For ob\\xADtain\\xADing ar\\xADti\\xADcles by RSS link we need to pre\\xADpare a re\\xADlated state\\xADment first. Change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareSelectArticlesByRssLink\"), \" in this way:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareSelectArticlesByRssLink\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Util.prepareQueryAndSetReference(client,\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;\\\"\"), \",\\n            selectArticlesByRssLink\\n    );\\n}\\n\")), mdx(\"p\", null, \"And now, we can im\\xADple\\xADment the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#getArticles\"), \" method. Ba\\xADsi\\xADcally, it will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectArticlesByRssLink\"), \" state\\xADment for find\\xADing ar\\xADti\\xADcles by the given link. Here\\u2019s the im\\xADple\\xADmen\\xADta\\xADtion:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getArticles\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    String link = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (link == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n        responseWithInvalidRequest(ctx);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (handler.succeeded()) {\\n                List<Row> rows = handler.result();\\n\\n                JsonObject responseJson = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();\\n                JsonArray articles = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray();\\n\\n                rows.forEach(eachRow -> articles.add(\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"title\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"pub_date\\\"\"), \", eachRow.getTimestamp(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\"), \").getTime())\\n                ));\\n\\n                responseJson.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"articles\\\"\"), \", articles);\\n                ctx.response().end(responseJson.toString());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"failed to get articles for \\\"\"), \" + link, handler.cause());\\n                ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to retrieve the info from C*\\\"\"), \");\\n            }\\n        });\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"Dur\\xADing the se\\xADries, we have shown how the RSS reader app can be im\\xADple\\xADmented with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-cassandra-client\"\n  }), \"Vert.x Cas\\xADsan\\xADdra client\"), \".\"), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed this se\\xADries. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Now that <a href=\"https://vertx.io/blog/eclipse-vert-x-3-6-0-released/\">Vert.x 3.6.0 has been re­leased</a>, it’s the per­fect time to con­clude our <a href=\"https://vertx.io/docs/vertx-cassandra-client/java/\">Vert.x Cas­san­dra Client</a> tu­to­r­ial!</p><p>In <a href=\"https://vertx.io/blog/the-rss-reader-tutorial-step-2/\">the pre­vi­ous step</a>, we have suc­cess­fully im­ple­mented the sec­ond end­point\nof the RSS reader app.</p><p>The RSS reader ex­am­ple as­sumes im­ple­ment­ing three end­points. This ar­ti­cle is ded­i­cated to im­ple­ment­ing the last <code>GET /articles/by_rss_link?link={rss_link}</code> end­point.</p><p>Be­fore com­plet­ing this step, make sure your are in the <code>step_3</code> git branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_3</span>\n</code></pre><h2 id=\"implementing-the-3rd-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-3rd-endpoint\"></a>Implementing the 3rd endpoint</h2><p>The 3rd end­point serves a list of ar­ti­cles re­lated to a spe­cific RSS chan­nel. In a re­quest, we spec­ify RSS chan­nel by pro­vid­ing a link. On the ap­pli­ca­tion side, after re­ceiv­ing a re­quest we ex­e­cute the fol­low­ing query:</p><pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> title, article_link, description, pubDate <span class=\"hljs-keyword\">FROM</span> articles_by_rss_link <span class=\"hljs-keyword\">WHERE</span> rss_link = RSS_LINK_FROM_REQUEST ;\n</code></pre><h2 id=\"implementation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementation\"></a>Implementation</h2><p>For ob­tain­ing ar­ti­cles by RSS link we need to pre­pare a re­lated state­ment first. Change <code>AppVerticle#prepareSelectArticlesByRssLink</code> in this way:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareSelectArticlesByRssLink</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> Util.prepareQueryAndSetReference(client,\n            <span class=\"hljs-string\">&quot;SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;&quot;</span>,\n            selectArticlesByRssLink\n    );\n}\n</code></pre><p>And now, we can im­ple­ment the <code>AppVerticle#getArticles</code> method. Ba­si­cally, it will use the <code>selectArticlesByRssLink</code> state­ment for find­ing ar­ti­cles by the given link. Here’s the im­ple­men­ta­tion:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getArticles</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    String link = ctx.request().getParam(<span class=\"hljs-string\">&quot;link&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (link == <span class=\"hljs-keyword\">null</span>) {\n        responseWithInvalidRequest(ctx);\n    } <span class=\"hljs-keyword\">else</span> {\n        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -&gt; {\n            <span class=\"hljs-keyword\">if</span> (handler.succeeded()) {\n                List&lt;Row&gt; rows = handler.result();\n\n                JsonObject responseJson = <span class=\"hljs-keyword\">new</span> JsonObject();\n                JsonArray articles = <span class=\"hljs-keyword\">new</span> JsonArray();\n\n                rows.forEach(eachRow -&gt; articles.add(\n                        <span class=\"hljs-keyword\">new</span> JsonObject()\n                                .put(<span class=\"hljs-string\">&quot;title&quot;</span>, eachRow.getString(<span class=\"hljs-number\">0</span>))\n                                .put(<span class=\"hljs-string\">&quot;link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">1</span>))\n                                .put(<span class=\"hljs-string\">&quot;description&quot;</span>, eachRow.getString(<span class=\"hljs-number\">2</span>))\n                                .put(<span class=\"hljs-string\">&quot;pub_date&quot;</span>, eachRow.getTimestamp(<span class=\"hljs-number\">3</span>).getTime())\n                ));\n\n                responseJson.put(<span class=\"hljs-string\">&quot;articles&quot;</span>, articles);\n                ctx.response().end(responseJson.toString());\n            } <span class=\"hljs-keyword\">else</span> {\n                log.error(<span class=\"hljs-string\">&quot;failed to get articles for &quot;</span> + link, handler.cause());\n                ctx.response().setStatusCode(<span class=\"hljs-number\">500</span>).end(<span class=\"hljs-string\">&quot;Unable to retrieve the info from C*&quot;</span>);\n            }\n        });\n    }\n}\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>Dur­ing the se­ries, we have shown how the RSS reader app can be im­ple­mented with the <a href=\"https://github.com/vert-x3/vertx-cassandra-client\">Vert.x Cas­san­dra client</a>.</p><p>Thanks for read­ing this. I hope you en­joyed this se­ries. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"implement","tf":8},{"term":"rss","tf":6},{"term":"endpoint","tf":5},{"term":"articl","tf":4},{"term":"reader","tf":3},{"term":"channel","tf":3},{"term":"link","tf":3},{"term":"cassandra","tf":2},{"term":"client","tf":2},{"term":"step","tf":2},{"term":"app","tf":2},{"term":"3rd","tf":2},{"term":"relat","tf":2},{"term":"request","tf":2},{"term":"statement","tf":2},{"term":"seri","tf":2},{"term":"releas","tf":1},{"term":"perfect","tf":1},{"term":"time","tf":1},{"term":"conclud","tf":1},{"term":"tutori","tf":1},{"term":"previou","tf":1},{"term":"successfulli","tf":1},{"term":"second","tf":1},{"term":"exampl","tf":1}]},{"filename":"blog/2018-12-03-eclipse-vert-x-3-6-0-released.mdx","date":"2018-12-03","slug":"eclipse-vert-x-3-6-0-released","meta":{"title":"Eclipse Vert.x 3.6.0 released!","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We are pleased to announce the Eclipse Vert.x 3.6.0 release."},"readingTime":{"text":"6 min read","minutes":5.21,"time":312600,"words":1042},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are pleased to an\\xADnounce the Eclipse Vert.x 3.6.0 re\\xADlease.\"), mdx(\"p\", null, \"As al\\xADways, the com\\xADmu\\xADnity con\\xADtri\\xADbu\\xADtions have been key in achiev\\xADing this mile\\xADstone.\\nTo all of you who par\\xADtic\\xADi\\xADpated: thank you, you are awe\\xADsome!\"), mdx(\"p\", null, \"With\\xADout fur\\xADther ado, let\\u2019s take a look at some of the most ex\\xADcit\\xADing new fea\\xADtures and en\\xADhance\\xADments.  \"), mdx(\"h4\", {\n    \"id\": \"vertx-cassandra-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-cassandra-client\"\n  })), \"Vert.x Cassandra client\"), mdx(\"p\", null, \"In this re\\xADlease we in\\xADtro\\xADduce the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-cassandra-client\"\n  }), \"Vert.x Cas\\xADsan\\xADdra client\"), \", an ex\\xADten\\xADsion for in\\xADter\\xADa\\xADtion with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://cassandra.apache.org/\"\n  }), \"Apache Cas\\xADsan\\xADdra\"), \".\"), mdx(\"p\", null, \"The client sup\\xADports:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pre\\xADpared queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"batch\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"query stream\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bulk fetch\\xADing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"low level fetch\\xADing\")), mdx(\"p\", null, \"To give you an idea of how the API usage may looks like, we pro\\xADvide this ex\\xADam\\xADple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"cassandraClient.queryStream(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT my_string_col FROM my_keyspace.my_table where my_key = 'my_value'\\\"\"), \", queryStream -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (queryStream.succeeded()) {\\n    CassandraRowStream stream = queryStream.result();\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// resume stream when queue is ready to accept buffers again\"), \"\\n    response.drainHandler(v -> stream.resume());\\n\\n    stream.handler(row -> {\\n        String value = row.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my_string_col\\\"\"), \");\\n        response.write(value);\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// pause row stream when we buffer queue is full\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.writeQueueFull()) {\\n        stream.pause();\\n        }\\n    });\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// end request when we reached end of the stream\"), \"\\n    stream.endHandler(end -> response.end());\\n\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n    queryStream.cause().printStackTrace();\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// response with internal server error if we are not able to execute given query\"), \"\\n    response\\n        .setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \")\\n        .end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to execute the query\\\"\"), \");\\n    }\\n});\\n\")), mdx(\"h4\", {\n    \"id\": \"vertx-for-kotlin\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#vertx-for-kotlin\"\n  })), \"Vert.x for Kotlin\"), mdx(\"p\", null, \"Vert.x for Kotlin has been up\\xADdated to the very re\\xADcent Kotlin 1.3 (and corou\\xADtines 1.0).\"), mdx(\"p\", null, \"Vert.x 3.5 in\\xADtro\\xADduced a pow\\xADer\\xADful way to write syn\\xADchro\\xADnous non-\\u200Bblocking code with Kotlin corou\\xADtines:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-kotlin\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"val\"), \" result = awaitResult<ResultSet> { client.queryWithParams(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT TITLE FROM MOVIE WHERE ID=?\\\"\"), \", json { array(id) }, it) };\\n\")), mdx(\"p\", null, \"In this re\\xADlease, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"awaitResult\"), \" idiom as ex\\xADten\\xADsion meth\\xADods are pro\\xADvided, so now you can di\\xADrectly write:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-kotlin\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"val\"), \" result = client.queryWithParamsAwait(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT TITLE FROM MOVIE WHERE ID=?\\\"\"), \", json { array(id) })\\n\")), mdx(\"p\", null, \"Note the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Await\"), \" suf\\xADfix: all Vert.x asyn\\xADchro\\xADnous meth\\xADods pro\\xADvide now an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"await\\xADi\\xADfied\"), \" ex\\xADten\\xADsion.\"), mdx(\"h4\", {\n    \"id\": \"web-api-gateways\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#web-api-gateways\"\n  })), \"Web API gateways\"), mdx(\"p\", null, \"The new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-service/java/\"\n  }), \"Vert.x Web API Ser\\xADvice\"), \" mod\\xADule al\\xADlows you to\\ncre\\xADate \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-contract/java/\"\n  }), \"Vert.x Web API Con\\xADtract\"), \" gate\\xADways.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/images/blog/vertx-web-api-service/vertx-web-api-service.png\",\n    \"alt\": \"Web API Service Architecture\"\n  }))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@WebApiServiceGen\"), \" can an\\xADno\\xADtate your ser\\xADvice in\\xADter\\xADface to han\\xADdle\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.openapis.org/\"\n  }), \"Ope\\xADnAPI 3\"), \": \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-service/java/\"\n  }), \"Vert.x Web API Ser\\xADvice\"), \"\\nre\\xADquests:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@WebApiServiceGen\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-class\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"interface\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"TransactionService\"), \" \"), \"{\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getTransactionsList\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(String from, String to, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"putTransaction\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(JsonObject body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler)\")), \";\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenAPI3RouterFactory\"), \" web router be\\xADcomes an API gate\\xADway send\\xADing re\\xADquests di\\xADrectly to your ser\\xADvices.\"), mdx(\"p\", null, \"These ser\\xADvices are pow\\xADered by the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#event_bus\"\n  }), \"event bus\"), \" and ben\\xADe\\xADfits\\nfrom fea\\xADtures like load bal\\xADanc\\xADing and clus\\xADter\\xADing.\"), mdx(\"p\", null, \"Check the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-api-service/java/\"\n  }), \"com\\xADplete doc\\xADu\\xADmen\\xADta\\xADtion\"), \" for more de\\xADtails (a tu\\xADto\\xADr\\xADial post is com\\xADing soon!)\"), mdx(\"h4\", {\n    \"id\": \"web-client\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#web-client\"\n  })), \"Web Client\"), mdx(\"p\", null, \"Our beloved \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-web-client/java/\"\n  }), \"We\\xADb\\xADClient\"), \" is now ca\\xADpa\\xADble of han\\xADdling client ses\\xADsions. The\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebClientSession\"), \" is a client ex\\xADten\\xADsion that is very help\\xADful when you need to man\\xADage cook\\xADies on the client side.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// The session is created per user\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// from now on cookies are handled by the session\"), \"\\nWebClientSession session = WebClientSession.create(client);\\n\")), mdx(\"p\", null, \"Cherry on the cake, the web client is now ca\\xADpa\\xADble of per\\xADform\\xADing server side re\\xADsponse checks using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"re\\xADsponse pred\\xADi\\xADcates\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"client\\n  .get(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8080\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"myserver.mycompany.com\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"/some-uri\\\"\"), \")\\n  .expect(ResponsePredicate.SC_SUCCESS)\\n  .expect(ResponsePredicate.JSON)\\n  .send(result -> { ... });\\n\")), mdx(\"p\", null, \"The server side re\\xADsponse must val\\xADi\\xADdate the ex\\xADpec\\xADta\\xADtions de\\xADfined be\\xADfore send\\xADing the re\\xADquest in order to make the re\\xADsponse\\nsuc\\xADcess\\xADful, re\\xADliev\\xADing the user code to per\\xADform these checks man\\xADu\\xADally. Of course many out of box ex\\xADpeca\\xADtions are pro\\xADvided\\nand you can al\\xADways cre\\xADate your own to im\\xADple\\xADment cus\\xADtom checks.\"), mdx(\"h4\", {\n    \"id\": \"use-templating-everywhere\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#use-templating-everywhere\"\n  })), \"Use templating everywhere\"), mdx(\"p\", null, \"Tem\\xADplate en\\xADgines can now be used out\\xADside the realm of Vert.x Web.\\nOne great use case is to use them to gen\\xADer\\xADate email con\\xADtent:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"TemplateEngine template = ...\\n\\ntemplate.render(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"my-template.txt, res -> {\\n   // Send result with the Vert.x Mail client\\n});\\n\"))), mdx(\"h4\", {\n    \"id\": \"openid-connect-discovery\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#openid-connect-discovery\"\n  })), \"OpenID Connect Discovery\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-auth-oauth2/java/\"\n  }), \"Oauth2\"), \" has been greatly en\\xADhanced to sup\\xADport more of OpenID Con\\xADnect, the most noti\\xADci\\xADble is the sup\\xADport of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenID Connect Discovery 1.0\"), \".\"), mdx(\"p\", null, \"What this means for the end user is that, con\\xADfig\\xADu\\xADra\\xADtion is now a triv\\xADial task, as it is \\u201D\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dis\\xADcoverd\"), \"\\u201D from the server, e.g.:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"OpenIDConnectAuth.discover(vertx,\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" OAuth2ClientOptions()\\n    .setSite(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"https://accounts.google.com\\\"\"), \")\\n    .setClientID(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"clientId\\\"\"), \"),\\n  res -> {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (res.succeeded()) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the setup call succeeded.\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// at this moment your auth is ready to use and\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// google signature keys are loaded so tokens can be decoded and verified.\"), \"\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// the setup failed.\"), \"\\n    }\\n});\\n\")), mdx(\"p\", null, \"If you know your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"cli\\xADen\\xADtId\"), \" and your provider server URL (of course), all the re\\xADmain\\xADing en\\xADdoints, key sig\\xADna\\xADture al\\xADgo\\xADrithms and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JSON Web Keys\"), \" are \\u201Cdis\\xADcov\\xADered\\u201D for you and\\ncon\\xADfig\\xADured to the auth provider.\"), mdx(\"h4\", {\n    \"id\": \"password-hashing-strategy\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#password-hashing-strategy\"\n  })), \"Password Hashing strategy\"), mdx(\"p\", null, \"Vert.x auth com\\xADpo\\xADnents now sup\\xADport user de\\xADfined pass\\xADword hash\\xADing strate\\xADgies, If you\\u2019re not happy with the pro\\xADvided im\\xADple\\xADmen\\xADta\\xADtions: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SHA512\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PKDBF2\"), \" you can now pro\\xADvide your own strat\\xADegy\\nso it can be used with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JDBC\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mongo\"), \" auth.\"), mdx(\"p\", null, \"The hash ver\\xADi\\xADfi\\xADca\\xADtion al\\xADgo\\xADrithm has been im\\xADproved to be time con\\xADstant, re\\xADgard\\xADless of the re\\xADsult, which pro\\xADtects Vert.x\\nap\\xADpli\\xADca\\xADtions from hash tim\\xADing at\\xADtacks.\"), mdx(\"h4\", {\n    \"id\": \"externalized-configuration-of-vertx-options\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#externalized-configuration-of-vertx-options\"\n  })), \"Externalized configuration of Vert.x options\"), mdx(\"p\", null, \"Whether you run your Vert.x app with the CLI or as an ex\\xADe\\xADcutable JAR with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Launcher\"), \", you can now pro\\xADvide Vert.x\\nop\\xADtions as a com\\xADmand line pa\\xADra\\xADme\\xADter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-gradle\"\n  }), \"java -jar my-app.jar -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"options\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-regexp\"\n  }), \"/path/\"), \"to\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-regexp\"\n  }), \"/my/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"file\"), \".json\\n\")), mdx(\"p\", null, \"Or with the CLI:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-gradle\"\n  }), \"vertx run my-verticle.js -\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"options\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-regexp\"\n  }), \"/path/\"), \"to\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-regexp\"\n  }), \"/my/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"file\"), \".json\\n\")), mdx(\"p\", null, \"This is par\\xADtic\\xADu\\xADlarly use\\xADful for com\\xADplex clus\\xADtered event-\\u200Bbus se\\xADtups (en\\xADcryp\\xADtion, pub\\xADlic host vs clus\\xADter host\\u2026).\"), mdx(\"h4\", {\n    \"id\": \"and-more\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#and-more\"\n  })), \"And more\\u2026\"), mdx(\"p\", null, \"Here are some other im\\xADpor\\xADtant im\\xADprove\\xADments you can find in this re\\xADlease:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java 11 sup\\xADport (un\\xADless a Vert.x mod\\xADule de\\xADpends on a third-\\u200Bparty de\\xADpen\\xADdency that does not sup\\xADport it yet)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hazel\\xADcast Clus\\xADter Man\\xADager \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-hazelcast/java/#_using_lite_members\"\n  }), \"sup\\xADport for lite mem\\xADbers\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api/\"\n  }), \"Sim\\xADpli\\xADfied data\\xADbase trans\\xADac\\xADtion man\\xADage\\xADment\"), \" with the Vert.x \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Rx\\xADi\\xADfied\"), \" API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Event-\\u200Bbus in\\xADter\\xADcep\\xADtors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doc\\xADu\\xADmen\\xADta\\xADtion im\\xADprove\\xADments\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clus\\xADter ad\\xADmin\\xADis\\xADtra\\xADtion with \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-infinispan/java/#_cluster_administration\"\n  }), \"In\\xADfin\\xADis\\xADpan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-hazelcast/java/#_cluster_administration\"\n  }), \"Hazel\\xADcast\"), \" clus\\xADter man\\xADagers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Rx\\xADi\\xADfied\"), \" API in the Vert.x \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-kafka-client/java/#_rxjava_2_api\"\n  }), \"Kafka\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-web-client/java/#_rxjava_2_api\"\n  }), \"Web\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/docs/vertx-mongo-client/java/#_rxjava_2_api\"\n  }), \"Mongo\"), \" clients\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Per\\xADfor\\xADmance im\\xADprove\\xADments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And ob\\xADvi\\xADously we have the usual bug fixes!\")), mdx(\"h4\", {\n    \"id\": \"finally\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#finally\"\n  })), \"Finally\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.6.0-Release-Notes\"\n  }), \"3.6.0 re\\xADlease notes\"), \" can be found on the wiki, as well as the list of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.6.0-Deprecations-and-breaking-changes\"\n  }), \"dep\\xADre\\xADca\\xADtions and break\\xADing changes\")), mdx(\"p\", null, \"Docker im\\xADages are avail\\xADable on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \".\"), mdx(\"p\", null, \"The Vert.x dis\\xADtri\\xADb\\xADu\\xADtion can be down\\xADloaded on the web\\xADsite but is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"Home\\xADBrew\"), \".\"), mdx(\"p\", null, \"The event bus client using the SockJS bridge is avail\\xADable from:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"NPM\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"Bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"We\\xADb\\xADJars\"))), mdx(\"p\", null, \"The re\\xADlease ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.0%22\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.6.0/view\"\n  }), \"Bin\\xADtray\"), \".\"), mdx(\"p\", null, \"That\\u2019s it! Happy cod\\xADing and see you soon on our user or dev \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/community\"\n  }), \"chan\\xADnels\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We are pleased to an­nounce the Eclipse Vert.x 3.6.0 re­lease.</p><p>As al­ways, the com­mu­nity con­tri­bu­tions have been key in achiev­ing this mile­stone.\nTo all of you who par­tic­i­pated: thank you, you are awe­some!</p><p>With­out fur­ther ado, let’s take a look at some of the most ex­cit­ing new fea­tures and en­hance­ments.  </p><h4 id=\"vertx-cassandra-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-cassandra-client\"></a>Vert.x Cassandra client</h4><p>In this re­lease we in­tro­duce the <a href=\"https://github.com/vert-x3/vertx-cassandra-client\">Vert.x Cas­san­dra client</a>, an ex­ten­sion for in­ter­a­tion with <a href=\"http://cassandra.apache.org/\">Apache Cas­san­dra</a>.</p><p>The client sup­ports:</p><ul><li>pre­pared queries</li><li>batch­ing</li><li>query stream­ing</li><li>bulk fetch­ing</li><li>low level fetch­ing</li></ul><p>To give you an idea of how the API usage may looks like, we pro­vide this ex­am­ple:</p><pre><code class=\"hljs language-java\">cassandraClient.queryStream(<span class=\"hljs-string\">&quot;SELECT my_string_col FROM my_keyspace.my_table where my_key = &#x27;my_value&#x27;&quot;</span>, queryStream -&gt; {\n    <span class=\"hljs-keyword\">if</span> (queryStream.succeeded()) {\n    CassandraRowStream stream = queryStream.result();\n\n    <span class=\"hljs-comment\">// resume stream when queue is ready to accept buffers again</span>\n    response.drainHandler(v -&gt; stream.resume());\n\n    stream.handler(row -&gt; {\n        String value = row.getString(<span class=\"hljs-string\">&quot;my_string_col&quot;</span>);\n        response.write(value);\n\n        <span class=\"hljs-comment\">// pause row stream when we buffer queue is full</span>\n        <span class=\"hljs-keyword\">if</span> (response.writeQueueFull()) {\n        stream.pause();\n        }\n    });\n\n    <span class=\"hljs-comment\">// end request when we reached end of the stream</span>\n    stream.endHandler(end -&gt; response.end());\n\n    } <span class=\"hljs-keyword\">else</span> {\n    queryStream.cause().printStackTrace();\n    <span class=\"hljs-comment\">// response with internal server error if we are not able to execute given query</span>\n    response\n        .setStatusCode(<span class=\"hljs-number\">500</span>)\n        .end(<span class=\"hljs-string\">&quot;Unable to execute the query&quot;</span>);\n    }\n});\n</code></pre><h4 id=\"vertx-for-kotlin\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#vertx-for-kotlin\"></a>Vert.x for Kotlin</h4><p>Vert.x for Kotlin has been up­dated to the very re­cent Kotlin 1.3 (and corou­tines 1.0).</p><p>Vert.x 3.5 in­tro­duced a pow­er­ful way to write syn­chro­nous non-​blocking code with Kotlin corou­tines:</p><pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> result = awaitResult&lt;ResultSet&gt; { client.queryWithParams(<span class=\"hljs-string\">&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;</span>, json { array(id) }, it) };\n</code></pre><p>In this re­lease, <code>awaitResult</code> idiom as ex­ten­sion meth­ods are pro­vided, so now you can di­rectly write:</p><pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> result = client.queryWithParamsAwait(<span class=\"hljs-string\">&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;</span>, json { array(id) })\n</code></pre><p>Note the <code>Await</code> suf­fix: all Vert.x asyn­chro­nous meth­ods pro­vide now an <em>await­i­fied</em> ex­ten­sion.</p><h4 id=\"web-api-gateways\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#web-api-gateways\"></a>Web API gateways</h4><p>The new <a href=\"https://vertx.io/docs/vertx-web-api-service/java/\">Vert.x Web API Ser­vice</a> mod­ule al­lows you to\ncre­ate <a href=\"https://vertx.io/docs/vertx-web-api-contract/java/\">Vert.x Web API Con­tract</a> gate­ways.</p><p><img src=\"/images/blog/vertx-web-api-service/vertx-web-api-service.png\" alt=\"Web API Service Architecture\"/></p><p><code>@WebApiServiceGen</code> can an­no­tate your ser­vice in­ter­face to han­dle\n<a href=\"https://www.openapis.org/\">Ope­nAPI 3</a>: <a href=\"https://vertx.io/docs/vertx-web-api-service/java/\">Vert.x Web API Ser­vice</a>\nre­quests:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@WebApiServiceGen</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">TransactionService</span> </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getTransactionsList</span><span class=\"hljs-params\">(String from, String to, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">putTransaction</span><span class=\"hljs-params\">(JsonObject body, OperationRequest context, Handler&lt;AsyncResult&lt;OperationResponse&gt;&gt; resultHandler)</span></span>;\n}\n</code></pre><p>The <code>OpenAPI3RouterFactory</code> web router be­comes an API gate­way send­ing re­quests di­rectly to your ser­vices.</p><p>These ser­vices are pow­ered by the Vert.x <a href=\"https://vertx.io/docs/vertx-core/java/#event_bus\">event bus</a> and ben­e­fits\nfrom fea­tures like load bal­anc­ing and clus­ter­ing.</p><p>Check the <a href=\"https://vertx.io/docs/vertx-web-api-service/java/\">com­plete doc­u­men­ta­tion</a> for more de­tails (a tu­to­r­ial post is com­ing soon!)</p><h4 id=\"web-client\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#web-client\"></a>Web Client</h4><p>Our beloved <a href=\"https://vertx.io/docs/vertx-web-client/java/\">We­b­Client</a> is now ca­pa­ble of han­dling client ses­sions. The\n<code>WebClientSession</code> is a client ex­ten­sion that is very help­ful when you need to man­age cook­ies on the client side.</p><pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// The session is created per user</span>\n<span class=\"hljs-comment\">// from now on cookies are handled by the session</span>\nWebClientSession session = WebClientSession.create(client);\n</code></pre><p>Cherry on the cake, the web client is now ca­pa­ble of per­form­ing server side re­sponse checks using <em>re­sponse pred­i­cates</em>:</p><pre><code class=\"hljs language-java\">client\n  .get(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-string\">&quot;myserver.mycompany.com&quot;</span>, <span class=\"hljs-string\">&quot;/some-uri&quot;</span>)\n  .expect(ResponsePredicate.SC_SUCCESS)\n  .expect(ResponsePredicate.JSON)\n  .send(result -&gt; { ... });\n</code></pre><p>The server side re­sponse must val­i­date the ex­pec­ta­tions de­fined be­fore send­ing the re­quest in order to make the re­sponse\nsuc­cess­ful, re­liev­ing the user code to per­form these checks man­u­ally. Of course many out of box ex­peca­tions are pro­vided\nand you can al­ways cre­ate your own to im­ple­ment cus­tom checks.</p><h4 id=\"use-templating-everywhere\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#use-templating-everywhere\"></a>Use templating everywhere</h4><p>Tem­plate en­gines can now be used out­side the realm of Vert.x Web.\nOne great use case is to use them to gen­er­ate email con­tent:</p><pre><code class=\"hljs language-java\">TemplateEngine template = ...\n\ntemplate.render(<span class=\"hljs-keyword\">new</span> JsonObject(), <span class=\"hljs-string\">&quot;my-template.txt, res -&gt; {\n   // Send result with the Vert.x Mail client\n});\n</span></code></pre><h4 id=\"openid-connect-discovery\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#openid-connect-discovery\"></a>OpenID Connect Discovery</h4><p><a href=\"https://vertx.io/docs/vertx-auth-oauth2/java/\">Oauth2</a> has been greatly en­hanced to sup­port more of OpenID Con­nect, the most noti­ci­ble is the sup­port of <code>OpenID Connect Discovery 1.0</code>.</p><p>What this means for the end user is that, con­fig­u­ra­tion is now a triv­ial task, as it is ”<em>dis­coverd</em>” from the server, e.g.:</p><pre><code class=\"hljs language-java\">OpenIDConnectAuth.discover(vertx,\n  <span class=\"hljs-keyword\">new</span> OAuth2ClientOptions()\n    .setSite(<span class=\"hljs-string\">&quot;https://accounts.google.com&quot;</span>)\n    .setClientID(<span class=\"hljs-string\">&quot;clientId&quot;</span>),\n  res -&gt; {\n    <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n      <span class=\"hljs-comment\">// the setup call succeeded.</span>\n      <span class=\"hljs-comment\">// at this moment your auth is ready to use and</span>\n      <span class=\"hljs-comment\">// google signature keys are loaded so tokens can be decoded and verified.</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the setup failed.</span>\n    }\n});\n</code></pre><p>If you know your <strong>cli­en­tId</strong> and your provider server URL (of course), all the re­main­ing en­doints, key sig­na­ture al­go­rithms and <em>JSON Web Keys</em> are “dis­cov­ered” for you and\ncon­fig­ured to the auth provider.</p><h4 id=\"password-hashing-strategy\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#password-hashing-strategy\"></a>Password Hashing strategy</h4><p>Vert.x auth com­po­nents now sup­port user de­fined pass­word hash­ing strate­gies, If you’re not happy with the pro­vided im­ple­men­ta­tions: <code>SHA512</code> or <code>PKDBF2</code> you can now pro­vide your own strat­egy\nso it can be used with <code>JDBC</code> or <code>Mongo</code> auth.</p><p>The hash ver­i­fi­ca­tion al­go­rithm has been im­proved to be time con­stant, re­gard­less of the re­sult, which pro­tects Vert.x\nap­pli­ca­tions from hash tim­ing at­tacks.</p><h4 id=\"externalized-configuration-of-vertx-options\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#externalized-configuration-of-vertx-options\"></a>Externalized configuration of Vert.x options</h4><p>Whether you run your Vert.x app with the CLI or as an ex­e­cutable JAR with the <code>Launcher</code>, you can now pro­vide Vert.x\nop­tions as a com­mand line pa­ra­me­ter:</p><pre><code class=\"hljs language-gradle\">java -jar my-app.jar -<span class=\"hljs-keyword\">options</span> <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/my/</span><span class=\"hljs-keyword\">file</span>.json\n</code></pre><p>Or with the CLI:</p><pre><code class=\"hljs language-gradle\">vertx run my-verticle.js -<span class=\"hljs-keyword\">options</span> <span class=\"hljs-regexp\">/path/</span>to<span class=\"hljs-regexp\">/my/</span><span class=\"hljs-keyword\">file</span>.json\n</code></pre><p>This is par­tic­u­larly use­ful for com­plex clus­tered event-​bus se­tups (en­cryp­tion, pub­lic host vs clus­ter host…).</p><h4 id=\"and-more\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#and-more\"></a>And more…</h4><p>Here are some other im­por­tant im­prove­ments you can find in this re­lease:</p><ul><li>Java 11 sup­port (un­less a Vert.x mod­ule de­pends on a third-​party de­pen­dency that does not sup­port it yet)</li><li>Hazel­cast Clus­ter Man­ager <a href=\"/docs/vertx-hazelcast/java/#_using_lite_members\">sup­port for lite mem­bers</a></li><li><a href=\"/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api/\">Sim­pli­fied data­base trans­ac­tion man­age­ment</a> with the Vert.x <em>Rx­i­fied</em> API</li><li>Event-​bus in­ter­cep­tors</li><li>Doc­u­men­ta­tion im­prove­ments<ul><li>Clus­ter ad­min­is­tra­tion with <a href=\"/docs/vertx-infinispan/java/#_cluster_administration\">In­fin­is­pan</a> and <a href=\"/docs/vertx-hazelcast/java/#_cluster_administration\">Hazel­cast</a> clus­ter man­agers</li><li><em>Rx­i­fied</em> API in the Vert.x <a href=\"/docs/vertx-kafka-client/java/#_rxjava_2_api\">Kafka</a>, <a href=\"/docs/vertx-web-client/java/#_rxjava_2_api\">Web</a> and <a href=\"/docs/vertx-mongo-client/java/#_rxjava_2_api\">Mongo</a> clients</li></ul></li><li>Per­for­mance im­prove­ments</li><li>And ob­vi­ously we have the usual bug fixes!</li></ul><h4 id=\"finally\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#finally\"></a>Finally</h4><p>The <a href=\"https://github.com/vert-x3/wiki/wiki/3.6.0-Release-Notes\">3.6.0 re­lease notes</a> can be found on the wiki, as well as the list of <a href=\"https://github.com/vert-x3/wiki/wiki/3.6.0-Deprecations-and-breaking-changes\">dep­re­ca­tions and break­ing changes</a></p><p>Docker im­ages are avail­able on <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>.</p><p>The Vert.x dis­tri­b­u­tion can be down­loaded on the web­site but is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a> and <a href=\"http://brew.sh/\">Home­Brew</a>.</p><p>The event bus client using the SockJS bridge is avail­able from:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">NPM</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">Bower</a></li><li><a href=\"http://www.webjars.org/\">We­b­Jars</a></li></ul><p>The re­lease ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.0%22\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.6.0/view\">Bin­tray</a>.</p><p>That’s it! Happy cod­ing and see you soon on our user or dev <a href=\"https://vertx.io/community\">chan­nels</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"client","tf":10},{"term":"web","tf":10},{"term":"provid","tf":9},{"term":"api","tf":8},{"term":"us","tf":8},{"term":"support","tf":7},{"term":"releas","tf":6},{"term":"cluster","tf":6},{"term":"servic","tf":5},{"term":"extens","tf":4},{"term":"kotlin","tf":4},{"term":"event","tf":4},{"term":"bu","tf":4},{"term":"check","tf":4},{"term":"manag","tf":4},{"term":"server","tf":4},{"term":"respons","tf":4},{"term":"user","tf":4},{"term":"hash","tf":4},{"term":"improv","tf":4},{"term":"kei","tf":3},{"term":"cassandra","tf":3},{"term":"code","tf":3},{"term":"gatewai","tf":3},{"term":"request","tf":3}]},{"filename":"blog/2018-10-03-eclipse-vert-x-3-5-4.mdx","date":"2018-10-03","slug":"eclipse-vert-x-3-5-4","meta":{"title":"Eclipse Vert.x 3.5.4","category":"releases","authors":[{"name":"Julien Viet","github_id":"vietj"}],"summary":"We have just released Vert.x 3.5.4, a bug fix release of Vert.x 3.5.x."},"readingTime":{"text":"1 min read","minutes":0.65,"time":39000,"words":130},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We have just re\\xADleased Vert.x 3.5.4, a bug fix re\\xADlease of Vert.x 3.5.x.\"), mdx(\"p\", null, \"Since the re\\xADlease of Vert.x 3.5.3, quite a few bugs have been re\\xADported. We would like to thank you all for re\\xADport\\xADing these is\\xADsues.\"), mdx(\"p\", null, \"Three CVE have also been re\\xADported and fixed in this re\\xADlease:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/eclipse-vertx/vert.x/issues/2648\"\n  }), \"CVE-2018-12541\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-web/issues/1025\"\n  }), \"CVE-2018-12542\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-web/issues/1021\"\n  }), \"CVE-2018-12544\"))), mdx(\"p\", null, \"Vert.x 3.5.4 re\\xADlease notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/wiki/wiki/3.5.4-Release-Notes\"\n  }), \"https://github.com/vert-\\u200Bx3/wiki/wiki/3.5.4-\\u200BRelease-Notes\"))), mdx(\"p\", null, \"The event bus client using the SockJS bridge are avail\\xADable from NPM, Bower and as a We\\xADb\\xADJar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/vertx3-eventbus-client\"\n  }), \"https://www.npmjs.com/pack\\xADage/vertx3-\\u200Beventbus-client\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/vert-x3/vertx-bus-bower\"\n  }), \"https://github.com/vert-\\u200Bx3/vertx-\\u200Bbus-bower\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.webjars.org/\"\n  }), \"http://www.we\\xADb\\xADjars.org/\"))), mdx(\"p\", null, \"Docker im\\xADages are also avail\\xADable on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/u/vertx/\"\n  }), \"Docker Hub\"), \". The Vert.x dis\\xADtri\\xADb\\xADu\\xADtion is also avail\\xADable from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sdkman.io/index.html\"\n  }), \"SD\\xADKMan\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://brew.sh/\"\n  }), \"Home\\xADBrew\"), \".\"), mdx(\"p\", null, \"The ar\\xADti\\xADfacts have been de\\xADployed to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.4%22\"\n  }), \"Maven Cen\\xADtral\"), \" and you can get the dis\\xADtri\\xADb\\xADu\\xADtion on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bintray.com/vertx/downloads/distribution/3.5.4/view\"\n  }), \"Bin\\xADtray\"), \".\"), mdx(\"p\", null, \"Happy cod\\xADing and see you soon on our user or dev \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/community\"\n  }), \"chan\\xADnels\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>We have just re­leased Vert.x 3.5.4, a bug fix re­lease of Vert.x 3.5.x.</p><p>Since the re­lease of Vert.x 3.5.3, quite a few bugs have been re­ported. We would like to thank you all for re­port­ing these is­sues.</p><p>Three CVE have also been re­ported and fixed in this re­lease:</p><ul><li><a href=\"https://github.com/eclipse-vertx/vert.x/issues/2648\">CVE-2018-12541</a></li><li><a href=\"https://github.com/vert-x3/vertx-web/issues/1025\">CVE-2018-12542</a></li><li><a href=\"https://github.com/vert-x3/vertx-web/issues/1021\">CVE-2018-12544</a></li></ul><p>Vert.x 3.5.4 re­lease notes:</p><ul><li><a href=\"https://github.com/vert-x3/wiki/wiki/3.5.4-Release-Notes\">https://github.com/vert-​x3/wiki/wiki/3.5.4-​Release-Notes</a></li></ul><p>The event bus client using the SockJS bridge are avail­able from NPM, Bower and as a We­b­Jar:</p><ul><li><a href=\"https://www.npmjs.com/package/vertx3-eventbus-client\">https://www.npmjs.com/pack­age/vertx3-​eventbus-client</a></li><li><a href=\"https://github.com/vert-x3/vertx-bus-bower\">https://github.com/vert-​x3/vertx-​bus-bower</a></li><li><a href=\"http://www.webjars.org/\">http://www.we­b­jars.org/</a></li></ul><p>Docker im­ages are also avail­able on the <a href=\"https://hub.docker.com/u/vertx/\">Docker Hub</a>. The Vert.x dis­tri­b­u­tion is also avail­able from <a href=\"http://sdkman.io/index.html\">SD­KMan</a> and <a href=\"http://brew.sh/\">Home­Brew</a>.</p><p>The ar­ti­facts have been de­ployed to <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.4%22\">Maven Cen­tral</a> and you can get the dis­tri­b­u­tion on <a href=\"https://bintray.com/vertx/downloads/distribution/3.5.4/view\">Bin­tray</a>.</p><p>Happy cod­ing and see you soon on our user or dev <a href=\"https://vertx.io/community\">chan­nels</a>.</p>","scope":{}},"tfIdfTerms":[{"term":"releas","tf":6},{"term":"cve","tf":4},{"term":"http","tf":4},{"term":"2018","tf":3},{"term":"report","tf":3},{"term":"com","tf":3},{"term":"avail","tf":3},{"term":"bug","tf":2},{"term":"fix","tf":2},{"term":"note","tf":2},{"term":"github","tf":2},{"term":"x3","tf":2},{"term":"wiki","tf":2},{"term":"bu","tf":2},{"term":"client","tf":2},{"term":"bower","tf":2},{"term":"webjar","tf":2},{"term":"www","tf":2},{"term":"docker","tf":2},{"term":"distribut","tf":2},{"term":"12541","tf":1},{"term":"12542","tf":1},{"term":"12544","tf":1},{"term":"just","tf":1},{"term":"quit","tf":1}]},{"filename":"blog/2018-09-05-the-rss-reader-tutorial-step-2.mdx","date":"2018-09-05","slug":"the-rss-reader-tutorial-step-2","meta":{"title":"The RSS reader tutorial (Step 2)","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this second installment of our Vert.x Cassandra Client tutorial, we will add an endpoint that produces an array of RSS channels for a given user ID."},"readingTime":{"text":"3 min read","minutes":2.39,"time":143400,"words":478},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In \", mdx(Link, {\n    href: \"/blog/[[...slug]]\",\n    as: \"/blog/the-rss-reader-tutorial/\",\n    passHref: true,\n    mdxType: \"Link\"\n  }, mdx(\"a\", null, \"the pre\\xADvi\\xADous step\")), \", we have suc\\xADcess\\xADfully im\\xADple\\xADmented the first end\\xADpoint\\nof the RSS reader app.\"), mdx(\"p\", null, \"The RSS reader ex\\xADam\\xADple as\\xADsumes im\\xADple\\xADment\\xADing 3 end\\xADpoints. This ar\\xADti\\xADcle is ded\\xADi\\xADcated to im\\xADple\\xADment\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /user/{user_id}/rss_channels\"), \" end\\xADpoint.\"), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step, make sure your are in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_2\"), \" git branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_2\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"implementing-the-second-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-second-endpoint\"\n  })), \"Implementing the second endpoint\"), mdx(\"p\", null, \"The sec\\xADond end\\xADpoint pro\\xADduces an array of RSS chan\\xADnels by given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user_id\"), \".\"), mdx(\"p\", null, \"We need to ex\\xADe\\xADcute the two fol\\xADlow\\xADing queries to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fetch RSS links for a given user:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_by_user \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" login = GIVEN_USER_ID ;\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fetch RSS chan\\xADnel de\\xADtails for a given link:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" description, title, site_link, rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" channel_info_by_rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"WHERE\"), \" rss_link = GIVEN_LINK ;\\n\")))), mdx(\"h2\", {\n    \"id\": \"implementation\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementation\"\n  })), \"Implementation\"), mdx(\"p\", null, \"The end\\xADpoint al\\xADlows the the front-\\u200Bend app to dis\\xADplay the list of RSS feeds a user sub\\xADscribed on. When the end\\xADpoint is ac\\xADcessed, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#getRssChannels\"), \" method is called. We can im\\xADple\\xADment this method in this way:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"getRssChannels\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    String userId = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user_id\\\"\"), \");\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (userId == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n        responseWithInvalidRequest(ctx);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n        Future<List<Row>> future = Future.future();\\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\\n        future.compose(rows -> {\\n            List<String> links = rows.stream()\\n                    .map(row -> row.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                    .collect(Collectors.toList());\\n\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n                    links.stream().map(selectChannelInfo::bind).map(statement -> {\\n                        Future<List<Row>> channelInfoRow = Future.future();\\n                        client.executeWithFullFetch(statement, channelInfoRow);\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" channelInfoRow;\\n                    }).collect(Collectors.toList())\\n            );\\n        }).setHandler(h -> {\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (h.succeeded()) {\\n                CompositeFuture result = h.result();\\n                List<List<Row>> results = result.list();\\n                List<Row> list = results.stream()\\n                        .flatMap(List::stream)\\n                        .collect(Collectors.toList());\\n                JsonObject responseJson = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject();\\n                JsonArray channels = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonArray();\\n\\n                list.forEach(eachRow -> channels.add(\\n                        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject()\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"description\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"title\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \"))\\n                                .put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"rss_link\\\"\"), \", eachRow.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\"), \"))\\n                ));\\n\\n                responseJson.put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"channels\\\"\"), \", channels);\\n                ctx.response().end(responseJson.toString());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"failed to get rss channels\\\"\"), \", h.cause());\\n                ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"500\"), \").end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to retrieve the info from C*\\\"\"), \");\\n            }\\n        });\\n    }\\n}\\n\")), mdx(\"p\", null, \"Also, this method uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectChannelInfo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectRssLinksByLogin\"), \" fields, they should be ini\\xADtial\\xADized in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Future<PreparedStatement> selectChannelInfoPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;\\\"\"), \", selectChannelInfoPrepFuture);\\n\\n    Future<PreparedStatement> selectRssLinkByLoginPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"SELECT rss_link FROM rss_by_user WHERE login = ? ;\\\"\"), \", selectRssLinkByLoginPrepFuture);\\n\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"), \", insertNewLinkForUserPrepFuture);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n            selectChannelInfoPrepFuture.compose(preparedStatement -> {\\n                selectChannelInfo = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            }),\\n            selectRssLinkByLoginPrepFuture.compose(preparedStatement -> {\\n                selectRssLinksByLogin = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            }),\\n            insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n                insertNewLinkForUser = preparedStatement;\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n            })\\n    ).mapEmpty();\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this part, we have suc\\xADcess\\xADfully im\\xADple\\xADmented the sec\\xADond end\\xADpoint, which al\\xADlows the browser app to ob\\xADtain chan\\xADnels in\\xADfor\\xADma\\xADtion for a spe\\xADcific user. To en\\xADsure that it is work\\xADing fine, point your browser to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8080\"), \" and click to the re\\xADfresh but\\xADton. Chan\\xADnel list should ap\\xADpear im\\xADme\\xADdi\\xADately.\"), mdx(\"p\", null, \"If you have any prob\\xADlems with com\\xADplet\\xADing this step you can check\\xADout to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_3\"), \", where you can find all changes made for com\\xADplet\\xADing this step:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_3\"), \"\\n\")), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>In <a href=\"/blog/the-rss-reader-tutorial/\">the pre­vi­ous step</a>, we have suc­cess­fully im­ple­mented the first end­point\nof the RSS reader app.</p><p>The RSS reader ex­am­ple as­sumes im­ple­ment­ing 3 end­points. This ar­ti­cle is ded­i­cated to im­ple­ment­ing the <code>GET /user/{user_id}/rss_channels</code> end­point.</p><p>Be­fore com­plet­ing this step, make sure your are in the <code>step_2</code> git branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_2</span>\n</code></pre><h2 id=\"implementing-the-second-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-second-endpoint\"></a>Implementing the second endpoint</h2><p>The sec­ond end­point pro­duces an array of RSS chan­nels by given <code>user_id</code>.</p><p>We need to ex­e­cute the two fol­low­ing queries to:</p><ol><li>Fetch RSS links for a given user:<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> rss_link <span class=\"hljs-keyword\">FROM</span> rss_by_user <span class=\"hljs-keyword\">WHERE</span> login = GIVEN_USER_ID ;\n</code></pre></li><li>Fetch RSS chan­nel de­tails for a given link:<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> description, title, site_link, rss_link <span class=\"hljs-keyword\">FROM</span> channel_info_by_rss_link <span class=\"hljs-keyword\">WHERE</span> rss_link = GIVEN_LINK ;\n</code></pre></li></ol><h2 id=\"implementation\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementation\"></a>Implementation</h2><p>The end­point al­lows the the front-​end app to dis­play the list of RSS feeds a user sub­scribed on. When the end­point is ac­cessed, the <code>AppVerticle#getRssChannels</code> method is called. We can im­ple­ment this method in this way:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getRssChannels</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    String userId = ctx.request().getParam(<span class=\"hljs-string\">&quot;user_id&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (userId == <span class=\"hljs-keyword\">null</span>) {\n        responseWithInvalidRequest(ctx);\n    } <span class=\"hljs-keyword\">else</span> {\n        Future&lt;List&lt;Row&gt;&gt; future = Future.future();\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\n        future.compose(rows -&gt; {\n            List&lt;String&gt; links = rows.stream()\n                    .map(row -&gt; row.getString(<span class=\"hljs-number\">0</span>))\n                    .collect(Collectors.toList());\n\n            <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n                    links.stream().map(selectChannelInfo::bind).map(statement -&gt; {\n                        Future&lt;List&lt;Row&gt;&gt; channelInfoRow = Future.future();\n                        client.executeWithFullFetch(statement, channelInfoRow);\n                        <span class=\"hljs-keyword\">return</span> channelInfoRow;\n                    }).collect(Collectors.toList())\n            );\n        }).setHandler(h -&gt; {\n            <span class=\"hljs-keyword\">if</span> (h.succeeded()) {\n                CompositeFuture result = h.result();\n                List&lt;List&lt;Row&gt;&gt; results = result.list();\n                List&lt;Row&gt; list = results.stream()\n                        .flatMap(List::stream)\n                        .collect(Collectors.toList());\n                JsonObject responseJson = <span class=\"hljs-keyword\">new</span> JsonObject();\n                JsonArray channels = <span class=\"hljs-keyword\">new</span> JsonArray();\n\n                list.forEach(eachRow -&gt; channels.add(\n                        <span class=\"hljs-keyword\">new</span> JsonObject()\n                                .put(<span class=\"hljs-string\">&quot;description&quot;</span>, eachRow.getString(<span class=\"hljs-number\">0</span>))\n                                .put(<span class=\"hljs-string\">&quot;title&quot;</span>, eachRow.getString(<span class=\"hljs-number\">1</span>))\n                                .put(<span class=\"hljs-string\">&quot;link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">2</span>))\n                                .put(<span class=\"hljs-string\">&quot;rss_link&quot;</span>, eachRow.getString(<span class=\"hljs-number\">3</span>))\n                ));\n\n                responseJson.put(<span class=\"hljs-string\">&quot;channels&quot;</span>, channels);\n                ctx.response().end(responseJson.toString());\n            } <span class=\"hljs-keyword\">else</span> {\n                log.error(<span class=\"hljs-string\">&quot;failed to get rss channels&quot;</span>, h.cause());\n                ctx.response().setStatusCode(<span class=\"hljs-number\">500</span>).end(<span class=\"hljs-string\">&quot;Unable to retrieve the info from C*&quot;</span>);\n            }\n        });\n    }\n}\n</code></pre><p>Also, this method uses <code>selectChannelInfo</code> and <code>selectRssLinksByLogin</code> fields, they should be ini­tial­ized in the <code>AppVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n    Future&lt;PreparedStatement&gt; selectChannelInfoPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;&quot;</span>, selectChannelInfoPrepFuture);\n\n    Future&lt;PreparedStatement&gt; selectRssLinkByLoginPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;SELECT rss_link FROM rss_by_user WHERE login = ? ;&quot;</span>, selectRssLinkByLoginPrepFuture);\n\n    Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;</span>, insertNewLinkForUserPrepFuture);\n\n    <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n            selectChannelInfoPrepFuture.compose(preparedStatement -&gt; {\n                selectChannelInfo = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            }),\n            selectRssLinkByLoginPrepFuture.compose(preparedStatement -&gt; {\n                selectRssLinksByLogin = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            }),\n            insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {\n                insertNewLinkForUser = preparedStatement;\n                <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n            })\n    ).mapEmpty();\n}\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this part, we have suc­cess­fully im­ple­mented the sec­ond end­point, which al­lows the browser app to ob­tain chan­nels in­for­ma­tion for a spe­cific user. To en­sure that it is work­ing fine, point your browser to <code>localhost:8080</code> and click to the re­fresh but­ton. Chan­nel list should ap­pear im­me­di­ately.</p><p>If you have any prob­lems with com­plet­ing this step you can check­out to <code>step_3</code>, where you can find all changes made for com­plet­ing this step:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_3</span>\n</code></pre><p>Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"endpoint","tf":8},{"term":"implement","tf":7},{"term":"rss","tf":6},{"term":"channel","tf":5},{"term":"step","tf":4},{"term":"method","tf":4},{"term":"app","tf":3},{"term":"complet","tf":3},{"term":"second","tf":3},{"term":"given","tf":3},{"term":"user","tf":3},{"term":"successfulli","tf":2},{"term":"reader","tf":2},{"term":"articl","tf":2},{"term":"fetch","tf":2},{"term":"link","tf":2},{"term":"allow","tf":2},{"term":"list","tf":2},{"term":"browser","tf":2},{"term":"read","tf":2},{"term":"previou","tf":1},{"term":"first","tf":1},{"term":"exampl","tf":1},{"term":"assum","tf":1},{"term":"dedic","tf":1}]},{"filename":"blog/2018-08-20-the-rss-reader-tutorial.mdx","date":"2018-08-20","slug":"the-rss-reader-tutorial","meta":{"title":"The RSS reader tutorial","category":"guides","authors":[{"name":"Pavel Drankov","github_id":"Sammers21"}],"summary":"In this tutorial, you will learn how to use the Eclipse Vert.x Cassandra client in practice. We will develop an RSS reader with three HTTP endpoints."},"readingTime":{"text":"7 min read","minutes":6.2,"time":372000,"words":1240},"content":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This tu\\xADto\\xADr\\xADial is ded\\xADi\\xADcated for users who\\u2019d like to know how to use the Eclipse Vert.x Cas\\xADsan\\xADdra client in prac\\xADtice.\"), mdx(\"h2\", {\n    \"id\": \"before-you-start-this-tutorial\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#before-you-start-this-tutorial\"\n  })), \"Before you start this tutorial\"), mdx(\"p\", null, \"Be\\xADfore start\\xADing, you should\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"be fa\\xADmil\\xADiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/\"\n  }), \"Eclipse Vert.x\"), \". If you are not, here is the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/guide-for-java-devs/\"\n  }), \"guide for Java de\\xADvel\\xADop\\xADers\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"have some basic un\\xADder\\xADstand\\xADing of data\\xADbases. Ex\\xADtended knowl\\xADedge of Cas\\xADsan\\xADdra is not re\\xADquired.\"))), mdx(\"p\", null, \"You also may find it use\\xADful to read \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://validator.w3.org/feed/docs/rss2.html\"\n  }), \"the RSS 2.0\"), \" spec\\xADi\\xADfi\\xADca\\xADtion, be\\xADcause the re\\xADsulted app is, ba\\xADsi\\xADcally, a stor\\xADage of RSS 2.0 feeds.\"), mdx(\"p\", null, \"To give you an idea of what the App is about, here is how it looks like from the fronted side:\"), mdx(\"img\", {\n    src: \"https://i.imgur.com/2V954zx.png\",\n    alt: \"see how it looks\",\n    className: \"img-fluid\"\n  }), mdx(\"p\", null, \"In the image, we see that browser space is split into 2 parts:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Saved feed names\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"List of ar\\xADti\\xADcles for the se\\xADlected feed\")), mdx(\"p\", null, \"Here you also can enter a link to a new feed, so the App will fetch and parse the feed.\\nAfter that, it will ap\\xADpear in the left col\\xADumn along with other saved feeds.\"), mdx(\"h2\", {\n    \"id\": \"requirements\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#requirements\"\n  })), \"Requirements\"), mdx(\"p\", null, \"For com\\xADplet\\xADing this tu\\xADto\\xADr\\xADial you need:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java 8 or higher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 hour of your time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You fa\\xADvorite code ed\\xADi\\xADtor\")), mdx(\"p\", null, \"For run\\xADning the ex\\xADam\\xADple you should en\\xADsure that Cas\\xADsan\\xADdra ser\\xADvice is run\\xADning lo\\xADcally on port 9042.\\nAs an op\\xADtion, you can run Cas\\xADsan\\xADdra with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/riptano/ccm#installation\"\n  }), \"ccm\"), \"(Cas\\xADsan\\xADdra Clus\\xADter Man\\xADager).\\nFol\\xADlow \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/riptano/ccm#installation\"\n  }), \"this\"), \" in\\xADstruc\\xADtions for in\\xADstalling ccm.\\nAfter in\\xADstalling you will be able to run a sin\\xADgle node clus\\xADter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ccm create rss_reader -v 3.11.2 -n 1 -s\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ccm start\"), \"\\n\")), mdx(\"p\", null, \"Be\\xADfore com\\xADplet\\xADing this step make sure that you have suc\\xADcess\\xADfully cloned the RSS reader repos\\xADi\\xADtory and checked out the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_1\"), \" branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"clone\"), \" https://github.com/Sammers21/rss-reader\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"cd\"), \" rss-reader\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_1\"), \"\\n\")), mdx(\"p\", null, \"Now you can try to tun this ex\\xADam\\xADple and see if it works:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" ./gradlew vertxRun\"), \"\\n\")), mdx(\"h2\", {\n    \"id\": \"schema\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#schema\"\n  })), \"Schema\"), mdx(\"p\", null, \"If you are fa\\xADmil\\xADiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://cassandra.apache.org/\"\n  }), \"Apache Cas\\xADsan\\xADdra\"), \", you\\nshould know that the way your data is stored in Cas\\xADsan\\xADdra is de\\xADpen\\xADdent on queries\\nyou are run\\xADning. It means that you need first to fig\\xADure out what kind of queries\\nyou will be run\\xADning, and then you can pro\\xADduce a stor\\xADage scheme.\"), mdx(\"p\", null, \"In our case, we\\u2019d like our ap\\xADpli\\xADca\\xADtion to have 3 end\\xADpoints:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"POST /user/{user_id}/rss_link\"), \" - for adding links to a user\\u2019s feed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /user/{user_id}/rss_channels\"), \" - for re\\xADtriev\\xADing in\\xADfor\\xADma\\xADtion about RSS chan\\xADnels a user sub\\xADscribed on\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET /articles/by_rss_link?link={rss_link}\"), \" - for re\\xADtriev\\xADing in\\xADfor\\xADma\\xADtion about ar\\xADti\\xADcles on a spe\\xADcific RSS chan\\xADnel\")), mdx(\"p\", null, \"For im\\xADple\\xADment\\xADing this end\\xADpoints, the schema should look as fol\\xADlows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" rss_by_user (login \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \" , rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \" (login, rss_link));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" articles_by_rss_link(rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", pubDate \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"timestamp\"), \", title \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", article_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \" ( rss_link , pubDate , article_link));\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"CREATE\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"TABLE\"), \" channel_info_by_rss_link(rss_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", last_fetch_time \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"timestamp\"), \",title \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", site_link \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"text\"), \", PRIMARY \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"KEY\"), \"(rss_link));\\n\")), mdx(\"h2\", {\n    \"id\": \"what-to-do-in-this-step\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#what-to-do-in-this-step\"\n  })), \"What to do in this step\"), mdx(\"p\", null, \"In this step, we will im\\xADple\\xADment only the first end\\xADpoint\"), mdx(\"h2\", {\n    \"id\": \"project-overview\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#project-overview\"\n  })), \"Project overview\"), mdx(\"p\", null, \"There are two no\\xADtable classes in the project: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \". The first one is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#_verticles\"\n  }), \"Ver\\xADti\\xADcle\"), \" re\\xADspon\\xADsi\\xADble for HTTP re\\xADquest han\\xADdling and stor\\xADage schema ini\\xADtial\\xADiza\\xADtion. The sec\\xADond one is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#_verticles\"\n  }), \"Ver\\xADti\\xADcle\"), \" as well, but re\\xADspon\\xADsi\\xADble for RSS feeds fetch\\xADing.\"), mdx(\"p\", null, \"The idea is sim\\xADple. When the ap\\xADpli\\xADca\\xADtion is start\\xADing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" is de\\xADployed, then it tries to ini\\xADtial\\xADize stor\\xADage schema, de\\xADscribed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/main/resources/schema.cql\"), \" file by read\\xADing it and ex\\xADe\\xADcut\\xADing listed queries line by line. After the schema ini\\xADtial\\xADiza\\xADtion the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" de\\xADploys \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \" and starts a HTTP server.\"), mdx(\"h2\", {\n    \"id\": \"implementing-the-endpoint\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#implementing-the-endpoint\"\n  })), \"Implementing the endpoint\"), mdx(\"p\", null, \"Now, it is time to im\\xADple\\xADment the first end\\xADpoint. Pay at\\xADten\\xADtion to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TODO\"), \"s, they are for point\\xADing you out about where changes should be made.\"), mdx(\"p\", null, \"Now, let\\u2019s have a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#postRssLink\"), \" method. This method is called each time the first end\\xADpoint is called, so we can fig\\xADure out what is the posted body and id of the user, who per\\xADformed the re\\xADquest, di\\xADrectly there. There are 2 main things we want to do in this method:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"No\\xADti\\xADfy\\xADing via the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://vertx.io/docs/vertx-core/java/#event_bus\"\n  }), \"Event Bus\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FetchVerticle\"), \" to fetch given by user link link to an RSS feed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In\\xADsert\\xADing an entry to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rss_by_user\"), \" table.\")), mdx(\"p\", null, \"This is how the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#postRssLink\"), \" method should be im\\xADple\\xADmented:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"postRssLink\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    ctx.request().bodyHandler(body -> {\\n        JsonObject bodyAsJson = body.toJsonObject();\\n        String link = bodyAsJson.getString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"link\\\"\"), \");\\n        String userId = ctx.request().getParam(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"user_id\\\"\"), \");\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (link == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \" || userId == \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"null\"), \") {\\n            responseWithInvalidRequest(ctx);\\n        } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            vertx.eventBus().send(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetch.rss.link\\\"\"), \", link);\\n            Future<ResultSet> future = Future.future();\\n            BoundStatement query = insertNewLinkForUser.bind(userId, link);\\n            client.execute(query, future);\\n            future.setHandler(result -> {\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (result.succeeded()) {\\n                    ctx.response().end(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"The feed just added\\\"\"), \").toString());\\n                } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n                    ctx.response().setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \").end(result.cause().getMessage());\\n                }\\n            });\\n        }\\n    });\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"responseWithInvalidRequest\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(RoutingContext ctx)\"), \" \"), \"{\\n    ctx.response()\\n            .setStatusCode(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"400\"), \")\\n            .putHeader(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"content-type\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"application/json; charset=utf-8\\\"\"), \")\\n            .end(invalidRequest().toString());\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" JsonObject \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"invalidRequest\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" JsonObject().put(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"message\\\"\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Invalid request\\\"\"), \");\\n}\\n\")), mdx(\"p\", null, \"You may no\\xADtice that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertNewLinkForUser\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PreparedStatement\"), \", and should be ini\\xADtial\\xADized be\\xADfore the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle\"), \" start. Let\\u2019s do it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\\n    client.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\\\"\"), \", insertNewLinkForUserPrepFuture);\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\\n        insertNewLinkForUser = preparedStatement;\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n    });\\n}\\n\")), mdx(\"p\", null, \"Also, we should not for\\xADget to fetch a RSS by the link sent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle\"), \" via the Event Bus. We can do it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle#startFetchEventBusConsumer\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \"vertx.eventBus().localConsumer(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetch.rss.link\\\"\"), \", message -> {\\n    String rssLink = (String) message.body();\\n    log.info(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"fetching \\\"\"), \" + rssLink);\\n    webClient.getAbs(rssLink).send(response -> {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (response.succeeded()) {\\n            String bodyAsString = response.result().bodyAsString(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"UTF-8\\\"\"), \");\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"try\"), \" {\\n                RssChannel rssChannel = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" RssChannel(bodyAsString);\\n\\n                BatchStatement batchStatement = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" BatchStatement();\\n                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(\\n                        rssLink, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"new\"), \" Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\\n                );\\n                batchStatement.add(channelInfoInsertQuery);\\n\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (Article article : rssChannel.articles) {\\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\\n                }\\n                Future<ResultSet> insertArticlesFuture = Future.future();\\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\\n\\n                insertArticlesFuture.compose(insertDone -> Future.succeededFuture());\\n            } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"catch\"), \" (Exception e) {\\n                log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to fetch: \\\"\"), \" + rssLink, e);\\n            }\\n        } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n            log.error(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Unable to fetch: \\\"\"), \" + rssLink);\\n        }\\n    });\\n});\\n\")), mdx(\"p\", null, \"And, fi\\xADnally, this code would not work if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertChannelInfo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insertArticleInfo\"), \" state\\xADments will not be ini\\xADtial\\xADized at ver\\xADti\\xADcle start. Let\\u2019s to this in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FetchVerticle#prepareNecessaryQueries\"), \" method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-java\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"private\"), \" Future<Void> \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"prepareNecessaryQueries\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \" \"), \"{\\n        Future<PreparedStatement> insertChannelInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);\\\"\"), \", insertChannelInfoPrepFuture);\\n\\n        Future<PreparedStatement> insertArticleInfoPrepFuture = Future.future();\\n        cassandraClient.prepare(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);\\\"\"), \", insertArticleInfoPrepFuture);\\n\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" CompositeFuture.all(\\n                insertChannelInfoPrepFuture.compose(preparedStatement -> {\\n                    insertChannelInfo = preparedStatement;\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -> {\\n                    insertArticleInfo = preparedStatement;\\n                    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" Future.succeededFuture();\\n                })\\n        ).mapEmpty();\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"observing\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#observing\"\n  })), \"Observing\"), mdx(\"p\", null, \"After all these changes, you should en\\xADsure that the first end\\xADpoint is work\\xADing cor\\xADrectly. You need to run the ap\\xADpli\\xADca\\xADtion, go to lo\\xADcal\\xADhost:8080 in\\xADsert a link to a rss feed there(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://feeds.bbci.co.uk/news/uk/rss.xml\"\n  }), \"BBC UK feed news\"), \" for ex\\xADam\\xADple) and then click the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ENTER\"), \" but\\xADton. Now you can con\\xADnect to your local Cas\\xADsan\\xADdra in\\xADstance, for in\\xADstance with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html\"\n  }), \"cqlsh\"), \", and find out how RSS feed data had been saved in the rss_reader key\\xADspace:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-sql\"\n  }), \"cqlsh> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" * \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_reader.rss_by_user \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"limit\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"  ;\\n\\n login | rss_link\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"-------+-----------------------------------------\"), \"\\n Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml\\n\\n(1 rows)\\ncqlsh> \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"SELECT\"), \" description \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"FROM\"), \" rss_reader.articles_by_rss_link  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"limit\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n\\n description\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"-------------------------------------\"), \"\\n BBC coverage of latest developments\\n\\n(1 rows)\\n\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"aria-hidden\": true,\n    \"tabIndex\": -1,\n    \"className\": \"heading-anchor\",\n    \"href\": \"#conclusion\"\n  })), \"Conclusion\"), mdx(\"p\", null, \"In this ar\\xADti\\xADcle we fig\\xADured out how to im\\xADple\\xADment the first end\\xADpoint of RSS-\\u200Breader app. If you have any prob\\xADlems with com\\xADplet\\xADing this step you can check\\xADout to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step_2\"), \", where you can find all changes made for com\\xADplet\\xADing this step:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-better-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"bash\"\n  }), \" git checkout step_2\"), \"\\n\")), mdx(\"p\", null, \"Thanks for read\\xADing this. I hope you en\\xADjoyed read\\xADing this ar\\xADti\\xADcle. See you soon on our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitter.im/eclipse-vertx/vertx-users\"\n  }), \"Git\\xADter chan\\xADnel\"), \"!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This tu­to­r­ial is ded­i­cated for users who’d like to know how to use the Eclipse Vert.x Cas­san­dra client in prac­tice.</p><h2 id=\"before-you-start-this-tutorial\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#before-you-start-this-tutorial\"></a>Before you start this tutorial</h2><p>Be­fore start­ing, you should</p><ul><li><p>be fa­mil­iar with <a href=\"https://vertx.io/\">Eclipse Vert.x</a>. If you are not, here is the <a href=\"https://vertx.io/docs/guide-for-java-devs/\">guide for Java de­vel­op­ers</a>.</p></li><li><p>have some basic un­der­stand­ing of data­bases. Ex­tended knowl­edge of Cas­san­dra is not re­quired.</p></li></ul><p>You also may find it use­ful to read <a href=\"https://validator.w3.org/feed/docs/rss2.html\">the RSS 2.0</a> spec­i­fi­ca­tion, be­cause the re­sulted app is, ba­si­cally, a stor­age of RSS 2.0 feeds.</p><p>To give you an idea of what the App is about, here is how it looks like from the fronted side:</p><img src=\"https://i.imgur.com/2V954zx.png\" alt=\"see how it looks\" class=\"img-fluid\"/><p>In the image, we see that browser space is split into 2 parts:</p><ol><li>Saved feed names</li><li>List of ar­ti­cles for the se­lected feed</li></ol><p>Here you also can enter a link to a new feed, so the App will fetch and parse the feed.\nAfter that, it will ap­pear in the left col­umn along with other saved feeds.</p><h2 id=\"requirements\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#requirements\"></a>Requirements</h2><p>For com­plet­ing this tu­to­r­ial you need:</p><ul><li>Java 8 or higher</li><li>Git</li><li>1 hour of your time</li><li>You fa­vorite code ed­i­tor</li></ul><p>For run­ning the ex­am­ple you should en­sure that Cas­san­dra ser­vice is run­ning lo­cally on port 9042.\nAs an op­tion, you can run Cas­san­dra with <a href=\"https://github.com/riptano/ccm#installation\">ccm</a>(Cas­san­dra Clus­ter Man­ager).\nFol­low <a href=\"https://github.com/riptano/ccm#installation\">this</a> in­struc­tions for in­stalling ccm.\nAfter in­stalling you will be able to run a sin­gle node clus­ter:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ccm create rss_reader -v 3.11.2 -n 1 -s</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ccm start</span>\n</code></pre><p>Be­fore com­plet­ing this step make sure that you have suc­cess­fully cloned the RSS reader repos­i­tory and checked out the <code>step_1</code> branch:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/Sammers21/rss-reader</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> rss-reader</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_1</span>\n</code></pre><p>Now you can try to tun this ex­am­ple and see if it works:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./gradlew vertxRun</span>\n</code></pre><h2 id=\"schema\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#schema\"></a>Schema</h2><p>If you are fa­mil­iar with <a href=\"http://cassandra.apache.org/\">Apache Cas­san­dra</a>, you\nshould know that the way your data is stored in Cas­san­dra is de­pen­dent on queries\nyou are run­ning. It means that you need first to fig­ure out what kind of queries\nyou will be run­ning, and then you can pro­duce a stor­age scheme.</p><p>In our case, we’d like our ap­pli­ca­tion to have 3 end­points:</p><ol><li><code>POST /user/{user_id}/rss_link</code> - for adding links to a user’s feed</li><li><code>GET /user/{user_id}/rss_channels</code> - for re­triev­ing in­for­ma­tion about RSS chan­nels a user sub­scribed on</li><li><code>GET /articles/by_rss_link?link={rss_link}</code> - for re­triev­ing in­for­ma­tion about ar­ti­cles on a spe­cific RSS chan­nel</li></ol><p>For im­ple­ment­ing this end­points, the schema should look as fol­lows:</p><pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> rss_by_user (login <span class=\"hljs-built_in\">text</span> , rss_link <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span> (login, rss_link));\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> articles_by_rss_link(rss_link <span class=\"hljs-built_in\">text</span>, pubDate <span class=\"hljs-built_in\">timestamp</span>, title <span class=\"hljs-built_in\">text</span>, article_link <span class=\"hljs-built_in\">text</span>, description <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span> ( rss_link , pubDate , article_link));\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> channel_info_by_rss_link(rss_link <span class=\"hljs-built_in\">text</span>, last_fetch_time <span class=\"hljs-built_in\">timestamp</span>,title <span class=\"hljs-built_in\">text</span>, site_link <span class=\"hljs-built_in\">text</span>, description <span class=\"hljs-built_in\">text</span>, PRIMARY <span class=\"hljs-keyword\">KEY</span>(rss_link));\n</code></pre><h2 id=\"what-to-do-in-this-step\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#what-to-do-in-this-step\"></a>What to do in this step</h2><p>In this step, we will im­ple­ment only the first end­point</p><h2 id=\"project-overview\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#project-overview\"></a>Project overview</h2><p>There are two no­table classes in the project: <code>AppVerticle</code> and <code>FetchVerticle</code>. The first one is a <a href=\"https://vertx.io/docs/vertx-core/java/#_verticles\">Ver­ti­cle</a> re­spon­si­ble for HTTP re­quest han­dling and stor­age schema ini­tial­iza­tion. The sec­ond one is a <a href=\"https://vertx.io/docs/vertx-core/java/#_verticles\">Ver­ti­cle</a> as well, but re­spon­si­ble for RSS feeds fetch­ing.</p><p>The idea is sim­ple. When the ap­pli­ca­tion is start­ing the <code>AppVerticle</code> is de­ployed, then it tries to ini­tial­ize stor­age schema, de­scribed in <code>src/main/resources/schema.cql</code> file by read­ing it and ex­e­cut­ing listed queries line by line. After the schema ini­tial­iza­tion the <code>AppVerticle</code> de­ploys <code>FetchVerticle</code> and starts a HTTP server.</p><h2 id=\"implementing-the-endpoint\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#implementing-the-endpoint\"></a>Implementing the endpoint</h2><p>Now, it is time to im­ple­ment the first end­point. Pay at­ten­tion to <code>TODO</code>s, they are for point­ing you out about where changes should be made.</p><p>Now, let’s have a look at the <code>AppVerticle#postRssLink</code> method. This method is called each time the first end­point is called, so we can fig­ure out what is the posted body and id of the user, who per­formed the re­quest, di­rectly there. There are 2 main things we want to do in this method:</p><ol><li>No­ti­fy­ing via the <a href=\"https://vertx.io/docs/vertx-core/java/#event_bus\">Event Bus</a> the <code>FetchVerticle</code> to fetch given by user link link to an RSS feed.</li><li>In­sert­ing an entry to the <code>rss_by_user</code> table.</li></ol><p>This is how the <code>AppVerticle#postRssLink</code> method should be im­ple­mented:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">postRssLink</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    ctx.request().bodyHandler(body -&gt; {\n        JsonObject bodyAsJson = body.toJsonObject();\n        String link = bodyAsJson.getString(<span class=\"hljs-string\">&quot;link&quot;</span>);\n        String userId = ctx.request().getParam(<span class=\"hljs-string\">&quot;user_id&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (link == <span class=\"hljs-keyword\">null</span> || userId == <span class=\"hljs-keyword\">null</span>) {\n            responseWithInvalidRequest(ctx);\n        } <span class=\"hljs-keyword\">else</span> {\n            vertx.eventBus().send(<span class=\"hljs-string\">&quot;fetch.rss.link&quot;</span>, link);\n            Future&lt;ResultSet&gt; future = Future.future();\n            BoundStatement query = insertNewLinkForUser.bind(userId, link);\n            client.execute(query, future);\n            future.setHandler(result -&gt; {\n                <span class=\"hljs-keyword\">if</span> (result.succeeded()) {\n                    ctx.response().end(<span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;The feed just added&quot;</span>).toString());\n                } <span class=\"hljs-keyword\">else</span> {\n                    ctx.response().setStatusCode(<span class=\"hljs-number\">400</span>).end(result.cause().getMessage());\n                }\n            });\n        }\n    });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">responseWithInvalidRequest</span><span class=\"hljs-params\">(RoutingContext ctx)</span> </span>{\n    ctx.response()\n            .setStatusCode(<span class=\"hljs-number\">400</span>)\n            .putHeader(<span class=\"hljs-string\">&quot;content-type&quot;</span>, <span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>)\n            .end(invalidRequest().toString());\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> JsonObject <span class=\"hljs-title\">invalidRequest</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> JsonObject().put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;Invalid request&quot;</span>);\n}\n</code></pre><p>You may no­tice that <code>insertNewLinkForUser</code> is a <code>PreparedStatement</code>, and should be ini­tial­ized be­fore the <code>AppVerticle</code> start. Let’s do it in the <code>AppVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n    Future&lt;PreparedStatement&gt; insertNewLinkForUserPrepFuture = Future.future();\n    client.prepare(<span class=\"hljs-string\">&quot;INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);&quot;</span>, insertNewLinkForUserPrepFuture);\n\n    <span class=\"hljs-keyword\">return</span> insertNewLinkForUserPrepFuture.compose(preparedStatement -&gt; {\n        insertNewLinkForUser = preparedStatement;\n        <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n    });\n}\n</code></pre><p>Also, we should not for­get to fetch a RSS by the link sent to <code>FetchVerticle</code> via the Event Bus. We can do it in the <code>FetchVerticle#startFetchEventBusConsumer</code> method:</p><pre><code class=\"hljs language-java\">vertx.eventBus().localConsumer(<span class=\"hljs-string\">&quot;fetch.rss.link&quot;</span>, message -&gt; {\n    String rssLink = (String) message.body();\n    log.info(<span class=\"hljs-string\">&quot;fetching &quot;</span> + rssLink);\n    webClient.getAbs(rssLink).send(response -&gt; {\n        <span class=\"hljs-keyword\">if</span> (response.succeeded()) {\n            String bodyAsString = response.result().bodyAsString(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);\n            <span class=\"hljs-keyword\">try</span> {\n                RssChannel rssChannel = <span class=\"hljs-keyword\">new</span> RssChannel(bodyAsString);\n\n                BatchStatement batchStatement = <span class=\"hljs-keyword\">new</span> BatchStatement();\n                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(\n                        rssLink, <span class=\"hljs-keyword\">new</span> Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\n                );\n                batchStatement.add(channelInfoInsertQuery);\n\n                <span class=\"hljs-keyword\">for</span> (Article article : rssChannel.articles) {\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\n                }\n                Future&lt;ResultSet&gt; insertArticlesFuture = Future.future();\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\n\n                insertArticlesFuture.compose(insertDone -&gt; Future.succeededFuture());\n            } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                log.error(<span class=\"hljs-string\">&quot;Unable to fetch: &quot;</span> + rssLink, e);\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            log.error(<span class=\"hljs-string\">&quot;Unable to fetch: &quot;</span> + rssLink);\n        }\n    });\n});\n</code></pre><p>And, fi­nally, this code would not work if <code>insertChannelInfo</code> and <code>insertArticleInfo</code> state­ments will not be ini­tial­ized at ver­ti­cle start. Let’s to this in the <code>FetchVerticle#prepareNecessaryQueries</code> method:</p><pre><code class=\"hljs language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Future&lt;Void&gt; <span class=\"hljs-title\">prepareNecessaryQueries</span><span class=\"hljs-params\">()</span> </span>{\n        Future&lt;PreparedStatement&gt; insertChannelInfoPrepFuture = Future.future();\n        cassandraClient.prepare(<span class=\"hljs-string\">&quot;INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);&quot;</span>, insertChannelInfoPrepFuture);\n\n        Future&lt;PreparedStatement&gt; insertArticleInfoPrepFuture = Future.future();\n        cassandraClient.prepare(<span class=\"hljs-string\">&quot;INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);&quot;</span>, insertArticleInfoPrepFuture);\n\n        <span class=\"hljs-keyword\">return</span> CompositeFuture.all(\n                insertChannelInfoPrepFuture.compose(preparedStatement -&gt; {\n                    insertChannelInfo = preparedStatement;\n                    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -&gt; {\n                    insertArticleInfo = preparedStatement;\n                    <span class=\"hljs-keyword\">return</span> Future.succeededFuture();\n                })\n        ).mapEmpty();\n    }\n</code></pre><h2 id=\"observing\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#observing\"></a>Observing</h2><p>After all these changes, you should en­sure that the first end­point is work­ing cor­rectly. You need to run the ap­pli­ca­tion, go to lo­cal­host:8080 in­sert a link to a rss feed there(<a href=\"http://feeds.bbci.co.uk/news/uk/rss.xml\">BBC UK feed news</a> for ex­am­ple) and then click the <em>ENTER</em> but­ton. Now you can con­nect to your local Cas­san­dra in­stance, for in­stance with <a href=\"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlsh.html\">cqlsh</a>, and find out how RSS feed data had been saved in the rss_reader key­space:</p><pre><code class=\"hljs language-sql\">cqlsh&gt; <span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> rss_reader.rss_by_user <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span>  ;\n\n login | rss_link\n<span class=\"hljs-comment\">-------+-----------------------------------------</span>\n Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml\n\n(1 rows)\ncqlsh&gt; <span class=\"hljs-keyword\">SELECT</span> description <span class=\"hljs-keyword\">FROM</span> rss_reader.articles_by_rss_link  <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span>;\n\n description\n<span class=\"hljs-comment\">-------------------------------------</span>\n BBC coverage of latest developments\n\n(1 rows)\n</code></pre><h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" class=\"heading-anchor\" href=\"#conclusion\"></a>Conclusion</h2><p>In this ar­ti­cle we fig­ured out how to im­ple­ment the first end­point of RSS-​reader app. If you have any prob­lems with com­plet­ing this step you can check­out to <code>step_2</code>, where you can find all changes made for com­plet­ing this step:</p><pre><code class=\"hljs language-better-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout step_2</span>\n</code></pre><p>Thanks for read­ing this. I hope you en­joyed read­ing this ar­ti­cle. See you soon on our <a href=\"https://gitter.im/eclipse-vertx/vertx-users\">Git­ter chan­nel</a>!</p>","scope":{}},"tfIdfTerms":[{"term":"feed","tf":12},{"term":"rss","tf":11},{"term":"cassandra","tf":8},{"term":"endpoint","tf":8},{"term":"run","tf":7},{"term":"first","tf":7},{"term":"method","tf":7},{"term":"start","tf":6},{"term":"link","tf":6},{"term":"will","tf":6},{"term":"implement","tf":6},{"term":"user","tf":5},{"term":"not","tf":5},{"term":"step","tf":5},{"term":"schema","tf":5},{"term":"initi","tf":5},{"term":"read","tf":4},{"term":"app","tf":4},{"term":"storag","tf":4},{"term":"articl","tf":4},{"term":"fetch","tf":4},{"term":"complet","tf":4},{"term":"tutori","tf":3},{"term":"find","tf":3},{"term":"look","tf":3}]}],"numPages":16},"__N_SSG":true}