{"pageProps":{"slug":"3.9.1/vertx-rx/js","title":"Vert.x for RxJS","toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_read_stream_support\">Read stream support</a></li>\n<li><a href=\"#_handler_support\">Handler support</a></li>\n<li><a href=\"#_future_support\">Future support</a></li>\n<li><a href=\"#_scheduler_support\">Scheduler support</a></li>\n<li><a href=\"#_examples\">Examples</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_eventbus_message_stream\">EventBus message stream</a></li>\n<li><a href=\"#_timers\">Timers</a></li>\n<li><a href=\"#_http_client_requests\">Http client requests</a></li>\n<li><a href=\"#_http_server_requests\">Http server requests</a></li>\n<li><a href=\"#_websocket_client\">Websocket client</a></li>\n<li><a href=\"#_websocket_server\">Websocket server</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for RxJS</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a> is a popular library for composing asynchronous and event\nbased programs using observable sequences for the JavaScript.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x integrates naturally with RxJS, allowing to use observable wherever you can use streams or asynchronous results.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x for RxJS comes as an extension for RxJS:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\"><span class=\"hljs-keyword\">var</span> Rx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rx.vertx\"</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It provides the <code>Rx</code> object we need for creating <code>Observable</code>, or other kind of Rx objects.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are using Maven or Gradle, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>{maven-groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>{maven-artifactId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{maven-version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile {maven-groupId}:{maven-artifactId}:{maven-version}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_read_stream_support\"><a class=\"anchor\" href=\"#_read_stream_support\"></a>Read stream support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RxJS observable is a perfect match for Vert.x read streams : both provide a flow of items.\nA read stream can be adapted to an observable with the <code>Rx.Observable.fromReadStream</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::read_stream.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handler_support\"><a class=\"anchor\" href=\"#_handler_support\"></a>Handler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>rx.vertx</code> module provides an <code>observableHandler</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::handler.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Rx can also turn an existing Observer into an handler:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::observer_to_handler.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_future_support\"><a class=\"anchor\" href=\"#_future_support\"></a>Future support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In Vert.x future objects are modelled as async result handlers and occur as last parameter of asynchronous methods.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>rx.vertx</code> module provides an <code>observableFuture</code> function:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::future.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Rx can also turn an existing Observer into an future:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::observer_to_future.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_scheduler_support\"><a class=\"anchor\" href=\"#_scheduler_support\"></a>Scheduler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RxJS relies on the default context method <em>timeout</em> and <em>interval</em> functions to schedule operations. The\nvertx-js integration implements such functions providing an out of the box scheduler support.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_examples\"><a class=\"anchor\" href=\"#_examples\"></a>Examples</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s study now a few examples of using Vert.x with RxJava.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_eventbus_message_stream\"><a class=\"anchor\" href=\"#_eventbus_message_stream\"></a>EventBus message stream</h3>\n<div class=\"paragraph\">\n<p>The event bus message consumer provides naturally an stream of messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::event_bus_messages.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The message consumer provides a stream of messages. The <code>Message#body()</code> method gives access to a new\n stream of message bodies if needed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::event_bus_bodies.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>RxJS map/reduce composition style can be then be used:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::event_bus_map_reduce.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_timers\"><a class=\"anchor\" href=\"#_timers\"></a>Timers</h3>\n<div class=\"paragraph\">\n<p>Timer task can be created with <code>Vertx#timerStream(long)</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::timer.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Periodic task can be created with <code>Vertx#periodicStream(long)</code>:</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_client_requests\"><a class=\"anchor\" href=\"#_http_client_requests\"></a>Http client requests</h3>\n<div class=\"paragraph\">\n<p>The HttpClientRequest provides a one shot callback with the\n<code>http.HttpClientResponse</code> object. The observable reports a request failure.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::http_client_request.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The response can be processed as an stream of buffer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::http_client_response.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_server_requests\"><a class=\"anchor\" href=\"#_http_server_requests\"></a>Http server requests</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#requestStream()</code> provides a callback for each incoming\nrequest:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::http_server_request.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>HttpServerRequest</code> can then be adapted to a buffer observable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::http_server_request_observable.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_client\"><a class=\"anchor\" href=\"#_websocket_client\"></a>Websocket client</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpClient#websocketStream</code> provides a single callback when the websocket connects, otherwise a failure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::websocket_client.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>WebSocket</code> can then be turned into an observable of buffer easily</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::websocket_client_buffer.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_server\"><a class=\"anchor\" href=\"#_websocket_server\"></a>Websocket server</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#websocketStream()</code> provides a callback for each incoming connection:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::websocket_server.js[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>ServerWebSocket</code> can be turned into a buffer observable easily:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-js\" data-lang=\"js\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - include::websocket_server_buffer.js[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}