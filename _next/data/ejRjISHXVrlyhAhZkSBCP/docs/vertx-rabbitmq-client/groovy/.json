{"pageProps":{"slug":"vertx-rabbitmq-client/groovy","title":"RabbitMQ Client for Vert.x","toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_getting_started\">Getting Started</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_maven\">Maven</a></li>\n<li><a href=\"#_gradle\">Gradle</a></li>\n<li><a href=\"#_create_a_client\">Create a client</a></li>\n<li><a href=\"#_declare_exchange_with_additional_config\">Declare exchange with additional config</a></li>\n<li><a href=\"#_declare_queue_with_additional_config\">Declare queue with additional config</a></li>\n</ul>\n</li>\n<li><a href=\"#_operations\">Operations</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_publish\">Publish</a></li>\n<li><a href=\"#_publish_with_confirm\">Publish with confirm</a></li>\n<li><a href=\"#_reliable_message_publishing\">Reliable Message Publishing</a></li>\n<li><a href=\"#_consume\">Consume</a></li>\n<li><a href=\"#_get\">Get</a></li>\n<li><a href=\"#_consume_messages_without_auto_ack\">Consume messages without auto-ack</a></li>\n</ul>\n</li>\n<li><a href=\"#_running_the_tests\">Running the tests</a></li>\n</ul>\n</div>","contents":"<h1>RabbitMQ Client for Vert.x</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A Vert.x client allowing applications to interact with a RabbitMQ broker (AMQP 0.9.1)</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>This service is experimental and the APIs are likely to change before settling down.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\">Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_maven\">Maven</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your maven project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-rabbitmq-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_gradle\">Gradle</h3>\n<div class=\"paragraph\">\n<p>Add the following dependency to your gradle project</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-rabbitmq-client:4.0.0.Beta1'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_a_client\">Create a client</h3>\n<div class=\"paragraph\">\n<p>You can create a client instance as follows using a full amqp uri:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> config = [:]\n<span class=\"hljs-comment\">// full amqp uri</span>\nconfig.uri = <span class=\"hljs-string\">\"amqp://xvjvsrrc:VbuL1atClKt7zVNQha0bnnScbNvGiqgb@moose.rmq.cloudamqp.com/xvjvsrrc\"</span>\n<span class=\"hljs-keyword\">def</span> client = RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or you can also specify individual parameters manually:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> config = [:]\n<span class=\"hljs-comment\">// Each parameter is optional</span>\n<span class=\"hljs-comment\">// The default parameter with be used if the parameter is not set</span>\nconfig.user = <span class=\"hljs-string\">\"user1\"</span>\nconfig.password = <span class=\"hljs-string\">\"password1\"</span>\nconfig.host = <span class=\"hljs-string\">\"localhost\"</span>\nconfig.port = <span class=\"hljs-number\">5672</span>\nconfig.virtualHost = <span class=\"hljs-string\">\"vhost1\"</span>\nconfig.connectionTimeout = <span class=\"hljs-number\">6000</span>\nconfig.requestedHeartbeat = <span class=\"hljs-number\">60</span>\nconfig.handshakeTimeout = <span class=\"hljs-number\">6000</span>\nconfig.requestedChannelMax = <span class=\"hljs-number\">5</span>\nconfig.networkRecoveryInterval = <span class=\"hljs-number\">500</span>\nconfig.automaticRecoveryEnabled = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-keyword\">def</span> client = RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set multiples addresses to connect to a cluster;</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> config = [:]\nconfig.user = <span class=\"hljs-string\">\"user1\"</span>\nconfig.password = <span class=\"hljs-string\">\"password1\"</span>\nconfig.virtualHost = <span class=\"hljs-string\">\"vhost1\"</span>\n\nconfig.addresses = [com.rabbitmq.client.Address.parseAddresses(<span class=\"hljs-string\">\"firstHost,secondHost:5672\"</span>)]\n\n<span class=\"hljs-keyword\">def</span> client = RabbitMQClient.create(vertx, config)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Reconnections</p>\n</div>\n<div class=\"paragraph\">\n<p>The RabbitMQClient will, by default, retry connecting to the RabbitMQ server if it cannot connect.\nIt will also attempt to reconnect whenever the connection to the RabbitMQ server becomes broken.\nThe failure of a connection could be caused by a transient network failure (where the client would probably connect back to the same RabbitMQ server) or it could be caused by a failover scenario.</p>\n</div>\n<div class=\"paragraph\">\n<p>The reconnection policy can be configured by setting the connectionRetries and connectionRetryDelay properties in the configuration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">RabbitMQOptions config = <span class=\"hljs-keyword\">new</span> RabbitMQOptions();\noptions.setConnectionRetries(Integer.MAX_VALUE);\noptions.setConnectionRetryDelay(<span class=\"hljs-number\">500</span>);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As soon as the connection has been re-established users of the client may attempt to publish (or consume) messages.\nHowever, if the connection is to a new RabbitMQ server it is possible that objects created through this RabbitMQClient won&#8217;t exist,. i.e. when exchanges and queues are created through the RabbitMQClient on startup.\nTo provide an opportunity to create these objects before the connection is considered ready the RabbitMQClient provides the ConnectionEstablishedCallback.\nThe ConnectionEstablishedCallback can be used to carry out any operations on the RabbitMQClient before other users (including the RabbitMQConsumer and RabbitMQPublisher) are able to access it.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = RabbitMQClient.create(vertx, config)\nclient.addConnectionEstablishedCallback({ promise -&gt;\n  client.exchangeDeclare(<span class=\"hljs-string\">\"exchange\"</span>, <span class=\"hljs-string\">\"fanout\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>).compose({ v -&gt;\n    <span class=\"hljs-keyword\">return</span> client.queueDeclare(<span class=\"hljs-string\">\"queue\"</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>)\n  }).compose({ declareOk -&gt;\n    <span class=\"hljs-keyword\">return</span> client.queueBind(declareOk.getQueue(), <span class=\"hljs-string\">\"exchange\"</span>, <span class=\"hljs-string\">\"\"</span>)\n  }).onComplete(promise)\n})\n\n<span class=\"hljs-comment\">// At this point the exchange, queue and binding will have been declared even if the client connects to a new server</span>\nclient.basicConsumer(<span class=\"hljs-string\">\"queue\"</span>, { rabbitMQConsumerAsyncResult -&gt;\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If a RabbitMQConsumer is listening for messages on an auto-delete server-named queue and the broker restarts the queue will have been removed by the time the client reconnects.\nIn this instance it is necessary to both recreate the queue and set the new queue name on the RabbitMQConsumer.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> client = RabbitMQClient.create(vertx, config)\n<span class=\"hljs-keyword\">def</span> consumer = <span class=\"hljs-keyword\">new</span> java.util.concurrent.atomic.AtomicReference()\n<span class=\"hljs-keyword\">def</span> queueName = <span class=\"hljs-keyword\">new</span> java.util.concurrent.atomic.AtomicReference()\nclient.addConnectionEstablishedCallback({ promise -&gt;\n  client.exchangeDeclare(<span class=\"hljs-string\">\"exchange\"</span>, <span class=\"hljs-string\">\"fanout\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>).compose({ v -&gt;\n    client.queueDeclare(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>)\n  }).compose({ dok -&gt;\n    queueName.set(dok.getQueue())\n    <span class=\"hljs-comment\">// The first time this runs there will be no existing consumer</span>\n    <span class=\"hljs-comment\">// on subsequent connections the consumer needs to be update with the new queue name</span>\n    <span class=\"hljs-keyword\">def</span> currentConsumer = consumer.get()\n    <span class=\"hljs-keyword\">if</span> (currentConsumer != <span class=\"hljs-literal\">null</span>) {\n      currentConsumer.setQueueName(queueName.get())\n    }\n    <span class=\"hljs-keyword\">return</span> client.queueBind(queueName.get(), <span class=\"hljs-string\">\"exchange\"</span>, <span class=\"hljs-string\">\"\"</span>)\n  }).onComplete(promise)\n})\n\nclient.start().onSuccess({ v -&gt;\n  <span class=\"hljs-comment\">// At this point the exchange, queue and binding will have been declared even if the client connects to a new server</span>\n  client.basicConsumer(queueName.get(), { rabbitMQConsumerAsyncResult -&gt;\n    <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult.succeeded()) {\n      consumer.set(rabbitMQConsumerAsyncResult.result())\n    }\n  })\n}).onFailure({ ex -&gt;\n  println(<span class=\"hljs-string\">\"It went wrong: ${ex.getMessage()}\"</span>)\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_exchange_with_additional_config\">Declare exchange with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQ&#8217;s exchangeDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> config = [:]\n\nconfig.x-dead-letter-exchange = <span class=\"hljs-string\">\"my.deadletter.exchange\"</span>\nconfig.alternate-exchange = <span class=\"hljs-string\">\"my.alternate.exchange\"</span>\n<span class=\"hljs-comment\">// ...</span>\nclient.exchangeDeclare(<span class=\"hljs-string\">\"my.exchange\"</span>, <span class=\"hljs-string\">\"fanout\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, config, { onResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (onResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"Exchange successfully declared with config\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    onResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_declare_queue_with_additional_config\">Declare queue with additional config</h3>\n<div class=\"paragraph\">\n<p>You can pass additional config parameters to RabbitMQs queueDeclare method</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> config = [:]\nconfig.x-message-ttl = <span class=\"hljs-number\">10000</span>L\n\nclient.queueDeclare(<span class=\"hljs-string\">\"my-queue\"</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, config, { queueResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (queueResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"Queue declared!\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    System.err.println(<span class=\"hljs-string\">\"Queue failed to be declared!\"</span>)\n    queueResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_operations\">Operations</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following are some examples of the operations supported by the RabbitMQService API.\nConsult the javadoc/documentation for detailed information on all API methods.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish\">Publish</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> message = Buffer.buffer(<span class=\"hljs-string\">\"body\"</span>, <span class=\"hljs-string\">\"Hello RabbitMQ, from Vert.x !\"</span>)\nclient.basicPublish(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"my.queue\"</span>, message, { pubResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (pubResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"Message published !\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    pubResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish_with_confirm\">Publish with confirm</h3>\n<div class=\"paragraph\">\n<p>Publish a message to a queue and confirm the broker acknowledged it.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> message = Buffer.buffer(<span class=\"hljs-string\">\"body\"</span>, <span class=\"hljs-string\">\"Hello RabbitMQ, from Vert.x !\"</span>)\n\n<span class=\"hljs-comment\">// Put the channel in confirm mode. This can be done once at init.</span>\nclient.confirmSelect({ confirmResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (confirmResult.succeeded()) {\n    client.basicPublish(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"my.queue\"</span>, message, { pubResult -&gt;\n      <span class=\"hljs-keyword\">if</span> (pubResult.succeeded()) {\n        <span class=\"hljs-comment\">// Check the message got confirmed by the broker.</span>\n        client.waitForConfirms({ waitResult -&gt;\n          <span class=\"hljs-keyword\">if</span> (waitResult.succeeded()) {\n            println(<span class=\"hljs-string\">\"Message published !\"</span>)} <span class=\"hljs-keyword\">else</span> {\n            waitResult.cause().printStackTrace()}\n        })\n      } <span class=\"hljs-keyword\">else</span> {\n        pubResult.cause().printStackTrace()\n      }\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    confirmResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_reliable_message_publishing\">Reliable Message Publishing</h3>\n<div class=\"paragraph\">\n<p>In order to reliably publish messages to RabbitMQ it is necessary to handle confirmations that each message has been accepted by the server.\nThe simplest approach to confirmations is to use the basicPublishWithConfirm approach, above, which synchronously confirms each message when it is sent - blocking the publishing channel until the confirmation is received.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to achieve greater throughput RabbitMQ provides asynchronous confirmations.\nThe asynchronous confirmations can confirm multiple messages in one go, so it is necessary for the client to track all messages in the order that they were published.\nAlso, until messages are confirmed by the server it may be necessary to resend them, so they must be retained by the client.</p>\n</div>\n<div class=\"paragraph\">\n<p>The RabbitMQPublisher class implements a standard approach to handling asynchronous confirmations, avoiding much of the boiler plate code that would otherwise be required.</p>\n</div>\n<div class=\"paragraph\">\n<p>The RabbitMQPublisher works by:\n* Adding all sent messages to an internal queue.\n* Sending messages from the queue when it is able, keeping track of these messages pending acknowledgement in a separate queue.\n* Handling asynchronous confirmations from RabbitMQ, removing messages from the pendingAck queue once they are confirmed.\n* Notifying the caller for each message that is confirmed (this is always a single message at a time, not the bulk confirmation used by RabbitMQ).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Delivery Tags</p>\n</div>\n<div class=\"paragraph\">\n<p>This section is an implementation detail that is useful for anyone that wants to implement their own alternative to RabbitMQPublisher.</p>\n</div>\n<div class=\"paragraph\">\n<p>For the RabbitMQPublisher to work it has to know the delivery tag that RabbitMQ will use for each message published.\nThe confirmations from RabbitMQ can arrive at the client before the call to basicPublish has completed, so it is not possible to identify the delivery tag via anything returned by basicPublish if asynchronous confirmations are being used.\nFor this reason it is necessary for the RabbitMQClient to tell the RabbitMQPublisher the delivery tag of each message via a separate callback that occurs in the call to RabbitMQClient::basicPublish before the message is actually sent on the network.\nIt is also possible for the delivery tag of a single message to change (delivery tags are per-channel, so if the message is resent following a reconnection it will have a new delivery tag) - this means that we cannot use a Future to inform the client of the delivery tag.\nIf the deliveryTagHandler is called more than once for a given message it is always safe to ignore the previous value - there can be only one valid delivery tag for a message at any time.</p>\n</div>\n<div class=\"paragraph\">\n<p>To capture the delivery tag one of the RabbitMqClient::basicPublishWithDeliveryTag methods should be used.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">basicPublishWithDeliveryTag</span><span class=\"hljs-params\">(String exchange, String routingKey, BasicProperties properties, Buffer body, Handler&lt;Long&gt; deliveryTagHandler, Handler&lt;AsyncResult&lt;Void&gt;&gt; resultHandler)</span></span>;\n <span class=\"hljs-function\">Future&lt;Void&gt; <span class=\"hljs-title\">basicPublishWithDeliveryTag</span><span class=\"hljs-params\">(String exchange, String routingKey, BasicProperties properties, Buffer body, @Nullable Handler&lt;Long&gt; deliveryTagHandler)</span></span>;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>These methods</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume\">Consume</h3>\n<div class=\"paragraph\">\n<p>Consume messages from a queue.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Create a stream of messages from a queue</span>\nclient.basicConsumer(<span class=\"hljs-string\">\"my.queue\"</span>, { rabbitMQConsumerAsyncResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"RabbitMQ consumer created !\"</span>)\n    <span class=\"hljs-keyword\">def</span> mqConsumer = rabbitMQConsumerAsyncResult.result()\n    mqConsumer.handler({ message -&gt;\n      println(<span class=\"hljs-string\">\"Got message: ${message.body().toString()}\"</span>)\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At any moment of time you can pause or resume the stream. When stream is paused you won&#8217;t receive any message.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">consumer.pause()\nconsumer.resume()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are actually a set of options to specify when creating a consumption stream.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>QueueOptions</code> lets you specify:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>The size of internal queue with <code>setMaxInternalQueueSize</code></p>\n</li>\n<li>\n<p>Should the stream keep more recent messages when queue size is exceed with <code>setKeepMostRecent</code></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> options = [\n<span class=\"hljs-symbol\">  maxInternalQueueSize:</span><span class=\"hljs-number\">1000</span>,\n<span class=\"hljs-symbol\">  keepMostRecent:</span><span class=\"hljs-literal\">true</span>\n]\n\nclient.basicConsumer(<span class=\"hljs-string\">\"my.queue\"</span>, options, { rabbitMQConsumerAsyncResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (rabbitMQConsumerAsyncResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"RabbitMQ consumer created !\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    rabbitMQConsumerAsyncResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you want to stop consuming message from a queue, you can do:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rabbitMQConsumer.cancel({ cancelResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (cancelResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"Consumption successfully stopped\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Tired in attempt to stop consumption\"</span>)\n    cancelResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can get notified by the end handler when the queue won&#8217;t process any more messages:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">rabbitMQConsumer.endHandler({ v -&gt;\n  println(<span class=\"hljs-string\">\"It is the end of the stream\"</span>)\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can set the exception handler to be notified of any error that may occur when a message is processed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">consumer.exceptionHandler({ e -&gt;\n  println(<span class=\"hljs-string\">\"An exception occurred in the process of message handling\"</span>)\n  e.printStackTrace()\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And finally, you may want to retrive a related to the consumer tag:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> consumerTag = consumer.consumerTag()\nprintln(<span class=\"hljs-string\">\"Consumer tag is: ${consumerTag}\"</span>)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get\">Get</h3>\n<div class=\"paragraph\">\n<p>Will get a message from a queue</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.basicGet(<span class=\"hljs-string\">\"my.queue\"</span>, <span class=\"hljs-literal\">true</span>, { getResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (getResult.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> msg = getResult.result()\n    println(<span class=\"hljs-string\">\"Got message: ${msg.body()}\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    getResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_consume_messages_without_auto_ack\">Consume messages without auto-ack</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Setup the rabbitmq consumer</span>\nclient.basicConsumer(<span class=\"hljs-string\">\"my.queue\"</span>, [\n<span class=\"hljs-symbol\">  autoAck:</span><span class=\"hljs-literal\">false</span>\n], { consumeResult -&gt;\n  <span class=\"hljs-keyword\">if</span> (consumeResult.succeeded()) {\n    println(<span class=\"hljs-string\">\"RabbitMQ consumer created !\"</span>)\n    <span class=\"hljs-keyword\">def</span> consumer = consumeResult.result()\n\n    <span class=\"hljs-comment\">// Set the handler which messages will be sent to</span>\n    consumer.handler({ msg -&gt;\n      <span class=\"hljs-keyword\">def</span> json = msg.body()\n      println(<span class=\"hljs-string\">\"Got message: ${json.body}\"</span>)\n      <span class=\"hljs-comment\">// ack</span>\n      client.basicAck(json.deliveryTag, <span class=\"hljs-literal\">false</span>, { asyncResult -&gt;\n      })\n    })\n  } <span class=\"hljs-keyword\">else</span> {\n    consumeResult.cause().printStackTrace()\n  }\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_running_the_tests\">Running the tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You will need to have RabbitMQ installed and running with default ports on localhost for this to work.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}