{"pageProps":{"slug":"vertx-web-validation/groovy","title":"Vert.x Web Validation","toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_using_vert_x_web_validation\">Using Vert.x Web Validation</a></li>\n<li><a href=\"#_without_vert_x_web_validation\">Without Vert.x Web Validation</a></li>\n<li><a href=\"#_creating_the_validationhandler\">Creating the <code>ValidationHandler</code></a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_defining_parameters\">Defining parameters</a></li>\n<li><a href=\"#_defining_request_bodies\">Defining request bodies</a></li>\n<li><a href=\"#_defining_request_predicates\">Defining request predicates</a></li>\n<li><a href=\"#_building_the_validationhandler\">Building the <code>ValidationHandler</code></a></li>\n</ul>\n</li>\n<li><a href=\"#_using_the_parsed_parameters_and_body\">Using the parsed parameters and body</a></li>\n<li><a href=\"#_manage_the_failures\">Manage the failures</a></li>\n</ul>\n</div>","contents":"<h1>Vert.x Web Validation</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vert.x Web Validation helps you parse and validate parameters and bodies of the incoming requests.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Parse and validate request parameters, serialized and exploded too</p>\n</li>\n<li>\n<p>Parse and validate request bodies, including json and forms</p>\n</li>\n<li>\n<p>Configure request predicates</p>\n</li>\n<li>\n<p>Allow different bodies in the same route and consistently parse and validate it</p>\n</li>\n<li>\n<p>Define custom rules to parse and validate</p>\n</li>\n<li>\n<p>Manage the parsing and validation failures</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>It uses <a href=\"https://vertx.io/docs/vertx-json-schema/groovy/\">Vert.x Json Schema</a> to define schemas of your request parameters/bodies.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_vert_x_web_validation\">Using Vert.x Web Validation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use Vert.x Web Validation, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-web-validation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-web-validation:4.0.0.Beta1'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_without_vert_x_web_validation\">Without Vert.x Web Validation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you receive an HTTP request, you usually need to perform parsing and validation of parameters and body of the request:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x Web Validation provides an easy to use API to build an handler that performs parsing and validation of the request:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_the_validationhandler\">Creating the <code>ValidationHandler</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This module provides an easy to use builder API to create your <code><a href=\"../../apidocs/io/vertx/ext/web/validation/ValidationHandler.html\">ValidationHandler</a></code>, the <code><a href=\"../../apidocs/io/vertx/core/Handler.html\">Handler</a></code> that performs the parsing and validation of the request.\nTo create this builder use <code><a href=\"../../apidocs/io/vertx/ext/web/validation/ValidationHandler.html#builder-io.vertx.ext.json.schema.SchemaParser-\">ValidationHandler.builder</a></code>.\nThe provided <code><a href=\"../../apidocs/io/vertx/ext/json/schema/SchemaParser.html\">SchemaParser</a></code> will be used to parse all schemas created with <a href=\"https://vertx.io/docs/vertx-json-schema/groovy/\">Vert.x Json Schema DSL</a></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_defining_parameters\">Defining parameters</h3>\n<div class=\"paragraph\">\n<p>You can define parameters located in four different locations of your request: query, cookie, header, path.</p>\n</div>\n<div class=\"paragraph\">\n<p>Every parameter is represented by a <code><a href=\"../../apidocs/io/vertx/ext/web/validation/impl/parameter/ParameterProcessor.html\">ParameterProcessor</a></code>,\nthat you can easily create with methods provided in <code><a href=\"../../apidocs/io/vertx/ext/web/validation/builder/Parameters.html\">Parameters</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note that all these methods requires a schema that validator can use to perform the validation. The schema is also used to infer the correct parser</p>\n</div>\n<div class=\"paragraph\">\n<p>While header and path parameters allows only simple parameters, query and cookie allows complex parameters like exploded and deep object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more info on all available parameters, look at <code><a href=\"../../apidocs/io/vertx/ext/web/validation/builder/Parameters.html\">Parameters</a></code> documentation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_defining_request_bodies\">Defining request bodies</h3>\n<div class=\"paragraph\">\n<p>Every body type is represented by a <code><a href=\"../../apidocs/io/vertx/ext/web/validation/impl/parameter/ParameterProcessor.html\">ParameterProcessor</a></code>\nand matches with request body using <code>Content-type</code> header.\nYou can define one or multiple bodies that the <code>ValidationHandler</code> should manage.\nIf no matching body processor is found, the validation <strong>won&#8217;t</strong> fail unless you specified the body required predicate explained below</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily create these processor with methods provided in <code><a href=\"../../apidocs/io/vertx/ext/web/validation/builder/Bodies.html\">Bodies</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this example the <code>ValidationHandler</code> will be able to manage two different body types that consistently parse and validate.\nIn particular the form body will be converted to a json object. When you retrieve the parsed result, you don&#8217;t need to care\nif the request body was a form or a json</p>\n</div>\n<div class=\"paragraph\">\n<p>For more info on all available body processors, look at <code><a href=\"../../apidocs/io/vertx/ext/web/validation/builder/Bodies.html\">Bodies</a></code> documentation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_defining_request_predicates\">Defining request predicates</h3>\n<div class=\"paragraph\">\n<p>You can define request predicates in <code>ValidationHandler</code> with <code><a href=\"../../apidocs/io/vertx/ext/web/validation/RequestPredicate.html\">RequestPredicate</a></code>.\nFor example, to define a \"request body required\" predicate:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">ValidationHandler.builder(schemaParser).predicate(RequestPredicate.BODY_REQUIRED)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_building_the_validationhandler\">Building the <code>ValidationHandler</code></h3>\n<div class=\"paragraph\">\n<p>After you configured all parameters, bodies and request predicates, you can build the <code>ValidationHandler</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">router.get(<span class=\"hljs-string\">\"/user\"</span>).handler(ValidationHandler.builder(schemaParser).build())</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_the_parsed_parameters_and_body\">Using the parsed parameters and body</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>ValidationHandler</code> will place the parsed values into <code><a href=\"../../apidocs/io/vertx/ext/web/RoutingContext.html\">RoutingContext</a></code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_manage_the_failures\">Manage the failures</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Every time a <code>ValidationHandler</code> encounters both a parsing or a validation failure, it fails the <code>RoutingContext</code> with 400 status code and\nan instance of a subclass of <code><a href=\"../../apidocs/io/vertx/ext/web/validation/BadRequestException.html\">BadRequestException</a></code> as cause.\nTo learn how to manage failures, look at <a href=\"https://vertx.io/docs/vertx-web/java/#_error_handling\">Vert.x Web doc</a> and <code><a href=\"../../apidocs/io/vertx/ext/web/Router.html#errorHandler-int-io.vertx.core.Handler-\">errorHandler</a></code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>The possible subclasses of <code><a href=\"../../apidocs/io/vertx/ext/web/validation/BadRequestException.html\">BadRequestException</a></code> are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/validation/ParameterProcessorException.html\">ParameterProcessorException</a></code>: To manage a parameter failure</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/validation/BodyProcessorException.html\">BodyProcessorException</a></code>: To manage a body failure</p>\n</li>\n<li>\n<p><code><a href=\"../../apidocs/io/vertx/ext/web/validation/RequestPredicateException.html\">RequestPredicateException</a></code>: To manage a request predicate failure</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">router.errorHandler(<span class=\"hljs-number\">400</span>, { routingContext -&gt;\n  <span class=\"hljs-keyword\">if</span> (routingContext.failure() <span class=\"hljs-keyword\">instanceof</span> io.vertx.ext.web.validation.BadRequestException) {\n    <span class=\"hljs-keyword\">if</span> (routingContext.failure() <span class=\"hljs-keyword\">instanceof</span> io.vertx.ext.web.validation.ParameterProcessorException) {\n      <span class=\"hljs-comment\">// Something went wrong while parsing/validating a parameter</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (routingContext.failure() <span class=\"hljs-keyword\">instanceof</span> io.vertx.ext.web.validation.BodyProcessorException) {\n      <span class=\"hljs-comment\">// Something went wrong while parsing/validating the body</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (routingContext.failure() <span class=\"hljs-keyword\">instanceof</span> io.vertx.ext.web.validation.RequestPredicateException) {\n      <span class=\"hljs-comment\">// A request predicate is unsatisfied</span>\n    }\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>BadRequestException</code> also provides an handy method called <code><a href=\"../../apidocs/io/vertx/ext/web/validation/BadRequestException.html#toJson--\">toJson</a></code> that converts the exception to a Json</p>\n</div>\n<div class=\"paragraph\">\n<p>Note that the <code>ValidationHandler</code> is designed as <em>fail-fast</em>, so as soon as an error is encountered, the <code>ValidationHandler</code> will fail the <code>RoutingContext</code></p>\n</div>\n</div>\n</div>"},"__N_SSG":true}