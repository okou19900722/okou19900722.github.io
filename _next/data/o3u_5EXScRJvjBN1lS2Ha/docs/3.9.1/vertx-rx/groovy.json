{"pageProps":{"slug":"3.9.1/vertx-rx/groovy","title":"Vert.x for RxGroovy","toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_read_stream_support\">Read stream support</a></li>\n<li><a href=\"#_handler_support\">Handler support</a></li>\n<li><a href=\"#_async_result_support\">Async result support</a></li>\n<li><a href=\"#_scheduler_support\">Scheduler support</a></li>\n<li><a href=\"#_json_unmarshalling\">Json unmarshalling</a></li>\n<li><a href=\"#_marshall_other_dataformats\">Marshall other dataformats</a></li>\n<li><a href=\"#_api_examples\">Api examples</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_eventbus_message_stream\">EventBus message stream</a></li>\n<li><a href=\"#_timers\">Timers</a></li>\n<li><a href=\"#_http_client_requests\">Http client requests</a></li>\n<li><a href=\"#_http_server_requests\">Http server requests</a></li>\n<li><a href=\"#_websocket_client\">Websocket client</a></li>\n<li><a href=\"#_websocket_server\">Websocket server</a></li>\n</ul>\n</li>\n</ul>\n</div>","contents":"<h1>Vert.x for RxGroovy</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> is a popular library for composing asynchronous and event\nbased programs using observable sequences for the Java VM. <a href=\"https://github.com/ReactiveX/RxGroovy\">RxGroovy</a>\nis the Reactive Extensions for Groovy. This adaptor allows <code>groovy.lang.Closure</code> functions to be used\nand RxJava will know how to invoke them.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x integrates naturally with RxGroovy, allowing to use observable wherever you can use streams or asynchronous results.</p>\n</div>\n<div class=\"paragraph\">\n<p>To use vert.x API for RxGroovy, add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>{maven-groupId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>{maven-artifactId}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>{maven-version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">compile {maven-groupId}:{maven-artifactId}:{maven-version}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_read_stream_support\"><a class=\"anchor\" href=\"#_read_stream_support\"></a>Read stream support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>RxJava observable is a perfect match for Vert.x <code>ReadStream</code> class : both provide a flow of items.</p>\n</div>\n<div class=\"paragraph\">\n<p>Vert.x API for Groovy provides <code>io.vertx.groovy.core.stream.ReadStream</code> objects, the RxGroovy provides a\nGroovy extension module that adds the <code>toObservable</code> method to the read stream class.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:readStream.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_handler_support\"><a class=\"anchor\" href=\"#_handler_support\"></a>Handler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The RxJava <code>io.vertx.ext.rx.java.RxHelper</code> should be used to:\n- create an <code>io.vertx.ext.rx.java.ObservableHandler</code>,\n- transform actions to an handler</p>\n</div>\n<div class=\"paragraph\">\n<p>The RxGroovy extension module adds the <code>toHandler</code> method on the <code>rx.Observer</code> class:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:toHandler.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_async_result_support\"><a class=\"anchor\" href=\"#_async_result_support\"></a>Async result support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In Vert.x future objects are modelled as async result handlers and occur as last parameter of asynchronous methods.</p>\n</div>\n<div class=\"paragraph\">\n<p>The RxGroovy extension module adds the <code>toFuture</code> method on the <code>rx.Observer</code> class:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:toFuture.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_scheduler_support\"><a class=\"anchor\" href=\"#_scheduler_support\"></a>Scheduler support</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The reactive extension sometimes needs to schedule actions, for instance <code>Observable#timer</code> create and returns\na timer that emit periodic events. By default, scheduled actions are managed by RxJava, it means that the\ntimer thread are not Vert.x threads and therefore not executing in a Vert.x event loop.</p>\n</div>\n<div class=\"paragraph\">\n<p>When an RxJava method deals with a scheduler, it accepts an overloaded method accepting an extra <code>Rx.Scheduler</code>,\nthe RxGroovy extension module adds to the <code>Vertx</code> class the <code>scheduler()</code> method will return a scheduler that can be used in such places.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:scheduler.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For blocking scheduled actions, a scheduler can be created with the <code>blockingScheduler</code> method:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:blockingScheduler.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>RxJava can also be configured to use a scheduler by default, the returned scheduler hook uses a blocking\nscheduler for IO actions:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:defaultScheduler.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_json_unmarshalling\"><a class=\"anchor\" href=\"#_json_unmarshalling\"></a>Json unmarshalling</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>io.vertx.rx.groovy.RxHelper#unmarshaller(java.lang.Class)}</code> creates an <code>rx.Observable.Operator</code> that\ntransforms an <code>Observable&lt;Buffer&gt;</code> in json format into an object observable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:unmarshaller.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_marshall_other_dataformats\"><a class=\"anchor\" href=\"#_marshall_other_dataformats\"></a>Marshall other dataformats</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The <code>io.vertx.rx.groovy.RxHelper#unmarshaller(java.lang.Class, ObjectMapper)}</code> creates an <code>rx.Observable.Operator</code> that\ntransforms an <code>Observable&lt;Buffer&gt;</code> in a format the mapper can parse  into an object observable.</p>\n</div>\n<div class=\"paragraph\">\n<p>Include the appropriate dependency from here: <a href=\"https://github.com/FasterXML/jackson-dataformats-text\">jackson-dataformats-text</a></p>\n</div>\n<div class=\"paragraph\">\n<p>In order to use it to parse YAML you can do the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:unmarhsallYaml.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_api_examples\"><a class=\"anchor\" href=\"#_api_examples\"></a>Api examples</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s study now a few examples of using Vert.x with RxJava.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_eventbus_message_stream\"><a class=\"anchor\" href=\"#_eventbus_message_stream\"></a>EventBus message stream</h3>\n<div class=\"paragraph\">\n<p>The event bus <code>MessageConsumer</code> provides naturally an <code>Observable&lt;Message&lt;T&gt;&gt;</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:eventBusMessages.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>MessageConsumer</code> provides a stream of <code>Message</code>.\nThe <code>Message#body()</code> gives access to a new stream of message bodies if needed:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:eventBusBodies.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>RxJava map/reduce composition style can be then be used:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:eventBusMapReduce.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_timers\"><a class=\"anchor\" href=\"#_timers\"></a>Timers</h3>\n<div class=\"paragraph\">\n<p>Timer task can be created with <code>Vertx#timerStream(long)</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:timer.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Periodic task can be created with <code>Vertx#periodicStream(long)</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:periodic.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The observable can be cancelled with an unsubscription:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:periodicUnsubscribe.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_client_requests\"><a class=\"anchor\" href=\"#_http_client_requests\"></a>Http client requests</h3>\n<div class=\"paragraph\">\n<p><code>HttpClientRequest#toObservable()</code> provides a one shot callback with the <code>HttpClientResponse</code>}\n object. The observable reports a request failure.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpClientRequest.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre> The response can be processed as an `Observable&lt;Buffer&gt;` with the\n`HttpClientResponse#toObservable()` method:</pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpClientResponse.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The same flow can be achieved with the <code>flatMap</code> operation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpClientResponseFlatMap.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We can also unmarshall the <code>Observable&lt;Buffer&gt;</code> into an object using the {@link io.vertx.rx.groovy.RxHelpe.RxHelper#unmarshaller(java.lang.Class)}\nstatic method. This method creates an <code>Rx.Observable.Operator</code> unmarshalling buffers to an object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpClientResponseFlatMapUnmarshall.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_http_server_requests\"><a class=\"anchor\" href=\"#_http_server_requests\"></a>Http server requests</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#requestStream()</code> provides a callback for each incoming request:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpServerRequest.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>HttpServerRequest</code> can then be adapted to an <code>Observable&lt;Buffer&gt;</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpServerRequestObservable.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>io.vertx.rx.groovy.RxHelpe.RxHelper#unmarshaller(java.lang.Class)}</code> can be used to parse and map a json request to an object:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:httpServerRequestObservableUnmarshall.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_client\"><a class=\"anchor\" href=\"#_websocket_client\"></a>Websocket client</h3>\n<div class=\"paragraph\">\n<p>The`HttpClient#websocketStream`} provides a single callback when the websocket connects, otherwise a failure:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:websocketClient.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>WebSocket</code> can then be turned into an <code>Observable&lt;Buffer&gt;</code> easily</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:websocketClientBuffer.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_websocket_server\"><a class=\"anchor\" href=\"#_websocket_server\"></a>Websocket server</h3>\n<div class=\"paragraph\">\n<p>The <code>HttpServer#websocketStream()</code> provides a callback for each incoming connection:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:websocketServer.groovy[tags=example]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>ServerWebSocket</code> can be turned into an <code>Observable&lt;Buffer&gt;</code> easily:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Unresolved directive <span class=\"hljs-keyword\">in</span> &lt;stdin&gt; - <span class=\"hljs-string\">include:</span>:websocketServerBuffer.groovy[tags=example]</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","version":"3.9.1"},"__N_SSG":true}