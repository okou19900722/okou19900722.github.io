{"pageProps":{"slug":"vertx-db2-client/groovy","title":"Reactive DB2 Client","toc":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_usage\">Usage</a></li>\n<li><a href=\"#_getting_started\">Getting started</a></li>\n<li><a href=\"#_connecting_to_db2\">Connecting to DB2</a></li>\n<li><a href=\"#_configuration\">Configuration</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_data_object\">data object</a></li>\n<li><a href=\"#_connection_uri\">connection uri</a></li>\n</ul>\n</li>\n<li><a href=\"#_db2_type_mapping\">DB2 type mapping</a></li>\n<li><a href=\"#_using_java_enum_types\">Using Java enum types</a></li>\n<li><a href=\"#_collector_queries\">Collector queries</a></li>\n<li><a href=\"#_using_ssltls\">Using SSL/TLS</a></li>\n<li><a href=\"#_using_a_proxy\">Using a proxy</a></li>\n</ul>\n</div>","contents":"<h1>Reactive DB2 Client</h1>\n\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The Reactive DB2 Client is a client for DB2 with a straightforward API focusing on\nscalability and low overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p>The client is reactive and non blocking, allowing to handle many database connections with a single thread.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Features</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Support for DB2 on Linux, Unix, and Windows</p>\n</li>\n<li>\n<p>Limited support for DB2 on z/OS</p>\n</li>\n<li>\n<p>Event driven</p>\n</li>\n<li>\n<p>Lightweight</p>\n</li>\n<li>\n<p>Built-in connection pooling</p>\n</li>\n<li>\n<p>Prepared queries caching</p>\n</li>\n<li>\n<p>Batch and cursor</p>\n</li>\n<li>\n<p>Row streaming</p>\n</li>\n<li>\n<p>RxJava 1 and RxJava 2</p>\n</li>\n<li>\n<p>Direct memory to object without unnecessary copies</p>\n</li>\n<li>\n<p>Java 8 Date and Time</p>\n</li>\n<li>\n<p>SSL/TLS</p>\n</li>\n<li>\n<p>HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy support</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><strong>Current limitations</strong></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>No stored procedures support</p>\n</li>\n<li>\n<p>Some column types (e.g. BLOB and CLOB) are not supported</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\"><a class=\"anchor\" href=\"#_usage\"></a>Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To use the Reactive DB2 Client add the following dependency to the <em>dependencies</em> section of your build descriptor:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Maven (in your <code>pom.xml</code>):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.vertx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>vertx-lang-groovy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.0.0.Beta1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Gradle (in your <code>build.gradle</code> file):</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">dependencies {\n compile <span class=\"hljs-string\">'io.vertx:vertx-lang-groovy:4.0.0.Beta1'</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\"><a class=\"anchor\" href=\"#_getting_started\"></a>Getting started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Here is the simplest way to connect, query and disconnect</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50000</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the client pool</span>\n<span class=\"hljs-keyword\">def</span> client = DB2Pool.pool(connectOptions, poolOptions)\n\n<span class=\"hljs-comment\">// A simple query</span>\nclient.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>).execute({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> result = ar.result()\n    println(<span class=\"hljs-string\">\"Got ${result.size()} rows \"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n\n  <span class=\"hljs-comment\">// Now close the pool</span>\n  client.close()\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_connecting_to_db2\"><a class=\"anchor\" href=\"#_connecting_to_db2\"></a>Connecting to DB2</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Most of the time you will use a pool to connect to DB2:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50000</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = DB2Pool.pool(connectOptions, poolOptions)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The pooled client uses a connection pool and any operation will borrow a connection from the pool\nto execute the operation and release it to the pool.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are running with Vert.x you can pass it your Vertx instance:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50000</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = DB2Pool.pool(vertx, connectOptions, poolOptions)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You need to release the pool when you don&#8217;t need it anymore:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Close the pool and all the associated resources</span>\npool.close()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you need to execute several operations on the same connection, you need to use a client\n<code><a href=\"../../apidocs/io/vertx/db2client/DB2Connection.html\">connection</a></code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can easily get one from the pool:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connect options</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50000</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pooled client</span>\n<span class=\"hljs-keyword\">def</span> client = DB2Pool.pool(vertx, connectOptions, poolOptions)\n\n<span class=\"hljs-comment\">// Get a connection from the pool</span>\nclient.getConnection().compose({ conn -&gt;\n  println(<span class=\"hljs-string\">\"Got a connection from the pool\"</span>)\n\n  <span class=\"hljs-comment\">// All operations execute on the same connection</span>\n  <span class=\"hljs-keyword\">return</span> conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='julien'\"</span>).execute().compose({ res -&gt;\n    conn.query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE id='emad'\"</span>).execute()\n  }).onComplete({ ar -&gt;\n    <span class=\"hljs-comment\">// Release the connection to the pool</span>\n    conn.close()\n  })\n}).onComplete({ ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n\n    println(<span class=\"hljs-string\">\"Done\"</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Something went wrong ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once you are done with the connection you must close it to release it to the pool, so it can be reused.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_configuration\"><a class=\"anchor\" href=\"#_configuration\"></a>Configuration</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several alternatives for you to configure the client.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_data_object\"><a class=\"anchor\" href=\"#_data_object\"></a>data object</h3>\n<div class=\"paragraph\">\n<p>A simple way to configure the client is to specify a <code>DB2ConnectOptions</code> data object.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Data object</span>\n<span class=\"hljs-keyword\">def</span> connectOptions = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50000</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>\n]\n\n<span class=\"hljs-comment\">// Pool Options</span>\n<span class=\"hljs-keyword\">def</span> poolOptions = [\n<span class=\"hljs-symbol\">  maxSize:</span><span class=\"hljs-number\">5</span>\n]\n\n<span class=\"hljs-comment\">// Create the pool from the data object</span>\n<span class=\"hljs-keyword\">def</span> pool = DB2Pool.pool(vertx, connectOptions, poolOptions)\n\npool.getConnection({ ar -&gt;\n  <span class=\"hljs-comment\">// Handling your connection</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can also configure the generic properties with the <code>setProperties</code> or <code>addProperty</code> methods. Note <code>setProperties</code> will override the default client properties.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_connection_uri\"><a class=\"anchor\" href=\"#_connection_uri\"></a>connection uri</h3>\n<div class=\"paragraph\">\n<p>Apart from configuring with a <code>DB2ConnectOptions</code> data object, We also provide you an alternative way to connect when you want to configure with a connection URI:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-comment\">// Connection URI</span>\n<span class=\"hljs-keyword\">def</span> connectionUri = <span class=\"hljs-string\">\"db2://dbuser:secretpassword@database.server.com:50000/mydb\"</span>\n\n<span class=\"hljs-comment\">// Create the pool from the connection URI</span>\n<span class=\"hljs-keyword\">def</span> pool = DB2Pool.pool(connectionUri)\n\n<span class=\"hljs-comment\">// Create the connection from the connection URI</span>\nDB2Connection.connect(vertx, connectionUri, { res -&gt;\n  <span class=\"hljs-comment\">// Handling your connection</span>\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The URI format for a connection string is:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>db2://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOSTNAME&gt;:&lt;PORT&gt;/&lt;DBNAME&gt;</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Currently the client supports the following parameter key words in connection uri</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>host</p>\n</li>\n<li>\n<p>port</p>\n</li>\n<li>\n<p>user</p>\n</li>\n<li>\n<p>password</p>\n</li>\n<li>\n<p>dbname</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Note: configuring properties in connection URI will override the default properties.</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in &lt;stdin&gt; - include::queries.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>You can fetch generated keys by wrapping your query in <code>SELECT &lt;COLUMNS&gt; FROM FINAL TABLE ( &lt;SQL&gt; )</code>, for example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT color_id FROM FINAL TABLE ( INSERT INTO color (color_name) VALUES (?), (?), (?) )\"</span>).execute(Tuple.of(<span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    println(<span class=\"hljs-string\">\"Inserted ${rows.rowCount()} new rows.\"</span>)\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"generated key: ${row.getInteger(\"</span>color_id<span class=\"hljs-string\">\")}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in &lt;stdin&gt; - include::connections.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in &lt;stdin&gt; - include::transactions.adoc[]</p>\n</div>\n<div class=\"paragraph\">\n<p>Unresolved directive in &lt;stdin&gt; - include::cursor.adoc[]</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_db2_type_mapping\"><a class=\"anchor\" href=\"#_db2_type_mapping\"></a>DB2 type mapping</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Currently the client supports the following DB2 types</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>BOOLEAN (<code>java.lang.Boolean</code>) (DB2 LUW only)</p>\n</li>\n<li>\n<p>SMALLINT (<code>java.lang.Short</code>)</p>\n</li>\n<li>\n<p>INTEGER (<code>java.lang.Integer</code>)</p>\n</li>\n<li>\n<p>BIGINT (<code>java.lang.Long</code>)</p>\n</li>\n<li>\n<p>REAL (<code>java.lang.Float</code>)</p>\n</li>\n<li>\n<p>DOUBLE (<code>java.lang.Double</code>)</p>\n</li>\n<li>\n<p>DECIMAL (<code>io.vertx.sqlclient.data.Numeric</code>)</p>\n</li>\n<li>\n<p>CHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>VARCHAR (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>ENUM (<code>java.lang.String</code>)</p>\n</li>\n<li>\n<p>DATE (<code>java.time.LocalDate</code>)</p>\n</li>\n<li>\n<p>TIME (<code>java.time.LocalTime</code>)</p>\n</li>\n<li>\n<p>TIMESTAMP (<code>java.time.LocalDateTime</code>)</p>\n</li>\n<li>\n<p>BINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>VARBINARY (<code>byte[]</code>)</p>\n</li>\n<li>\n<p>ROWID (<code>io.vertx.db2client.impl.drda.DB2RowId</code> or <code>java.sql.RowId</code>) (DB2 z/OS only)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Some types that are currently NOT supported are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>XML</p>\n</li>\n<li>\n<p>BLOB</p>\n</li>\n<li>\n<p>CLOB</p>\n</li>\n<li>\n<p>DBCLOB</p>\n</li>\n<li>\n<p>GRAPHIC / VARGRAPHIC</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For a further documentation on DB2 data types, see the following resources:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008483.html\">DB2 for LUW 11.5 data types</a></p>\n</li>\n<li>\n<p><a href=\"https://www.ibm.com/support/knowledgecenter/SSEPEK_12.0.0/sqlref/src/tpc/db2z_datatypesintro.html\">DB2 for z/OS 12.0 data types</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Tuple decoding uses the above types when storing values, it also performs on the fly conversion of the actual value when possible:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pool.query(<span class=\"hljs-string\">\"SELECT an_int_column FROM exampleTable\"</span>).execute({ ar -&gt;\n  <span class=\"hljs-keyword\">def</span> rowSet = ar.result()\n  <span class=\"hljs-keyword\">def</span> row = rowSet.iterator().next()\n\n  <span class=\"hljs-comment\">// Stored as INTEGER column type and represented as java.lang.Integer</span>\n  <span class=\"hljs-keyword\">def</span> value = row.getValue(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-comment\">// Convert to java.lang.Long</span>\n  <span class=\"hljs-keyword\">def</span> longValue = row.getLong(<span class=\"hljs-number\">0</span>)\n})</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_java_enum_types\"><a class=\"anchor\" href=\"#_using_java_enum_types\"></a>Using Java enum types</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can map Java <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">enum types</a> to these column\ntypes:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Strings (VARCHAR, TEXT)</p>\n</li>\n<li>\n<p>Numbers (SMALLINT, INTEGER, BIGINT)</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">client.preparedQuery(<span class=\"hljs-string\">\"SELECT day_name FROM FINAL TABLE ( INSERT INTO days (day_name) VALUES (?), (?), (?) )\"</span>).execute(Tuple.of(Days.FRIDAY, Days.SATURDAY, Days.SUNDAY), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    println(<span class=\"hljs-string\">\"Inserted ${rows.rowCount()} new rows\"</span>)\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"Day: ${row.get(Days.class, \"</span>day_name<span class=\"hljs-string\">\")}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})\n\nclient.preparedQuery(<span class=\"hljs-string\">\"SELECT day_num FROM FINAL TABLE ( INSERT INTO days (day_num) VALUES (?), (?), (?) )\"</span>).execute(Tuple.of(Days.FRIDAY.ordinal(), Days.SATURDAY.ordinal(), Days.SUNDAY.ordinal()), { ar -&gt;\n  <span class=\"hljs-keyword\">if</span> (ar.succeeded()) {\n    <span class=\"hljs-keyword\">def</span> rows = ar.result()\n    println(<span class=\"hljs-string\">\"Inserted ${rows.rowCount()} new rows\"</span>)\n    rows.each { row -&gt;\n      println(<span class=\"hljs-string\">\"Day: ${row.get(Days.class, \"</span>day_num<span class=\"hljs-string\">\")}\"</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Failure: ${ar.cause().getMessage()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The String type is matched with the Java enum&#8217;s name returned by the <code>name()</code> method.</p>\n</div>\n<div class=\"paragraph\">\n<p>Number types are matched with the Java enum&#8217;s ordinal returned by the <code>ordinal()</code> method and the row.get() method returns the corresponding enum&#8217;s <code>name()</code> value at the ordinal position of the integer value retrieved.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_collector_queries\"><a class=\"anchor\" href=\"#_collector_queries\"></a>Collector queries</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can use Java collectors with the query API:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The collector processing must not keep a reference on the <code><a href=\"../../apidocs/io/vertx/sqlclient/Row.html\">Row</a></code> as\nthere is a single row used for processing the entire set.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Java <code>Collectors</code> provides many interesting predefined collectors, for example you can\ncreate easily create a string directly from the row set:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">Code not translatable</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_ssltls\"><a class=\"anchor\" href=\"#_using_ssltls\"></a>Using SSL/TLS</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To configure the client to use SSL connection, you can configure the <code><a href=\"../../apidocs/io/vertx/db2client/DB2ConnectOptions.html\">DB2ConnectOptions</a></code>\nlike a Vert.x <code>NetClient</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"hljs-keyword\">def</span> options = [\n<span class=\"hljs-symbol\">  port:</span><span class=\"hljs-number\">50001</span>,\n<span class=\"hljs-symbol\">  host:</span><span class=\"hljs-string\">\"the-host\"</span>,\n<span class=\"hljs-symbol\">  database:</span><span class=\"hljs-string\">\"the-db\"</span>,\n<span class=\"hljs-symbol\">  user:</span><span class=\"hljs-string\">\"user\"</span>,\n<span class=\"hljs-symbol\">  password:</span><span class=\"hljs-string\">\"secret\"</span>,\n<span class=\"hljs-symbol\">  ssl:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-symbol\">  trustStoreOptions:</span>[\n<span class=\"hljs-symbol\">    path:</span><span class=\"hljs-string\">\"/path/to/keystore.p12\"</span>,\n<span class=\"hljs-symbol\">    password:</span><span class=\"hljs-string\">\"keystoreSecret\"</span>\n  ]\n]\n\nDB2Connection.connect(vertx, options, { res -&gt;\n  <span class=\"hljs-keyword\">if</span> (res.succeeded()) {\n    <span class=\"hljs-comment\">// Connected with SSL</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    println(<span class=\"hljs-string\">\"Could not connect ${res.cause()}\"</span>)\n  }\n})</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#ssl\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_using_a_proxy\"><a class=\"anchor\" href=\"#_using_a_proxy\"></a>Using a proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can also configure the client to use an HTTP/1.x CONNECT, SOCKS4a or SOCKS5 proxy.</p>\n</div>\n<div class=\"paragraph\">\n<p>More information can be found in the <a href=\"http://vertx.io/docs/vertx-core/java/#_using_a_proxy_for_client_connections\">Vert.x documentation</a>.</p>\n</div>\n</div>\n</div>"},"__N_SSG":true}